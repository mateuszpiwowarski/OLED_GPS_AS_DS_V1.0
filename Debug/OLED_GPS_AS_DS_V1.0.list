
OLED_GPS_AS_DS_V1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ccd8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c50  0800cde8  0800cde8  0001cde8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea38  0800ea38  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800ea38  0800ea38  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ea38  0800ea38  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea38  0800ea38  0001ea38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea3c  0800ea3c  0001ea3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800ea40  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009f0  200001f8  0800ec38  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000be8  0800ec38  00020be8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY
 13 .debug_info   000143b6  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003905  00000000  00000000  0003461a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001400  00000000  00000000  00037f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f93  00000000  00000000  00039320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af98  00000000  00000000  0003a2b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019d7f  00000000  00000000  0005524b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000951d1  00000000  00000000  0006efca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006b74  00000000  00000000  0010419c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0010ad10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cdd0 	.word	0x0800cdd0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	0800cdd0 	.word	0x0800cdd0

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__aeabi_f2iz>:
 8001038:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800103c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001040:	d30f      	bcc.n	8001062 <__aeabi_f2iz+0x2a>
 8001042:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001046:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800104a:	d90d      	bls.n	8001068 <__aeabi_f2iz+0x30>
 800104c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001050:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001054:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001058:	fa23 f002 	lsr.w	r0, r3, r2
 800105c:	bf18      	it	ne
 800105e:	4240      	negne	r0, r0
 8001060:	4770      	bx	lr
 8001062:	f04f 0000 	mov.w	r0, #0
 8001066:	4770      	bx	lr
 8001068:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800106c:	d101      	bne.n	8001072 <__aeabi_f2iz+0x3a>
 800106e:	0242      	lsls	r2, r0, #9
 8001070:	d105      	bne.n	800107e <__aeabi_f2iz+0x46>
 8001072:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001076:	bf08      	it	eq
 8001078:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800107c:	4770      	bx	lr
 800107e:	f04f 0000 	mov.w	r0, #0
 8001082:	4770      	bx	lr

08001084 <__aeabi_d2lz>:
 8001084:	b538      	push	{r3, r4, r5, lr}
 8001086:	4605      	mov	r5, r0
 8001088:	460c      	mov	r4, r1
 800108a:	2200      	movs	r2, #0
 800108c:	2300      	movs	r3, #0
 800108e:	4628      	mov	r0, r5
 8001090:	4621      	mov	r1, r4
 8001092:	f7ff fc9d 	bl	80009d0 <__aeabi_dcmplt>
 8001096:	b928      	cbnz	r0, 80010a4 <__aeabi_d2lz+0x20>
 8001098:	4628      	mov	r0, r5
 800109a:	4621      	mov	r1, r4
 800109c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010a0:	f000 b80a 	b.w	80010b8 <__aeabi_d2ulz>
 80010a4:	4628      	mov	r0, r5
 80010a6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80010aa:	f000 f805 	bl	80010b8 <__aeabi_d2ulz>
 80010ae:	4240      	negs	r0, r0
 80010b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010b4:	bd38      	pop	{r3, r4, r5, pc}
 80010b6:	bf00      	nop

080010b8 <__aeabi_d2ulz>:
 80010b8:	b5d0      	push	{r4, r6, r7, lr}
 80010ba:	2200      	movs	r2, #0
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <__aeabi_d2ulz+0x34>)
 80010be:	4606      	mov	r6, r0
 80010c0:	460f      	mov	r7, r1
 80010c2:	f7ff fa13 	bl	80004ec <__aeabi_dmul>
 80010c6:	f7ff fce9 	bl	8000a9c <__aeabi_d2uiz>
 80010ca:	4604      	mov	r4, r0
 80010cc:	f7ff f994 	bl	80003f8 <__aeabi_ui2d>
 80010d0:	2200      	movs	r2, #0
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <__aeabi_d2ulz+0x38>)
 80010d4:	f7ff fa0a 	bl	80004ec <__aeabi_dmul>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4630      	mov	r0, r6
 80010de:	4639      	mov	r1, r7
 80010e0:	f7ff f84c 	bl	800017c <__aeabi_dsub>
 80010e4:	f7ff fcda 	bl	8000a9c <__aeabi_d2uiz>
 80010e8:	4621      	mov	r1, r4
 80010ea:	bdd0      	pop	{r4, r6, r7, pc}
 80010ec:	3df00000 	.word	0x3df00000
 80010f0:	41f00000 	.word	0x41f00000

080010f4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001104:	4b18      	ldr	r3, [pc, #96]	; (8001168 <MX_ADC1_Init+0x74>)
 8001106:	4a19      	ldr	r2, [pc, #100]	; (800116c <MX_ADC1_Init+0x78>)
 8001108:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800110a:	4b17      	ldr	r3, [pc, #92]	; (8001168 <MX_ADC1_Init+0x74>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001110:	4b15      	ldr	r3, [pc, #84]	; (8001168 <MX_ADC1_Init+0x74>)
 8001112:	2201      	movs	r2, #1
 8001114:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_ADC1_Init+0x74>)
 8001118:	2200      	movs	r2, #0
 800111a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <MX_ADC1_Init+0x74>)
 800111e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001122:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001124:	4b10      	ldr	r3, [pc, #64]	; (8001168 <MX_ADC1_Init+0x74>)
 8001126:	2200      	movs	r2, #0
 8001128:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_ADC1_Init+0x74>)
 800112c:	2201      	movs	r2, #1
 800112e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001130:	480d      	ldr	r0, [pc, #52]	; (8001168 <MX_ADC1_Init+0x74>)
 8001132:	f002 fd91 	bl	8003c58 <HAL_ADC_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800113c:	f001 fd82 	bl	8002c44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001140:	2309      	movs	r3, #9
 8001142:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001144:	2301      	movs	r3, #1
 8001146:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	4619      	mov	r1, r3
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_ADC1_Init+0x74>)
 8001152:	f003 f819 	bl	8004188 <HAL_ADC_ConfigChannel>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800115c:	f001 fd72 	bl	8002c44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000214 	.word	0x20000214
 800116c:	40012400 	.word	0x40012400

08001170 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a14      	ldr	r2, [pc, #80]	; (80011dc <HAL_ADC_MspInit+0x6c>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d121      	bne.n	80011d4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001190:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <HAL_ADC_MspInit+0x70>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <HAL_ADC_MspInit+0x70>)
 8001196:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <HAL_ADC_MspInit+0x70>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a8:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <HAL_ADC_MspInit+0x70>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a0c      	ldr	r2, [pc, #48]	; (80011e0 <HAL_ADC_MspInit+0x70>)
 80011ae:	f043 0308 	orr.w	r3, r3, #8
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <HAL_ADC_MspInit+0x70>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0308 	and.w	r3, r3, #8
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011c0:	2302      	movs	r3, #2
 80011c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c4:	2303      	movs	r3, #3
 80011c6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	4619      	mov	r1, r3
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <HAL_ADC_MspInit+0x74>)
 80011d0:	f003 fb2e 	bl	8004830 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011d4:	bf00      	nop
 80011d6:	3720      	adds	r7, #32
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40012400 	.word	0x40012400
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40010c00 	.word	0x40010c00

080011e8 <DS18B20_StartAll>:

//
//	Start conversion on all sensors
//
void DS18B20_StartAll()
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	OneWire_Reset(&OneWire); // Reset the bus
 80011ec:	4806      	ldr	r0, [pc, #24]	; (8001208 <DS18B20_StartAll+0x20>)
 80011ee:	f001 fd96 	bl	8002d1e <OneWire_Reset>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_SKIPROM); // Skip ROM command
 80011f2:	21cc      	movs	r1, #204	; 0xcc
 80011f4:	4804      	ldr	r0, [pc, #16]	; (8001208 <DS18B20_StartAll+0x20>)
 80011f6:	f001 fe0f 	bl	8002e18 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, DS18B20_CMD_CONVERTTEMP); // Start conversion on all sensors
 80011fa:	2144      	movs	r1, #68	; 0x44
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <DS18B20_StartAll+0x20>)
 80011fe:	f001 fe0b 	bl	8002e18 <OneWire_WriteByte>
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000284 	.word	0x20000284

0800120c <DS18B20_Read>:

//
//	Read one sensor
//
uint8_t DS18B20_Read(uint8_t number, float *destination)
{
 800120c:	b590      	push	{r4, r7, lr}
 800120e:	b087      	sub	sp, #28
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	71fb      	strb	r3, [r7, #7]
	if( number >= TempSensorCount) // If read sensor is not availible
 8001218:	4b52      	ldr	r3, [pc, #328]	; (8001364 <DS18B20_Read+0x158>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	79fa      	ldrb	r2, [r7, #7]
 800121e:	429a      	cmp	r2, r3
 8001220:	d301      	bcc.n	8001226 <DS18B20_Read+0x1a>
		return 0;
 8001222:	2300      	movs	r3, #0
 8001224:	e09a      	b.n	800135c <DS18B20_Read+0x150>

	int16_t temperature;
	int8_t resolution;
	float result;
	uint8_t i = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	74fb      	strb	r3, [r7, #19]
	uint8_t crc;

#endif


	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address)) // Check if sensor is DS18B20 family
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	011b      	lsls	r3, r3, #4
 800122e:	4a4e      	ldr	r2, [pc, #312]	; (8001368 <DS18B20_Read+0x15c>)
 8001230:	4413      	add	r3, r2
 8001232:	4618      	mov	r0, r3
 8001234:	f000 f944 	bl	80014c0 <DS18B20_Is>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <DS18B20_Read+0x36>
		return 0;
 800123e:	2300      	movs	r3, #0
 8001240:	e08c      	b.n	800135c <DS18B20_Read+0x150>

	if (!OneWire_ReadBit(&OneWire)) // Check if the bus is released
 8001242:	484a      	ldr	r0, [pc, #296]	; (800136c <DS18B20_Read+0x160>)
 8001244:	f001 fdbe 	bl	8002dc4 <OneWire_ReadBit>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <DS18B20_Read+0x46>
		return 0; // Busy bus - conversion is not finished
 800124e:	2300      	movs	r3, #0
 8001250:	e084      	b.n	800135c <DS18B20_Read+0x150>

	OneWire_Reset(&OneWire); // Reset the bus
 8001252:	4846      	ldr	r0, [pc, #280]	; (800136c <DS18B20_Read+0x160>)
 8001254:	f001 fd63 	bl	8002d1e <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	011b      	lsls	r3, r3, #4
 800125c:	4a42      	ldr	r2, [pc, #264]	; (8001368 <DS18B20_Read+0x15c>)
 800125e:	4413      	add	r3, r2
 8001260:	4619      	mov	r1, r3
 8001262:	4842      	ldr	r0, [pc, #264]	; (800136c <DS18B20_Read+0x160>)
 8001264:	f001 ff0c 	bl	8003080 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8001268:	21be      	movs	r1, #190	; 0xbe
 800126a:	4840      	ldr	r0, [pc, #256]	; (800136c <DS18B20_Read+0x160>)
 800126c:	f001 fdd4 	bl	8002e18 <OneWire_WriteByte>

	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 8001270:	2300      	movs	r3, #0
 8001272:	74fb      	strb	r3, [r7, #19]
 8001274:	e00d      	b.n	8001292 <DS18B20_Read+0x86>
		data[i] = OneWire_ReadByte(&OneWire);
 8001276:	7cfc      	ldrb	r4, [r7, #19]
 8001278:	483c      	ldr	r0, [pc, #240]	; (800136c <DS18B20_Read+0x160>)
 800127a:	f001 fdeb 	bl	8002e54 <OneWire_ReadByte>
 800127e:	4603      	mov	r3, r0
 8001280:	461a      	mov	r2, r3
 8001282:	f104 0318 	add.w	r3, r4, #24
 8001286:	443b      	add	r3, r7
 8001288:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 800128c:	7cfb      	ldrb	r3, [r7, #19]
 800128e:	3301      	adds	r3, #1
 8001290:	74fb      	strb	r3, [r7, #19]
 8001292:	7cfb      	ldrb	r3, [r7, #19]
 8001294:	2b04      	cmp	r3, #4
 8001296:	d9ee      	bls.n	8001276 <DS18B20_Read+0x6a>
	crc = OneWire_CRC8(data, 8); // CRC calculation

	if (crc != data[8])
		return 0; // CRC invalid
#endif
	temperature = data[0] | (data[1] << 8); // Temperature is 16-bit length
 8001298:	7a3b      	ldrb	r3, [r7, #8]
 800129a:	b21a      	sxth	r2, r3
 800129c:	7a7b      	ldrb	r3, [r7, #9]
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	4313      	orrs	r3, r2
 80012a4:	823b      	strh	r3, [r7, #16]

	OneWire_Reset(&OneWire); // Reset the bus
 80012a6:	4831      	ldr	r0, [pc, #196]	; (800136c <DS18B20_Read+0x160>)
 80012a8:	f001 fd39 	bl	8002d1e <OneWire_Reset>

	resolution = ((data[4] & 0x60) >> 5) + 9; // Sensor's resolution from scratchpad's byte 4
 80012ac:	7b3b      	ldrb	r3, [r7, #12]
 80012ae:	115b      	asrs	r3, r3, #5
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	3309      	adds	r3, #9
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	73fb      	strb	r3, [r7, #15]

	switch (resolution) // Chceck the correct value dur to resolution
 80012be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c2:	3b09      	subs	r3, #9
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	d843      	bhi.n	8001350 <DS18B20_Read+0x144>
 80012c8:	a201      	add	r2, pc, #4	; (adr r2, 80012d0 <DS18B20_Read+0xc4>)
 80012ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ce:	bf00      	nop
 80012d0:	080012e1 	.word	0x080012e1
 80012d4:	080012fd 	.word	0x080012fd
 80012d8:	08001319 	.word	0x08001319
 80012dc:	08001335 	.word	0x08001335
	{
		case DS18B20_Resolution_9bits:
			result = temperature*(float)DS18B20_STEP_9BIT;
 80012e0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fd03 	bl	8000cf0 <__aeabi_i2f>
 80012ea:	4603      	mov	r3, r0
 80012ec:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fd51 	bl	8000d98 <__aeabi_fmul>
 80012f6:	4603      	mov	r3, r0
 80012f8:	617b      	str	r3, [r7, #20]
		break;
 80012fa:	e02b      	b.n	8001354 <DS18B20_Read+0x148>
		case DS18B20_Resolution_10bits:
			result = temperature*(float)DS18B20_STEP_10BIT;
 80012fc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fcf5 	bl	8000cf0 <__aeabi_i2f>
 8001306:	4603      	mov	r3, r0
 8001308:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fd43 	bl	8000d98 <__aeabi_fmul>
 8001312:	4603      	mov	r3, r0
 8001314:	617b      	str	r3, [r7, #20]
		 break;
 8001316:	e01d      	b.n	8001354 <DS18B20_Read+0x148>
		case DS18B20_Resolution_11bits:
			result = temperature*(float)DS18B20_STEP_11BIT;
 8001318:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fce7 	bl	8000cf0 <__aeabi_i2f>
 8001322:	4603      	mov	r3, r0
 8001324:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fd35 	bl	8000d98 <__aeabi_fmul>
 800132e:	4603      	mov	r3, r0
 8001330:	617b      	str	r3, [r7, #20]
		break;
 8001332:	e00f      	b.n	8001354 <DS18B20_Read+0x148>
		case DS18B20_Resolution_12bits:
			result = temperature*(float)DS18B20_STEP_12BIT;
 8001334:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fcd9 	bl	8000cf0 <__aeabi_i2f>
 800133e:	4603      	mov	r3, r0
 8001340:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fd27 	bl	8000d98 <__aeabi_fmul>
 800134a:	4603      	mov	r3, r0
 800134c:	617b      	str	r3, [r7, #20]
		 break;
 800134e:	e001      	b.n	8001354 <DS18B20_Read+0x148>
		default:
			result = 0xFF;
 8001350:	4b07      	ldr	r3, [pc, #28]	; (8001370 <DS18B20_Read+0x164>)
 8001352:	617b      	str	r3, [r7, #20]
	}

	*destination = result;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	601a      	str	r2, [r3, #0]

	return 1; //temperature valid
 800135a:	2301      	movs	r3, #1
}
 800135c:	4618      	mov	r0, r3
 800135e:	371c      	adds	r7, #28
 8001360:	46bd      	mov	sp, r7
 8001362:	bd90      	pop	{r4, r7, pc}
 8001364:	20000298 	.word	0x20000298
 8001368:	20000244 	.word	0x20000244
 800136c:	20000284 	.word	0x20000284
 8001370:	437f0000 	.word	0x437f0000

08001374 <DS18B20_SetResolution>:

	return conf;
}

uint8_t DS18B20_SetResolution(uint8_t number, DS18B20_Resolution_t resolution)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	460a      	mov	r2, r1
 800137e:	71fb      	strb	r3, [r7, #7]
 8001380:	4613      	mov	r3, r2
 8001382:	71bb      	strb	r3, [r7, #6]
	if( number >= TempSensorCount)
 8001384:	4b4b      	ldr	r3, [pc, #300]	; (80014b4 <DS18B20_SetResolution+0x140>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	79fa      	ldrb	r2, [r7, #7]
 800138a:	429a      	cmp	r2, r3
 800138c:	d301      	bcc.n	8001392 <DS18B20_SetResolution+0x1e>
		return 0;
 800138e:	2300      	movs	r3, #0
 8001390:	e08c      	b.n	80014ac <DS18B20_SetResolution+0x138>

	uint8_t th, tl, conf;
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address))
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	4a48      	ldr	r2, [pc, #288]	; (80014b8 <DS18B20_SetResolution+0x144>)
 8001398:	4413      	add	r3, r2
 800139a:	4618      	mov	r0, r3
 800139c:	f000 f890 	bl	80014c0 <DS18B20_Is>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <DS18B20_SetResolution+0x36>
		return 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	e080      	b.n	80014ac <DS18B20_SetResolution+0x138>

	OneWire_Reset(&OneWire); // Reset the bus
 80013aa:	4844      	ldr	r0, [pc, #272]	; (80014bc <DS18B20_SetResolution+0x148>)
 80013ac:	f001 fcb7 	bl	8002d1e <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	011b      	lsls	r3, r3, #4
 80013b4:	4a40      	ldr	r2, [pc, #256]	; (80014b8 <DS18B20_SetResolution+0x144>)
 80013b6:	4413      	add	r3, r2
 80013b8:	4619      	mov	r1, r3
 80013ba:	4840      	ldr	r0, [pc, #256]	; (80014bc <DS18B20_SetResolution+0x148>)
 80013bc:	f001 fe60 	bl	8003080 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 80013c0:	21be      	movs	r1, #190	; 0xbe
 80013c2:	483e      	ldr	r0, [pc, #248]	; (80014bc <DS18B20_SetResolution+0x148>)
 80013c4:	f001 fd28 	bl	8002e18 <OneWire_WriteByte>

	OneWire_ReadByte(&OneWire);
 80013c8:	483c      	ldr	r0, [pc, #240]	; (80014bc <DS18B20_SetResolution+0x148>)
 80013ca:	f001 fd43 	bl	8002e54 <OneWire_ReadByte>
	OneWire_ReadByte(&OneWire);
 80013ce:	483b      	ldr	r0, [pc, #236]	; (80014bc <DS18B20_SetResolution+0x148>)
 80013d0:	f001 fd40 	bl	8002e54 <OneWire_ReadByte>

	th = OneWire_ReadByte(&OneWire); 	// Writing to scratchpad begins from the temperature alarms bytes
 80013d4:	4839      	ldr	r0, [pc, #228]	; (80014bc <DS18B20_SetResolution+0x148>)
 80013d6:	f001 fd3d 	bl	8002e54 <OneWire_ReadByte>
 80013da:	4603      	mov	r3, r0
 80013dc:	73bb      	strb	r3, [r7, #14]
	tl = OneWire_ReadByte(&OneWire); 	// 	so i have to store them.
 80013de:	4837      	ldr	r0, [pc, #220]	; (80014bc <DS18B20_SetResolution+0x148>)
 80013e0:	f001 fd38 	bl	8002e54 <OneWire_ReadByte>
 80013e4:	4603      	mov	r3, r0
 80013e6:	737b      	strb	r3, [r7, #13]
	conf = OneWire_ReadByte(&OneWire);	// Config byte
 80013e8:	4834      	ldr	r0, [pc, #208]	; (80014bc <DS18B20_SetResolution+0x148>)
 80013ea:	f001 fd33 	bl	8002e54 <OneWire_ReadByte>
 80013ee:	4603      	mov	r3, r0
 80013f0:	73fb      	strb	r3, [r7, #15]

	if (resolution == DS18B20_Resolution_9bits) // Bits setting
 80013f2:	79bb      	ldrb	r3, [r7, #6]
 80013f4:	2b09      	cmp	r3, #9
 80013f6:	d108      	bne.n	800140a <DS18B20_SetResolution+0x96>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013fe:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	f023 0320 	bic.w	r3, r3, #32
 8001406:	73fb      	strb	r3, [r7, #15]
 8001408:	e022      	b.n	8001450 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 800140a:	79bb      	ldrb	r3, [r7, #6]
 800140c:	2b0a      	cmp	r3, #10
 800140e:	d108      	bne.n	8001422 <DS18B20_SetResolution+0xae>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001416:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	f043 0320 	orr.w	r3, r3, #32
 800141e:	73fb      	strb	r3, [r7, #15]
 8001420:	e016      	b.n	8001450 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8001422:	79bb      	ldrb	r3, [r7, #6]
 8001424:	2b0b      	cmp	r3, #11
 8001426:	d108      	bne.n	800143a <DS18B20_SetResolution+0xc6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800142e:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	f023 0320 	bic.w	r3, r3, #32
 8001436:	73fb      	strb	r3, [r7, #15]
 8001438:	e00a      	b.n	8001450 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 800143a:	79bb      	ldrb	r3, [r7, #6]
 800143c:	2b0c      	cmp	r3, #12
 800143e:	d107      	bne.n	8001450 <DS18B20_SetResolution+0xdc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001446:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	f043 0320 	orr.w	r3, r3, #32
 800144e:	73fb      	strb	r3, [r7, #15]
	}

	OneWire_Reset(&OneWire); // Reset the bus
 8001450:	481a      	ldr	r0, [pc, #104]	; (80014bc <DS18B20_SetResolution+0x148>)
 8001452:	f001 fc64 	bl	8002d1e <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	011b      	lsls	r3, r3, #4
 800145a:	4a17      	ldr	r2, [pc, #92]	; (80014b8 <DS18B20_SetResolution+0x144>)
 800145c:	4413      	add	r3, r2
 800145e:	4619      	mov	r1, r3
 8001460:	4816      	ldr	r0, [pc, #88]	; (80014bc <DS18B20_SetResolution+0x148>)
 8001462:	f001 fe0d 	bl	8003080 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_WSCRATCHPAD); // Write scratchpad command
 8001466:	214e      	movs	r1, #78	; 0x4e
 8001468:	4814      	ldr	r0, [pc, #80]	; (80014bc <DS18B20_SetResolution+0x148>)
 800146a:	f001 fcd5 	bl	8002e18 <OneWire_WriteByte>

	OneWire_WriteByte(&OneWire, th); // Write 3 bytes to scratchpad
 800146e:	7bbb      	ldrb	r3, [r7, #14]
 8001470:	4619      	mov	r1, r3
 8001472:	4812      	ldr	r0, [pc, #72]	; (80014bc <DS18B20_SetResolution+0x148>)
 8001474:	f001 fcd0 	bl	8002e18 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, tl);
 8001478:	7b7b      	ldrb	r3, [r7, #13]
 800147a:	4619      	mov	r1, r3
 800147c:	480f      	ldr	r0, [pc, #60]	; (80014bc <DS18B20_SetResolution+0x148>)
 800147e:	f001 fccb 	bl	8002e18 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, conf);
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	4619      	mov	r1, r3
 8001486:	480d      	ldr	r0, [pc, #52]	; (80014bc <DS18B20_SetResolution+0x148>)
 8001488:	f001 fcc6 	bl	8002e18 <OneWire_WriteByte>

	OneWire_Reset(&OneWire); // Reset the bus
 800148c:	480b      	ldr	r0, [pc, #44]	; (80014bc <DS18B20_SetResolution+0x148>)
 800148e:	f001 fc46 	bl	8002d1e <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	011b      	lsls	r3, r3, #4
 8001496:	4a08      	ldr	r2, [pc, #32]	; (80014b8 <DS18B20_SetResolution+0x144>)
 8001498:	4413      	add	r3, r2
 800149a:	4619      	mov	r1, r3
 800149c:	4807      	ldr	r0, [pc, #28]	; (80014bc <DS18B20_SetResolution+0x148>)
 800149e:	f001 fdef 	bl	8003080 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_CPYSCRATCHPAD); // Copy scratchpad to EEPROM
 80014a2:	2148      	movs	r1, #72	; 0x48
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <DS18B20_SetResolution+0x148>)
 80014a6:	f001 fcb7 	bl	8002e18 <OneWire_WriteByte>

	return 1;
 80014aa:	2301      	movs	r3, #1
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000298 	.word	0x20000298
 80014b8:	20000244 	.word	0x20000244
 80014bc:	20000284 	.word	0x20000284

080014c0 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t* ROM)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b28      	cmp	r3, #40	; 0x28
 80014ce:	d101      	bne.n	80014d4 <DS18B20_Is+0x14>
		return 1;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e000      	b.n	80014d6 <DS18B20_Is+0x16>
	return 0;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <DS18B20_AllDone>:

uint8_t DS18B20_AllDone(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
	return OneWire_ReadBit(&OneWire); // Bus is down - busy
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <DS18B20_AllDone+0x10>)
 80014e6:	f001 fc6d 	bl	8002dc4 <OneWire_ReadBit>
 80014ea:	4603      	mov	r3, r0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000284 	.word	0x20000284

080014f4 <DS18B20_ReadAll>:

void DS18B20_ReadAll(void)
{
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
	uint8_t i;

	if (DS18B20_AllDone())
 80014fa:	f7ff fff1 	bl	80014e0 <DS18B20_AllDone>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d02e      	beq.n	8001562 <DS18B20_ReadAll+0x6e>
	{
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 8001504:	2300      	movs	r3, #0
 8001506:	71fb      	strb	r3, [r7, #7]
 8001508:	e026      	b.n	8001558 <DS18B20_ReadAll+0x64>
		{
			ds18b20[i].ValidDataFlag = 0;
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	4a17      	ldr	r2, [pc, #92]	; (800156c <DS18B20_ReadAll+0x78>)
 800150e:	011b      	lsls	r3, r3, #4
 8001510:	4413      	add	r3, r2
 8001512:	330c      	adds	r3, #12
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]

			if (DS18B20_Is((uint8_t*)&ds18b20[i].Address))
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	011b      	lsls	r3, r3, #4
 800151c:	4a13      	ldr	r2, [pc, #76]	; (800156c <DS18B20_ReadAll+0x78>)
 800151e:	4413      	add	r3, r2
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ffcd 	bl	80014c0 <DS18B20_Is>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d012      	beq.n	8001552 <DS18B20_ReadAll+0x5e>
			{
				ds18b20[i].ValidDataFlag = DS18B20_Read(i, &ds18b20[i].Temperature); // Read single sensor
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	011b      	lsls	r3, r3, #4
 8001530:	3308      	adds	r3, #8
 8001532:	4a0e      	ldr	r2, [pc, #56]	; (800156c <DS18B20_ReadAll+0x78>)
 8001534:	441a      	add	r2, r3
 8001536:	79fc      	ldrb	r4, [r7, #7]
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fe65 	bl	800120c <DS18B20_Read>
 8001542:	4603      	mov	r3, r0
 8001544:	4619      	mov	r1, r3
 8001546:	4a09      	ldr	r2, [pc, #36]	; (800156c <DS18B20_ReadAll+0x78>)
 8001548:	0123      	lsls	r3, r4, #4
 800154a:	4413      	add	r3, r2
 800154c:	330c      	adds	r3, #12
 800154e:	460a      	mov	r2, r1
 8001550:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	3301      	adds	r3, #1
 8001556:	71fb      	strb	r3, [r7, #7]
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <DS18B20_ReadAll+0x7c>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	79fa      	ldrb	r2, [r7, #7]
 800155e:	429a      	cmp	r2, r3
 8001560:	d3d3      	bcc.n	800150a <DS18B20_ReadAll+0x16>
			}
		}
	}
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	bd90      	pop	{r4, r7, pc}
 800156a:	bf00      	nop
 800156c:	20000244 	.word	0x20000244
 8001570:	20000298 	.word	0x20000298

08001574 <DS18B20_GetROM>:

void DS18B20_GetROM(uint8_t number, uint8_t* ROM)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	6039      	str	r1, [r7, #0]
 800157e:	71fb      	strb	r3, [r7, #7]
	if( number >= TempSensorCount)
 8001580:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <DS18B20_GetROM+0x50>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	79fa      	ldrb	r2, [r7, #7]
 8001586:	429a      	cmp	r2, r3
 8001588:	d302      	bcc.n	8001590 <DS18B20_GetROM+0x1c>
		number = TempSensorCount;
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <DS18B20_GetROM+0x50>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	71fb      	strb	r3, [r7, #7]

	uint8_t i;

	for(i = 0; i < 8; i++)
 8001590:	2300      	movs	r3, #0
 8001592:	73fb      	strb	r3, [r7, #15]
 8001594:	e00d      	b.n	80015b2 <DS18B20_GetROM+0x3e>
		ROM[i] = ds18b20[number].Address[i];
 8001596:	79f9      	ldrb	r1, [r7, #7]
 8001598:	7bfa      	ldrb	r2, [r7, #15]
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	6838      	ldr	r0, [r7, #0]
 800159e:	4403      	add	r3, r0
 80015a0:	4809      	ldr	r0, [pc, #36]	; (80015c8 <DS18B20_GetROM+0x54>)
 80015a2:	0109      	lsls	r1, r1, #4
 80015a4:	4401      	add	r1, r0
 80015a6:	440a      	add	r2, r1
 80015a8:	7812      	ldrb	r2, [r2, #0]
 80015aa:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 8; i++)
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	3301      	adds	r3, #1
 80015b0:	73fb      	strb	r3, [r7, #15]
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	2b07      	cmp	r3, #7
 80015b6:	d9ee      	bls.n	8001596 <DS18B20_GetROM+0x22>
}
 80015b8:	bf00      	nop
 80015ba:	bf00      	nop
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr
 80015c4:	20000298 	.word	0x20000298
 80015c8:	20000244 	.word	0x20000244

080015cc <DS18B20_Quantity>:
	for(i = 0; i < 8; i++)
		ds18b20[number].Address[i] = ROM[i]; // Write ROM into sensor's structure
}

uint8_t DS18B20_Quantity(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
	return TempSensorCount;
 80015d0:	4b02      	ldr	r3, [pc, #8]	; (80015dc <DS18B20_Quantity+0x10>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	20000298 	.word	0x20000298

080015e0 <DS18B20_GetTemperature>:

uint8_t DS18B20_GetTemperature(uint8_t number, float* destination)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	6039      	str	r1, [r7, #0]
 80015ea:	71fb      	strb	r3, [r7, #7]
	if(!ds18b20[number].ValidDataFlag)
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	4a0b      	ldr	r2, [pc, #44]	; (800161c <DS18B20_GetTemperature+0x3c>)
 80015f0:	011b      	lsls	r3, r3, #4
 80015f2:	4413      	add	r3, r2
 80015f4:	330c      	adds	r3, #12
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <DS18B20_GetTemperature+0x20>
		return 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	e008      	b.n	8001612 <DS18B20_GetTemperature+0x32>

	*destination = ds18b20[number].Temperature;
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	4a06      	ldr	r2, [pc, #24]	; (800161c <DS18B20_GetTemperature+0x3c>)
 8001604:	011b      	lsls	r3, r3, #4
 8001606:	4413      	add	r3, r2
 8001608:	3308      	adds	r3, #8
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	601a      	str	r2, [r3, #0]
	return 1;
 8001610:	2301      	movs	r3, #1

}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	20000244 	.word	0x20000244

08001620 <DS18B20_Init>:

void DS18B20_Init(DS18B20_Resolution_t resolution)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
	uint8_t next = 0, i = 0, j;
 800162a:	2300      	movs	r3, #0
 800162c:	73fb      	strb	r3, [r7, #15]
 800162e:	2300      	movs	r3, #0
 8001630:	73bb      	strb	r3, [r7, #14]
	OneWire_Init(&OneWire, DS18B20_Pin_GPIO_Port, DS18B20_Pin_Pin); // Init OneWire bus
 8001632:	2202      	movs	r2, #2
 8001634:	491f      	ldr	r1, [pc, #124]	; (80016b4 <DS18B20_Init+0x94>)
 8001636:	4820      	ldr	r0, [pc, #128]	; (80016b8 <DS18B20_Init+0x98>)
 8001638:	f001 fd5e 	bl	80030f8 <OneWire_Init>

	next = OneWire_First(&OneWire); // Search first OneWire device
 800163c:	481e      	ldr	r0, [pc, #120]	; (80016b8 <DS18B20_Init+0x98>)
 800163e:	f001 fd02 	bl	8003046 <OneWire_First>
 8001642:	4603      	mov	r3, r0
 8001644:	73fb      	strb	r3, [r7, #15]
	while(next)
 8001646:	e018      	b.n	800167a <DS18B20_Init+0x5a>
	{
		TempSensorCount++;
 8001648:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <DS18B20_Init+0x9c>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	3301      	adds	r3, #1
 800164e:	b2da      	uxtb	r2, r3
 8001650:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <DS18B20_Init+0x9c>)
 8001652:	701a      	strb	r2, [r3, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 8001654:	7bbb      	ldrb	r3, [r7, #14]
 8001656:	1c5a      	adds	r2, r3, #1
 8001658:	73ba      	strb	r2, [r7, #14]
 800165a:	011b      	lsls	r3, r3, #4
 800165c:	4a18      	ldr	r2, [pc, #96]	; (80016c0 <DS18B20_Init+0xa0>)
 800165e:	4413      	add	r3, r2
 8001660:	4619      	mov	r1, r3
 8001662:	4815      	ldr	r0, [pc, #84]	; (80016b8 <DS18B20_Init+0x98>)
 8001664:	f001 fd2b 	bl	80030be <OneWire_GetFullROM>
		next = OneWire_Next(&OneWire);
 8001668:	4813      	ldr	r0, [pc, #76]	; (80016b8 <DS18B20_Init+0x98>)
 800166a:	f001 fcfc 	bl	8003066 <OneWire_Next>
 800166e:	4603      	mov	r3, r0
 8001670:	73fb      	strb	r3, [r7, #15]
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
 8001672:	4b12      	ldr	r3, [pc, #72]	; (80016bc <DS18B20_Init+0x9c>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b03      	cmp	r3, #3
 8001678:	d803      	bhi.n	8001682 <DS18B20_Init+0x62>
	while(next)
 800167a:	7bfb      	ldrb	r3, [r7, #15]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1e3      	bne.n	8001648 <DS18B20_Init+0x28>
 8001680:	e000      	b.n	8001684 <DS18B20_Init+0x64>
			break;
 8001682:	bf00      	nop
	}

	for(j = 0; j < i; j++)
 8001684:	2300      	movs	r3, #0
 8001686:	737b      	strb	r3, [r7, #13]
 8001688:	e00a      	b.n	80016a0 <DS18B20_Init+0x80>
	{
		DS18B20_SetResolution(j, resolution); // Set the initial resolution to sensor
 800168a:	79fa      	ldrb	r2, [r7, #7]
 800168c:	7b7b      	ldrb	r3, [r7, #13]
 800168e:	4611      	mov	r1, r2
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fe6f 	bl	8001374 <DS18B20_SetResolution>

		DS18B20_StartAll(); // Start conversion on all sensors
 8001696:	f7ff fda7 	bl	80011e8 <DS18B20_StartAll>
	for(j = 0; j < i; j++)
 800169a:	7b7b      	ldrb	r3, [r7, #13]
 800169c:	3301      	adds	r3, #1
 800169e:	737b      	strb	r3, [r7, #13]
 80016a0:	7b7a      	ldrb	r2, [r7, #13]
 80016a2:	7bbb      	ldrb	r3, [r7, #14]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d3f0      	bcc.n	800168a <DS18B20_Init+0x6a>
	}
}
 80016a8:	bf00      	nop
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40010800 	.word	0x40010800
 80016b8:	20000284 	.word	0x20000284
 80016bc:	20000298 	.word	0x20000298
 80016c0:	20000244 	.word	0x20000244

080016c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ca:	f107 0310 	add.w	r3, r7, #16
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d8:	4b37      	ldr	r3, [pc, #220]	; (80017b8 <MX_GPIO_Init+0xf4>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	4a36      	ldr	r2, [pc, #216]	; (80017b8 <MX_GPIO_Init+0xf4>)
 80016de:	f043 0310 	orr.w	r3, r3, #16
 80016e2:	6193      	str	r3, [r2, #24]
 80016e4:	4b34      	ldr	r3, [pc, #208]	; (80017b8 <MX_GPIO_Init+0xf4>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f003 0310 	and.w	r3, r3, #16
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016f0:	4b31      	ldr	r3, [pc, #196]	; (80017b8 <MX_GPIO_Init+0xf4>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	4a30      	ldr	r2, [pc, #192]	; (80017b8 <MX_GPIO_Init+0xf4>)
 80016f6:	f043 0320 	orr.w	r3, r3, #32
 80016fa:	6193      	str	r3, [r2, #24]
 80016fc:	4b2e      	ldr	r3, [pc, #184]	; (80017b8 <MX_GPIO_Init+0xf4>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 0320 	and.w	r3, r3, #32
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001708:	4b2b      	ldr	r3, [pc, #172]	; (80017b8 <MX_GPIO_Init+0xf4>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	4a2a      	ldr	r2, [pc, #168]	; (80017b8 <MX_GPIO_Init+0xf4>)
 800170e:	f043 0304 	orr.w	r3, r3, #4
 8001712:	6193      	str	r3, [r2, #24]
 8001714:	4b28      	ldr	r3, [pc, #160]	; (80017b8 <MX_GPIO_Init+0xf4>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001720:	4b25      	ldr	r3, [pc, #148]	; (80017b8 <MX_GPIO_Init+0xf4>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	4a24      	ldr	r2, [pc, #144]	; (80017b8 <MX_GPIO_Init+0xf4>)
 8001726:	f043 0308 	orr.w	r3, r3, #8
 800172a:	6193      	str	r3, [r2, #24]
 800172c:	4b22      	ldr	r3, [pc, #136]	; (80017b8 <MX_GPIO_Init+0xf4>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	f003 0308 	and.w	r3, r3, #8
 8001734:	603b      	str	r3, [r7, #0]
 8001736:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Pin_GPIO_Port, LED_Pin_Pin, GPIO_PIN_RESET);
 8001738:	2200      	movs	r2, #0
 800173a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800173e:	481f      	ldr	r0, [pc, #124]	; (80017bc <MX_GPIO_Init+0xf8>)
 8001740:	f003 fa11 	bl	8004b66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TEST_Pin_Pin|DS18B20_Pin_Pin, GPIO_PIN_RESET);
 8001744:	2200      	movs	r2, #0
 8001746:	2103      	movs	r1, #3
 8001748:	481d      	ldr	r0, [pc, #116]	; (80017c0 <MX_GPIO_Init+0xfc>)
 800174a:	f003 fa0c 	bl	8004b66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin_Pin;
 800174e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001754:	2301      	movs	r3, #1
 8001756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	2302      	movs	r3, #2
 800175e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_Pin_GPIO_Port, &GPIO_InitStruct);
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	4619      	mov	r1, r3
 8001766:	4815      	ldr	r0, [pc, #84]	; (80017bc <MX_GPIO_Init+0xf8>)
 8001768:	f003 f862 	bl	8004830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TEST_Pin_Pin|DS18B20_Pin_Pin;
 800176c:	2303      	movs	r3, #3
 800176e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001770:	2301      	movs	r3, #1
 8001772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2302      	movs	r3, #2
 800177a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177c:	f107 0310 	add.w	r3, r7, #16
 8001780:	4619      	mov	r1, r3
 8001782:	480f      	ldr	r0, [pc, #60]	; (80017c0 <MX_GPIO_Init+0xfc>)
 8001784:	f003 f854 	bl	8004830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = P1_Pin;
 8001788:	2308      	movs	r3, #8
 800178a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800178c:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <MX_GPIO_Init+0x100>)
 800178e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(P1_GPIO_Port, &GPIO_InitStruct);
 8001794:	f107 0310 	add.w	r3, r7, #16
 8001798:	4619      	mov	r1, r3
 800179a:	480b      	ldr	r0, [pc, #44]	; (80017c8 <MX_GPIO_Init+0x104>)
 800179c:	f003 f848 	bl	8004830 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2100      	movs	r1, #0
 80017a4:	2009      	movs	r0, #9
 80017a6:	f002 ff5a 	bl	800465e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80017aa:	2009      	movs	r0, #9
 80017ac:	f002 ff73 	bl	8004696 <HAL_NVIC_EnableIRQ>

}
 80017b0:	bf00      	nop
 80017b2:	3720      	adds	r7, #32
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40011000 	.word	0x40011000
 80017c0:	40010800 	.word	0x40010800
 80017c4:	10110000 	.word	0x10110000
 80017c8:	40010c00 	.word	0x40010c00

080017cc <strtoke>:
/*
 * Behaves like strtok() except that it returns empty tokens also.
 * Found on https://stackoverflow.com/questions/42315585/split-string-into-tokens-in-c-when-there-are-2-delimiters-in-a-row
 */
char* strtoke(char *str, const char *delim)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  static char *start = NULL; /* stores string str for consecutive calls */
  char *token = NULL; /* found token */
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
  /* assign new start in case */
  if (str) start = str;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d002      	beq.n	80017e6 <strtoke+0x1a>
 80017e0:	4a12      	ldr	r2, [pc, #72]	; (800182c <strtoke+0x60>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6013      	str	r3, [r2, #0]
  /* check whether text to parse left */
  if (!start) return NULL;
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <strtoke+0x60>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <strtoke+0x26>
 80017ee:	2300      	movs	r3, #0
 80017f0:	e017      	b.n	8001822 <strtoke+0x56>
  /* remember current start as found token */
  token = start;
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <strtoke+0x60>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	60fb      	str	r3, [r7, #12]
  /* find next occurrence of delim */
  start = strpbrk(start, delim);
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <strtoke+0x60>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6839      	ldr	r1, [r7, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f007 f9cf 	bl	8008ba2 <strpbrk>
 8001804:	4603      	mov	r3, r0
 8001806:	4a09      	ldr	r2, [pc, #36]	; (800182c <strtoke+0x60>)
 8001808:	6013      	str	r3, [r2, #0]
  /* replace delim with terminator and move start to follower */
  if (start) *start++ = '\0';
 800180a:	4b08      	ldr	r3, [pc, #32]	; (800182c <strtoke+0x60>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d006      	beq.n	8001820 <strtoke+0x54>
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <strtoke+0x60>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	1c5a      	adds	r2, r3, #1
 8001818:	4904      	ldr	r1, [pc, #16]	; (800182c <strtoke+0x60>)
 800181a:	600a      	str	r2, [r1, #0]
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
  /* done */
  return token;
 8001820:	68fb      	ldr	r3, [r7, #12]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	2000029c 	.word	0x2000029c

08001830 <NEO6_ReceiveUartChar>:

void NEO6_ReceiveUartChar(NEO6_State *GpsStateHandler)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	uint8_t TempHead;

	TempHead = (GpsStateHandler->UartBufferHead + 1) % GPS_UART_BUFFER_SIZE;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800183e:	3301      	adds	r3, #1
 8001840:	425a      	negs	r2, r3
 8001842:	b2db      	uxtb	r3, r3
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	bf58      	it	pl
 8001848:	4253      	negpl	r3, r2
 800184a:	73fb      	strb	r3, [r7, #15]

	if( TempHead == GpsStateHandler->UartBufferTail) // No room for new data
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8001852:	7bfa      	ldrb	r2, [r7, #15]
 8001854:	429a      	cmp	r2, r3
 8001856:	d02f      	beq.n	80018b8 <NEO6_ReceiveUartChar+0x88>
		// Error handle?
		//
	}
	else
	{
		if(UartReceivedChar == 13)
 8001858:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <NEO6_ReceiveUartChar+0xa0>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b0d      	cmp	r3, #13
 8001860:	d114      	bne.n	800188c <NEO6_ReceiveUartChar+0x5c>
		{
			GpsStateHandler->UartBufferLines++;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8001868:	3301      	adds	r3, #1
 800186a:	b2da      	uxtb	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			GpsStateHandler->UartBufferHead = TempHead;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	7bfa      	ldrb	r2, [r7, #15]
 8001876:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	4a14      	ldr	r2, [pc, #80]	; (80018d0 <NEO6_ReceiveUartChar+0xa0>)
 800187e:	7812      	ldrb	r2, [r2, #0]
 8001880:	b2d1      	uxtb	r1, r2
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	460a      	mov	r2, r1
 8001888:	711a      	strb	r2, [r3, #4]
 800188a:	e015      	b.n	80018b8 <NEO6_ReceiveUartChar+0x88>
		}
		else if((UartReceivedChar == 0) || (UartReceivedChar == 10))
 800188c:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <NEO6_ReceiveUartChar+0xa0>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d010      	beq.n	80018b8 <NEO6_ReceiveUartChar+0x88>
 8001896:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <NEO6_ReceiveUartChar+0xa0>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b0a      	cmp	r3, #10
 800189e:	d00b      	beq.n	80018b8 <NEO6_ReceiveUartChar+0x88>
		{
			// Ignore byte 0 and 10 (LF char)
		}
		else
		{
			GpsStateHandler->UartBufferHead = TempHead;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	7bfa      	ldrb	r2, [r7, #15]
 80018a4:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	4a09      	ldr	r2, [pc, #36]	; (80018d0 <NEO6_ReceiveUartChar+0xa0>)
 80018ac:	7812      	ldrb	r2, [r2, #0]
 80018ae:	b2d1      	uxtb	r1, r2
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	4413      	add	r3, r2
 80018b4:	460a      	mov	r2, r1
 80018b6:	711a      	strb	r2, [r3, #4]
		}

	}

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2201      	movs	r2, #1
 80018be:	4904      	ldr	r1, [pc, #16]	; (80018d0 <NEO6_ReceiveUartChar+0xa0>)
 80018c0:	4618      	mov	r0, r3
 80018c2:	f004 ffe7 	bl	8006894 <HAL_UART_Receive_IT>
}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000299 	.word	0x20000299

080018d4 <NEO6_GetCharFromBuffer>:

int NEO6_GetCharFromBuffer(NEO6_State *GpsStateHandler)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
	if(GpsStateHandler->UartBufferHead == GpsStateHandler->UartBufferTail)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d102      	bne.n	80018f2 <NEO6_GetCharFromBuffer+0x1e>
	{
		return -1; // error - no char to return
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295
 80018f0:	e013      	b.n	800191a <NEO6_GetCharFromBuffer+0x46>
	}
	GpsStateHandler->UartBufferTail = (GpsStateHandler->UartBufferTail + 1) % GPS_UART_BUFFER_SIZE;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 80018f8:	3301      	adds	r3, #1
 80018fa:	425a      	negs	r2, r3
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	bf58      	it	pl
 8001902:	4253      	negpl	r3, r2
 8001904:	b2da      	uxtb	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

	return GpsStateHandler->UartBuffer[GpsStateHandler->UartBufferTail];
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8001912:	461a      	mov	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4413      	add	r3, r2
 8001918:	791b      	ldrb	r3, [r3, #4]
}
 800191a:	4618      	mov	r0, r3
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr

08001924 <NEO6_GetLineFromBuffer>:

int NEO6_GetLineFromBuffer(NEO6_State *GpsStateHandler)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	char TempChar;
	char* LinePointer = (char*)GpsStateHandler->WorkingBuffer;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f203 1307 	addw	r3, r3, #263	; 0x107
 8001932:	60fb      	str	r3, [r7, #12]
	if(GpsStateHandler->UartBufferLines)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800193a:	2b00      	cmp	r3, #0
 800193c:	d01e      	beq.n	800197c <NEO6_GetLineFromBuffer+0x58>
	{
		while((TempChar = NEO6_GetCharFromBuffer(GpsStateHandler)))
 800193e:	e008      	b.n	8001952 <NEO6_GetLineFromBuffer+0x2e>
		{
			if(TempChar == 13)
 8001940:	7afb      	ldrb	r3, [r7, #11]
 8001942:	2b0d      	cmp	r3, #13
 8001944:	d00e      	beq.n	8001964 <NEO6_GetLineFromBuffer+0x40>
			{
				break;
			}
			*LinePointer = TempChar;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	7afa      	ldrb	r2, [r7, #11]
 800194a:	701a      	strb	r2, [r3, #0]
			LinePointer++;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	3301      	adds	r3, #1
 8001950:	60fb      	str	r3, [r7, #12]
		while((TempChar = NEO6_GetCharFromBuffer(GpsStateHandler)))
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff ffbe 	bl	80018d4 <NEO6_GetCharFromBuffer>
 8001958:	4603      	mov	r3, r0
 800195a:	72fb      	strb	r3, [r7, #11]
 800195c:	7afb      	ldrb	r3, [r7, #11]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1ee      	bne.n	8001940 <NEO6_GetLineFromBuffer+0x1c>
 8001962:	e000      	b.n	8001966 <NEO6_GetLineFromBuffer+0x42>
				break;
 8001964:	bf00      	nop
		}
		*LinePointer = 0; // end of cstring
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	701a      	strb	r2, [r3, #0]
		GpsStateHandler->UartBufferLines--; // decrement line counter
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8001972:	3b01      	subs	r3, #1
 8001974:	b2da      	uxtb	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
	}
	return 0;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <NEO6_ParseGPRMC>:

//
// Recommended minimum specific GPS/Transit data
//
void NEO6_ParseGPRMC(NEO6_State *GpsStateHandler)
{
 8001988:	b590      	push	{r4, r7, lr}
 800198a:	b08b      	sub	sp, #44	; 0x2c
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]

	char *ParsePoiner;
	uint32_t Temp;

	// Time of FIX
	ParsePoiner = strtoke(NULL, ",");
 8001990:	4996      	ldr	r1, [pc, #600]	; (8001bec <NEO6_ParseGPRMC+0x264>)
 8001992:	2000      	movs	r0, #0
 8001994:	f7ff ff1a 	bl	80017cc <strtoke>
 8001998:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d033      	beq.n	8001a0a <NEO6_ParseGPRMC+0x82>
	{
		Temp = atoi(ParsePoiner);
 80019a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80019a4:	f005 fcb1 	bl	800730a <atoi>
 80019a8:	4603      	mov	r3, r0
 80019aa:	623b      	str	r3, [r7, #32]
		GpsStateHandler->Second = Temp % 100;
 80019ac:	6a3a      	ldr	r2, [r7, #32]
 80019ae:	4b90      	ldr	r3, [pc, #576]	; (8001bf0 <NEO6_ParseGPRMC+0x268>)
 80019b0:	fba3 1302 	umull	r1, r3, r3, r2
 80019b4:	095b      	lsrs	r3, r3, #5
 80019b6:	2164      	movs	r1, #100	; 0x64
 80019b8:	fb01 f303 	mul.w	r3, r1, r3
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
		GpsStateHandler->Minute = (Temp / 100) % 100;
 80019c6:	6a3b      	ldr	r3, [r7, #32]
 80019c8:	4a89      	ldr	r2, [pc, #548]	; (8001bf0 <NEO6_ParseGPRMC+0x268>)
 80019ca:	fba2 2303 	umull	r2, r3, r2, r3
 80019ce:	095a      	lsrs	r2, r3, #5
 80019d0:	4b87      	ldr	r3, [pc, #540]	; (8001bf0 <NEO6_ParseGPRMC+0x268>)
 80019d2:	fba3 1302 	umull	r1, r3, r3, r2
 80019d6:	095b      	lsrs	r3, r3, #5
 80019d8:	2164      	movs	r1, #100	; 0x64
 80019da:	fb01 f303 	mul.w	r3, r1, r3
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
		GpsStateHandler->Hour = (Temp / 10000) % 100;
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	4a82      	ldr	r2, [pc, #520]	; (8001bf4 <NEO6_ParseGPRMC+0x26c>)
 80019ec:	fba2 2303 	umull	r2, r3, r2, r3
 80019f0:	0b5a      	lsrs	r2, r3, #13
 80019f2:	4b7f      	ldr	r3, [pc, #508]	; (8001bf0 <NEO6_ParseGPRMC+0x268>)
 80019f4:	fba3 1302 	umull	r1, r3, r3, r2
 80019f8:	095b      	lsrs	r3, r3, #5
 80019fa:	2164      	movs	r1, #100	; 0x64
 80019fc:	fb01 f303 	mul.w	r3, r1, r3
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
	}
	// Navigation receiver warning A = OK, V = warning
	ParsePoiner = strtoke(NULL, ",");
 8001a0a:	4978      	ldr	r1, [pc, #480]	; (8001bec <NEO6_ParseGPRMC+0x264>)
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f7ff fedd 	bl	80017cc <strtoke>
 8001a12:	6278      	str	r0, [r7, #36]	; 0x24
	// Latitude
	ParsePoiner = strtoke(NULL, ",");
 8001a14:	4975      	ldr	r1, [pc, #468]	; (8001bec <NEO6_ParseGPRMC+0x264>)
 8001a16:	2000      	movs	r0, #0
 8001a18:	f7ff fed8 	bl	80017cc <strtoke>
 8001a1c:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d038      	beq.n	8001a98 <NEO6_ParseGPRMC+0x110>
	{
		float RawLatitude = atof(ParsePoiner);
 8001a26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a28:	f005 fc6c 	bl	8007304 <atof>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4610      	mov	r0, r2
 8001a32:	4619      	mov	r1, r3
 8001a34:	f7ff f852 	bl	8000adc <__aeabi_d2f>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	61fb      	str	r3, [r7, #28]
		int DegLat = (int)(RawLatitude / 100);
 8001a3c:	496e      	ldr	r1, [pc, #440]	; (8001bf8 <NEO6_ParseGPRMC+0x270>)
 8001a3e:	69f8      	ldr	r0, [r7, #28]
 8001a40:	f7ff fa5e 	bl	8000f00 <__aeabi_fdiv>
 8001a44:	4603      	mov	r3, r0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff faf6 	bl	8001038 <__aeabi_f2iz>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	61bb      	str	r3, [r7, #24]
		float MinLat = RawLatitude - (DegLat * 100);
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	2264      	movs	r2, #100	; 0x64
 8001a54:	fb02 f303 	mul.w	r3, r2, r3
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff f949 	bl	8000cf0 <__aeabi_i2f>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	4619      	mov	r1, r3
 8001a62:	69f8      	ldr	r0, [r7, #28]
 8001a64:	f7ff f88e 	bl	8000b84 <__aeabi_fsub>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	617b      	str	r3, [r7, #20]
		GpsStateHandler->Latitude = DegLat + MinLat / 60;
 8001a6c:	69b8      	ldr	r0, [r7, #24]
 8001a6e:	f7ff f93f 	bl	8000cf0 <__aeabi_i2f>
 8001a72:	4604      	mov	r4, r0
 8001a74:	4961      	ldr	r1, [pc, #388]	; (8001bfc <NEO6_ParseGPRMC+0x274>)
 8001a76:	6978      	ldr	r0, [r7, #20]
 8001a78:	f7ff fa42 	bl	8000f00 <__aeabi_fdiv>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4620      	mov	r0, r4
 8001a82:	f7ff f881 	bl	8000b88 <__addsf3>
 8001a86:	4603      	mov	r3, r0
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe fcd7 	bl	800043c <__aeabi_f2d>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	e9c1 2364 	strd	r2, r3, [r1, #400]	; 0x190
	}
	// Latitude Direction
	ParsePoiner = strtoke(NULL, ",");
 8001a98:	4954      	ldr	r1, [pc, #336]	; (8001bec <NEO6_ParseGPRMC+0x264>)
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f7ff fe96 	bl	80017cc <strtoke>
 8001aa0:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d004      	beq.n	8001ab4 <NEO6_ParseGPRMC+0x12c>
	{
		GpsStateHandler->LatitudeDirection = *ParsePoiner;
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	781a      	ldrb	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	}
	// Longnitude
	ParsePoiner = strtoke(NULL, ",");
 8001ab4:	494d      	ldr	r1, [pc, #308]	; (8001bec <NEO6_ParseGPRMC+0x264>)
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f7ff fe88 	bl	80017cc <strtoke>
 8001abc:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d038      	beq.n	8001b38 <NEO6_ParseGPRMC+0x1b0>
	{
		float RawLongitude = atof(ParsePoiner);
 8001ac6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ac8:	f005 fc1c 	bl	8007304 <atof>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f7ff f802 	bl	8000adc <__aeabi_d2f>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	613b      	str	r3, [r7, #16]
		int DegLon = (int)(RawLongitude / 100);
 8001adc:	4946      	ldr	r1, [pc, #280]	; (8001bf8 <NEO6_ParseGPRMC+0x270>)
 8001ade:	6938      	ldr	r0, [r7, #16]
 8001ae0:	f7ff fa0e 	bl	8000f00 <__aeabi_fdiv>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff faa6 	bl	8001038 <__aeabi_f2iz>
 8001aec:	4603      	mov	r3, r0
 8001aee:	60fb      	str	r3, [r7, #12]
		float MinLon = RawLongitude - (DegLon * 100);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2264      	movs	r2, #100	; 0x64
 8001af4:	fb02 f303 	mul.w	r3, r2, r3
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff f8f9 	bl	8000cf0 <__aeabi_i2f>
 8001afe:	4603      	mov	r3, r0
 8001b00:	4619      	mov	r1, r3
 8001b02:	6938      	ldr	r0, [r7, #16]
 8001b04:	f7ff f83e 	bl	8000b84 <__aeabi_fsub>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	60bb      	str	r3, [r7, #8]
		GpsStateHandler->Longitude = DegLon + MinLon / 60;
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f7ff f8ef 	bl	8000cf0 <__aeabi_i2f>
 8001b12:	4604      	mov	r4, r0
 8001b14:	4939      	ldr	r1, [pc, #228]	; (8001bfc <NEO6_ParseGPRMC+0x274>)
 8001b16:	68b8      	ldr	r0, [r7, #8]
 8001b18:	f7ff f9f2 	bl	8000f00 <__aeabi_fdiv>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4620      	mov	r0, r4
 8001b22:	f7ff f831 	bl	8000b88 <__addsf3>
 8001b26:	4603      	mov	r3, r0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fc87 	bl	800043c <__aeabi_f2d>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0
	}
	// Longnitude Direction
	ParsePoiner = strtoke(NULL, ",");
 8001b38:	492c      	ldr	r1, [pc, #176]	; (8001bec <NEO6_ParseGPRMC+0x264>)
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f7ff fe46 	bl	80017cc <strtoke>
 8001b40:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d004      	beq.n	8001b54 <NEO6_ParseGPRMC+0x1cc>
	{
		GpsStateHandler->LongitudeDirection = *ParsePoiner;
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	781a      	ldrb	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	}
	// Speed over ground, Knots
	ParsePoiner = strtoke(NULL, ",");
 8001b54:	4925      	ldr	r1, [pc, #148]	; (8001bec <NEO6_ParseGPRMC+0x264>)
 8001b56:	2000      	movs	r0, #0
 8001b58:	f7ff fe38 	bl	80017cc <strtoke>
 8001b5c:	6278      	str	r0, [r7, #36]	; 0x24
	// Course Made Good, True
	ParsePoiner = strtoke(NULL, ",");
 8001b5e:	4923      	ldr	r1, [pc, #140]	; (8001bec <NEO6_ParseGPRMC+0x264>)
 8001b60:	2000      	movs	r0, #0
 8001b62:	f7ff fe33 	bl	80017cc <strtoke>
 8001b66:	6278      	str	r0, [r7, #36]	; 0x24
	// Date of fix
	ParsePoiner = strtoke(NULL, ",");
 8001b68:	4920      	ldr	r1, [pc, #128]	; (8001bec <NEO6_ParseGPRMC+0x264>)
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	f7ff fe2e 	bl	80017cc <strtoke>
 8001b70:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d033      	beq.n	8001be2 <NEO6_ParseGPRMC+0x25a>
	{
		Temp = atoi(ParsePoiner);
 8001b7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b7c:	f005 fbc5 	bl	800730a <atoi>
 8001b80:	4603      	mov	r3, r0
 8001b82:	623b      	str	r3, [r7, #32]
		GpsStateHandler->Year = Temp % 100;
 8001b84:	6a3a      	ldr	r2, [r7, #32]
 8001b86:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <NEO6_ParseGPRMC+0x268>)
 8001b88:	fba3 1302 	umull	r1, r3, r3, r2
 8001b8c:	095b      	lsrs	r3, r3, #5
 8001b8e:	2164      	movs	r1, #100	; 0x64
 8001b90:	fb01 f303 	mul.w	r3, r1, r3
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c
		GpsStateHandler->Month = (Temp / 100) % 100;
 8001b9e:	6a3b      	ldr	r3, [r7, #32]
 8001ba0:	4a13      	ldr	r2, [pc, #76]	; (8001bf0 <NEO6_ParseGPRMC+0x268>)
 8001ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba6:	095a      	lsrs	r2, r3, #5
 8001ba8:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <NEO6_ParseGPRMC+0x268>)
 8001baa:	fba3 1302 	umull	r1, r3, r3, r2
 8001bae:	095b      	lsrs	r3, r3, #5
 8001bb0:	2164      	movs	r1, #100	; 0x64
 8001bb2:	fb01 f303 	mul.w	r3, r1, r3
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
		GpsStateHandler->Day = (Temp / 10000) % 100;
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
 8001bc2:	4a0c      	ldr	r2, [pc, #48]	; (8001bf4 <NEO6_ParseGPRMC+0x26c>)
 8001bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc8:	0b5a      	lsrs	r2, r3, #13
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <NEO6_ParseGPRMC+0x268>)
 8001bcc:	fba3 1302 	umull	r1, r3, r3, r2
 8001bd0:	095b      	lsrs	r3, r3, #5
 8001bd2:	2164      	movs	r1, #100	; 0x64
 8001bd4:	fb01 f303 	mul.w	r3, r1, r3
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
	}
}
 8001be2:	bf00      	nop
 8001be4:	372c      	adds	r7, #44	; 0x2c
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd90      	pop	{r4, r7, pc}
 8001bea:	bf00      	nop
 8001bec:	0800cde8 	.word	0x0800cde8
 8001bf0:	51eb851f 	.word	0x51eb851f
 8001bf4:	d1b71759 	.word	0xd1b71759
 8001bf8:	42c80000 	.word	0x42c80000
 8001bfc:	42700000 	.word	0x42700000

08001c00 <NEO6_ParseGPVTG>:

//
//	Track Made Good and Ground Speed.
//
void NEO6_ParseGPVTG(NEO6_State *GpsStateHandler)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	// eg2. $GPVTG,054.7,T,034.4,M,005.5,N,010.2,K

	char *ParsePoiner;

	// True track made good
	ParsePoiner = strtoke(NULL, ",");
 8001c08:	491f      	ldr	r1, [pc, #124]	; (8001c88 <NEO6_ParseGPVTG+0x88>)
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f7ff fdde 	bl	80017cc <strtoke>
 8001c10:	60f8      	str	r0, [r7, #12]
	ParsePoiner = strtoke(NULL, ",");
 8001c12:	491d      	ldr	r1, [pc, #116]	; (8001c88 <NEO6_ParseGPVTG+0x88>)
 8001c14:	2000      	movs	r0, #0
 8001c16:	f7ff fdd9 	bl	80017cc <strtoke>
 8001c1a:	60f8      	str	r0, [r7, #12]
	// Magnetic track made good
	ParsePoiner = strtoke(NULL, ",");
 8001c1c:	491a      	ldr	r1, [pc, #104]	; (8001c88 <NEO6_ParseGPVTG+0x88>)
 8001c1e:	2000      	movs	r0, #0
 8001c20:	f7ff fdd4 	bl	80017cc <strtoke>
 8001c24:	60f8      	str	r0, [r7, #12]
	ParsePoiner = strtoke(NULL, ",");
 8001c26:	4918      	ldr	r1, [pc, #96]	; (8001c88 <NEO6_ParseGPVTG+0x88>)
 8001c28:	2000      	movs	r0, #0
 8001c2a:	f7ff fdcf 	bl	80017cc <strtoke>
 8001c2e:	60f8      	str	r0, [r7, #12]
	// Ground speed, knots
	ParsePoiner = strtoke(NULL, ",");
 8001c30:	4915      	ldr	r1, [pc, #84]	; (8001c88 <NEO6_ParseGPVTG+0x88>)
 8001c32:	2000      	movs	r0, #0
 8001c34:	f7ff fdca 	bl	80017cc <strtoke>
 8001c38:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d007      	beq.n	8001c52 <NEO6_ParseGPVTG+0x52>
	{
		GpsStateHandler->SpeedKnots = atof(ParsePoiner);
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f005 fb5e 	bl	8007304 <atof>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	e9c1 2374 	strd	r2, r3, [r1, #464]	; 0x1d0
	}
	ParsePoiner = strtoke(NULL, ",");
 8001c52:	490d      	ldr	r1, [pc, #52]	; (8001c88 <NEO6_ParseGPVTG+0x88>)
 8001c54:	2000      	movs	r0, #0
 8001c56:	f7ff fdb9 	bl	80017cc <strtoke>
 8001c5a:	60f8      	str	r0, [r7, #12]
	// Ground speed, Kilometers per hour
	ParsePoiner = strtoke(NULL, ",");
 8001c5c:	490a      	ldr	r1, [pc, #40]	; (8001c88 <NEO6_ParseGPVTG+0x88>)
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f7ff fdb4 	bl	80017cc <strtoke>
 8001c64:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d007      	beq.n	8001c7e <NEO6_ParseGPVTG+0x7e>
	{
		GpsStateHandler->SpeedKilometers = atof(ParsePoiner);
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f005 fb48 	bl	8007304 <atof>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	e9c1 2376 	strd	r2, r3, [r1, #472]	; 0x1d8
	}
}
 8001c7e:	bf00      	nop
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	0800cde8 	.word	0x0800cde8

08001c8c <NEO6_ParseGPGGA>:

//
//	Global Positioning System Fix Data
//
void NEO6_ParseGPGGA(NEO6_State *GpsStateHandler)
{
 8001c8c:	b590      	push	{r4, r7, lr}
 8001c8e:	b08b      	sub	sp, #44	; 0x2c
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]

	char *ParsePoiner;


	// UTC of Position
	ParsePoiner = strtoke(NULL, ",");
 8001c94:	4967      	ldr	r1, [pc, #412]	; (8001e34 <NEO6_ParseGPGGA+0x1a8>)
 8001c96:	2000      	movs	r0, #0
 8001c98:	f7ff fd98 	bl	80017cc <strtoke>
 8001c9c:	6278      	str	r0, [r7, #36]	; 0x24
	// Latitude
	ParsePoiner = strtoke(NULL, ",");
 8001c9e:	4965      	ldr	r1, [pc, #404]	; (8001e34 <NEO6_ParseGPGGA+0x1a8>)
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f7ff fd93 	bl	80017cc <strtoke>
 8001ca6:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d038      	beq.n	8001d22 <NEO6_ParseGPGGA+0x96>
	{
		float RawLatitude = atof(ParsePoiner);
 8001cb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001cb2:	f005 fb27 	bl	8007304 <atof>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	4610      	mov	r0, r2
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f7fe ff0d 	bl	8000adc <__aeabi_d2f>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	623b      	str	r3, [r7, #32]
		int DegLat = (int)(RawLatitude / 100);
 8001cc6:	495c      	ldr	r1, [pc, #368]	; (8001e38 <NEO6_ParseGPGGA+0x1ac>)
 8001cc8:	6a38      	ldr	r0, [r7, #32]
 8001cca:	f7ff f919 	bl	8000f00 <__aeabi_fdiv>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff f9b1 	bl	8001038 <__aeabi_f2iz>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	61fb      	str	r3, [r7, #28]
		float MinLat = RawLatitude - (DegLat * 100);
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	2264      	movs	r2, #100	; 0x64
 8001cde:	fb02 f303 	mul.w	r3, r2, r3
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff f804 	bl	8000cf0 <__aeabi_i2f>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4619      	mov	r1, r3
 8001cec:	6a38      	ldr	r0, [r7, #32]
 8001cee:	f7fe ff49 	bl	8000b84 <__aeabi_fsub>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	61bb      	str	r3, [r7, #24]
		GpsStateHandler->Latitude = DegLat + MinLat / 60;
 8001cf6:	69f8      	ldr	r0, [r7, #28]
 8001cf8:	f7fe fffa 	bl	8000cf0 <__aeabi_i2f>
 8001cfc:	4604      	mov	r4, r0
 8001cfe:	494f      	ldr	r1, [pc, #316]	; (8001e3c <NEO6_ParseGPGGA+0x1b0>)
 8001d00:	69b8      	ldr	r0, [r7, #24]
 8001d02:	f7ff f8fd 	bl	8000f00 <__aeabi_fdiv>
 8001d06:	4603      	mov	r3, r0
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	f7fe ff3c 	bl	8000b88 <__addsf3>
 8001d10:	4603      	mov	r3, r0
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fb92 	bl	800043c <__aeabi_f2d>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	e9c1 2364 	strd	r2, r3, [r1, #400]	; 0x190
	}
	// N or S
	ParsePoiner = strtoke(NULL, ",");
 8001d22:	4944      	ldr	r1, [pc, #272]	; (8001e34 <NEO6_ParseGPGGA+0x1a8>)
 8001d24:	2000      	movs	r0, #0
 8001d26:	f7ff fd51 	bl	80017cc <strtoke>
 8001d2a:	6278      	str	r0, [r7, #36]	; 0x24
	// Longitude
	ParsePoiner = strtoke(NULL, ",");
 8001d2c:	4941      	ldr	r1, [pc, #260]	; (8001e34 <NEO6_ParseGPGGA+0x1a8>)
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f7ff fd4c 	bl	80017cc <strtoke>
 8001d34:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d038      	beq.n	8001db0 <NEO6_ParseGPGGA+0x124>
	{
		float RawLongitude = atof(ParsePoiner);
 8001d3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d40:	f005 fae0 	bl	8007304 <atof>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4610      	mov	r0, r2
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	f7fe fec6 	bl	8000adc <__aeabi_d2f>
 8001d50:	4603      	mov	r3, r0
 8001d52:	617b      	str	r3, [r7, #20]
		int DegLon = (int)(RawLongitude / 100);
 8001d54:	4938      	ldr	r1, [pc, #224]	; (8001e38 <NEO6_ParseGPGGA+0x1ac>)
 8001d56:	6978      	ldr	r0, [r7, #20]
 8001d58:	f7ff f8d2 	bl	8000f00 <__aeabi_fdiv>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff f96a 	bl	8001038 <__aeabi_f2iz>
 8001d64:	4603      	mov	r3, r0
 8001d66:	613b      	str	r3, [r7, #16]
		float MinLon = RawLongitude - (DegLon * 100);
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	2264      	movs	r2, #100	; 0x64
 8001d6c:	fb02 f303 	mul.w	r3, r2, r3
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe ffbd 	bl	8000cf0 <__aeabi_i2f>
 8001d76:	4603      	mov	r3, r0
 8001d78:	4619      	mov	r1, r3
 8001d7a:	6978      	ldr	r0, [r7, #20]
 8001d7c:	f7fe ff02 	bl	8000b84 <__aeabi_fsub>
 8001d80:	4603      	mov	r3, r0
 8001d82:	60fb      	str	r3, [r7, #12]
		GpsStateHandler->Longitude = DegLon + MinLon / 60;
 8001d84:	6938      	ldr	r0, [r7, #16]
 8001d86:	f7fe ffb3 	bl	8000cf0 <__aeabi_i2f>
 8001d8a:	4604      	mov	r4, r0
 8001d8c:	492b      	ldr	r1, [pc, #172]	; (8001e3c <NEO6_ParseGPGGA+0x1b0>)
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f7ff f8b6 	bl	8000f00 <__aeabi_fdiv>
 8001d94:	4603      	mov	r3, r0
 8001d96:	4619      	mov	r1, r3
 8001d98:	4620      	mov	r0, r4
 8001d9a:	f7fe fef5 	bl	8000b88 <__addsf3>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe fb4b 	bl	800043c <__aeabi_f2d>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0
	}
	// E or W
	ParsePoiner = strtoke(NULL, ",");
 8001db0:	4920      	ldr	r1, [pc, #128]	; (8001e34 <NEO6_ParseGPGGA+0x1a8>)
 8001db2:	2000      	movs	r0, #0
 8001db4:	f7ff fd0a 	bl	80017cc <strtoke>
 8001db8:	6278      	str	r0, [r7, #36]	; 0x24
	// GPS quality indicator (0=invalid; 1=GPS fix; 2=Diff. GPS fix)
	ParsePoiner = strtoke(NULL, ",");
 8001dba:	491e      	ldr	r1, [pc, #120]	; (8001e34 <NEO6_ParseGPGGA+0x1a8>)
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	f7ff fd05 	bl	80017cc <strtoke>
 8001dc2:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d007      	beq.n	8001ddc <NEO6_ParseGPGGA+0x150>
	{
		GpsStateHandler->Quality = atoi(ParsePoiner);
 8001dcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001dce:	f005 fa9c 	bl	800730a <atoi>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
	}
	// Number of satellites in use [not those in view]
	ParsePoiner = strtoke(NULL, ",");
 8001ddc:	4915      	ldr	r1, [pc, #84]	; (8001e34 <NEO6_ParseGPGGA+0x1a8>)
 8001dde:	2000      	movs	r0, #0
 8001de0:	f7ff fcf4 	bl	80017cc <strtoke>
 8001de4:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d007      	beq.n	8001dfe <NEO6_ParseGPGGA+0x172>
	{
		GpsStateHandler->SatelitesNumber = atoi(ParsePoiner);
 8001dee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001df0:	f005 fa8b 	bl	800730a <atoi>
 8001df4:	4603      	mov	r3, r0
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
	}
	// Horizontal dilution of position
	ParsePoiner = strtoke(NULL, ",");
 8001dfe:	490d      	ldr	r1, [pc, #52]	; (8001e34 <NEO6_ParseGPGGA+0x1a8>)
 8001e00:	2000      	movs	r0, #0
 8001e02:	f7ff fce3 	bl	80017cc <strtoke>
 8001e06:	6278      	str	r0, [r7, #36]	; 0x24
	// Antenna altitude above/below mean sea level (geoid)
	ParsePoiner = strtoke(NULL, ",");
 8001e08:	490a      	ldr	r1, [pc, #40]	; (8001e34 <NEO6_ParseGPGGA+0x1a8>)
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f7ff fcde 	bl	80017cc <strtoke>
 8001e10:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d007      	beq.n	8001e2a <NEO6_ParseGPGGA+0x19e>
	{
		GpsStateHandler->Altitude = atof(ParsePoiner);
 8001e1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e1c:	f005 fa72 	bl	8007304 <atof>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
	}
}
 8001e2a:	bf00      	nop
 8001e2c:	372c      	adds	r7, #44	; 0x2c
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd90      	pop	{r4, r7, pc}
 8001e32:	bf00      	nop
 8001e34:	0800cde8 	.word	0x0800cde8
 8001e38:	42c80000 	.word	0x42c80000
 8001e3c:	42700000 	.word	0x42700000

08001e40 <NEO6_ParseGPGSA>:

//
//	GPS DOP and active satellites
//
void NEO6_ParseGPGSA(NEO6_State *GpsStateHandler)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	// eg2. $GPGSA,A,3,19,28,14,18,27,22,31,39,,,,,1.7,1.0,1.3*35

	char *ParsePoiner;

	// Mode
	ParsePoiner = strtoke(NULL, ",");
 8001e48:	492d      	ldr	r1, [pc, #180]	; (8001f00 <NEO6_ParseGPGSA+0xc0>)
 8001e4a:	2000      	movs	r0, #0
 8001e4c:	f7ff fcbe 	bl	80017cc <strtoke>
 8001e50:	60b8      	str	r0, [r7, #8]
	// 2D/3D Fix
	ParsePoiner = strtoke(NULL, ",");
 8001e52:	492b      	ldr	r1, [pc, #172]	; (8001f00 <NEO6_ParseGPGSA+0xc0>)
 8001e54:	2000      	movs	r0, #0
 8001e56:	f7ff fcb9 	bl	80017cc <strtoke>
 8001e5a:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d007      	beq.n	8001e74 <NEO6_ParseGPGSA+0x34>
	{
		GpsStateHandler->FixMode = atoi(ParsePoiner);
 8001e64:	68b8      	ldr	r0, [r7, #8]
 8001e66:	f005 fa50 	bl	800730a <atoi>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f883 21e2 	strb.w	r2, [r3, #482]	; 0x1e2
	}
	// IDs of SVs used in position fix (null for unused fields)
	for(uint8_t i=0; i < 12; i++)
 8001e74:	2300      	movs	r3, #0
 8001e76:	73fb      	strb	r3, [r7, #15]
 8001e78:	e007      	b.n	8001e8a <NEO6_ParseGPGSA+0x4a>
	{
		ParsePoiner = strtoke(NULL, ",");
 8001e7a:	4921      	ldr	r1, [pc, #132]	; (8001f00 <NEO6_ParseGPGSA+0xc0>)
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f7ff fca5 	bl	80017cc <strtoke>
 8001e82:	60b8      	str	r0, [r7, #8]
	for(uint8_t i=0; i < 12; i++)
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	3301      	adds	r3, #1
 8001e88:	73fb      	strb	r3, [r7, #15]
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	2b0b      	cmp	r3, #11
 8001e8e:	d9f4      	bls.n	8001e7a <NEO6_ParseGPGSA+0x3a>
	}
	// PDOP
	ParsePoiner = strtoke(NULL, ",");
 8001e90:	491b      	ldr	r1, [pc, #108]	; (8001f00 <NEO6_ParseGPGSA+0xc0>)
 8001e92:	2000      	movs	r0, #0
 8001e94:	f7ff fc9a 	bl	80017cc <strtoke>
 8001e98:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d007      	beq.n	8001eb2 <NEO6_ParseGPGSA+0x72>
	{
		GpsStateHandler->Dop = atof(ParsePoiner);
 8001ea2:	68b8      	ldr	r0, [r7, #8]
 8001ea4:	f005 fa2e 	bl	8007304 <atof>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	e9c1 237a 	strd	r2, r3, [r1, #488]	; 0x1e8
	}
	// HDOP
	ParsePoiner = strtoke(NULL, ",");
 8001eb2:	4913      	ldr	r1, [pc, #76]	; (8001f00 <NEO6_ParseGPGSA+0xc0>)
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f7ff fc89 	bl	80017cc <strtoke>
 8001eba:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d007      	beq.n	8001ed4 <NEO6_ParseGPGSA+0x94>
	{
		GpsStateHandler->Hdop = atof(ParsePoiner);
 8001ec4:	68b8      	ldr	r0, [r7, #8]
 8001ec6:	f005 fa1d 	bl	8007304 <atof>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	e9c1 237c 	strd	r2, r3, [r1, #496]	; 0x1f0
	}
	// VDOP
	ParsePoiner = strtoke(NULL, ",");
 8001ed4:	490a      	ldr	r1, [pc, #40]	; (8001f00 <NEO6_ParseGPGSA+0xc0>)
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f7ff fc78 	bl	80017cc <strtoke>
 8001edc:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d007      	beq.n	8001ef6 <NEO6_ParseGPGSA+0xb6>
	{
		GpsStateHandler->Vdop = atof(ParsePoiner);
 8001ee6:	68b8      	ldr	r0, [r7, #8]
 8001ee8:	f005 fa0c 	bl	8007304 <atof>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	e9c1 237e 	strd	r2, r3, [r1, #504]	; 0x1f8
	}
}
 8001ef6:	bf00      	nop
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	0800cde8 	.word	0x0800cde8

08001f04 <NEO6_ParseLine>:
	// Could be good for minimal system for LoRa device
}


void NEO6_ParseLine(NEO6_State *GpsStateHandler)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	// Nice website with NMEA commuincates description
	//	http://aprs.gids.nl/nmea
	//

	// Header
	char* ParsePoiner = strtoke((char*)GpsStateHandler->WorkingBuffer, ",");
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f203 1307 	addw	r3, r3, #263	; 0x107
 8001f12:	491a      	ldr	r1, [pc, #104]	; (8001f7c <NEO6_ParseLine+0x78>)
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff fc59 	bl	80017cc <strtoke>
 8001f1a:	60f8      	str	r0, [r7, #12]

	if(strcmp(ParsePoiner, "$GPRMC") == 0) NEO6_ParseGPRMC(GpsStateHandler);
 8001f1c:	4918      	ldr	r1, [pc, #96]	; (8001f80 <NEO6_ParseLine+0x7c>)
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f7fe f916 	bl	8000150 <strcmp>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d103      	bne.n	8001f32 <NEO6_ParseLine+0x2e>
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff fd2c 	bl	8001988 <NEO6_ParseGPRMC>
	else if(strcmp(ParsePoiner, "$GPVTG") == 0) NEO6_ParseGPVTG(GpsStateHandler);
	else if(strcmp(ParsePoiner, "$GPGGA") == 0) NEO6_ParseGPGGA(GpsStateHandler);
	else if(strcmp(ParsePoiner, "$GPGSA") == 0) NEO6_ParseGPGSA(GpsStateHandler);
//	else if(strcmp(ParsePoiner, "$GPGSV") == 0) NEO6_ParseGPGSV(GpsStateHandler);
//	else if(strcmp(ParsePoiner, "$GPGLL") == 0) NEO6_ParseGPGLL(GpsStateHandler);
}
 8001f30:	e01f      	b.n	8001f72 <NEO6_ParseLine+0x6e>
	else if(strcmp(ParsePoiner, "$GPVTG") == 0) NEO6_ParseGPVTG(GpsStateHandler);
 8001f32:	4914      	ldr	r1, [pc, #80]	; (8001f84 <NEO6_ParseLine+0x80>)
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f7fe f90b 	bl	8000150 <strcmp>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d103      	bne.n	8001f48 <NEO6_ParseLine+0x44>
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff fe5d 	bl	8001c00 <NEO6_ParseGPVTG>
}
 8001f46:	e014      	b.n	8001f72 <NEO6_ParseLine+0x6e>
	else if(strcmp(ParsePoiner, "$GPGGA") == 0) NEO6_ParseGPGGA(GpsStateHandler);
 8001f48:	490f      	ldr	r1, [pc, #60]	; (8001f88 <NEO6_ParseLine+0x84>)
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f7fe f900 	bl	8000150 <strcmp>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d103      	bne.n	8001f5e <NEO6_ParseLine+0x5a>
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff fe98 	bl	8001c8c <NEO6_ParseGPGGA>
}
 8001f5c:	e009      	b.n	8001f72 <NEO6_ParseLine+0x6e>
	else if(strcmp(ParsePoiner, "$GPGSA") == 0) NEO6_ParseGPGSA(GpsStateHandler);
 8001f5e:	490b      	ldr	r1, [pc, #44]	; (8001f8c <NEO6_ParseLine+0x88>)
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	f7fe f8f5 	bl	8000150 <strcmp>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d102      	bne.n	8001f72 <NEO6_ParseLine+0x6e>
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ff67 	bl	8001e40 <NEO6_ParseGPGSA>
}
 8001f72:	bf00      	nop
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	0800cde8 	.word	0x0800cde8
 8001f80:	0800cdec 	.word	0x0800cdec
 8001f84:	0800cdf4 	.word	0x0800cdf4
 8001f88:	0800cdfc 	.word	0x0800cdfc
 8001f8c:	0800ce04 	.word	0x0800ce04

08001f90 <NEO6_Task>:
{
	return GpsStateHandler->Quality;
}

void NEO6_Task(NEO6_State *GpsStateHandler)
{
 8001f90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f94:	b086      	sub	sp, #24
 8001f96:	af04      	add	r7, sp, #16
 8001f98:	6078      	str	r0, [r7, #4]
    	if(GpsStateHandler->UartBufferLines)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d078      	beq.n	8002096 <NEO6_Task+0x106>
    	{
        NEO6_GetLineFromBuffer(GpsStateHandler);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff fcbd 	bl	8001924 <NEO6_GetLineFromBuffer>
        NEO6_ParseLine(GpsStateHandler);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff ffaa 	bl	8001f04 <NEO6_ParseLine>

        // Check if GPS is moving
        if(GpsStateHandler->SpeedKilometers > MIN_SPEED_KM && GpsStateHandler->last_latitude != 0.0 && GpsStateHandler->last_longitude != 0.0)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	e9d3 0176 	ldrd	r0, r1, [r3, #472]	; 0x1d8
 8001fb6:	f04f 0200 	mov.w	r2, #0
 8001fba:	4b39      	ldr	r3, [pc, #228]	; (80020a0 <NEO6_Task+0x110>)
 8001fbc:	f7fe fd26 	bl	8000a0c <__aeabi_dcmpgt>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d04d      	beq.n	8002062 <NEO6_Task+0xd2>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	e9d3 016e 	ldrd	r0, r1, [r3, #440]	; 0x1b8
 8001fcc:	f04f 0200 	mov.w	r2, #0
 8001fd0:	f04f 0300 	mov.w	r3, #0
 8001fd4:	f7fe fcf2 	bl	80009bc <__aeabi_dcmpeq>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d141      	bne.n	8002062 <NEO6_Task+0xd2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	e9d3 0170 	ldrd	r0, r1, [r3, #448]	; 0x1c0
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	f04f 0300 	mov.w	r3, #0
 8001fec:	f7fe fce6 	bl	80009bc <__aeabi_dcmpeq>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d135      	bne.n	8002062 <NEO6_Task+0xd2>
        {
            // Add the distance from the last received GPS coordinate
            GpsStateHandler->total_distance += haversine_km(GpsStateHandler->last_latitude, GpsStateHandler->last_longitude, GpsStateHandler->Latitude, GpsStateHandler->Longitude);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	e9d3 456e 	ldrd	r4, r5, [r3, #440]	; 0x1b8
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	e9d3 8970 	ldrd	r8, r9, [r3, #448]	; 0x1c0
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	e9d1 0168 	ldrd	r0, r1, [r1, #416]	; 0x1a0
 800200e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002012:	e9cd 2300 	strd	r2, r3, [sp]
 8002016:	4642      	mov	r2, r8
 8002018:	464b      	mov	r3, r9
 800201a:	4620      	mov	r0, r4
 800201c:	4629      	mov	r1, r5
 800201e:	f000 f93f 	bl	80022a0 <haversine_km>
 8002022:	4602      	mov	r2, r0
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	e9d3 4572 	ldrd	r4, r5, [r3, #456]	; 0x1c8
 800202a:	4610      	mov	r0, r2
 800202c:	f7fe f9f4 	bl	8000418 <__aeabi_i2d>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4620      	mov	r0, r4
 8002036:	4629      	mov	r1, r5
 8002038:	f7fe f8a2 	bl	8000180 <__adddf3>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	e9c1 2372 	strd	r2, r3, [r1, #456]	; 0x1c8
            // Store GPS coordinates for next distance calculation
            GpsStateHandler->last_latitude = GpsStateHandler->Latitude;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	e9c1 236e 	strd	r2, r3, [r1, #440]	; 0x1b8
            GpsStateHandler->last_longitude = GpsStateHandler->Longitude;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	; 0x1a0
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
        {
 800205e:	bf00      	nop
            // If GPS is stationary, set speed to zero and don't update last received coordinates
            GpsStateHandler->SpeedKilometers = 0.0;
            GpsStateHandler->SpeedKnots = 0.0;
        }
    }
}
 8002060:	e019      	b.n	8002096 <NEO6_Task+0x106>
        } else if (GpsStateHandler->SpeedKilometers <= MIN_SPEED_KM)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	e9d3 0176 	ldrd	r0, r1, [r3, #472]	; 0x1d8
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <NEO6_Task+0x110>)
 800206e:	f7fe fcb9 	bl	80009e4 <__aeabi_dcmple>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d100      	bne.n	800207a <NEO6_Task+0xea>
}
 8002078:	e00d      	b.n	8002096 <NEO6_Task+0x106>
            GpsStateHandler->SpeedKilometers = 0.0;
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	f04f 0300 	mov.w	r3, #0
 8002084:	e9c1 2376 	strd	r2, r3, [r1, #472]	; 0x1d8
            GpsStateHandler->SpeedKnots = 0.0;
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	f04f 0300 	mov.w	r3, #0
 8002092:	e9c1 2374 	strd	r2, r3, [r1, #464]	; 0x1d0
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80020a0:	3ff80000 	.word	0x3ff80000

080020a4 <NEO6_Init>:
double NEO6_GetTotalDistance(NEO6_State *GpsStateHandler) {
    return GpsStateHandler->total_distance;
}

void NEO6_Init(NEO6_State *GpsStateHandler, UART_HandleTypeDef *huart)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
	GpsStateHandler->neo6_huart = huart;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	601a      	str	r2, [r3, #0]
	GpsStateHandler->UartBufferHead = 0;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	GpsStateHandler->UartBufferTail = 0;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
	GpsStateHandler->UartBufferLines = 0;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

	GpsStateHandler->Hour = 0;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
	GpsStateHandler->Minute = 0;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
	GpsStateHandler->Second = 0;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
	GpsStateHandler->Day = 0;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
	GpsStateHandler->Month = 0;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
	GpsStateHandler->Year = 0;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c

	GpsStateHandler->Latitude = 0;
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	f04f 0300 	mov.w	r3, #0
 8002106:	e9c1 2364 	strd	r2, r3, [r1, #400]	; 0x190
	GpsStateHandler->LatitudeDirection = '0';
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2230      	movs	r2, #48	; 0x30
 800210e:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	GpsStateHandler->Longitude = 0;
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	f04f 0200 	mov.w	r2, #0
 8002118:	f04f 0300 	mov.w	r3, #0
 800211c:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0
	GpsStateHandler->LongitudeDirection = '0';
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2230      	movs	r2, #48	; 0x30
 8002124:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	GpsStateHandler->last_latitude = 0;
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	f04f 0200 	mov.w	r2, #0
 800212e:	f04f 0300 	mov.w	r3, #0
 8002132:	e9c1 236e 	strd	r2, r3, [r1, #440]	; 0x1b8
	GpsStateHandler->last_longitude = 0;
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	f04f 0300 	mov.w	r3, #0
 8002140:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
	GpsStateHandler->total_distance = 0;
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	e9c1 2372 	strd	r2, r3, [r1, #456]	; 0x1c8

	GpsStateHandler->SpeedKilometers = 0;
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	f04f 0200 	mov.w	r2, #0
 8002158:	f04f 0300 	mov.w	r3, #0
 800215c:	e9c1 2376 	strd	r2, r3, [r1, #472]	; 0x1d8
	GpsStateHandler->SpeedKnots = 0;
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	f04f 0300 	mov.w	r3, #0
 800216a:	e9c1 2374 	strd	r2, r3, [r1, #464]	; 0x1d0

	GpsStateHandler->SatelitesNumber = 0;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
	GpsStateHandler->Quality = 0;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
	GpsStateHandler->Dop = 0;
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	f04f 0300 	mov.w	r3, #0
 8002188:	e9c1 237a 	strd	r2, r3, [r1, #488]	; 0x1e8
	GpsStateHandler->Hdop = 0;
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	f04f 0200 	mov.w	r2, #0
 8002192:	f04f 0300 	mov.w	r3, #0
 8002196:	e9c1 237c 	strd	r2, r3, [r1, #496]	; 0x1f0
	GpsStateHandler->Vdop = 0;
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	e9c1 237e 	strd	r2, r3, [r1, #504]	; 0x1f8

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2201      	movs	r2, #1
 80021ae:	4904      	ldr	r1, [pc, #16]	; (80021c0 <NEO6_Init+0x11c>)
 80021b0:	4618      	mov	r0, r3
 80021b2:	f004 fb6f 	bl	8006894 <HAL_UART_Receive_IT>
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000299 	.word	0x20000299

080021c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021c8:	4b12      	ldr	r3, [pc, #72]	; (8002214 <MX_I2C1_Init+0x50>)
 80021ca:	4a13      	ldr	r2, [pc, #76]	; (8002218 <MX_I2C1_Init+0x54>)
 80021cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80021ce:	4b11      	ldr	r3, [pc, #68]	; (8002214 <MX_I2C1_Init+0x50>)
 80021d0:	4a12      	ldr	r2, [pc, #72]	; (800221c <MX_I2C1_Init+0x58>)
 80021d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021d4:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <MX_I2C1_Init+0x50>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021da:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <MX_I2C1_Init+0x50>)
 80021dc:	2200      	movs	r2, #0
 80021de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021e0:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <MX_I2C1_Init+0x50>)
 80021e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021e8:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <MX_I2C1_Init+0x50>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021ee:	4b09      	ldr	r3, [pc, #36]	; (8002214 <MX_I2C1_Init+0x50>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021f4:	4b07      	ldr	r3, [pc, #28]	; (8002214 <MX_I2C1_Init+0x50>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <MX_I2C1_Init+0x50>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002200:	4804      	ldr	r0, [pc, #16]	; (8002214 <MX_I2C1_Init+0x50>)
 8002202:	f002 fcf9 	bl	8004bf8 <HAL_I2C_Init>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800220c:	f000 fd1a 	bl	8002c44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002210:	bf00      	nop
 8002212:	bd80      	pop	{r7, pc}
 8002214:	200002a0 	.word	0x200002a0
 8002218:	40005400 	.word	0x40005400
 800221c:	00061a80 	.word	0x00061a80

08002220 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002228:	f107 0310 	add.w	r3, r7, #16
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a15      	ldr	r2, [pc, #84]	; (8002290 <HAL_I2C_MspInit+0x70>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d123      	bne.n	8002288 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002240:	4b14      	ldr	r3, [pc, #80]	; (8002294 <HAL_I2C_MspInit+0x74>)
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	4a13      	ldr	r2, [pc, #76]	; (8002294 <HAL_I2C_MspInit+0x74>)
 8002246:	f043 0308 	orr.w	r3, r3, #8
 800224a:	6193      	str	r3, [r2, #24]
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <HAL_I2C_MspInit+0x74>)
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002258:	23c0      	movs	r3, #192	; 0xc0
 800225a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800225c:	2312      	movs	r3, #18
 800225e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002260:	2303      	movs	r3, #3
 8002262:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002264:	f107 0310 	add.w	r3, r7, #16
 8002268:	4619      	mov	r1, r3
 800226a:	480b      	ldr	r0, [pc, #44]	; (8002298 <HAL_I2C_MspInit+0x78>)
 800226c:	f002 fae0 	bl	8004830 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002270:	4b08      	ldr	r3, [pc, #32]	; (8002294 <HAL_I2C_MspInit+0x74>)
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	4a07      	ldr	r2, [pc, #28]	; (8002294 <HAL_I2C_MspInit+0x74>)
 8002276:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800227a:	61d3      	str	r3, [r2, #28]
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <HAL_I2C_MspInit+0x74>)
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002288:	bf00      	nop
 800228a:	3720      	adds	r7, #32
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40005400 	.word	0x40005400
 8002294:	40021000 	.word	0x40021000
 8002298:	40010c00 	.word	0x40010c00
 800229c:	00000000 	.word	0x00000000

080022a0 <haversine_km>:
  * @retval Haversine distance between the two coordinates
  */
double haversine_km(double lat1, double lon1, double lat2, double lon2);

double haversine_km(double lat1, double lon1, double lat2, double lon2)
{
 80022a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80022a4:	b08c      	sub	sp, #48	; 0x30
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80022ac:	e9c7 2300 	strd	r2, r3, [r7]
    // Convert degrees to radians
    lat1 *= DEG_TO_RAD;
 80022b0:	a371      	add	r3, pc, #452	; (adr r3, 8002478 <haversine_km+0x1d8>)
 80022b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022ba:	f7fe f917 	bl	80004ec <__aeabi_dmul>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    lon1 *= DEG_TO_RAD;
 80022c6:	a36c      	add	r3, pc, #432	; (adr r3, 8002478 <haversine_km+0x1d8>)
 80022c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022d0:	f7fe f90c 	bl	80004ec <__aeabi_dmul>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	e9c7 2300 	strd	r2, r3, [r7]
    lat2 *= DEG_TO_RAD;
 80022dc:	a366      	add	r3, pc, #408	; (adr r3, 8002478 <haversine_km+0x1d8>)
 80022de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80022e6:	f7fe f901 	bl	80004ec <__aeabi_dmul>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    lon2 *= DEG_TO_RAD;
 80022f2:	a361      	add	r3, pc, #388	; (adr r3, 8002478 <haversine_km+0x1d8>)
 80022f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80022fc:	f7fe f8f6 	bl	80004ec <__aeabi_dmul>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

    // Apply haversine formula
    double d_lat = lat2 - lat1;
 8002308:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800230c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002310:	f7fd ff34 	bl	800017c <__aeabi_dsub>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double d_lon = lon2 - lon1;
 800231c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002320:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002324:	f7fd ff2a 	bl	800017c <__aeabi_dsub>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double a = sin(d_lat / 2) * sin(d_lat / 2) +
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002338:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800233c:	f7fe fa00 	bl	8000740 <__aeabi_ddiv>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4610      	mov	r0, r2
 8002346:	4619      	mov	r1, r3
 8002348:	f009 fa1a 	bl	800b780 <sin>
 800234c:	4604      	mov	r4, r0
 800234e:	460d      	mov	r5, r1
 8002350:	f04f 0200 	mov.w	r2, #0
 8002354:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002358:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800235c:	f7fe f9f0 	bl	8000740 <__aeabi_ddiv>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4610      	mov	r0, r2
 8002366:	4619      	mov	r1, r3
 8002368:	f009 fa0a 	bl	800b780 <sin>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	4620      	mov	r0, r4
 8002372:	4629      	mov	r1, r5
 8002374:	f7fe f8ba 	bl	80004ec <__aeabi_dmul>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4690      	mov	r8, r2
 800237e:	4699      	mov	r9, r3
               cos(lat1) * cos(lat2) *
 8002380:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002384:	f009 f9b6 	bl	800b6f4 <cos>
 8002388:	4604      	mov	r4, r0
 800238a:	460d      	mov	r5, r1
 800238c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002390:	f009 f9b0 	bl	800b6f4 <cos>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	4620      	mov	r0, r4
 800239a:	4629      	mov	r1, r5
 800239c:	f7fe f8a6 	bl	80004ec <__aeabi_dmul>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4614      	mov	r4, r2
 80023a6:	461d      	mov	r5, r3
               sin(d_lon / 2) * sin(d_lon / 2);
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023b0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80023b4:	f7fe f9c4 	bl	8000740 <__aeabi_ddiv>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4610      	mov	r0, r2
 80023be:	4619      	mov	r1, r3
 80023c0:	f009 f9de 	bl	800b780 <sin>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
               cos(lat1) * cos(lat2) *
 80023c8:	4620      	mov	r0, r4
 80023ca:	4629      	mov	r1, r5
 80023cc:	f7fe f88e 	bl	80004ec <__aeabi_dmul>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4614      	mov	r4, r2
 80023d6:	461d      	mov	r5, r3
               sin(d_lon / 2) * sin(d_lon / 2);
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80023e4:	f7fe f9ac 	bl	8000740 <__aeabi_ddiv>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4610      	mov	r0, r2
 80023ee:	4619      	mov	r1, r3
 80023f0:	f009 f9c6 	bl	800b780 <sin>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	4620      	mov	r0, r4
 80023fa:	4629      	mov	r1, r5
 80023fc:	f7fe f876 	bl	80004ec <__aeabi_dmul>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
    double a = sin(d_lat / 2) * sin(d_lat / 2) +
 8002404:	4640      	mov	r0, r8
 8002406:	4649      	mov	r1, r9
 8002408:	f7fd feba 	bl	8000180 <__adddf3>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double c = 2 * atan2(sqrt(a), sqrt(1 - a));
 8002414:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002418:	f009 f948 	bl	800b6ac <sqrt>
 800241c:	4604      	mov	r4, r0
 800241e:	460d      	mov	r5, r1
 8002420:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002424:	f04f 0000 	mov.w	r0, #0
 8002428:	4917      	ldr	r1, [pc, #92]	; (8002488 <haversine_km+0x1e8>)
 800242a:	f7fd fea7 	bl	800017c <__aeabi_dsub>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4610      	mov	r0, r2
 8002434:	4619      	mov	r1, r3
 8002436:	f009 f939 	bl	800b6ac <sqrt>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	4620      	mov	r0, r4
 8002440:	4629      	mov	r1, r5
 8002442:	f009 f931 	bl	800b6a8 <atan2>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	f7fd fe99 	bl	8000180 <__adddf3>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // Multiply by Earth's radius to obtain distance in km
    return GPS_EARTH_RADIUS_KM * c;
 8002456:	a30a      	add	r3, pc, #40	; (adr r3, 8002480 <haversine_km+0x1e0>)
 8002458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002460:	f7fe f844 	bl	80004ec <__aeabi_dmul>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
}
 8002468:	4610      	mov	r0, r2
 800246a:	4619      	mov	r1, r3
 800246c:	3730      	adds	r7, #48	; 0x30
 800246e:	46bd      	mov	sp, r7
 8002470:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002474:	f3af 8000 	nop.w
 8002478:	22d4405f 	.word	0x22d4405f
 800247c:	3f91df47 	.word	0x3f91df47
 8002480:	00000000 	.word	0x00000000
 8002484:	40b8e300 	.word	0x40b8e300
 8002488:	3ff00000 	.word	0x3ff00000
 800248c:	00000000 	.word	0x00000000

08002490 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002490:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002494:	b08e      	sub	sp, #56	; 0x38
 8002496:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002498:	f001 fb58 	bl	8003b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800249c:	f000 f9e4 	bl	8002868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024a0:	f7ff f910 	bl	80016c4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80024a4:	f001 faae 	bl	8003a04 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80024a8:	f7fe fe24 	bl	80010f4 <MX_ADC1_Init>
  MX_I2C1_Init();
 80024ac:	f7ff fe8a 	bl	80021c4 <MX_I2C1_Init>
  MX_TIM1_Init();
 80024b0:	f001 fa3a 	bl	8003928 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc1);
 80024b4:	4815      	ldr	r0, [pc, #84]	; (800250c <main+0x7c>)
 80024b6:	f001 fca7 	bl	8003e08 <HAL_ADC_Start>
  SSD1306_Init();
 80024ba:	f000 fe49 	bl	8003150 <SSD1306_Init>
  DS18B20_Init(DS18B20_Resolution_12bits);
 80024be:	200c      	movs	r0, #12
 80024c0:	f7ff f8ae 	bl	8001620 <DS18B20_Init>
  HAL_GPIO_WritePin(TEST_Pin_GPIO_Port, TEST_Pin_Pin, 0);
 80024c4:	2200      	movs	r2, #0
 80024c6:	2101      	movs	r1, #1
 80024c8:	4811      	ldr	r0, [pc, #68]	; (8002510 <main+0x80>)
 80024ca:	f002 fb4c 	bl	8004b66 <HAL_GPIO_WritePin>
  NEO6_Init(&GpsState, &huart1);
 80024ce:	4911      	ldr	r1, [pc, #68]	; (8002514 <main+0x84>)
 80024d0:	4811      	ldr	r0, [pc, #68]	; (8002518 <main+0x88>)
 80024d2:	f7ff fde7 	bl	80020a4 <NEO6_Init>

  uint32_t DS18B20_delay = 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t NEO6_delay = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	623b      	str	r3, [r7, #32]
  uint32_t ADC_delay = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
  uint32_t updateScreenTime = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61bb      	str	r3, [r7, #24]
  uint32_t buttonPressTime = 0;
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
  uint32_t HAL_GPIO_TogglePin_delay = 0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]


//////////////////////////////////////////////////////////////////////////////////////
//							      DS18B20_Temperature_Detection

	 if((HAL_GetTick() - DS18B20_delay) > 250)
 80024ee:	f001 fb85 	bl	8003bfc <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2bfa      	cmp	r3, #250	; 0xfa
 80024fa:	d93a      	bls.n	8002572 <main+0xe2>
	 {
		 DS18B20_ReadAll();
 80024fc:	f7fe fffa 	bl	80014f4 <DS18B20_ReadAll>
		 DS18B20_StartAll();
 8002500:	f7fe fe72 	bl	80011e8 <DS18B20_StartAll>

		 uint8_t ROM_tmp[8];
		 uint8_t i;		//Iterator

	    for(i = 0; i < DS18B20_Quantity(); i++)
 8002504:	2300      	movs	r3, #0
 8002506:	73fb      	strb	r3, [r7, #15]
 8002508:	e029      	b.n	800255e <main+0xce>
 800250a:	bf00      	nop
 800250c:	20000214 	.word	0x20000214
 8002510:	40010800 	.word	0x40010800
 8002514:	20000a50 	.word	0x20000a50
 8002518:	20000310 	.word	0x20000310
	    {
	       if(DS18B20_GetTemperature(i, &temperature))
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	49ac      	ldr	r1, [pc, #688]	; (80027d0 <main+0x340>)
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff f85d 	bl	80015e0 <DS18B20_GetTemperature>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d015      	beq.n	8002558 <main+0xc8>
		   {
		    DS18B20_GetROM(i, ROM_tmp);
 800252c:	1d3a      	adds	r2, r7, #4
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	4611      	mov	r1, r2
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff f81e 	bl	8001574 <DS18B20_GetROM>
		   	memset(temp_string, 0, sizeof(temp_string));
 8002538:	2210      	movs	r2, #16
 800253a:	2100      	movs	r1, #0
 800253c:	48a5      	ldr	r0, [pc, #660]	; (80027d4 <main+0x344>)
 800253e:	f006 fb16 	bl	8008b6e <memset>

		   	sprintf(temp_string, "%.2f *C", temperature);
 8002542:	4ba3      	ldr	r3, [pc, #652]	; (80027d0 <main+0x340>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7fd ff78 	bl	800043c <__aeabi_f2d>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	49a1      	ldr	r1, [pc, #644]	; (80027d8 <main+0x348>)
 8002552:	48a0      	ldr	r0, [pc, #640]	; (80027d4 <main+0x344>)
 8002554:	f006 faa8 	bl	8008aa8 <siprintf>
	    for(i = 0; i < DS18B20_Quantity(); i++)
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	3301      	adds	r3, #1
 800255c:	73fb      	strb	r3, [r7, #15]
 800255e:	f7ff f835 	bl	80015cc <DS18B20_Quantity>
 8002562:	4603      	mov	r3, r0
 8002564:	461a      	mov	r2, r3
 8002566:	7bfb      	ldrb	r3, [r7, #15]
 8002568:	4293      	cmp	r3, r2
 800256a:	d3d7      	bcc.n	800251c <main+0x8c>
		   }
		}
		DS18B20_delay = HAL_GetTick();
 800256c:	f001 fb46 	bl	8003bfc <HAL_GetTick>
 8002570:	6278      	str	r0, [r7, #36]	; 0x24
	 }


	 if((HAL_GetTick() - HAL_GPIO_TogglePin_delay) > 2000)
 8002572:	f001 fb43 	bl	8003bfc <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002580:	d907      	bls.n	8002592 <main+0x102>
	 {
		 HAL_GPIO_TogglePin(LED_Pin_GPIO_Port, LED_Pin_Pin);
 8002582:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002586:	4895      	ldr	r0, [pc, #596]	; (80027dc <main+0x34c>)
 8002588:	f002 fb05 	bl	8004b96 <HAL_GPIO_TogglePin>
		 HAL_GPIO_TogglePin_delay = HAL_GetTick();
 800258c:	f001 fb36 	bl	8003bfc <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]


//////////////////////////////////////////////////////////////////////////////
//					Measuring_Current

	  if((HAL_GetTick() - ADC_delay) > 250)
 8002592:	f001 fb33 	bl	8003bfc <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2bfa      	cmp	r3, #250	; 0xfa
 800259e:	d95b      	bls.n	8002658 <main+0x1c8>
	   {
		  HAL_ADC_PollForConversion(&hadc1,1000);
 80025a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80025a4:	488e      	ldr	r0, [pc, #568]	; (80027e0 <main+0x350>)
 80025a6:	f001 fcdd 	bl	8003f64 <HAL_ADC_PollForConversion>
		  readValue = HAL_ADC_GetValue(&hadc1);
 80025aa:	488d      	ldr	r0, [pc, #564]	; (80027e0 <main+0x350>)
 80025ac:	f001 fde0 	bl	8004170 <HAL_ADC_GetValue>
 80025b0:	4603      	mov	r3, r0
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	4b8b      	ldr	r3, [pc, #556]	; (80027e4 <main+0x354>)
 80025b6:	801a      	strh	r2, [r3, #0]
		  rawVoltage = (float) readValue * 3.300 / 4105;
 80025b8:	4b8a      	ldr	r3, [pc, #552]	; (80027e4 <main+0x354>)
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fe fb93 	bl	8000ce8 <__aeabi_ui2f>
 80025c2:	4603      	mov	r3, r0
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fd ff39 	bl	800043c <__aeabi_f2d>
 80025ca:	a37d      	add	r3, pc, #500	; (adr r3, 80027c0 <main+0x330>)
 80025cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d0:	f7fd ff8c 	bl	80004ec <__aeabi_dmul>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4610      	mov	r0, r2
 80025da:	4619      	mov	r1, r3
 80025dc:	a37a      	add	r3, pc, #488	; (adr r3, 80027c8 <main+0x338>)
 80025de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e2:	f7fe f8ad 	bl	8000740 <__aeabi_ddiv>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4610      	mov	r0, r2
 80025ec:	4619      	mov	r1, r3
 80025ee:	f7fe fa75 	bl	8000adc <__aeabi_d2f>
 80025f2:	4603      	mov	r3, r0
 80025f4:	4a7c      	ldr	r2, [pc, #496]	; (80027e8 <main+0x358>)
 80025f6:	6013      	str	r3, [r2, #0]
		  current =(rawVoltage - 2.500)/sensitivity;
 80025f8:	4b7b      	ldr	r3, [pc, #492]	; (80027e8 <main+0x358>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fd ff1d 	bl	800043c <__aeabi_f2d>
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	4b79      	ldr	r3, [pc, #484]	; (80027ec <main+0x35c>)
 8002608:	f7fd fdb8 	bl	800017c <__aeabi_dsub>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	4614      	mov	r4, r2
 8002612:	461d      	mov	r5, r3
 8002614:	4b76      	ldr	r3, [pc, #472]	; (80027f0 <main+0x360>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f7fd ff0f 	bl	800043c <__aeabi_f2d>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	4620      	mov	r0, r4
 8002624:	4629      	mov	r1, r5
 8002626:	f7fe f88b 	bl	8000740 <__aeabi_ddiv>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	4610      	mov	r0, r2
 8002630:	4619      	mov	r1, r3
 8002632:	f7fe fa53 	bl	8000adc <__aeabi_d2f>
 8002636:	4603      	mov	r3, r0
 8002638:	4a6e      	ldr	r2, [pc, #440]	; (80027f4 <main+0x364>)
 800263a:	6013      	str	r3, [r2, #0]
		  sprintf(current_string,"%.2f A ", current);
 800263c:	4b6d      	ldr	r3, [pc, #436]	; (80027f4 <main+0x364>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f7fd fefb 	bl	800043c <__aeabi_f2d>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	496b      	ldr	r1, [pc, #428]	; (80027f8 <main+0x368>)
 800264c:	486b      	ldr	r0, [pc, #428]	; (80027fc <main+0x36c>)
 800264e:	f006 fa2b 	bl	8008aa8 <siprintf>

		  ADC_delay = HAL_GetTick();
 8002652:	f001 fad3 	bl	8003bfc <HAL_GetTick>
 8002656:	61f8      	str	r0, [r7, #28]
	   }

///////////////////////////////////////////////////////////////////////////////
// 					GPS_Update_Function

	  if((HAL_GetTick() - NEO6_delay) > 500)
 8002658:	f001 fad0 	bl	8003bfc <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	6a3b      	ldr	r3, [r7, #32]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002666:	f240 8081 	bls.w	800276c <main+0x2dc>
	  {
	  NEO6_Task(&GpsState);
 800266a:	4865      	ldr	r0, [pc, #404]	; (8002800 <main+0x370>)
 800266c:	f7ff fc90 	bl	8001f90 <NEO6_Task>

	  	  if (GpsState.SpeedKilometers >= MIN_SPEED_KM)
 8002670:	4b63      	ldr	r3, [pc, #396]	; (8002800 <main+0x370>)
 8002672:	e9d3 0176 	ldrd	r0, r1, [r3, #472]	; 0x1d8
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	4b62      	ldr	r3, [pc, #392]	; (8002804 <main+0x374>)
 800267c:	f7fe f9bc 	bl	80009f8 <__aeabi_dcmpge>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d04b      	beq.n	800271e <main+0x28e>
	  	  {
	  		  	  if ( (last_latitude != 0.0) && (last_longitude != 0.0))
 8002686:	4b60      	ldr	r3, [pc, #384]	; (8002808 <main+0x378>)
 8002688:	e9d3 0100 	ldrd	r0, r1, [r3]
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	f7fe f992 	bl	80009bc <__aeabi_dcmpeq>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d133      	bne.n	8002706 <main+0x276>
 800269e:	4b5b      	ldr	r3, [pc, #364]	; (800280c <main+0x37c>)
 80026a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026a4:	f04f 0200 	mov.w	r2, #0
 80026a8:	f04f 0300 	mov.w	r3, #0
 80026ac:	f7fe f986 	bl	80009bc <__aeabi_dcmpeq>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d127      	bne.n	8002706 <main+0x276>
	  		  	  {
	  		  		  // Calculate the trip distance using the haversine function
	  		  		  current_distance = haversine_km(last_latitude, last_longitude, GpsState.Latitude, GpsState.Longitude);
 80026b6:	4b54      	ldr	r3, [pc, #336]	; (8002808 <main+0x378>)
 80026b8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80026bc:	4b53      	ldr	r3, [pc, #332]	; (800280c <main+0x37c>)
 80026be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80026c2:	4b4f      	ldr	r3, [pc, #316]	; (8002800 <main+0x370>)
 80026c4:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 80026c8:	494d      	ldr	r1, [pc, #308]	; (8002800 <main+0x370>)
 80026ca:	e9d1 0168 	ldrd	r0, r1, [r1, #416]	; 0x1a0
 80026ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80026d2:	e9cd 2300 	strd	r2, r3, [sp]
 80026d6:	4642      	mov	r2, r8
 80026d8:	464b      	mov	r3, r9
 80026da:	4620      	mov	r0, r4
 80026dc:	4629      	mov	r1, r5
 80026de:	f7ff fddf 	bl	80022a0 <haversine_km>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	494a      	ldr	r1, [pc, #296]	; (8002810 <main+0x380>)
 80026e8:	e9c1 2300 	strd	r2, r3, [r1]
	  		  		  GpsState.total_distance += current_distance;
 80026ec:	4b44      	ldr	r3, [pc, #272]	; (8002800 <main+0x370>)
 80026ee:	e9d3 0172 	ldrd	r0, r1, [r3, #456]	; 0x1c8
 80026f2:	4b47      	ldr	r3, [pc, #284]	; (8002810 <main+0x380>)
 80026f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f8:	f7fd fd42 	bl	8000180 <__adddf3>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	493f      	ldr	r1, [pc, #252]	; (8002800 <main+0x370>)
 8002702:	e9c1 2372 	strd	r2, r3, [r1, #456]	; 0x1c8
	  		  	  }

	  		  	  last_latitude = GpsState.Latitude;
 8002706:	4b3e      	ldr	r3, [pc, #248]	; (8002800 <main+0x370>)
 8002708:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 800270c:	493e      	ldr	r1, [pc, #248]	; (8002808 <main+0x378>)
 800270e:	e9c1 2300 	strd	r2, r3, [r1]
	  		  	  last_longitude = GpsState.Longitude;
 8002712:	4b3b      	ldr	r3, [pc, #236]	; (8002800 <main+0x370>)
 8002714:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	; 0x1a0
 8002718:	493c      	ldr	r1, [pc, #240]	; (800280c <main+0x37c>)
 800271a:	e9c1 2300 	strd	r2, r3, [r1]
	  	  }


	  	  sprintf(total_distance_string, "%.3f km", GpsState.total_distance); // write into the string the total distance with 2 decimal precision
 800271e:	4b38      	ldr	r3, [pc, #224]	; (8002800 <main+0x370>)
 8002720:	e9d3 2372 	ldrd	r2, r3, [r3, #456]	; 0x1c8
 8002724:	493b      	ldr	r1, [pc, #236]	; (8002814 <main+0x384>)
 8002726:	483c      	ldr	r0, [pc, #240]	; (8002818 <main+0x388>)
 8002728:	f006 f9be 	bl	8008aa8 <siprintf>
	  	  sprintf(LatitudeString, "%f", GpsState.Latitude);
 800272c:	4b34      	ldr	r3, [pc, #208]	; (8002800 <main+0x370>)
 800272e:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 8002732:	493a      	ldr	r1, [pc, #232]	; (800281c <main+0x38c>)
 8002734:	483a      	ldr	r0, [pc, #232]	; (8002820 <main+0x390>)
 8002736:	f006 f9b7 	bl	8008aa8 <siprintf>
	  	  sprintf(LongitudeString, "%f", GpsState.Longitude);
 800273a:	4b31      	ldr	r3, [pc, #196]	; (8002800 <main+0x370>)
 800273c:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	; 0x1a0
 8002740:	4936      	ldr	r1, [pc, #216]	; (800281c <main+0x38c>)
 8002742:	4838      	ldr	r0, [pc, #224]	; (8002824 <main+0x394>)
 8002744:	f006 f9b0 	bl	8008aa8 <siprintf>
	  	  sprintf(SpeedString, "%.2f km/h", GpsState.SpeedKilometers);
 8002748:	4b2d      	ldr	r3, [pc, #180]	; (8002800 <main+0x370>)
 800274a:	e9d3 2376 	ldrd	r2, r3, [r3, #472]	; 0x1d8
 800274e:	4936      	ldr	r1, [pc, #216]	; (8002828 <main+0x398>)
 8002750:	4836      	ldr	r0, [pc, #216]	; (800282c <main+0x39c>)
 8002752:	f006 f9a9 	bl	8008aa8 <siprintf>
	  	  sprintf(SatelitesNumberString, "%d", GpsState.SatelitesNumber);
 8002756:	4b2a      	ldr	r3, [pc, #168]	; (8002800 <main+0x370>)
 8002758:	f893 31e0 	ldrb.w	r3, [r3, #480]	; 0x1e0
 800275c:	461a      	mov	r2, r3
 800275e:	4934      	ldr	r1, [pc, #208]	; (8002830 <main+0x3a0>)
 8002760:	4834      	ldr	r0, [pc, #208]	; (8002834 <main+0x3a4>)
 8002762:	f006 f9a1 	bl	8008aa8 <siprintf>
	  	  NEO6_delay = HAL_GetTick();
 8002766:	f001 fa49 	bl	8003bfc <HAL_GetTick>
 800276a:	6238      	str	r0, [r7, #32]
	  }

/////////////////////////////////////////////////////////////////////////////////
//    					Handle_Button_Update_Displayed_Pages

	  if(HAL_GetTick() - buttonPressTime >= 200)
 800276c:	f001 fa46 	bl	8003bfc <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2bc7      	cmp	r3, #199	; 0xc7
 8002778:	d962      	bls.n	8002840 <main+0x3b0>
	   {
		  if(buttonPressed)
 800277a:	4b2f      	ldr	r3, [pc, #188]	; (8002838 <main+0x3a8>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	d015      	beq.n	80027b0 <main+0x320>
		   {
			  buttonPressed = 0;
 8002784:	4b2c      	ldr	r3, [pc, #176]	; (8002838 <main+0x3a8>)
 8002786:	2200      	movs	r2, #0
 8002788:	701a      	strb	r2, [r3, #0]
			  if(++currentPage >= NUM_PAGES)
 800278a:	4b2c      	ldr	r3, [pc, #176]	; (800283c <main+0x3ac>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	b2db      	uxtb	r3, r3
 8002790:	3301      	adds	r3, #1
 8002792:	b2db      	uxtb	r3, r3
 8002794:	4a29      	ldr	r2, [pc, #164]	; (800283c <main+0x3ac>)
 8002796:	4619      	mov	r1, r3
 8002798:	7011      	strb	r1, [r2, #0]
 800279a:	2b03      	cmp	r3, #3
 800279c:	d902      	bls.n	80027a4 <main+0x314>
			  {
				  currentPage = PAGE_ONE;
 800279e:	4b27      	ldr	r3, [pc, #156]	; (800283c <main+0x3ac>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	701a      	strb	r2, [r3, #0]
			  }
	         displayPage(currentPage);
 80027a4:	4b25      	ldr	r3, [pc, #148]	; (800283c <main+0x3ac>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 f8fe 	bl	80029ac <displayPage>
		   }
		 SSD1306_UpdateScreen();
 80027b0:	f000 fd92 	bl	80032d8 <SSD1306_UpdateScreen>
	     buttonPressTime = HAL_GetTick();
 80027b4:	f001 fa22 	bl	8003bfc <HAL_GetTick>
 80027b8:	6178      	str	r0, [r7, #20]
 80027ba:	e041      	b.n	8002840 <main+0x3b0>
 80027bc:	f3af 8000 	nop.w
 80027c0:	66666666 	.word	0x66666666
 80027c4:	400a6666 	.word	0x400a6666
 80027c8:	00000000 	.word	0x00000000
 80027cc:	40b00900 	.word	0x40b00900
 80027d0:	200005e8 	.word	0x200005e8
 80027d4:	200005ec 	.word	0x200005ec
 80027d8:	0800ce0c 	.word	0x0800ce0c
 80027dc:	40011000 	.word	0x40011000
 80027e0:	20000214 	.word	0x20000214
 80027e4:	20000590 	.word	0x20000590
 80027e8:	20000594 	.word	0x20000594
 80027ec:	40040000 	.word	0x40040000
 80027f0:	20000010 	.word	0x20000010
 80027f4:	20000598 	.word	0x20000598
 80027f8:	0800ce14 	.word	0x0800ce14
 80027fc:	2000059c 	.word	0x2000059c
 8002800:	20000310 	.word	0x20000310
 8002804:	3ff80000 	.word	0x3ff80000
 8002808:	20000300 	.word	0x20000300
 800280c:	20000308 	.word	0x20000308
 8002810:	200005e0 	.word	0x200005e0
 8002814:	0800ce1c 	.word	0x0800ce1c
 8002818:	200005bc 	.word	0x200005bc
 800281c:	0800ce24 	.word	0x0800ce24
 8002820:	20000510 	.word	0x20000510
 8002824:	20000530 	.word	0x20000530
 8002828:	0800ce28 	.word	0x0800ce28
 800282c:	20000550 	.word	0x20000550
 8002830:	0800ce34 	.word	0x0800ce34
 8002834:	20000570 	.word	0x20000570
 8002838:	200002f5 	.word	0x200002f5
 800283c:	200002f4 	.word	0x200002f4
	   }

///////////////////////////////////////////////////////////////////////////////////
//						Update_Information_OnThe_Current_Page

	  if(HAL_GetTick() - updateScreenTime >= 250)
 8002840:	f001 f9dc 	bl	8003bfc <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2bf9      	cmp	r3, #249	; 0xf9
 800284c:	f67f ae4f 	bls.w	80024ee <main+0x5e>
	      {
	          displayPage(currentPage);  // This is where you update information on the current page
 8002850:	4b04      	ldr	r3, [pc, #16]	; (8002864 <main+0x3d4>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	4618      	mov	r0, r3
 8002858:	f000 f8a8 	bl	80029ac <displayPage>
	          updateScreenTime = HAL_GetTick();
 800285c:	f001 f9ce 	bl	8003bfc <HAL_GetTick>
 8002860:	61b8      	str	r0, [r7, #24]
	 if((HAL_GetTick() - DS18B20_delay) > 250)
 8002862:	e644      	b.n	80024ee <main+0x5e>
 8002864:	200002f4 	.word	0x200002f4

08002868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b094      	sub	sp, #80	; 0x50
 800286c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800286e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002872:	2228      	movs	r2, #40	; 0x28
 8002874:	2100      	movs	r1, #0
 8002876:	4618      	mov	r0, r3
 8002878:	f006 f979 	bl	8008b6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800287c:	f107 0314 	add.w	r3, r7, #20
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	609a      	str	r2, [r3, #8]
 8002888:	60da      	str	r2, [r3, #12]
 800288a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800288c:	1d3b      	adds	r3, r7, #4
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	605a      	str	r2, [r3, #4]
 8002894:	609a      	str	r2, [r3, #8]
 8002896:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002898:	2301      	movs	r3, #1
 800289a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800289c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80028a2:	2300      	movs	r3, #0
 80028a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028a6:	2301      	movs	r3, #1
 80028a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028aa:	2302      	movs	r3, #2
 80028ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80028b4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80028b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028be:	4618      	mov	r0, r3
 80028c0:	f002 ff64 	bl	800578c <HAL_RCC_OscConfig>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <SystemClock_Config+0x66>
  {
    Error_Handler();
 80028ca:	f000 f9bb 	bl	8002c44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028ce:	230f      	movs	r3, #15
 80028d0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028d2:	2302      	movs	r3, #2
 80028d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028de:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028e0:	2300      	movs	r3, #0
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028e4:	f107 0314 	add.w	r3, r7, #20
 80028e8:	2102      	movs	r1, #2
 80028ea:	4618      	mov	r0, r3
 80028ec:	f003 f9d0 	bl	8005c90 <HAL_RCC_ClockConfig>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80028f6:	f000 f9a5 	bl	8002c44 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80028fa:	2302      	movs	r3, #2
 80028fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80028fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002902:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002904:	1d3b      	adds	r3, r7, #4
 8002906:	4618      	mov	r0, r3
 8002908:	f003 fb50 	bl	8005fac <HAL_RCCEx_PeriphCLKConfig>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002912:	f000 f997 	bl	8002c44 <Error_Handler>
  }
}
 8002916:	bf00      	nop
 8002918:	3750      	adds	r7, #80	; 0x50
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  if(huart == GpsState.neo6_huart)
 8002928:	4b05      	ldr	r3, [pc, #20]	; (8002940 <HAL_UART_RxCpltCallback+0x20>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	429a      	cmp	r2, r3
 8002930:	d102      	bne.n	8002938 <HAL_UART_RxCpltCallback+0x18>
  {
    NEO6_ReceiveUartChar(&GpsState);
 8002932:	4803      	ldr	r0, [pc, #12]	; (8002940 <HAL_UART_RxCpltCallback+0x20>)
 8002934:	f7fe ff7c 	bl	8001830 <NEO6_ReceiveUartChar>
  }
}
 8002938:	bf00      	nop
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	20000310 	.word	0x20000310

08002944 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == P1_Pin)
 800294e:	88fb      	ldrh	r3, [r7, #6]
 8002950:	2b08      	cmp	r3, #8
 8002952:	d120      	bne.n	8002996 <HAL_GPIO_EXTI_Callback+0x52>
    {
        uint16_t currentTime = HAL_GetTick();
 8002954:	f001 f952 	bl	8003bfc <HAL_GetTick>
 8002958:	4603      	mov	r3, r0
 800295a:	81fb      	strh	r3, [r7, #14]

        if (currentTime - lastButtonPressTime >= BUTTON_DEBOUNCE_DELAY)
 800295c:	89fb      	ldrh	r3, [r7, #14]
 800295e:	4a10      	ldr	r2, [pc, #64]	; (80029a0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002960:	8812      	ldrh	r2, [r2, #0]
 8002962:	b292      	uxth	r2, r2
 8002964:	1a9b      	subs	r3, r3, r2
 8002966:	2bc7      	cmp	r3, #199	; 0xc7
 8002968:	dd15      	ble.n	8002996 <HAL_GPIO_EXTI_Callback+0x52>
        {
            lastButtonPressTime = currentTime;
 800296a:	4a0d      	ldr	r2, [pc, #52]	; (80029a0 <HAL_GPIO_EXTI_Callback+0x5c>)
 800296c:	89fb      	ldrh	r3, [r7, #14]
 800296e:	8013      	strh	r3, [r2, #0]
            buttonState = !buttonState;
 8002970:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <HAL_GPIO_EXTI_Callback+0x60>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	bf0c      	ite	eq
 800297a:	2301      	moveq	r3, #1
 800297c:	2300      	movne	r3, #0
 800297e:	b2db      	uxtb	r3, r3
 8002980:	461a      	mov	r2, r3
 8002982:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <HAL_GPIO_EXTI_Callback+0x60>)
 8002984:	701a      	strb	r2, [r3, #0]

            if(buttonState)
 8002986:	4b07      	ldr	r3, [pc, #28]	; (80029a4 <HAL_GPIO_EXTI_Callback+0x60>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	d002      	beq.n	8002996 <HAL_GPIO_EXTI_Callback+0x52>
            {
                buttonPressed = 1;
 8002990:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <HAL_GPIO_EXTI_Callback+0x64>)
 8002992:	2201      	movs	r2, #1
 8002994:	701a      	strb	r2, [r3, #0]
            }
        }
    }
}
 8002996:	bf00      	nop
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	200002f6 	.word	0x200002f6
 80029a4:	200002f8 	.word	0x200002f8
 80029a8:	200002f5 	.word	0x200002f5

080029ac <displayPage>:


void displayPage(PAGE page)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	71fb      	strb	r3, [r7, #7]
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 80029b6:	2000      	movs	r0, #0
 80029b8:	f000 fcbc 	bl	8003334 <SSD1306_Fill>

    switch(page)
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	f200 810c 	bhi.w	8002bdc <displayPage+0x230>
 80029c4:	a201      	add	r2, pc, #4	; (adr r2, 80029cc <displayPage+0x20>)
 80029c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ca:	bf00      	nop
 80029cc:	080029dd 	.word	0x080029dd
 80029d0:	08002adb 	.word	0x08002adb
 80029d4:	08002b25 	.word	0x08002b25
 80029d8:	08002b93 	.word	0x08002b93
    {
        case PAGE_ONE:

    		 SSD1306_GotoXY (0, 0);
 80029dc:	2100      	movs	r1, #0
 80029de:	2000      	movs	r0, #0
 80029e0:	f000 fd1e 	bl	8003420 <SSD1306_GotoXY>
    		 SSD1306_Puts ("TEM:", &Font_7x10, 1);
 80029e4:	2201      	movs	r2, #1
 80029e6:	4981      	ldr	r1, [pc, #516]	; (8002bec <displayPage+0x240>)
 80029e8:	4881      	ldr	r0, [pc, #516]	; (8002bf0 <displayPage+0x244>)
 80029ea:	f000 fdaf 	bl	800354c <SSD1306_Puts>
    	     SSD1306_GotoXY (28,0);
 80029ee:	2100      	movs	r1, #0
 80029f0:	201c      	movs	r0, #28
 80029f2:	f000 fd15 	bl	8003420 <SSD1306_GotoXY>
    	     SSD1306_Puts (temp_string, &Font_7x10, 1);
 80029f6:	2201      	movs	r2, #1
 80029f8:	497c      	ldr	r1, [pc, #496]	; (8002bec <displayPage+0x240>)
 80029fa:	487e      	ldr	r0, [pc, #504]	; (8002bf4 <displayPage+0x248>)
 80029fc:	f000 fda6 	bl	800354c <SSD1306_Puts>

    	     SSD1306_GotoXY (00, 10);
 8002a00:	210a      	movs	r1, #10
 8002a02:	2000      	movs	r0, #0
 8002a04:	f000 fd0c 	bl	8003420 <SSD1306_GotoXY>
    	   	 SSD1306_Puts ("CURR:", &Font_7x10, 1);
 8002a08:	2201      	movs	r2, #1
 8002a0a:	4978      	ldr	r1, [pc, #480]	; (8002bec <displayPage+0x240>)
 8002a0c:	487a      	ldr	r0, [pc, #488]	; (8002bf8 <displayPage+0x24c>)
 8002a0e:	f000 fd9d 	bl	800354c <SSD1306_Puts>
    	     SSD1306_GotoXY (40,10);
 8002a12:	210a      	movs	r1, #10
 8002a14:	2028      	movs	r0, #40	; 0x28
 8002a16:	f000 fd03 	bl	8003420 <SSD1306_GotoXY>
    	     SSD1306_Puts (current_string, &Font_7x10, 1);
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	4973      	ldr	r1, [pc, #460]	; (8002bec <displayPage+0x240>)
 8002a1e:	4877      	ldr	r0, [pc, #476]	; (8002bfc <displayPage+0x250>)
 8002a20:	f000 fd94 	bl	800354c <SSD1306_Puts>


    	     SSD1306_GotoXY (0, 20);
 8002a24:	2114      	movs	r1, #20
 8002a26:	2000      	movs	r0, #0
 8002a28:	f000 fcfa 	bl	8003420 <SSD1306_GotoXY>
    	     SSD1306_Puts ("S_GPS:", &Font_7x10, 1);
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	496f      	ldr	r1, [pc, #444]	; (8002bec <displayPage+0x240>)
 8002a30:	4873      	ldr	r0, [pc, #460]	; (8002c00 <displayPage+0x254>)
 8002a32:	f000 fd8b 	bl	800354c <SSD1306_Puts>
    	     SSD1306_GotoXY (40,20);
 8002a36:	2114      	movs	r1, #20
 8002a38:	2028      	movs	r0, #40	; 0x28
 8002a3a:	f000 fcf1 	bl	8003420 <SSD1306_GotoXY>
    	     SSD1306_Puts (SpeedString, &Font_7x10, 1);
 8002a3e:	2201      	movs	r2, #1
 8002a40:	496a      	ldr	r1, [pc, #424]	; (8002bec <displayPage+0x240>)
 8002a42:	4870      	ldr	r0, [pc, #448]	; (8002c04 <displayPage+0x258>)
 8002a44:	f000 fd82 	bl	800354c <SSD1306_Puts>

    	     SSD1306_GotoXY (0, 30);
 8002a48:	211e      	movs	r1, #30
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	f000 fce8 	bl	8003420 <SSD1306_GotoXY>
    	     SSD1306_Puts ("DIS:", &Font_7x10, 1);
 8002a50:	2201      	movs	r2, #1
 8002a52:	4966      	ldr	r1, [pc, #408]	; (8002bec <displayPage+0x240>)
 8002a54:	486c      	ldr	r0, [pc, #432]	; (8002c08 <displayPage+0x25c>)
 8002a56:	f000 fd79 	bl	800354c <SSD1306_Puts>
    	     SSD1306_GotoXY (35,30);
 8002a5a:	211e      	movs	r1, #30
 8002a5c:	2023      	movs	r0, #35	; 0x23
 8002a5e:	f000 fcdf 	bl	8003420 <SSD1306_GotoXY>
    	     SSD1306_Puts (total_distance_string, &Font_7x10, 1);
 8002a62:	2201      	movs	r2, #1
 8002a64:	4961      	ldr	r1, [pc, #388]	; (8002bec <displayPage+0x240>)
 8002a66:	4869      	ldr	r0, [pc, #420]	; (8002c0c <displayPage+0x260>)
 8002a68:	f000 fd70 	bl	800354c <SSD1306_Puts>

    	     SSD1306_GotoXY (0, 40);
 8002a6c:	2128      	movs	r1, #40	; 0x28
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f000 fcd6 	bl	8003420 <SSD1306_GotoXY>
    	   	 SSD1306_Puts ("LAT:", &Font_7x10, 1);
 8002a74:	2201      	movs	r2, #1
 8002a76:	495d      	ldr	r1, [pc, #372]	; (8002bec <displayPage+0x240>)
 8002a78:	4865      	ldr	r0, [pc, #404]	; (8002c10 <displayPage+0x264>)
 8002a7a:	f000 fd67 	bl	800354c <SSD1306_Puts>
    	     SSD1306_GotoXY (35,40);
 8002a7e:	2128      	movs	r1, #40	; 0x28
 8002a80:	2023      	movs	r0, #35	; 0x23
 8002a82:	f000 fccd 	bl	8003420 <SSD1306_GotoXY>
    	     SSD1306_Puts (LatitudeString, &Font_7x10, 1);
 8002a86:	2201      	movs	r2, #1
 8002a88:	4958      	ldr	r1, [pc, #352]	; (8002bec <displayPage+0x240>)
 8002a8a:	4862      	ldr	r0, [pc, #392]	; (8002c14 <displayPage+0x268>)
 8002a8c:	f000 fd5e 	bl	800354c <SSD1306_Puts>

    	     SSD1306_GotoXY (0, 50);
 8002a90:	2132      	movs	r1, #50	; 0x32
 8002a92:	2000      	movs	r0, #0
 8002a94:	f000 fcc4 	bl	8003420 <SSD1306_GotoXY>
    	   	 SSD1306_Puts ("LON:", &Font_7x10, 1);
 8002a98:	2201      	movs	r2, #1
 8002a9a:	4954      	ldr	r1, [pc, #336]	; (8002bec <displayPage+0x240>)
 8002a9c:	485e      	ldr	r0, [pc, #376]	; (8002c18 <displayPage+0x26c>)
 8002a9e:	f000 fd55 	bl	800354c <SSD1306_Puts>
    	     SSD1306_GotoXY (35,50);
 8002aa2:	2132      	movs	r1, #50	; 0x32
 8002aa4:	2023      	movs	r0, #35	; 0x23
 8002aa6:	f000 fcbb 	bl	8003420 <SSD1306_GotoXY>
    	     SSD1306_Puts (LongitudeString, &Font_7x10, 1);
 8002aaa:	2201      	movs	r2, #1
 8002aac:	494f      	ldr	r1, [pc, #316]	; (8002bec <displayPage+0x240>)
 8002aae:	485b      	ldr	r0, [pc, #364]	; (8002c1c <displayPage+0x270>)
 8002ab0:	f000 fd4c 	bl	800354c <SSD1306_Puts>


    	     SSD1306_GotoXY (85, 0);
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	2055      	movs	r0, #85	; 0x55
 8002ab8:	f000 fcb2 	bl	8003420 <SSD1306_GotoXY>
    	     SSD1306_Puts ("S:", &Font_7x10, 1);
 8002abc:	2201      	movs	r2, #1
 8002abe:	494b      	ldr	r1, [pc, #300]	; (8002bec <displayPage+0x240>)
 8002ac0:	4857      	ldr	r0, [pc, #348]	; (8002c20 <displayPage+0x274>)
 8002ac2:	f000 fd43 	bl	800354c <SSD1306_Puts>
    	     SSD1306_GotoXY (100,0);
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	2064      	movs	r0, #100	; 0x64
 8002aca:	f000 fca9 	bl	8003420 <SSD1306_GotoXY>
    	     SSD1306_Puts (SatelitesNumberString, &Font_7x10, 1);
 8002ace:	2201      	movs	r2, #1
 8002ad0:	4946      	ldr	r1, [pc, #280]	; (8002bec <displayPage+0x240>)
 8002ad2:	4854      	ldr	r0, [pc, #336]	; (8002c24 <displayPage+0x278>)
 8002ad4:	f000 fd3a 	bl	800354c <SSD1306_Puts>
    	     break;
 8002ad8:	e081      	b.n	8002bde <displayPage+0x232>


        case PAGE_TWO:


            SSD1306_GotoXY (23 , 0);
 8002ada:	2100      	movs	r1, #0
 8002adc:	2017      	movs	r0, #23
 8002ade:	f000 fc9f 	bl	8003420 <SSD1306_GotoXY>
            SSD1306_Puts ("TEMPERATURE:", &Font_7x10, 1);
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	4941      	ldr	r1, [pc, #260]	; (8002bec <displayPage+0x240>)
 8002ae6:	4850      	ldr	r0, [pc, #320]	; (8002c28 <displayPage+0x27c>)
 8002ae8:	f000 fd30 	bl	800354c <SSD1306_Puts>
            SSD1306_GotoXY (20 ,10);
 8002aec:	210a      	movs	r1, #10
 8002aee:	2014      	movs	r0, #20
 8002af0:	f000 fc96 	bl	8003420 <SSD1306_GotoXY>
            SSD1306_Puts (temp_string, &Font_11x18, 1);
 8002af4:	2201      	movs	r2, #1
 8002af6:	494d      	ldr	r1, [pc, #308]	; (8002c2c <displayPage+0x280>)
 8002af8:	483e      	ldr	r0, [pc, #248]	; (8002bf4 <displayPage+0x248>)
 8002afa:	f000 fd27 	bl	800354c <SSD1306_Puts>

            SSD1306_GotoXY (33 , 30);
 8002afe:	211e      	movs	r1, #30
 8002b00:	2021      	movs	r0, #33	; 0x21
 8002b02:	f000 fc8d 	bl	8003420 <SSD1306_GotoXY>
            SSD1306_Puts ("CURRENT:", &Font_7x10, 1);
 8002b06:	2201      	movs	r2, #1
 8002b08:	4938      	ldr	r1, [pc, #224]	; (8002bec <displayPage+0x240>)
 8002b0a:	4849      	ldr	r0, [pc, #292]	; (8002c30 <displayPage+0x284>)
 8002b0c:	f000 fd1e 	bl	800354c <SSD1306_Puts>
            SSD1306_GotoXY (28 ,40);
 8002b10:	2128      	movs	r1, #40	; 0x28
 8002b12:	201c      	movs	r0, #28
 8002b14:	f000 fc84 	bl	8003420 <SSD1306_GotoXY>
            SSD1306_Puts (current_string, &Font_11x18, 1);
 8002b18:	2201      	movs	r2, #1
 8002b1a:	4944      	ldr	r1, [pc, #272]	; (8002c2c <displayPage+0x280>)
 8002b1c:	4837      	ldr	r0, [pc, #220]	; (8002bfc <displayPage+0x250>)
 8002b1e:	f000 fd15 	bl	800354c <SSD1306_Puts>
            break;
 8002b22:	e05c      	b.n	8002bde <displayPage+0x232>



        case PAGE_THREE:

            SSD1306_GotoXY (33, 0);
 8002b24:	2100      	movs	r1, #0
 8002b26:	2021      	movs	r0, #33	; 0x21
 8002b28:	f000 fc7a 	bl	8003420 <SSD1306_GotoXY>
            SSD1306_Puts ("SPEED GPS:", &Font_7x10, 1);
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	492f      	ldr	r1, [pc, #188]	; (8002bec <displayPage+0x240>)
 8002b30:	4840      	ldr	r0, [pc, #256]	; (8002c34 <displayPage+0x288>)
 8002b32:	f000 fd0b 	bl	800354c <SSD1306_Puts>
            SSD1306_GotoXY (18,10);
 8002b36:	210a      	movs	r1, #10
 8002b38:	2012      	movs	r0, #18
 8002b3a:	f000 fc71 	bl	8003420 <SSD1306_GotoXY>
            SSD1306_Puts (SpeedString, &Font_11x18, 1);
 8002b3e:	2201      	movs	r2, #1
 8002b40:	493a      	ldr	r1, [pc, #232]	; (8002c2c <displayPage+0x280>)
 8002b42:	4830      	ldr	r0, [pc, #192]	; (8002c04 <displayPage+0x258>)
 8002b44:	f000 fd02 	bl	800354c <SSD1306_Puts>

            SSD1306_GotoXY (15, 29);
 8002b48:	211d      	movs	r1, #29
 8002b4a:	200f      	movs	r0, #15
 8002b4c:	f000 fc68 	bl	8003420 <SSD1306_GotoXY>
            SSD1306_Puts ("TOTAL DISTANCE:", &Font_7x10, 1);
 8002b50:	2201      	movs	r2, #1
 8002b52:	4926      	ldr	r1, [pc, #152]	; (8002bec <displayPage+0x240>)
 8002b54:	4838      	ldr	r0, [pc, #224]	; (8002c38 <displayPage+0x28c>)
 8002b56:	f000 fcf9 	bl	800354c <SSD1306_Puts>
            SSD1306_GotoXY (15,39);
 8002b5a:	2127      	movs	r1, #39	; 0x27
 8002b5c:	200f      	movs	r0, #15
 8002b5e:	f000 fc5f 	bl	8003420 <SSD1306_GotoXY>
            SSD1306_Puts (total_distance_string, &Font_7x10, 1);
 8002b62:	2201      	movs	r2, #1
 8002b64:	4921      	ldr	r1, [pc, #132]	; (8002bec <displayPage+0x240>)
 8002b66:	4829      	ldr	r0, [pc, #164]	; (8002c0c <displayPage+0x260>)
 8002b68:	f000 fcf0 	bl	800354c <SSD1306_Puts>

    	    SSD1306_GotoXY (85, 50);
 8002b6c:	2132      	movs	r1, #50	; 0x32
 8002b6e:	2055      	movs	r0, #85	; 0x55
 8002b70:	f000 fc56 	bl	8003420 <SSD1306_GotoXY>
    	    SSD1306_Puts ("S:", &Font_7x10, 1);
 8002b74:	2201      	movs	r2, #1
 8002b76:	491d      	ldr	r1, [pc, #116]	; (8002bec <displayPage+0x240>)
 8002b78:	4829      	ldr	r0, [pc, #164]	; (8002c20 <displayPage+0x274>)
 8002b7a:	f000 fce7 	bl	800354c <SSD1306_Puts>
    	    SSD1306_GotoXY (100,45);
 8002b7e:	212d      	movs	r1, #45	; 0x2d
 8002b80:	2064      	movs	r0, #100	; 0x64
 8002b82:	f000 fc4d 	bl	8003420 <SSD1306_GotoXY>
    	    SSD1306_Puts (SatelitesNumberString, &Font_11x18, 1);
 8002b86:	2201      	movs	r2, #1
 8002b88:	4928      	ldr	r1, [pc, #160]	; (8002c2c <displayPage+0x280>)
 8002b8a:	4826      	ldr	r0, [pc, #152]	; (8002c24 <displayPage+0x278>)
 8002b8c:	f000 fcde 	bl	800354c <SSD1306_Puts>
            break;
 8002b90:	e025      	b.n	8002bde <displayPage+0x232>



        case PAGE_FOUR:

            SSD1306_GotoXY (25,0 );
 8002b92:	2100      	movs	r1, #0
 8002b94:	2019      	movs	r0, #25
 8002b96:	f000 fc43 	bl	8003420 <SSD1306_GotoXY>
            SSD1306_Puts ("LATITUDE:", &Font_7x10, 1);
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	4913      	ldr	r1, [pc, #76]	; (8002bec <displayPage+0x240>)
 8002b9e:	4827      	ldr	r0, [pc, #156]	; (8002c3c <displayPage+0x290>)
 8002ba0:	f000 fcd4 	bl	800354c <SSD1306_Puts>
            SSD1306_GotoXY (8,10);
 8002ba4:	210a      	movs	r1, #10
 8002ba6:	2008      	movs	r0, #8
 8002ba8:	f000 fc3a 	bl	8003420 <SSD1306_GotoXY>
            SSD1306_Puts (LatitudeString, &Font_11x18, 1);
 8002bac:	2201      	movs	r2, #1
 8002bae:	491f      	ldr	r1, [pc, #124]	; (8002c2c <displayPage+0x280>)
 8002bb0:	4818      	ldr	r0, [pc, #96]	; (8002c14 <displayPage+0x268>)
 8002bb2:	f000 fccb 	bl	800354c <SSD1306_Puts>

            SSD1306_GotoXY (25, 30);
 8002bb6:	211e      	movs	r1, #30
 8002bb8:	2019      	movs	r0, #25
 8002bba:	f000 fc31 	bl	8003420 <SSD1306_GotoXY>
            SSD1306_Puts ("LONGITUDE:", &Font_7x10, 1);
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	490a      	ldr	r1, [pc, #40]	; (8002bec <displayPage+0x240>)
 8002bc2:	481f      	ldr	r0, [pc, #124]	; (8002c40 <displayPage+0x294>)
 8002bc4:	f000 fcc2 	bl	800354c <SSD1306_Puts>
            SSD1306_GotoXY (8,40);
 8002bc8:	2128      	movs	r1, #40	; 0x28
 8002bca:	2008      	movs	r0, #8
 8002bcc:	f000 fc28 	bl	8003420 <SSD1306_GotoXY>
            SSD1306_Puts (LongitudeString, &Font_11x18, 1);
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	4916      	ldr	r1, [pc, #88]	; (8002c2c <displayPage+0x280>)
 8002bd4:	4811      	ldr	r0, [pc, #68]	; (8002c1c <displayPage+0x270>)
 8002bd6:	f000 fcb9 	bl	800354c <SSD1306_Puts>
            break;
 8002bda:	e000      	b.n	8002bde <displayPage+0x232>

        default:
        	// handle the case when "page" has a value other than those above
            break;
 8002bdc:	bf00      	nop
    }

    SSD1306_UpdateScreen();
 8002bde:	f000 fb7b 	bl	80032d8 <SSD1306_UpdateScreen>
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000000 	.word	0x20000000
 8002bf0:	0800ce38 	.word	0x0800ce38
 8002bf4:	200005ec 	.word	0x200005ec
 8002bf8:	0800ce40 	.word	0x0800ce40
 8002bfc:	2000059c 	.word	0x2000059c
 8002c00:	0800ce48 	.word	0x0800ce48
 8002c04:	20000550 	.word	0x20000550
 8002c08:	0800ce50 	.word	0x0800ce50
 8002c0c:	200005bc 	.word	0x200005bc
 8002c10:	0800ce58 	.word	0x0800ce58
 8002c14:	20000510 	.word	0x20000510
 8002c18:	0800ce60 	.word	0x0800ce60
 8002c1c:	20000530 	.word	0x20000530
 8002c20:	0800ce68 	.word	0x0800ce68
 8002c24:	20000570 	.word	0x20000570
 8002c28:	0800ce6c 	.word	0x0800ce6c
 8002c2c:	20000008 	.word	0x20000008
 8002c30:	0800ce7c 	.word	0x0800ce7c
 8002c34:	0800ce88 	.word	0x0800ce88
 8002c38:	0800ce94 	.word	0x0800ce94
 8002c3c:	0800cea4 	.word	0x0800cea4
 8002c40:	0800ceb0 	.word	0x0800ceb0

08002c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c48:	b672      	cpsid	i
}
 8002c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c4c:	e7fe      	b.n	8002c4c <Error_Handler+0x8>
	...

08002c50 <OneWire_Delay>:

//
//	Delay function for constant 1-Wire timings
//
void OneWire_Delay(uint16_t us)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 8002c5a:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <OneWire_Delay+0x2c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= us);
 8002c62:	bf00      	nop
 8002c64:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <OneWire_Delay+0x2c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c6a:	88fb      	ldrh	r3, [r7, #6]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d9f9      	bls.n	8002c64 <OneWire_Delay+0x14>
}
 8002c70:	bf00      	nop
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr
 8002c7c:	20000a08 	.word	0x20000a08

08002c80 <OneWire_BusInputDirection>:

//
//	Bus direction control
//
void OneWire_BusInputDirection(OneWire_t *onewire)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8002c90:	2301      	movs	r3, #1
 8002c92:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	889b      	ldrh	r3, [r3, #4]
 8002c98:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f107 0208 	add.w	r2, r7, #8
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f001 fdc3 	bl	8004830 <HAL_GPIO_Init>
}
 8002caa:	bf00      	nop
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <OneWire_BusOutputDirection>:

void OneWire_BusOutputDirection(OneWire_t *onewire)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b086      	sub	sp, #24
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
 8002cba:	2311      	movs	r3, #17
 8002cbc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	889b      	ldrh	r3, [r3, #4]
 8002cca:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f107 0208 	add.w	r2, r7, #8
 8002cd4:	4611      	mov	r1, r2
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f001 fdaa 	bl	8004830 <HAL_GPIO_Init>
}
 8002cdc:	bf00      	nop
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <OneWire_OutputLow>:

//
//	Bus pin output state control
//
void OneWire_OutputLow(OneWire_t *onewire)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin<<16; // Reset the 1-Wire pin
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	889b      	ldrh	r3, [r3, #4]
 8002cf0:	041a      	lsls	r2, r3, #16
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	611a      	str	r2, [r3, #16]
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr

08002d02 <OneWire_OutputHigh>:

void OneWire_OutputHigh(OneWire_t *onewire)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	889a      	ldrh	r2, [r3, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	611a      	str	r2, [r3, #16]
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr

08002d1e <OneWire_Reset>:
//	Returns:
//	0 - Reset ok
//	1 - Error
//
uint8_t OneWire_Reset(OneWire_t* onewire)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b084      	sub	sp, #16
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
	uint8_t i;

	OneWire_OutputLow(onewire);  // Write bus output low
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7ff ffdc 	bl	8002ce4 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7ff ffc0 	bl	8002cb2 <OneWire_BusOutputDirection>
	OneWire_Delay(480); // Wait 480 us for reset
 8002d32:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8002d36:	f7ff ff8b 	bl	8002c50 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release the bus by switching to input
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7ff ffa0 	bl	8002c80 <OneWire_BusInputDirection>
	OneWire_Delay(70);
 8002d40:	2046      	movs	r0, #70	; 0x46
 8002d42:	f7ff ff85 	bl	8002c50 <OneWire_Delay>

	i = HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin); // Check if bus is low
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	889b      	ldrh	r3, [r3, #4]
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4610      	mov	r0, r2
 8002d52:	f001 fef1 	bl	8004b38 <HAL_GPIO_ReadPin>
 8002d56:	4603      	mov	r3, r0
 8002d58:	73fb      	strb	r3, [r7, #15]
															 // if it's high - no device is presence on the bus
	OneWire_Delay(410);
 8002d5a:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8002d5e:	f7ff ff77 	bl	8002c50 <OneWire_Delay>

	return i;
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <OneWire_WriteBit>:

//
//	Writing/Reading operations
//
void OneWire_WriteBit(OneWire_t* onewire, uint8_t bit)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	460b      	mov	r3, r1
 8002d76:	70fb      	strb	r3, [r7, #3]
	if (bit) // Send '1',
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00f      	beq.n	8002d9e <OneWire_WriteBit+0x32>
	{
		OneWire_OutputLow(onewire);	// Set the bus low
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7ff ffb0 	bl	8002ce4 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff ff94 	bl	8002cb2 <OneWire_BusOutputDirection>
		OneWire_Delay(6);
 8002d8a:	2006      	movs	r0, #6
 8002d8c:	f7ff ff60 	bl	8002c50 <OneWire_Delay>

		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7ff ff75 	bl	8002c80 <OneWire_BusInputDirection>
		OneWire_Delay(64);
 8002d96:	2040      	movs	r0, #64	; 0x40
 8002d98:	f7ff ff5a 	bl	8002c50 <OneWire_Delay>
		OneWire_Delay(60);

		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
		OneWire_Delay(10);
	}
}
 8002d9c:	e00e      	b.n	8002dbc <OneWire_WriteBit+0x50>
		OneWire_OutputLow(onewire); // Set the bus low
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7ff ffa0 	bl	8002ce4 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7ff ff84 	bl	8002cb2 <OneWire_BusOutputDirection>
		OneWire_Delay(60);
 8002daa:	203c      	movs	r0, #60	; 0x3c
 8002dac:	f7ff ff50 	bl	8002c50 <OneWire_Delay>
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f7ff ff65 	bl	8002c80 <OneWire_BusInputDirection>
		OneWire_Delay(10);
 8002db6:	200a      	movs	r0, #10
 8002db8:	f7ff ff4a 	bl	8002c50 <OneWire_Delay>
}
 8002dbc:	bf00      	nop
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <OneWire_ReadBit>:

uint8_t OneWire_ReadBit(OneWire_t* onewire)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0; // Default read bit state is low
 8002dcc:	2300      	movs	r3, #0
 8002dce:	73fb      	strb	r3, [r7, #15]

	OneWire_OutputLow(onewire); // Set low to initiate reading
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7ff ff87 	bl	8002ce4 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7ff ff6b 	bl	8002cb2 <OneWire_BusOutputDirection>
	OneWire_Delay(2);
 8002ddc:	2002      	movs	r0, #2
 8002dde:	f7ff ff37 	bl	8002c50 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release bus for Slave response
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7ff ff4c 	bl	8002c80 <OneWire_BusInputDirection>
	OneWire_Delay(10);
 8002de8:	200a      	movs	r0, #10
 8002dea:	f7ff ff31 	bl	8002c50 <OneWire_Delay>

	if (HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin)) // Read the bus state
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	889b      	ldrh	r3, [r3, #4]
 8002df6:	4619      	mov	r1, r3
 8002df8:	4610      	mov	r0, r2
 8002dfa:	f001 fe9d 	bl	8004b38 <HAL_GPIO_ReadPin>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <OneWire_ReadBit+0x44>
		bit = 1;
 8002e04:	2301      	movs	r3, #1
 8002e06:	73fb      	strb	r3, [r7, #15]

	OneWire_Delay(50); // Wait for end of read cycle
 8002e08:	2032      	movs	r0, #50	; 0x32
 8002e0a:	f7ff ff21 	bl	8002c50 <OneWire_Delay>

	return bit;
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* onewire, uint8_t byte)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	460b      	mov	r3, r1
 8002e22:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8002e24:	2308      	movs	r3, #8
 8002e26:	73fb      	strb	r3, [r7, #15]

	do
	{
		OneWire_WriteBit(onewire, byte & 1); // LSB first
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	4619      	mov	r1, r3
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff ff9a 	bl	8002d6c <OneWire_WriteBit>
		byte >>= 1;
 8002e38:	78fb      	ldrb	r3, [r7, #3]
 8002e3a:	085b      	lsrs	r3, r3, #1
 8002e3c:	70fb      	strb	r3, [r7, #3]
	} while(--i);
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
 8002e40:	3b01      	subs	r3, #1
 8002e42:	73fb      	strb	r3, [r7, #15]
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1ee      	bne.n	8002e28 <OneWire_WriteByte+0x10>
}
 8002e4a:	bf00      	nop
 8002e4c:	bf00      	nop
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* onewire)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8002e5c:	2308      	movs	r3, #8
 8002e5e:	73fb      	strb	r3, [r7, #15]
 8002e60:	2300      	movs	r3, #0
 8002e62:	73bb      	strb	r3, [r7, #14]

	do{
		byte >>= 1;
 8002e64:	7bbb      	ldrb	r3, [r7, #14]
 8002e66:	085b      	lsrs	r3, r3, #1
 8002e68:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff ffaa 	bl	8002dc4 <OneWire_ReadBit>
 8002e70:	4603      	mov	r3, r0
 8002e72:	01db      	lsls	r3, r3, #7
 8002e74:	b25a      	sxtb	r2, r3
 8002e76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	b25b      	sxtb	r3, r3
 8002e7e:	73bb      	strb	r3, [r7, #14]
	} while(--i);
 8002e80:	7bfb      	ldrb	r3, [r7, #15]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	73fb      	strb	r3, [r7, #15]
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1eb      	bne.n	8002e64 <OneWire_ReadByte+0x10>

	return byte;
 8002e8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <OneWire_ResetSearch>:

//
// 1-Wire search operations
//
void OneWire_ResetSearch(OneWire_t* onewire)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
	// Clear the search results
	onewire->LastDiscrepancy = 0;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	719a      	strb	r2, [r3, #6]
	onewire->LastDeviceFlag = 0;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	721a      	strb	r2, [r3, #8]
	onewire->LastFamilyDiscrepancy = 0;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	71da      	strb	r2, [r3, #7]
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr

08002eba <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* onewire, uint8_t command)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b084      	sub	sp, #16
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	70fb      	strb	r3, [r7, #3]
	uint8_t id_bit_number;
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	id_bit_number = 1;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	733b      	strb	r3, [r7, #12]

	if (!onewire->LastDeviceFlag) // If last device flag is not set
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	7a1b      	ldrb	r3, [r3, #8]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f040 809a 	bne.w	8003018 <OneWire_Search+0x15e>
	{
		if (OneWire_Reset(onewire)) // Reset bus
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7ff ff1a 	bl	8002d1e <OneWire_Reset>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00a      	beq.n	8002f06 <OneWire_Search+0x4c>
		{
			// If error while reset - reset search results
			onewire->LastDiscrepancy = 0;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	719a      	strb	r2, [r3, #6]
			onewire->LastDeviceFlag = 0;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	721a      	strb	r2, [r3, #8]
			onewire->LastFamilyDiscrepancy = 0;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	71da      	strb	r2, [r3, #7]
			return 0;
 8002f02:	2300      	movs	r3, #0
 8002f04:	e09b      	b.n	800303e <OneWire_Search+0x184>
		}

		OneWire_WriteByte(onewire, command); // Send searching command
 8002f06:	78fb      	ldrb	r3, [r7, #3]
 8002f08:	4619      	mov	r1, r3
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7ff ff84 	bl	8002e18 <OneWire_WriteByte>

		// Searching loop, Maxim APPLICATION NOTE 187
		do
		{
			id_bit = OneWire_ReadBit(onewire); // Read a bit 1
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f7ff ff57 	bl	8002dc4 <OneWire_ReadBit>
 8002f16:	4603      	mov	r3, r0
 8002f18:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(onewire); // Read the complement of bit 1
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7ff ff52 	bl	8002dc4 <OneWire_ReadBit>
 8002f20:	4603      	mov	r3, r0
 8002f22:	723b      	strb	r3, [r7, #8]

			if ((id_bit == 1) && (cmp_id_bit == 1)) // 11 - data error
 8002f24:	7a7b      	ldrb	r3, [r7, #9]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d102      	bne.n	8002f30 <OneWire_Search+0x76>
 8002f2a:	7a3b      	ldrb	r3, [r7, #8]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d064      	beq.n	8002ffa <OneWire_Search+0x140>
			{
				break;
			}
			else
			{
				if (id_bit != cmp_id_bit)
 8002f30:	7a7a      	ldrb	r2, [r7, #9]
 8002f32:	7a3b      	ldrb	r3, [r7, #8]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d002      	beq.n	8002f3e <OneWire_Search+0x84>
				{
					search_direction = id_bit;  // Bit write value for search
 8002f38:	7a7b      	ldrb	r3, [r7, #9]
 8002f3a:	72bb      	strb	r3, [r7, #10]
 8002f3c:	e026      	b.n	8002f8c <OneWire_Search+0xd2>
				}
				else // 00 - 2 devices
				{
					// Table 3. Search Path Direction
					if (id_bit_number < onewire->LastDiscrepancy)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	799b      	ldrb	r3, [r3, #6]
 8002f42:	7bfa      	ldrb	r2, [r7, #15]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d20d      	bcs.n	8002f64 <OneWire_Search+0xaa>
					{
						search_direction = ((onewire->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8002f48:	7b7b      	ldrb	r3, [r7, #13]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	7a5a      	ldrb	r2, [r3, #9]
 8002f50:	7afb      	ldrb	r3, [r7, #11]
 8002f52:	4013      	ands	r3, r2
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	bf14      	ite	ne
 8002f5a:	2301      	movne	r3, #1
 8002f5c:	2300      	moveq	r3, #0
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	72bb      	strb	r3, [r7, #10]
 8002f62:	e008      	b.n	8002f76 <OneWire_Search+0xbc>
					}
					else
					{
						// If bit is equal to last - pick 1
						// If not - then pick 0
						search_direction = (id_bit_number == onewire->LastDiscrepancy);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	799b      	ldrb	r3, [r3, #6]
 8002f68:	7bfa      	ldrb	r2, [r7, #15]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	bf0c      	ite	eq
 8002f6e:	2301      	moveq	r3, #1
 8002f70:	2300      	movne	r3, #0
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	72bb      	strb	r3, [r7, #10]
					}

					if (search_direction == 0) // If 0 was picked, write it to LastZero
 8002f76:	7abb      	ldrb	r3, [r7, #10]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d107      	bne.n	8002f8c <OneWire_Search+0xd2>
					{
						last_zero = id_bit_number;
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
 8002f7e:	73bb      	strb	r3, [r7, #14]

						if (last_zero < 9) // Check for last discrepancy in family
 8002f80:	7bbb      	ldrb	r3, [r7, #14]
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d802      	bhi.n	8002f8c <OneWire_Search+0xd2>
						{
							onewire->LastFamilyDiscrepancy = last_zero;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	7bba      	ldrb	r2, [r7, #14]
 8002f8a:	71da      	strb	r2, [r3, #7]
						}
					}
				}

				if (search_direction == 1)
 8002f8c:	7abb      	ldrb	r3, [r7, #10]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d10c      	bne.n	8002fac <OneWire_Search+0xf2>
				{
					onewire->ROM_NO[rom_byte_number] |= rom_byte_mask; // Set the bit in the ROM byte rom_byte_number
 8002f92:	7b7b      	ldrb	r3, [r7, #13]
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	4413      	add	r3, r2
 8002f98:	7a59      	ldrb	r1, [r3, #9]
 8002f9a:	7b7b      	ldrb	r3, [r7, #13]
 8002f9c:	7afa      	ldrb	r2, [r7, #11]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	b2d1      	uxtb	r1, r2
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	460a      	mov	r2, r1
 8002fa8:	725a      	strb	r2, [r3, #9]
 8002faa:	e010      	b.n	8002fce <OneWire_Search+0x114>
				}
				else
				{
					onewire->ROM_NO[rom_byte_number] &= ~rom_byte_mask; // Clear the bit in the ROM byte rom_byte_number
 8002fac:	7b7b      	ldrb	r3, [r7, #13]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	7a5b      	ldrb	r3, [r3, #9]
 8002fb4:	b25a      	sxtb	r2, r3
 8002fb6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	b25b      	sxtb	r3, r3
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	b25a      	sxtb	r2, r3
 8002fc2:	7b7b      	ldrb	r3, [r7, #13]
 8002fc4:	b2d1      	uxtb	r1, r2
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	4413      	add	r3, r2
 8002fca:	460a      	mov	r2, r1
 8002fcc:	725a      	strb	r2, [r3, #9]
				}

				OneWire_WriteBit(onewire, search_direction); // Search direction write bit
 8002fce:	7abb      	ldrb	r3, [r7, #10]
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7ff feca 	bl	8002d6c <OneWire_WriteBit>

				id_bit_number++; // Next bit search - increase the id
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1; // Shoft the mask for next bit
 8002fde:	7afb      	ldrb	r3, [r7, #11]
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	72fb      	strb	r3, [r7, #11]

				if (rom_byte_mask == 0) // If the mask is 0, it says the whole byte is read
 8002fe4:	7afb      	ldrb	r3, [r7, #11]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d104      	bne.n	8002ff4 <OneWire_Search+0x13a>
				{
					rom_byte_number++; // Next byte number
 8002fea:	7b7b      	ldrb	r3, [r7, #13]
 8002fec:	3301      	adds	r3, #1
 8002fee:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1; // Reset the mask - first bit
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while(rom_byte_number < 8);  // Read 8 bytes
 8002ff4:	7b7b      	ldrb	r3, [r7, #13]
 8002ff6:	2b07      	cmp	r3, #7
 8002ff8:	d98a      	bls.n	8002f10 <OneWire_Search+0x56>

		if (!(id_bit_number < 65)) // If all read bits number is below 65 (8 bytes)
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
 8002ffc:	2b40      	cmp	r3, #64	; 0x40
 8002ffe:	d90b      	bls.n	8003018 <OneWire_Search+0x15e>
		{
			onewire->LastDiscrepancy = last_zero;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	7bba      	ldrb	r2, [r7, #14]
 8003004:	719a      	strb	r2, [r3, #6]

			if (onewire->LastDiscrepancy == 0) // If last discrepancy is 0 - last device found
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	799b      	ldrb	r3, [r3, #6]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d102      	bne.n	8003014 <OneWire_Search+0x15a>
			{
				onewire->LastDeviceFlag = 1; // Set the flag
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1; // Searching successful
 8003014:	2301      	movs	r3, #1
 8003016:	733b      	strb	r3, [r7, #12]
		}
	}

	// If no device is found - reset search data and return 0
	if (!search_result || !onewire->ROM_NO[0])
 8003018:	7b3b      	ldrb	r3, [r7, #12]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <OneWire_Search+0x16c>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	7a5b      	ldrb	r3, [r3, #9]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10a      	bne.n	800303c <OneWire_Search+0x182>
	{
		onewire->LastDiscrepancy = 0;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	719a      	strb	r2, [r3, #6]
		onewire->LastDeviceFlag = 0;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	721a      	strb	r2, [r3, #8]
		onewire->LastFamilyDiscrepancy = 0;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8003038:	2300      	movs	r3, #0
 800303a:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 800303c:	7b3b      	ldrb	r3, [r7, #12]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <OneWire_First>:

//
//	Return first device on 1-Wire bus
//
uint8_t OneWire_First(OneWire_t* onewire)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b082      	sub	sp, #8
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
	OneWire_ResetSearch(onewire);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7ff ff21 	bl	8002e96 <OneWire_ResetSearch>

	return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 8003054:	21f0      	movs	r1, #240	; 0xf0
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7ff ff2f 	bl	8002eba <OneWire_Search>
 800305c:	4603      	mov	r3, r0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <OneWire_Next>:

//
//	Return next device on 1-Wire bus
//
uint8_t OneWire_Next(OneWire_t* onewire)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b082      	sub	sp, #8
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 800306e:	21f0      	movs	r1, #240	; 0xf0
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f7ff ff22 	bl	8002eba <OneWire_Search>
 8003076:	4603      	mov	r3, r0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <OneWire_SelectWithPointer>:

//
//	Select a device on bus by pointer to ROM address
//
void OneWire_SelectWithPointer(OneWire_t* onewire, uint8_t *ROM)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(onewire, ONEWIRE_CMD_MATCHROM); // Match ROM command
 800308a:	2155      	movs	r1, #85	; 0x55
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff fec3 	bl	8002e18 <OneWire_WriteByte>

	for (i = 0; i < 8; i++)
 8003092:	2300      	movs	r3, #0
 8003094:	73fb      	strb	r3, [r7, #15]
 8003096:	e00a      	b.n	80030ae <OneWire_SelectWithPointer+0x2e>
	{
		OneWire_WriteByte(onewire, *(ROM + i));
 8003098:	7bfb      	ldrb	r3, [r7, #15]
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	4413      	add	r3, r2
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	4619      	mov	r1, r3
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7ff feb8 	bl	8002e18 <OneWire_WriteByte>
	for (i = 0; i < 8; i++)
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	3301      	adds	r3, #1
 80030ac:	73fb      	strb	r3, [r7, #15]
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
 80030b0:	2b07      	cmp	r3, #7
 80030b2:	d9f1      	bls.n	8003098 <OneWire_SelectWithPointer+0x18>
	}
}
 80030b4:	bf00      	nop
 80030b6:	bf00      	nop
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <OneWire_GetFullROM>:

//
//	Get the ROM of found device
//
void OneWire_GetFullROM(OneWire_t* onewire, uint8_t *firstIndex)
{
 80030be:	b480      	push	{r7}
 80030c0:	b085      	sub	sp, #20
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
 80030c6:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 80030c8:	2300      	movs	r3, #0
 80030ca:	73fb      	strb	r3, [r7, #15]
 80030cc:	e00a      	b.n	80030e4 <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = onewire->ROM_NO[i];
 80030ce:	7bfa      	ldrb	r2, [r7, #15]
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
 80030d2:	6839      	ldr	r1, [r7, #0]
 80030d4:	440b      	add	r3, r1
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	440a      	add	r2, r1
 80030da:	7a52      	ldrb	r2, [r2, #9]
 80030dc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 80030de:	7bfb      	ldrb	r3, [r7, #15]
 80030e0:	3301      	adds	r3, #1
 80030e2:	73fb      	strb	r3, [r7, #15]
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	2b07      	cmp	r3, #7
 80030e8:	d9f1      	bls.n	80030ce <OneWire_GetFullROM+0x10>
	}
}
 80030ea:	bf00      	nop
 80030ec:	bf00      	nop
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bc80      	pop	{r7}
 80030f4:	4770      	bx	lr
	...

080030f8 <OneWire_Init>:

//
//	1-Wire initialization
//
void OneWire_Init(OneWire_t* onewire, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	4613      	mov	r3, r2
 8003104:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&_DS18B20_TIMER); // Start the delay timer
 8003106:	4811      	ldr	r0, [pc, #68]	; (800314c <OneWire_Init+0x54>)
 8003108:	f003 f90c 	bl	8006324 <HAL_TIM_Base_Start>

	onewire->GPIOx = GPIOx; // Save 1-wire bus pin
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	601a      	str	r2, [r3, #0]
	onewire->GPIO_Pin = GPIO_Pin;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	88fa      	ldrh	r2, [r7, #6]
 8003116:	809a      	strh	r2, [r3, #4]

	// 1-Wire bit bang initialization
	OneWire_BusOutputDirection(onewire);
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f7ff fdca 	bl	8002cb2 <OneWire_BusOutputDirection>
	OneWire_OutputHigh(onewire);
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f7ff fdef 	bl	8002d02 <OneWire_OutputHigh>
	HAL_Delay(100);
 8003124:	2064      	movs	r0, #100	; 0x64
 8003126:	f000 fd73 	bl	8003c10 <HAL_Delay>
	OneWire_OutputLow(onewire);
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f7ff fdda 	bl	8002ce4 <OneWire_OutputLow>
	HAL_Delay(100);
 8003130:	2064      	movs	r0, #100	; 0x64
 8003132:	f000 fd6d 	bl	8003c10 <HAL_Delay>
	OneWire_OutputHigh(onewire);
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f7ff fde3 	bl	8002d02 <OneWire_OutputHigh>
	HAL_Delay(200);
 800313c:	20c8      	movs	r0, #200	; 0xc8
 800313e:	f000 fd67 	bl	8003c10 <HAL_Delay>
}
 8003142:	bf00      	nop
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	20000a08 	.word	0x20000a08

08003150 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8003156:	f000 fa1f 	bl	8003598 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800315a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800315e:	2201      	movs	r2, #1
 8003160:	2178      	movs	r1, #120	; 0x78
 8003162:	485b      	ldr	r0, [pc, #364]	; (80032d0 <SSD1306_Init+0x180>)
 8003164:	f001 ff8a 	bl	800507c <HAL_I2C_IsDeviceReady>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800316e:	2300      	movs	r3, #0
 8003170:	e0a9      	b.n	80032c6 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8003172:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8003176:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003178:	e002      	b.n	8003180 <SSD1306_Init+0x30>
		p--;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	3b01      	subs	r3, #1
 800317e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f9      	bne.n	800317a <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8003186:	22ae      	movs	r2, #174	; 0xae
 8003188:	2100      	movs	r1, #0
 800318a:	2078      	movs	r0, #120	; 0x78
 800318c:	f000 fa7e 	bl	800368c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8003190:	2220      	movs	r2, #32
 8003192:	2100      	movs	r1, #0
 8003194:	2078      	movs	r0, #120	; 0x78
 8003196:	f000 fa79 	bl	800368c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800319a:	2210      	movs	r2, #16
 800319c:	2100      	movs	r1, #0
 800319e:	2078      	movs	r0, #120	; 0x78
 80031a0:	f000 fa74 	bl	800368c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80031a4:	22b0      	movs	r2, #176	; 0xb0
 80031a6:	2100      	movs	r1, #0
 80031a8:	2078      	movs	r0, #120	; 0x78
 80031aa:	f000 fa6f 	bl	800368c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80031ae:	22c8      	movs	r2, #200	; 0xc8
 80031b0:	2100      	movs	r1, #0
 80031b2:	2078      	movs	r0, #120	; 0x78
 80031b4:	f000 fa6a 	bl	800368c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80031b8:	2200      	movs	r2, #0
 80031ba:	2100      	movs	r1, #0
 80031bc:	2078      	movs	r0, #120	; 0x78
 80031be:	f000 fa65 	bl	800368c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80031c2:	2210      	movs	r2, #16
 80031c4:	2100      	movs	r1, #0
 80031c6:	2078      	movs	r0, #120	; 0x78
 80031c8:	f000 fa60 	bl	800368c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80031cc:	2240      	movs	r2, #64	; 0x40
 80031ce:	2100      	movs	r1, #0
 80031d0:	2078      	movs	r0, #120	; 0x78
 80031d2:	f000 fa5b 	bl	800368c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80031d6:	2281      	movs	r2, #129	; 0x81
 80031d8:	2100      	movs	r1, #0
 80031da:	2078      	movs	r0, #120	; 0x78
 80031dc:	f000 fa56 	bl	800368c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80031e0:	22ff      	movs	r2, #255	; 0xff
 80031e2:	2100      	movs	r1, #0
 80031e4:	2078      	movs	r0, #120	; 0x78
 80031e6:	f000 fa51 	bl	800368c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80031ea:	22a1      	movs	r2, #161	; 0xa1
 80031ec:	2100      	movs	r1, #0
 80031ee:	2078      	movs	r0, #120	; 0x78
 80031f0:	f000 fa4c 	bl	800368c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80031f4:	22a6      	movs	r2, #166	; 0xa6
 80031f6:	2100      	movs	r1, #0
 80031f8:	2078      	movs	r0, #120	; 0x78
 80031fa:	f000 fa47 	bl	800368c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80031fe:	22a8      	movs	r2, #168	; 0xa8
 8003200:	2100      	movs	r1, #0
 8003202:	2078      	movs	r0, #120	; 0x78
 8003204:	f000 fa42 	bl	800368c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8003208:	223f      	movs	r2, #63	; 0x3f
 800320a:	2100      	movs	r1, #0
 800320c:	2078      	movs	r0, #120	; 0x78
 800320e:	f000 fa3d 	bl	800368c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003212:	22a4      	movs	r2, #164	; 0xa4
 8003214:	2100      	movs	r1, #0
 8003216:	2078      	movs	r0, #120	; 0x78
 8003218:	f000 fa38 	bl	800368c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800321c:	22d3      	movs	r2, #211	; 0xd3
 800321e:	2100      	movs	r1, #0
 8003220:	2078      	movs	r0, #120	; 0x78
 8003222:	f000 fa33 	bl	800368c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8003226:	2200      	movs	r2, #0
 8003228:	2100      	movs	r1, #0
 800322a:	2078      	movs	r0, #120	; 0x78
 800322c:	f000 fa2e 	bl	800368c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8003230:	22d5      	movs	r2, #213	; 0xd5
 8003232:	2100      	movs	r1, #0
 8003234:	2078      	movs	r0, #120	; 0x78
 8003236:	f000 fa29 	bl	800368c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800323a:	22f0      	movs	r2, #240	; 0xf0
 800323c:	2100      	movs	r1, #0
 800323e:	2078      	movs	r0, #120	; 0x78
 8003240:	f000 fa24 	bl	800368c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8003244:	22d9      	movs	r2, #217	; 0xd9
 8003246:	2100      	movs	r1, #0
 8003248:	2078      	movs	r0, #120	; 0x78
 800324a:	f000 fa1f 	bl	800368c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800324e:	2222      	movs	r2, #34	; 0x22
 8003250:	2100      	movs	r1, #0
 8003252:	2078      	movs	r0, #120	; 0x78
 8003254:	f000 fa1a 	bl	800368c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8003258:	22da      	movs	r2, #218	; 0xda
 800325a:	2100      	movs	r1, #0
 800325c:	2078      	movs	r0, #120	; 0x78
 800325e:	f000 fa15 	bl	800368c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8003262:	2212      	movs	r2, #18
 8003264:	2100      	movs	r1, #0
 8003266:	2078      	movs	r0, #120	; 0x78
 8003268:	f000 fa10 	bl	800368c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800326c:	22db      	movs	r2, #219	; 0xdb
 800326e:	2100      	movs	r1, #0
 8003270:	2078      	movs	r0, #120	; 0x78
 8003272:	f000 fa0b 	bl	800368c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8003276:	2220      	movs	r2, #32
 8003278:	2100      	movs	r1, #0
 800327a:	2078      	movs	r0, #120	; 0x78
 800327c:	f000 fa06 	bl	800368c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8003280:	228d      	movs	r2, #141	; 0x8d
 8003282:	2100      	movs	r1, #0
 8003284:	2078      	movs	r0, #120	; 0x78
 8003286:	f000 fa01 	bl	800368c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800328a:	2214      	movs	r2, #20
 800328c:	2100      	movs	r1, #0
 800328e:	2078      	movs	r0, #120	; 0x78
 8003290:	f000 f9fc 	bl	800368c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8003294:	22af      	movs	r2, #175	; 0xaf
 8003296:	2100      	movs	r1, #0
 8003298:	2078      	movs	r0, #120	; 0x78
 800329a:	f000 f9f7 	bl	800368c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800329e:	222e      	movs	r2, #46	; 0x2e
 80032a0:	2100      	movs	r1, #0
 80032a2:	2078      	movs	r0, #120	; 0x78
 80032a4:	f000 f9f2 	bl	800368c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80032a8:	2000      	movs	r0, #0
 80032aa:	f000 f843 	bl	8003334 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80032ae:	f000 f813 	bl	80032d8 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80032b2:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <SSD1306_Init+0x184>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80032b8:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <SSD1306_Init+0x184>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80032be:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <SSD1306_Init+0x184>)
 80032c0:	2201      	movs	r2, #1
 80032c2:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80032c4:	2301      	movs	r3, #1
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	200002a0 	.word	0x200002a0
 80032d4:	200009fc 	.word	0x200009fc

080032d8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80032de:	2300      	movs	r3, #0
 80032e0:	71fb      	strb	r3, [r7, #7]
 80032e2:	e01d      	b.n	8003320 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	3b50      	subs	r3, #80	; 0x50
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	461a      	mov	r2, r3
 80032ec:	2100      	movs	r1, #0
 80032ee:	2078      	movs	r0, #120	; 0x78
 80032f0:	f000 f9cc 	bl	800368c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80032f4:	2200      	movs	r2, #0
 80032f6:	2100      	movs	r1, #0
 80032f8:	2078      	movs	r0, #120	; 0x78
 80032fa:	f000 f9c7 	bl	800368c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80032fe:	2210      	movs	r2, #16
 8003300:	2100      	movs	r1, #0
 8003302:	2078      	movs	r0, #120	; 0x78
 8003304:	f000 f9c2 	bl	800368c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003308:	79fb      	ldrb	r3, [r7, #7]
 800330a:	01db      	lsls	r3, r3, #7
 800330c:	4a08      	ldr	r2, [pc, #32]	; (8003330 <SSD1306_UpdateScreen+0x58>)
 800330e:	441a      	add	r2, r3
 8003310:	2380      	movs	r3, #128	; 0x80
 8003312:	2140      	movs	r1, #64	; 0x40
 8003314:	2078      	movs	r0, #120	; 0x78
 8003316:	f000 f953 	bl	80035c0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800331a:	79fb      	ldrb	r3, [r7, #7]
 800331c:	3301      	adds	r3, #1
 800331e:	71fb      	strb	r3, [r7, #7]
 8003320:	79fb      	ldrb	r3, [r7, #7]
 8003322:	2b07      	cmp	r3, #7
 8003324:	d9de      	bls.n	80032e4 <SSD1306_UpdateScreen+0xc>
	}
}
 8003326:	bf00      	nop
 8003328:	bf00      	nop
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	200005fc 	.word	0x200005fc

08003334 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	4603      	mov	r3, r0
 800333c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800333e:	79fb      	ldrb	r3, [r7, #7]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <SSD1306_Fill+0x14>
 8003344:	2300      	movs	r3, #0
 8003346:	e000      	b.n	800334a <SSD1306_Fill+0x16>
 8003348:	23ff      	movs	r3, #255	; 0xff
 800334a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800334e:	4619      	mov	r1, r3
 8003350:	4803      	ldr	r0, [pc, #12]	; (8003360 <SSD1306_Fill+0x2c>)
 8003352:	f005 fc0c 	bl	8008b6e <memset>
}
 8003356:	bf00      	nop
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	200005fc 	.word	0x200005fc

08003364 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	80fb      	strh	r3, [r7, #6]
 800336e:	460b      	mov	r3, r1
 8003370:	80bb      	strh	r3, [r7, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	70fb      	strb	r3, [r7, #3]
	if (
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	2b7f      	cmp	r3, #127	; 0x7f
 800337a:	d848      	bhi.n	800340e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800337c:	88bb      	ldrh	r3, [r7, #4]
 800337e:	2b3f      	cmp	r3, #63	; 0x3f
 8003380:	d845      	bhi.n	800340e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8003382:	4b25      	ldr	r3, [pc, #148]	; (8003418 <SSD1306_DrawPixel+0xb4>)
 8003384:	791b      	ldrb	r3, [r3, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d006      	beq.n	8003398 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800338a:	78fb      	ldrb	r3, [r7, #3]
 800338c:	2b00      	cmp	r3, #0
 800338e:	bf0c      	ite	eq
 8003390:	2301      	moveq	r3, #1
 8003392:	2300      	movne	r3, #0
 8003394:	b2db      	uxtb	r3, r3
 8003396:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8003398:	78fb      	ldrb	r3, [r7, #3]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d11a      	bne.n	80033d4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800339e:	88fa      	ldrh	r2, [r7, #6]
 80033a0:	88bb      	ldrh	r3, [r7, #4]
 80033a2:	08db      	lsrs	r3, r3, #3
 80033a4:	b298      	uxth	r0, r3
 80033a6:	4603      	mov	r3, r0
 80033a8:	01db      	lsls	r3, r3, #7
 80033aa:	4413      	add	r3, r2
 80033ac:	4a1b      	ldr	r2, [pc, #108]	; (800341c <SSD1306_DrawPixel+0xb8>)
 80033ae:	5cd3      	ldrb	r3, [r2, r3]
 80033b0:	b25a      	sxtb	r2, r3
 80033b2:	88bb      	ldrh	r3, [r7, #4]
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	2101      	movs	r1, #1
 80033ba:	fa01 f303 	lsl.w	r3, r1, r3
 80033be:	b25b      	sxtb	r3, r3
 80033c0:	4313      	orrs	r3, r2
 80033c2:	b259      	sxtb	r1, r3
 80033c4:	88fa      	ldrh	r2, [r7, #6]
 80033c6:	4603      	mov	r3, r0
 80033c8:	01db      	lsls	r3, r3, #7
 80033ca:	4413      	add	r3, r2
 80033cc:	b2c9      	uxtb	r1, r1
 80033ce:	4a13      	ldr	r2, [pc, #76]	; (800341c <SSD1306_DrawPixel+0xb8>)
 80033d0:	54d1      	strb	r1, [r2, r3]
 80033d2:	e01d      	b.n	8003410 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80033d4:	88fa      	ldrh	r2, [r7, #6]
 80033d6:	88bb      	ldrh	r3, [r7, #4]
 80033d8:	08db      	lsrs	r3, r3, #3
 80033da:	b298      	uxth	r0, r3
 80033dc:	4603      	mov	r3, r0
 80033de:	01db      	lsls	r3, r3, #7
 80033e0:	4413      	add	r3, r2
 80033e2:	4a0e      	ldr	r2, [pc, #56]	; (800341c <SSD1306_DrawPixel+0xb8>)
 80033e4:	5cd3      	ldrb	r3, [r2, r3]
 80033e6:	b25a      	sxtb	r2, r3
 80033e8:	88bb      	ldrh	r3, [r7, #4]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	2101      	movs	r1, #1
 80033f0:	fa01 f303 	lsl.w	r3, r1, r3
 80033f4:	b25b      	sxtb	r3, r3
 80033f6:	43db      	mvns	r3, r3
 80033f8:	b25b      	sxtb	r3, r3
 80033fa:	4013      	ands	r3, r2
 80033fc:	b259      	sxtb	r1, r3
 80033fe:	88fa      	ldrh	r2, [r7, #6]
 8003400:	4603      	mov	r3, r0
 8003402:	01db      	lsls	r3, r3, #7
 8003404:	4413      	add	r3, r2
 8003406:	b2c9      	uxtb	r1, r1
 8003408:	4a04      	ldr	r2, [pc, #16]	; (800341c <SSD1306_DrawPixel+0xb8>)
 800340a:	54d1      	strb	r1, [r2, r3]
 800340c:	e000      	b.n	8003410 <SSD1306_DrawPixel+0xac>
		return;
 800340e:	bf00      	nop
	}
}
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr
 8003418:	200009fc 	.word	0x200009fc
 800341c:	200005fc 	.word	0x200005fc

08003420 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	460a      	mov	r2, r1
 800342a:	80fb      	strh	r3, [r7, #6]
 800342c:	4613      	mov	r3, r2
 800342e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8003430:	4a05      	ldr	r2, [pc, #20]	; (8003448 <SSD1306_GotoXY+0x28>)
 8003432:	88fb      	ldrh	r3, [r7, #6]
 8003434:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8003436:	4a04      	ldr	r2, [pc, #16]	; (8003448 <SSD1306_GotoXY+0x28>)
 8003438:	88bb      	ldrh	r3, [r7, #4]
 800343a:	8053      	strh	r3, [r2, #2]
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	200009fc 	.word	0x200009fc

0800344c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	6039      	str	r1, [r7, #0]
 8003456:	71fb      	strb	r3, [r7, #7]
 8003458:	4613      	mov	r3, r2
 800345a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800345c:	4b3a      	ldr	r3, [pc, #232]	; (8003548 <SSD1306_Putc+0xfc>)
 800345e:	881b      	ldrh	r3, [r3, #0]
 8003460:	461a      	mov	r2, r3
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	4413      	add	r3, r2
	if (
 8003468:	2b7f      	cmp	r3, #127	; 0x7f
 800346a:	dc07      	bgt.n	800347c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800346c:	4b36      	ldr	r3, [pc, #216]	; (8003548 <SSD1306_Putc+0xfc>)
 800346e:	885b      	ldrh	r3, [r3, #2]
 8003470:	461a      	mov	r2, r3
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	785b      	ldrb	r3, [r3, #1]
 8003476:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003478:	2b3f      	cmp	r3, #63	; 0x3f
 800347a:	dd01      	ble.n	8003480 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800347c:	2300      	movs	r3, #0
 800347e:	e05e      	b.n	800353e <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8003480:	2300      	movs	r3, #0
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	e04b      	b.n	800351e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	79fb      	ldrb	r3, [r7, #7]
 800348c:	3b20      	subs	r3, #32
 800348e:	6839      	ldr	r1, [r7, #0]
 8003490:	7849      	ldrb	r1, [r1, #1]
 8003492:	fb01 f303 	mul.w	r3, r1, r3
 8003496:	4619      	mov	r1, r3
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	440b      	add	r3, r1
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	4413      	add	r3, r2
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80034a4:	2300      	movs	r3, #0
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	e030      	b.n	800350c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d010      	beq.n	80034dc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80034ba:	4b23      	ldr	r3, [pc, #140]	; (8003548 <SSD1306_Putc+0xfc>)
 80034bc:	881a      	ldrh	r2, [r3, #0]
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	4413      	add	r3, r2
 80034c4:	b298      	uxth	r0, r3
 80034c6:	4b20      	ldr	r3, [pc, #128]	; (8003548 <SSD1306_Putc+0xfc>)
 80034c8:	885a      	ldrh	r2, [r3, #2]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	4413      	add	r3, r2
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	79ba      	ldrb	r2, [r7, #6]
 80034d4:	4619      	mov	r1, r3
 80034d6:	f7ff ff45 	bl	8003364 <SSD1306_DrawPixel>
 80034da:	e014      	b.n	8003506 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80034dc:	4b1a      	ldr	r3, [pc, #104]	; (8003548 <SSD1306_Putc+0xfc>)
 80034de:	881a      	ldrh	r2, [r3, #0]
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	4413      	add	r3, r2
 80034e6:	b298      	uxth	r0, r3
 80034e8:	4b17      	ldr	r3, [pc, #92]	; (8003548 <SSD1306_Putc+0xfc>)
 80034ea:	885a      	ldrh	r2, [r3, #2]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	4413      	add	r3, r2
 80034f2:	b299      	uxth	r1, r3
 80034f4:	79bb      	ldrb	r3, [r7, #6]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	bf0c      	ite	eq
 80034fa:	2301      	moveq	r3, #1
 80034fc:	2300      	movne	r3, #0
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	461a      	mov	r2, r3
 8003502:	f7ff ff2f 	bl	8003364 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	3301      	adds	r3, #1
 800350a:	613b      	str	r3, [r7, #16]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	461a      	mov	r2, r3
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	4293      	cmp	r3, r2
 8003516:	d3c8      	bcc.n	80034aa <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	3301      	adds	r3, #1
 800351c:	617b      	str	r3, [r7, #20]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	785b      	ldrb	r3, [r3, #1]
 8003522:	461a      	mov	r2, r3
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	4293      	cmp	r3, r2
 8003528:	d3ad      	bcc.n	8003486 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800352a:	4b07      	ldr	r3, [pc, #28]	; (8003548 <SSD1306_Putc+0xfc>)
 800352c:	881a      	ldrh	r2, [r3, #0]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	b29b      	uxth	r3, r3
 8003534:	4413      	add	r3, r2
 8003536:	b29a      	uxth	r2, r3
 8003538:	4b03      	ldr	r3, [pc, #12]	; (8003548 <SSD1306_Putc+0xfc>)
 800353a:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800353c:	79fb      	ldrb	r3, [r7, #7]
}
 800353e:	4618      	mov	r0, r3
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	200009fc 	.word	0x200009fc

0800354c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	4613      	mov	r3, r2
 8003558:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800355a:	e012      	b.n	8003582 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	79fa      	ldrb	r2, [r7, #7]
 8003562:	68b9      	ldr	r1, [r7, #8]
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff ff71 	bl	800344c <SSD1306_Putc>
 800356a:	4603      	mov	r3, r0
 800356c:	461a      	mov	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	429a      	cmp	r2, r3
 8003574:	d002      	beq.n	800357c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	e008      	b.n	800358e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	3301      	adds	r3, #1
 8003580:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1e8      	bne.n	800355c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	781b      	ldrb	r3, [r3, #0]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800359e:	4b07      	ldr	r3, [pc, #28]	; (80035bc <ssd1306_I2C_Init+0x24>)
 80035a0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80035a2:	e002      	b.n	80035aa <ssd1306_I2C_Init+0x12>
		p--;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3b01      	subs	r3, #1
 80035a8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1f9      	bne.n	80035a4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80035b0:	bf00      	nop
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bc80      	pop	{r7}
 80035ba:	4770      	bx	lr
 80035bc:	0003d090 	.word	0x0003d090

080035c0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80035c0:	b590      	push	{r4, r7, lr}
 80035c2:	b0c7      	sub	sp, #284	; 0x11c
 80035c4:	af02      	add	r7, sp, #8
 80035c6:	4604      	mov	r4, r0
 80035c8:	4608      	mov	r0, r1
 80035ca:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80035ce:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80035d2:	600a      	str	r2, [r1, #0]
 80035d4:	4619      	mov	r1, r3
 80035d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80035da:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80035de:	4622      	mov	r2, r4
 80035e0:	701a      	strb	r2, [r3, #0]
 80035e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80035e6:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80035ea:	4602      	mov	r2, r0
 80035ec:	701a      	strb	r2, [r3, #0]
 80035ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80035f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80035f6:	460a      	mov	r2, r1
 80035f8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80035fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80035fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003602:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003606:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800360a:	7812      	ldrb	r2, [r2, #0]
 800360c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800360e:	2300      	movs	r3, #0
 8003610:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8003614:	e015      	b.n	8003642 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8003616:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800361a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800361e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	441a      	add	r2, r3
 8003626:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800362a:	3301      	adds	r3, #1
 800362c:	7811      	ldrb	r1, [r2, #0]
 800362e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003632:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8003636:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8003638:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800363c:	3301      	adds	r3, #1
 800363e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8003642:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003646:	b29b      	uxth	r3, r3
 8003648:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800364c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8003650:	8812      	ldrh	r2, [r2, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d8df      	bhi.n	8003616 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8003656:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800365a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	b299      	uxth	r1, r3
 8003662:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003666:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800366a:	881b      	ldrh	r3, [r3, #0]
 800366c:	3301      	adds	r3, #1
 800366e:	b29b      	uxth	r3, r3
 8003670:	f107 020c 	add.w	r2, r7, #12
 8003674:	200a      	movs	r0, #10
 8003676:	9000      	str	r0, [sp, #0]
 8003678:	4803      	ldr	r0, [pc, #12]	; (8003688 <ssd1306_I2C_WriteMulti+0xc8>)
 800367a:	f001 fc01 	bl	8004e80 <HAL_I2C_Master_Transmit>
}
 800367e:	bf00      	nop
 8003680:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8003684:	46bd      	mov	sp, r7
 8003686:	bd90      	pop	{r4, r7, pc}
 8003688:	200002a0 	.word	0x200002a0

0800368c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af02      	add	r7, sp, #8
 8003692:	4603      	mov	r3, r0
 8003694:	71fb      	strb	r3, [r7, #7]
 8003696:	460b      	mov	r3, r1
 8003698:	71bb      	strb	r3, [r7, #6]
 800369a:	4613      	mov	r3, r2
 800369c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800369e:	79bb      	ldrb	r3, [r7, #6]
 80036a0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80036a2:	797b      	ldrb	r3, [r7, #5]
 80036a4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	b299      	uxth	r1, r3
 80036aa:	f107 020c 	add.w	r2, r7, #12
 80036ae:	230a      	movs	r3, #10
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	2302      	movs	r3, #2
 80036b4:	4803      	ldr	r0, [pc, #12]	; (80036c4 <ssd1306_I2C_Write+0x38>)
 80036b6:	f001 fbe3 	bl	8004e80 <HAL_I2C_Master_Transmit>
}
 80036ba:	bf00      	nop
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	200002a0 	.word	0x200002a0

080036c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80036ce:	4b15      	ldr	r3, [pc, #84]	; (8003724 <HAL_MspInit+0x5c>)
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	4a14      	ldr	r2, [pc, #80]	; (8003724 <HAL_MspInit+0x5c>)
 80036d4:	f043 0301 	orr.w	r3, r3, #1
 80036d8:	6193      	str	r3, [r2, #24]
 80036da:	4b12      	ldr	r3, [pc, #72]	; (8003724 <HAL_MspInit+0x5c>)
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	60bb      	str	r3, [r7, #8]
 80036e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036e6:	4b0f      	ldr	r3, [pc, #60]	; (8003724 <HAL_MspInit+0x5c>)
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	4a0e      	ldr	r2, [pc, #56]	; (8003724 <HAL_MspInit+0x5c>)
 80036ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f0:	61d3      	str	r3, [r2, #28]
 80036f2:	4b0c      	ldr	r3, [pc, #48]	; (8003724 <HAL_MspInit+0x5c>)
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fa:	607b      	str	r3, [r7, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80036fe:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <HAL_MspInit+0x60>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	4a04      	ldr	r2, [pc, #16]	; (8003728 <HAL_MspInit+0x60>)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800371a:	bf00      	nop
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr
 8003724:	40021000 	.word	0x40021000
 8003728:	40010000 	.word	0x40010000

0800372c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003730:	e7fe      	b.n	8003730 <NMI_Handler+0x4>

08003732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003732:	b480      	push	{r7}
 8003734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003736:	e7fe      	b.n	8003736 <HardFault_Handler+0x4>

08003738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800373c:	e7fe      	b.n	800373c <MemManage_Handler+0x4>

0800373e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800373e:	b480      	push	{r7}
 8003740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003742:	e7fe      	b.n	8003742 <BusFault_Handler+0x4>

08003744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003748:	e7fe      	b.n	8003748 <UsageFault_Handler+0x4>

0800374a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800374a:	b480      	push	{r7}
 800374c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800374e:	bf00      	nop
 8003750:	46bd      	mov	sp, r7
 8003752:	bc80      	pop	{r7}
 8003754:	4770      	bx	lr

08003756 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003756:	b480      	push	{r7}
 8003758:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800375a:	bf00      	nop
 800375c:	46bd      	mov	sp, r7
 800375e:	bc80      	pop	{r7}
 8003760:	4770      	bx	lr

08003762 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003762:	b480      	push	{r7}
 8003764:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003766:	bf00      	nop
 8003768:	46bd      	mov	sp, r7
 800376a:	bc80      	pop	{r7}
 800376c:	4770      	bx	lr

0800376e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003772:	f000 fa31 	bl	8003bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003776:	bf00      	nop
 8003778:	bd80      	pop	{r7, pc}

0800377a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(P1_Pin);
 800377e:	2008      	movs	r0, #8
 8003780:	f001 fa22 	bl	8004bc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003784:	bf00      	nop
 8003786:	bd80      	pop	{r7, pc}

08003788 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800378c:	4802      	ldr	r0, [pc, #8]	; (8003798 <USART1_IRQHandler+0x10>)
 800378e:	f003 f8a7 	bl	80068e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003792:	bf00      	nop
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	20000a50 	.word	0x20000a50

0800379c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  return 1;
 80037a0:	2301      	movs	r3, #1
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bc80      	pop	{r7}
 80037a8:	4770      	bx	lr

080037aa <_kill>:

int _kill(int pid, int sig)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b082      	sub	sp, #8
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
 80037b2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80037b4:	f005 fa58 	bl	8008c68 <__errno>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2216      	movs	r2, #22
 80037bc:	601a      	str	r2, [r3, #0]
  return -1;
 80037be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <_exit>:

void _exit (int status)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b082      	sub	sp, #8
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80037d2:	f04f 31ff 	mov.w	r1, #4294967295
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7ff ffe7 	bl	80037aa <_kill>
  while (1) {}    /* Make sure we hang here */
 80037dc:	e7fe      	b.n	80037dc <_exit+0x12>

080037de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b086      	sub	sp, #24
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	e00a      	b.n	8003806 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80037f0:	f3af 8000 	nop.w
 80037f4:	4601      	mov	r1, r0
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	60ba      	str	r2, [r7, #8]
 80037fc:	b2ca      	uxtb	r2, r1
 80037fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	3301      	adds	r3, #1
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	429a      	cmp	r2, r3
 800380c:	dbf0      	blt.n	80037f0 <_read+0x12>
  }

  return len;
 800380e:	687b      	ldr	r3, [r7, #4]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3718      	adds	r7, #24
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003824:	2300      	movs	r3, #0
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	e009      	b.n	800383e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	60ba      	str	r2, [r7, #8]
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	3301      	adds	r3, #1
 800383c:	617b      	str	r3, [r7, #20]
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	429a      	cmp	r2, r3
 8003844:	dbf1      	blt.n	800382a <_write+0x12>
  }
  return len;
 8003846:	687b      	ldr	r3, [r7, #4]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <_close>:

int _close(int file)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003858:	f04f 33ff 	mov.w	r3, #4294967295
}
 800385c:	4618      	mov	r0, r3
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	bc80      	pop	{r7}
 8003864:	4770      	bx	lr

08003866 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
 800386e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003876:	605a      	str	r2, [r3, #4]
  return 0;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr

08003884 <_isatty>:

int _isatty(int file)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800388c:	2301      	movs	r3, #1
}
 800388e:	4618      	mov	r0, r3
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr

08003898 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr

080038b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038b8:	4a14      	ldr	r2, [pc, #80]	; (800390c <_sbrk+0x5c>)
 80038ba:	4b15      	ldr	r3, [pc, #84]	; (8003910 <_sbrk+0x60>)
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038c4:	4b13      	ldr	r3, [pc, #76]	; (8003914 <_sbrk+0x64>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d102      	bne.n	80038d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038cc:	4b11      	ldr	r3, [pc, #68]	; (8003914 <_sbrk+0x64>)
 80038ce:	4a12      	ldr	r2, [pc, #72]	; (8003918 <_sbrk+0x68>)
 80038d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038d2:	4b10      	ldr	r3, [pc, #64]	; (8003914 <_sbrk+0x64>)
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4413      	add	r3, r2
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d207      	bcs.n	80038f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038e0:	f005 f9c2 	bl	8008c68 <__errno>
 80038e4:	4603      	mov	r3, r0
 80038e6:	220c      	movs	r2, #12
 80038e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038ea:	f04f 33ff 	mov.w	r3, #4294967295
 80038ee:	e009      	b.n	8003904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038f0:	4b08      	ldr	r3, [pc, #32]	; (8003914 <_sbrk+0x64>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038f6:	4b07      	ldr	r3, [pc, #28]	; (8003914 <_sbrk+0x64>)
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4413      	add	r3, r2
 80038fe:	4a05      	ldr	r2, [pc, #20]	; (8003914 <_sbrk+0x64>)
 8003900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003902:	68fb      	ldr	r3, [r7, #12]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	20005000 	.word	0x20005000
 8003910:	00000400 	.word	0x00000400
 8003914:	20000a04 	.word	0x20000a04
 8003918:	20000be8 	.word	0x20000be8

0800391c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003920:	bf00      	nop
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr

08003928 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800392e:	f107 0308 	add.w	r3, r7, #8
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	605a      	str	r2, [r3, #4]
 8003938:	609a      	str	r2, [r3, #8]
 800393a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800393c:	463b      	mov	r3, r7
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003944:	4b1e      	ldr	r3, [pc, #120]	; (80039c0 <MX_TIM1_Init+0x98>)
 8003946:	4a1f      	ldr	r2, [pc, #124]	; (80039c4 <MX_TIM1_Init+0x9c>)
 8003948:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 70-1;
 800394a:	4b1d      	ldr	r3, [pc, #116]	; (80039c0 <MX_TIM1_Init+0x98>)
 800394c:	2245      	movs	r2, #69	; 0x45
 800394e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003950:	4b1b      	ldr	r3, [pc, #108]	; (80039c0 <MX_TIM1_Init+0x98>)
 8003952:	2200      	movs	r2, #0
 8003954:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65500;
 8003956:	4b1a      	ldr	r3, [pc, #104]	; (80039c0 <MX_TIM1_Init+0x98>)
 8003958:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 800395c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800395e:	4b18      	ldr	r3, [pc, #96]	; (80039c0 <MX_TIM1_Init+0x98>)
 8003960:	2200      	movs	r2, #0
 8003962:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003964:	4b16      	ldr	r3, [pc, #88]	; (80039c0 <MX_TIM1_Init+0x98>)
 8003966:	2200      	movs	r2, #0
 8003968:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800396a:	4b15      	ldr	r3, [pc, #84]	; (80039c0 <MX_TIM1_Init+0x98>)
 800396c:	2200      	movs	r2, #0
 800396e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003970:	4813      	ldr	r0, [pc, #76]	; (80039c0 <MX_TIM1_Init+0x98>)
 8003972:	f002 fc87 	bl	8006284 <HAL_TIM_Base_Init>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800397c:	f7ff f962 	bl	8002c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003980:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003984:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003986:	f107 0308 	add.w	r3, r7, #8
 800398a:	4619      	mov	r1, r3
 800398c:	480c      	ldr	r0, [pc, #48]	; (80039c0 <MX_TIM1_Init+0x98>)
 800398e:	f002 fd13 	bl	80063b8 <HAL_TIM_ConfigClockSource>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003998:	f7ff f954 	bl	8002c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800399c:	2300      	movs	r3, #0
 800399e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039a0:	2300      	movs	r3, #0
 80039a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80039a4:	463b      	mov	r3, r7
 80039a6:	4619      	mov	r1, r3
 80039a8:	4805      	ldr	r0, [pc, #20]	; (80039c0 <MX_TIM1_Init+0x98>)
 80039aa:	f002 fec5 	bl	8006738 <HAL_TIMEx_MasterConfigSynchronization>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80039b4:	f7ff f946 	bl	8002c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80039b8:	bf00      	nop
 80039ba:	3718      	adds	r7, #24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	20000a08 	.word	0x20000a08
 80039c4:	40012c00 	.word	0x40012c00

080039c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a09      	ldr	r2, [pc, #36]	; (80039fc <HAL_TIM_Base_MspInit+0x34>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d10b      	bne.n	80039f2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039da:	4b09      	ldr	r3, [pc, #36]	; (8003a00 <HAL_TIM_Base_MspInit+0x38>)
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	4a08      	ldr	r2, [pc, #32]	; (8003a00 <HAL_TIM_Base_MspInit+0x38>)
 80039e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039e4:	6193      	str	r3, [r2, #24]
 80039e6:	4b06      	ldr	r3, [pc, #24]	; (8003a00 <HAL_TIM_Base_MspInit+0x38>)
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80039f2:	bf00      	nop
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bc80      	pop	{r7}
 80039fa:	4770      	bx	lr
 80039fc:	40012c00 	.word	0x40012c00
 8003a00:	40021000 	.word	0x40021000

08003a04 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003a08:	4b11      	ldr	r3, [pc, #68]	; (8003a50 <MX_USART1_UART_Init+0x4c>)
 8003a0a:	4a12      	ldr	r2, [pc, #72]	; (8003a54 <MX_USART1_UART_Init+0x50>)
 8003a0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003a0e:	4b10      	ldr	r3, [pc, #64]	; (8003a50 <MX_USART1_UART_Init+0x4c>)
 8003a10:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003a14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a16:	4b0e      	ldr	r3, [pc, #56]	; (8003a50 <MX_USART1_UART_Init+0x4c>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a1c:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <MX_USART1_UART_Init+0x4c>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a22:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <MX_USART1_UART_Init+0x4c>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a28:	4b09      	ldr	r3, [pc, #36]	; (8003a50 <MX_USART1_UART_Init+0x4c>)
 8003a2a:	220c      	movs	r2, #12
 8003a2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a2e:	4b08      	ldr	r3, [pc, #32]	; (8003a50 <MX_USART1_UART_Init+0x4c>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a34:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <MX_USART1_UART_Init+0x4c>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003a3a:	4805      	ldr	r0, [pc, #20]	; (8003a50 <MX_USART1_UART_Init+0x4c>)
 8003a3c:	f002 feda 	bl	80067f4 <HAL_UART_Init>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003a46:	f7ff f8fd 	bl	8002c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003a4a:	bf00      	nop
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	20000a50 	.word	0x20000a50
 8003a54:	40013800 	.word	0x40013800

08003a58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b088      	sub	sp, #32
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a60:	f107 0310 	add.w	r3, r7, #16
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	605a      	str	r2, [r3, #4]
 8003a6a:	609a      	str	r2, [r3, #8]
 8003a6c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a20      	ldr	r2, [pc, #128]	; (8003af4 <HAL_UART_MspInit+0x9c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d139      	bne.n	8003aec <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a78:	4b1f      	ldr	r3, [pc, #124]	; (8003af8 <HAL_UART_MspInit+0xa0>)
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	4a1e      	ldr	r2, [pc, #120]	; (8003af8 <HAL_UART_MspInit+0xa0>)
 8003a7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a82:	6193      	str	r3, [r2, #24]
 8003a84:	4b1c      	ldr	r3, [pc, #112]	; (8003af8 <HAL_UART_MspInit+0xa0>)
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a90:	4b19      	ldr	r3, [pc, #100]	; (8003af8 <HAL_UART_MspInit+0xa0>)
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	4a18      	ldr	r2, [pc, #96]	; (8003af8 <HAL_UART_MspInit+0xa0>)
 8003a96:	f043 0304 	orr.w	r3, r3, #4
 8003a9a:	6193      	str	r3, [r2, #24]
 8003a9c:	4b16      	ldr	r3, [pc, #88]	; (8003af8 <HAL_UART_MspInit+0xa0>)
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	60bb      	str	r3, [r7, #8]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003aa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003aac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aae:	2302      	movs	r3, #2
 8003ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab6:	f107 0310 	add.w	r3, r7, #16
 8003aba:	4619      	mov	r1, r3
 8003abc:	480f      	ldr	r0, [pc, #60]	; (8003afc <HAL_UART_MspInit+0xa4>)
 8003abe:	f000 feb7 	bl	8004830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ac6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad0:	f107 0310 	add.w	r3, r7, #16
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4809      	ldr	r0, [pc, #36]	; (8003afc <HAL_UART_MspInit+0xa4>)
 8003ad8:	f000 feaa 	bl	8004830 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003adc:	2200      	movs	r2, #0
 8003ade:	2100      	movs	r1, #0
 8003ae0:	2025      	movs	r0, #37	; 0x25
 8003ae2:	f000 fdbc 	bl	800465e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003ae6:	2025      	movs	r0, #37	; 0x25
 8003ae8:	f000 fdd5 	bl	8004696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003aec:	bf00      	nop
 8003aee:	3720      	adds	r7, #32
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40013800 	.word	0x40013800
 8003af8:	40021000 	.word	0x40021000
 8003afc:	40010800 	.word	0x40010800

08003b00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b00:	f7ff ff0c 	bl	800391c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b04:	480b      	ldr	r0, [pc, #44]	; (8003b34 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003b06:	490c      	ldr	r1, [pc, #48]	; (8003b38 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003b08:	4a0c      	ldr	r2, [pc, #48]	; (8003b3c <LoopFillZerobss+0x16>)
  movs r3, #0
 8003b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b0c:	e002      	b.n	8003b14 <LoopCopyDataInit>

08003b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b12:	3304      	adds	r3, #4

08003b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b18:	d3f9      	bcc.n	8003b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b1a:	4a09      	ldr	r2, [pc, #36]	; (8003b40 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003b1c:	4c09      	ldr	r4, [pc, #36]	; (8003b44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b20:	e001      	b.n	8003b26 <LoopFillZerobss>

08003b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b24:	3204      	adds	r2, #4

08003b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b28:	d3fb      	bcc.n	8003b22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b2a:	f005 f8a3 	bl	8008c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b2e:	f7fe fcaf 	bl	8002490 <main>
  bx lr
 8003b32:	4770      	bx	lr
  ldr r0, =_sdata
 8003b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b38:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003b3c:	0800ea40 	.word	0x0800ea40
  ldr r2, =_sbss
 8003b40:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003b44:	20000be8 	.word	0x20000be8

08003b48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b48:	e7fe      	b.n	8003b48 <ADC1_2_IRQHandler>
	...

08003b4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b50:	4b08      	ldr	r3, [pc, #32]	; (8003b74 <HAL_Init+0x28>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a07      	ldr	r2, [pc, #28]	; (8003b74 <HAL_Init+0x28>)
 8003b56:	f043 0310 	orr.w	r3, r3, #16
 8003b5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b5c:	2003      	movs	r0, #3
 8003b5e:	f000 fd73 	bl	8004648 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b62:	200f      	movs	r0, #15
 8003b64:	f000 f808 	bl	8003b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b68:	f7ff fdae 	bl	80036c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40022000 	.word	0x40022000

08003b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b80:	4b12      	ldr	r3, [pc, #72]	; (8003bcc <HAL_InitTick+0x54>)
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	4b12      	ldr	r3, [pc, #72]	; (8003bd0 <HAL_InitTick+0x58>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	4619      	mov	r1, r3
 8003b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 fd8b 	bl	80046b2 <HAL_SYSTICK_Config>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e00e      	b.n	8003bc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b0f      	cmp	r3, #15
 8003baa:	d80a      	bhi.n	8003bc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bac:	2200      	movs	r2, #0
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb4:	f000 fd53 	bl	800465e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bb8:	4a06      	ldr	r2, [pc, #24]	; (8003bd4 <HAL_InitTick+0x5c>)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	e000      	b.n	8003bc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3708      	adds	r7, #8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	20000014 	.word	0x20000014
 8003bd0:	2000001c 	.word	0x2000001c
 8003bd4:	20000018 	.word	0x20000018

08003bd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bdc:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <HAL_IncTick+0x1c>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	461a      	mov	r2, r3
 8003be2:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <HAL_IncTick+0x20>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4413      	add	r3, r2
 8003be8:	4a03      	ldr	r2, [pc, #12]	; (8003bf8 <HAL_IncTick+0x20>)
 8003bea:	6013      	str	r3, [r2, #0]
}
 8003bec:	bf00      	nop
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr
 8003bf4:	2000001c 	.word	0x2000001c
 8003bf8:	20000a98 	.word	0x20000a98

08003bfc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8003c00:	4b02      	ldr	r3, [pc, #8]	; (8003c0c <HAL_GetTick+0x10>)
 8003c02:	681b      	ldr	r3, [r3, #0]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bc80      	pop	{r7}
 8003c0a:	4770      	bx	lr
 8003c0c:	20000a98 	.word	0x20000a98

08003c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c18:	f7ff fff0 	bl	8003bfc <HAL_GetTick>
 8003c1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c28:	d005      	beq.n	8003c36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c2a:	4b0a      	ldr	r3, [pc, #40]	; (8003c54 <HAL_Delay+0x44>)
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4413      	add	r3, r2
 8003c34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c36:	bf00      	nop
 8003c38:	f7ff ffe0 	bl	8003bfc <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d8f7      	bhi.n	8003c38 <HAL_Delay+0x28>
  {
  }
}
 8003c48:	bf00      	nop
 8003c4a:	bf00      	nop
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	2000001c 	.word	0x2000001c

08003c58 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e0be      	b.n	8003df8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d109      	bne.n	8003c9c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7fd fa6a 	bl	8001170 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 fbc5 	bl	800442c <ADC_ConversionStop_Disable>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003caa:	f003 0310 	and.w	r3, r3, #16
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f040 8099 	bne.w	8003de6 <HAL_ADC_Init+0x18e>
 8003cb4:	7dfb      	ldrb	r3, [r7, #23]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f040 8095 	bne.w	8003de6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003cc4:	f023 0302 	bic.w	r3, r3, #2
 8003cc8:	f043 0202 	orr.w	r2, r3, #2
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003cd8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	7b1b      	ldrb	r3, [r3, #12]
 8003cde:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003ce0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cf0:	d003      	beq.n	8003cfa <HAL_ADC_Init+0xa2>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d102      	bne.n	8003d00 <HAL_ADC_Init+0xa8>
 8003cfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cfe:	e000      	b.n	8003d02 <HAL_ADC_Init+0xaa>
 8003d00:	2300      	movs	r3, #0
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	7d1b      	ldrb	r3, [r3, #20]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d119      	bne.n	8003d44 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	7b1b      	ldrb	r3, [r3, #12]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d109      	bne.n	8003d2c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	035a      	lsls	r2, r3, #13
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d28:	613b      	str	r3, [r7, #16]
 8003d2a:	e00b      	b.n	8003d44 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	f043 0220 	orr.w	r2, r3, #32
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3c:	f043 0201 	orr.w	r2, r3, #1
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689a      	ldr	r2, [r3, #8]
 8003d5e:	4b28      	ldr	r3, [pc, #160]	; (8003e00 <HAL_ADC_Init+0x1a8>)
 8003d60:	4013      	ands	r3, r2
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6812      	ldr	r2, [r2, #0]
 8003d66:	68b9      	ldr	r1, [r7, #8]
 8003d68:	430b      	orrs	r3, r1
 8003d6a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d74:	d003      	beq.n	8003d7e <HAL_ADC_Init+0x126>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d104      	bne.n	8003d88 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	051b      	lsls	r3, r3, #20
 8003d86:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689a      	ldr	r2, [r3, #8]
 8003da2:	4b18      	ldr	r3, [pc, #96]	; (8003e04 <HAL_ADC_Init+0x1ac>)
 8003da4:	4013      	ands	r3, r2
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d10b      	bne.n	8003dc4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db6:	f023 0303 	bic.w	r3, r3, #3
 8003dba:	f043 0201 	orr.w	r2, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003dc2:	e018      	b.n	8003df6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc8:	f023 0312 	bic.w	r3, r3, #18
 8003dcc:	f043 0210 	orr.w	r2, r3, #16
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	f043 0201 	orr.w	r2, r3, #1
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003de4:	e007      	b.n	8003df6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dea:	f043 0210 	orr.w	r2, r3, #16
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	ffe1f7fd 	.word	0xffe1f7fd
 8003e04:	ff1f0efe 	.word	0xff1f0efe

08003e08 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e10:	2300      	movs	r3, #0
 8003e12:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d101      	bne.n	8003e22 <HAL_ADC_Start+0x1a>
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e098      	b.n	8003f54 <HAL_ADC_Start+0x14c>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 faa4 	bl	8004378 <ADC_Enable>
 8003e30:	4603      	mov	r3, r0
 8003e32:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f040 8087 	bne.w	8003f4a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e44:	f023 0301 	bic.w	r3, r3, #1
 8003e48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a41      	ldr	r2, [pc, #260]	; (8003f5c <HAL_ADC_Start+0x154>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d105      	bne.n	8003e66 <HAL_ADC_Start+0x5e>
 8003e5a:	4b41      	ldr	r3, [pc, #260]	; (8003f60 <HAL_ADC_Start+0x158>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d115      	bne.n	8003e92 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d026      	beq.n	8003ece <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e84:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e88:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e90:	e01d      	b.n	8003ece <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e96:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a2f      	ldr	r2, [pc, #188]	; (8003f60 <HAL_ADC_Start+0x158>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d004      	beq.n	8003eb2 <HAL_ADC_Start+0xaa>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a2b      	ldr	r2, [pc, #172]	; (8003f5c <HAL_ADC_Start+0x154>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d10d      	bne.n	8003ece <HAL_ADC_Start+0xc6>
 8003eb2:	4b2b      	ldr	r3, [pc, #172]	; (8003f60 <HAL_ADC_Start+0x158>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d007      	beq.n	8003ece <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ec6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d006      	beq.n	8003ee8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	f023 0206 	bic.w	r2, r3, #6
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ee6:	e002      	b.n	8003eee <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f06f 0202 	mvn.w	r2, #2
 8003efe:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003f0a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003f0e:	d113      	bne.n	8003f38 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003f14:	4a11      	ldr	r2, [pc, #68]	; (8003f5c <HAL_ADC_Start+0x154>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d105      	bne.n	8003f26 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003f1a:	4b11      	ldr	r3, [pc, #68]	; (8003f60 <HAL_ADC_Start+0x158>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d108      	bne.n	8003f38 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003f34:	609a      	str	r2, [r3, #8]
 8003f36:	e00c      	b.n	8003f52 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003f46:	609a      	str	r2, [r3, #8]
 8003f48:	e003      	b.n	8003f52 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40012800 	.word	0x40012800
 8003f60:	40012400 	.word	0x40012400

08003f64 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003f64:	b590      	push	{r4, r7, lr}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003f7a:	f7ff fe3f 	bl	8003bfc <HAL_GetTick>
 8003f7e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00b      	beq.n	8003fa6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f92:	f043 0220 	orr.w	r2, r3, #32
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e0d3      	b.n	800414e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d131      	bne.n	8004018 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d12a      	bne.n	8004018 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003fc2:	e021      	b.n	8004008 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fca:	d01d      	beq.n	8004008 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d007      	beq.n	8003fe2 <HAL_ADC_PollForConversion+0x7e>
 8003fd2:	f7ff fe13 	bl	8003bfc <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d212      	bcs.n	8004008 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10b      	bne.n	8004008 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff4:	f043 0204 	orr.w	r2, r3, #4
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e0a2      	b.n	800414e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0d6      	beq.n	8003fc4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004016:	e070      	b.n	80040fa <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004018:	4b4f      	ldr	r3, [pc, #316]	; (8004158 <HAL_ADC_PollForConversion+0x1f4>)
 800401a:	681c      	ldr	r4, [r3, #0]
 800401c:	2002      	movs	r0, #2
 800401e:	f002 f87b 	bl	8006118 <HAL_RCCEx_GetPeriphCLKFreq>
 8004022:	4603      	mov	r3, r0
 8004024:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6919      	ldr	r1, [r3, #16]
 800402e:	4b4b      	ldr	r3, [pc, #300]	; (800415c <HAL_ADC_PollForConversion+0x1f8>)
 8004030:	400b      	ands	r3, r1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d118      	bne.n	8004068 <HAL_ADC_PollForConversion+0x104>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68d9      	ldr	r1, [r3, #12]
 800403c:	4b48      	ldr	r3, [pc, #288]	; (8004160 <HAL_ADC_PollForConversion+0x1fc>)
 800403e:	400b      	ands	r3, r1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d111      	bne.n	8004068 <HAL_ADC_PollForConversion+0x104>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6919      	ldr	r1, [r3, #16]
 800404a:	4b46      	ldr	r3, [pc, #280]	; (8004164 <HAL_ADC_PollForConversion+0x200>)
 800404c:	400b      	ands	r3, r1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d108      	bne.n	8004064 <HAL_ADC_PollForConversion+0x100>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68d9      	ldr	r1, [r3, #12]
 8004058:	4b43      	ldr	r3, [pc, #268]	; (8004168 <HAL_ADC_PollForConversion+0x204>)
 800405a:	400b      	ands	r3, r1
 800405c:	2b00      	cmp	r3, #0
 800405e:	d101      	bne.n	8004064 <HAL_ADC_PollForConversion+0x100>
 8004060:	2314      	movs	r3, #20
 8004062:	e020      	b.n	80040a6 <HAL_ADC_PollForConversion+0x142>
 8004064:	2329      	movs	r3, #41	; 0x29
 8004066:	e01e      	b.n	80040a6 <HAL_ADC_PollForConversion+0x142>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6919      	ldr	r1, [r3, #16]
 800406e:	4b3d      	ldr	r3, [pc, #244]	; (8004164 <HAL_ADC_PollForConversion+0x200>)
 8004070:	400b      	ands	r3, r1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d106      	bne.n	8004084 <HAL_ADC_PollForConversion+0x120>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68d9      	ldr	r1, [r3, #12]
 800407c:	4b3a      	ldr	r3, [pc, #232]	; (8004168 <HAL_ADC_PollForConversion+0x204>)
 800407e:	400b      	ands	r3, r1
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00d      	beq.n	80040a0 <HAL_ADC_PollForConversion+0x13c>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6919      	ldr	r1, [r3, #16]
 800408a:	4b38      	ldr	r3, [pc, #224]	; (800416c <HAL_ADC_PollForConversion+0x208>)
 800408c:	400b      	ands	r3, r1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d108      	bne.n	80040a4 <HAL_ADC_PollForConversion+0x140>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68d9      	ldr	r1, [r3, #12]
 8004098:	4b34      	ldr	r3, [pc, #208]	; (800416c <HAL_ADC_PollForConversion+0x208>)
 800409a:	400b      	ands	r3, r1
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_ADC_PollForConversion+0x140>
 80040a0:	2354      	movs	r3, #84	; 0x54
 80040a2:	e000      	b.n	80040a6 <HAL_ADC_PollForConversion+0x142>
 80040a4:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80040a6:	fb02 f303 	mul.w	r3, r2, r3
 80040aa:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80040ac:	e021      	b.n	80040f2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b4:	d01a      	beq.n	80040ec <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d007      	beq.n	80040cc <HAL_ADC_PollForConversion+0x168>
 80040bc:	f7ff fd9e 	bl	8003bfc <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d20f      	bcs.n	80040ec <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d90b      	bls.n	80040ec <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d8:	f043 0204 	orr.w	r2, r3, #4
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e030      	b.n	800414e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	3301      	adds	r3, #1
 80040f0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d8d9      	bhi.n	80040ae <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f06f 0212 	mvn.w	r2, #18
 8004102:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004108:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800411a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800411e:	d115      	bne.n	800414c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004124:	2b00      	cmp	r3, #0
 8004126:	d111      	bne.n	800414c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004138:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d105      	bne.n	800414c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004144:	f043 0201 	orr.w	r2, r3, #1
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	371c      	adds	r7, #28
 8004152:	46bd      	mov	sp, r7
 8004154:	bd90      	pop	{r4, r7, pc}
 8004156:	bf00      	nop
 8004158:	20000014 	.word	0x20000014
 800415c:	24924924 	.word	0x24924924
 8004160:	00924924 	.word	0x00924924
 8004164:	12492492 	.word	0x12492492
 8004168:	00492492 	.word	0x00492492
 800416c:	00249249 	.word	0x00249249

08004170 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800417e:	4618      	mov	r0, r3
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	bc80      	pop	{r7}
 8004186:	4770      	bx	lr

08004188 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004192:	2300      	movs	r3, #0
 8004194:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004196:	2300      	movs	r3, #0
 8004198:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d101      	bne.n	80041a8 <HAL_ADC_ConfigChannel+0x20>
 80041a4:	2302      	movs	r3, #2
 80041a6:	e0dc      	b.n	8004362 <HAL_ADC_ConfigChannel+0x1da>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	2b06      	cmp	r3, #6
 80041b6:	d81c      	bhi.n	80041f2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	4613      	mov	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	3b05      	subs	r3, #5
 80041ca:	221f      	movs	r2, #31
 80041cc:	fa02 f303 	lsl.w	r3, r2, r3
 80041d0:	43db      	mvns	r3, r3
 80041d2:	4019      	ands	r1, r3
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	6818      	ldr	r0, [r3, #0]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	4613      	mov	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	3b05      	subs	r3, #5
 80041e4:	fa00 f203 	lsl.w	r2, r0, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	635a      	str	r2, [r3, #52]	; 0x34
 80041f0:	e03c      	b.n	800426c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2b0c      	cmp	r3, #12
 80041f8:	d81c      	bhi.n	8004234 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	4613      	mov	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4413      	add	r3, r2
 800420a:	3b23      	subs	r3, #35	; 0x23
 800420c:	221f      	movs	r2, #31
 800420e:	fa02 f303 	lsl.w	r3, r2, r3
 8004212:	43db      	mvns	r3, r3
 8004214:	4019      	ands	r1, r3
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	6818      	ldr	r0, [r3, #0]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	4613      	mov	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	3b23      	subs	r3, #35	; 0x23
 8004226:	fa00 f203 	lsl.w	r2, r0, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	631a      	str	r2, [r3, #48]	; 0x30
 8004232:	e01b      	b.n	800426c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	4613      	mov	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4413      	add	r3, r2
 8004244:	3b41      	subs	r3, #65	; 0x41
 8004246:	221f      	movs	r2, #31
 8004248:	fa02 f303 	lsl.w	r3, r2, r3
 800424c:	43db      	mvns	r3, r3
 800424e:	4019      	ands	r1, r3
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	6818      	ldr	r0, [r3, #0]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	4613      	mov	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	3b41      	subs	r3, #65	; 0x41
 8004260:	fa00 f203 	lsl.w	r2, r0, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b09      	cmp	r3, #9
 8004272:	d91c      	bls.n	80042ae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68d9      	ldr	r1, [r3, #12]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	4613      	mov	r3, r2
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	4413      	add	r3, r2
 8004284:	3b1e      	subs	r3, #30
 8004286:	2207      	movs	r2, #7
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	43db      	mvns	r3, r3
 800428e:	4019      	ands	r1, r3
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	6898      	ldr	r0, [r3, #8]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	4613      	mov	r3, r2
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	4413      	add	r3, r2
 800429e:	3b1e      	subs	r3, #30
 80042a0:	fa00 f203 	lsl.w	r2, r0, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	430a      	orrs	r2, r1
 80042aa:	60da      	str	r2, [r3, #12]
 80042ac:	e019      	b.n	80042e2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6919      	ldr	r1, [r3, #16]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	4613      	mov	r3, r2
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	4413      	add	r3, r2
 80042be:	2207      	movs	r2, #7
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	43db      	mvns	r3, r3
 80042c6:	4019      	ands	r1, r3
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	6898      	ldr	r0, [r3, #8]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	4613      	mov	r3, r2
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	4413      	add	r3, r2
 80042d6:	fa00 f203 	lsl.w	r2, r0, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b10      	cmp	r3, #16
 80042e8:	d003      	beq.n	80042f2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80042ee:	2b11      	cmp	r3, #17
 80042f0:	d132      	bne.n	8004358 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a1d      	ldr	r2, [pc, #116]	; (800436c <HAL_ADC_ConfigChannel+0x1e4>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d125      	bne.n	8004348 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d126      	bne.n	8004358 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004318:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b10      	cmp	r3, #16
 8004320:	d11a      	bne.n	8004358 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004322:	4b13      	ldr	r3, [pc, #76]	; (8004370 <HAL_ADC_ConfigChannel+0x1e8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a13      	ldr	r2, [pc, #76]	; (8004374 <HAL_ADC_ConfigChannel+0x1ec>)
 8004328:	fba2 2303 	umull	r2, r3, r2, r3
 800432c:	0c9a      	lsrs	r2, r3, #18
 800432e:	4613      	mov	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004338:	e002      	b.n	8004340 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	3b01      	subs	r3, #1
 800433e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1f9      	bne.n	800433a <HAL_ADC_ConfigChannel+0x1b2>
 8004346:	e007      	b.n	8004358 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434c:	f043 0220 	orr.w	r2, r3, #32
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004360:	7bfb      	ldrb	r3, [r7, #15]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	bc80      	pop	{r7}
 800436a:	4770      	bx	lr
 800436c:	40012400 	.word	0x40012400
 8004370:	20000014 	.word	0x20000014
 8004374:	431bde83 	.word	0x431bde83

08004378 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b01      	cmp	r3, #1
 8004394:	d040      	beq.n	8004418 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f042 0201 	orr.w	r2, r2, #1
 80043a4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80043a6:	4b1f      	ldr	r3, [pc, #124]	; (8004424 <ADC_Enable+0xac>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a1f      	ldr	r2, [pc, #124]	; (8004428 <ADC_Enable+0xb0>)
 80043ac:	fba2 2303 	umull	r2, r3, r2, r3
 80043b0:	0c9b      	lsrs	r3, r3, #18
 80043b2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80043b4:	e002      	b.n	80043bc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	3b01      	subs	r3, #1
 80043ba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1f9      	bne.n	80043b6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80043c2:	f7ff fc1b 	bl	8003bfc <HAL_GetTick>
 80043c6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80043c8:	e01f      	b.n	800440a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80043ca:	f7ff fc17 	bl	8003bfc <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d918      	bls.n	800440a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d011      	beq.n	800440a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ea:	f043 0210 	orr.w	r2, r3, #16
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f6:	f043 0201 	orr.w	r2, r3, #1
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e007      	b.n	800441a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b01      	cmp	r3, #1
 8004416:	d1d8      	bne.n	80043ca <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20000014 	.word	0x20000014
 8004428:	431bde83 	.word	0x431bde83

0800442c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004434:	2300      	movs	r3, #0
 8004436:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b01      	cmp	r3, #1
 8004444:	d12e      	bne.n	80044a4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0201 	bic.w	r2, r2, #1
 8004454:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004456:	f7ff fbd1 	bl	8003bfc <HAL_GetTick>
 800445a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800445c:	e01b      	b.n	8004496 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800445e:	f7ff fbcd 	bl	8003bfc <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d914      	bls.n	8004496 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b01      	cmp	r3, #1
 8004478:	d10d      	bne.n	8004496 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447e:	f043 0210 	orr.w	r2, r3, #16
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448a:	f043 0201 	orr.w	r2, r3, #1
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e007      	b.n	80044a6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d0dc      	beq.n	800445e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
	...

080044b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f003 0307 	and.w	r3, r3, #7
 80044be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044c0:	4b0c      	ldr	r3, [pc, #48]	; (80044f4 <__NVIC_SetPriorityGrouping+0x44>)
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044cc:	4013      	ands	r3, r2
 80044ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044e2:	4a04      	ldr	r2, [pc, #16]	; (80044f4 <__NVIC_SetPriorityGrouping+0x44>)
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	60d3      	str	r3, [r2, #12]
}
 80044e8:	bf00      	nop
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bc80      	pop	{r7}
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	e000ed00 	.word	0xe000ed00

080044f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044fc:	4b04      	ldr	r3, [pc, #16]	; (8004510 <__NVIC_GetPriorityGrouping+0x18>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	0a1b      	lsrs	r3, r3, #8
 8004502:	f003 0307 	and.w	r3, r3, #7
}
 8004506:	4618      	mov	r0, r3
 8004508:	46bd      	mov	sp, r7
 800450a:	bc80      	pop	{r7}
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	e000ed00 	.word	0xe000ed00

08004514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	4603      	mov	r3, r0
 800451c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800451e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004522:	2b00      	cmp	r3, #0
 8004524:	db0b      	blt.n	800453e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004526:	79fb      	ldrb	r3, [r7, #7]
 8004528:	f003 021f 	and.w	r2, r3, #31
 800452c:	4906      	ldr	r1, [pc, #24]	; (8004548 <__NVIC_EnableIRQ+0x34>)
 800452e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004532:	095b      	lsrs	r3, r3, #5
 8004534:	2001      	movs	r0, #1
 8004536:	fa00 f202 	lsl.w	r2, r0, r2
 800453a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	bc80      	pop	{r7}
 8004546:	4770      	bx	lr
 8004548:	e000e100 	.word	0xe000e100

0800454c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	4603      	mov	r3, r0
 8004554:	6039      	str	r1, [r7, #0]
 8004556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455c:	2b00      	cmp	r3, #0
 800455e:	db0a      	blt.n	8004576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	b2da      	uxtb	r2, r3
 8004564:	490c      	ldr	r1, [pc, #48]	; (8004598 <__NVIC_SetPriority+0x4c>)
 8004566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800456a:	0112      	lsls	r2, r2, #4
 800456c:	b2d2      	uxtb	r2, r2
 800456e:	440b      	add	r3, r1
 8004570:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004574:	e00a      	b.n	800458c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	b2da      	uxtb	r2, r3
 800457a:	4908      	ldr	r1, [pc, #32]	; (800459c <__NVIC_SetPriority+0x50>)
 800457c:	79fb      	ldrb	r3, [r7, #7]
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	3b04      	subs	r3, #4
 8004584:	0112      	lsls	r2, r2, #4
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	440b      	add	r3, r1
 800458a:	761a      	strb	r2, [r3, #24]
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	bc80      	pop	{r7}
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	e000e100 	.word	0xe000e100
 800459c:	e000ed00 	.word	0xe000ed00

080045a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b089      	sub	sp, #36	; 0x24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	f1c3 0307 	rsb	r3, r3, #7
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	bf28      	it	cs
 80045be:	2304      	movcs	r3, #4
 80045c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	3304      	adds	r3, #4
 80045c6:	2b06      	cmp	r3, #6
 80045c8:	d902      	bls.n	80045d0 <NVIC_EncodePriority+0x30>
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	3b03      	subs	r3, #3
 80045ce:	e000      	b.n	80045d2 <NVIC_EncodePriority+0x32>
 80045d0:	2300      	movs	r3, #0
 80045d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d4:	f04f 32ff 	mov.w	r2, #4294967295
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	43da      	mvns	r2, r3
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	401a      	ands	r2, r3
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045e8:	f04f 31ff 	mov.w	r1, #4294967295
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	fa01 f303 	lsl.w	r3, r1, r3
 80045f2:	43d9      	mvns	r1, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045f8:	4313      	orrs	r3, r2
         );
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3724      	adds	r7, #36	; 0x24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bc80      	pop	{r7}
 8004602:	4770      	bx	lr

08004604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	3b01      	subs	r3, #1
 8004610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004614:	d301      	bcc.n	800461a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004616:	2301      	movs	r3, #1
 8004618:	e00f      	b.n	800463a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800461a:	4a0a      	ldr	r2, [pc, #40]	; (8004644 <SysTick_Config+0x40>)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3b01      	subs	r3, #1
 8004620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004622:	210f      	movs	r1, #15
 8004624:	f04f 30ff 	mov.w	r0, #4294967295
 8004628:	f7ff ff90 	bl	800454c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800462c:	4b05      	ldr	r3, [pc, #20]	; (8004644 <SysTick_Config+0x40>)
 800462e:	2200      	movs	r2, #0
 8004630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004632:	4b04      	ldr	r3, [pc, #16]	; (8004644 <SysTick_Config+0x40>)
 8004634:	2207      	movs	r2, #7
 8004636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	e000e010 	.word	0xe000e010

08004648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f7ff ff2d 	bl	80044b0 <__NVIC_SetPriorityGrouping>
}
 8004656:	bf00      	nop
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800465e:	b580      	push	{r7, lr}
 8004660:	b086      	sub	sp, #24
 8004662:	af00      	add	r7, sp, #0
 8004664:	4603      	mov	r3, r0
 8004666:	60b9      	str	r1, [r7, #8]
 8004668:	607a      	str	r2, [r7, #4]
 800466a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800466c:	2300      	movs	r3, #0
 800466e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004670:	f7ff ff42 	bl	80044f8 <__NVIC_GetPriorityGrouping>
 8004674:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	68b9      	ldr	r1, [r7, #8]
 800467a:	6978      	ldr	r0, [r7, #20]
 800467c:	f7ff ff90 	bl	80045a0 <NVIC_EncodePriority>
 8004680:	4602      	mov	r2, r0
 8004682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004686:	4611      	mov	r1, r2
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff ff5f 	bl	800454c <__NVIC_SetPriority>
}
 800468e:	bf00      	nop
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b082      	sub	sp, #8
 800469a:	af00      	add	r7, sp, #0
 800469c:	4603      	mov	r3, r0
 800469e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff ff35 	bl	8004514 <__NVIC_EnableIRQ>
}
 80046aa:	bf00      	nop
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b082      	sub	sp, #8
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7ff ffa2 	bl	8004604 <SysTick_Config>
 80046c0:	4603      	mov	r3, r0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b085      	sub	sp, #20
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d008      	beq.n	80046f4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2204      	movs	r2, #4
 80046e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e020      	b.n	8004736 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 020e 	bic.w	r2, r2, #14
 8004702:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0201 	bic.w	r2, r2, #1
 8004712:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800471c:	2101      	movs	r1, #1
 800471e:	fa01 f202 	lsl.w	r2, r1, r2
 8004722:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004734:	7bfb      	ldrb	r3, [r7, #15]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	bc80      	pop	{r7}
 800473e:	4770      	bx	lr

08004740 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004748:	2300      	movs	r3, #0
 800474a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b02      	cmp	r3, #2
 8004756:	d005      	beq.n	8004764 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2204      	movs	r2, #4
 800475c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	73fb      	strb	r3, [r7, #15]
 8004762:	e051      	b.n	8004808 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 020e 	bic.w	r2, r2, #14
 8004772:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0201 	bic.w	r2, r2, #1
 8004782:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a22      	ldr	r2, [pc, #136]	; (8004814 <HAL_DMA_Abort_IT+0xd4>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d029      	beq.n	80047e2 <HAL_DMA_Abort_IT+0xa2>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a21      	ldr	r2, [pc, #132]	; (8004818 <HAL_DMA_Abort_IT+0xd8>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d022      	beq.n	80047de <HAL_DMA_Abort_IT+0x9e>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a1f      	ldr	r2, [pc, #124]	; (800481c <HAL_DMA_Abort_IT+0xdc>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d01a      	beq.n	80047d8 <HAL_DMA_Abort_IT+0x98>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a1e      	ldr	r2, [pc, #120]	; (8004820 <HAL_DMA_Abort_IT+0xe0>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d012      	beq.n	80047d2 <HAL_DMA_Abort_IT+0x92>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a1c      	ldr	r2, [pc, #112]	; (8004824 <HAL_DMA_Abort_IT+0xe4>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d00a      	beq.n	80047cc <HAL_DMA_Abort_IT+0x8c>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a1b      	ldr	r2, [pc, #108]	; (8004828 <HAL_DMA_Abort_IT+0xe8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d102      	bne.n	80047c6 <HAL_DMA_Abort_IT+0x86>
 80047c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80047c4:	e00e      	b.n	80047e4 <HAL_DMA_Abort_IT+0xa4>
 80047c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047ca:	e00b      	b.n	80047e4 <HAL_DMA_Abort_IT+0xa4>
 80047cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047d0:	e008      	b.n	80047e4 <HAL_DMA_Abort_IT+0xa4>
 80047d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047d6:	e005      	b.n	80047e4 <HAL_DMA_Abort_IT+0xa4>
 80047d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047dc:	e002      	b.n	80047e4 <HAL_DMA_Abort_IT+0xa4>
 80047de:	2310      	movs	r3, #16
 80047e0:	e000      	b.n	80047e4 <HAL_DMA_Abort_IT+0xa4>
 80047e2:	2301      	movs	r3, #1
 80047e4:	4a11      	ldr	r2, [pc, #68]	; (800482c <HAL_DMA_Abort_IT+0xec>)
 80047e6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	4798      	blx	r3
    } 
  }
  return status;
 8004808:	7bfb      	ldrb	r3, [r7, #15]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	40020008 	.word	0x40020008
 8004818:	4002001c 	.word	0x4002001c
 800481c:	40020030 	.word	0x40020030
 8004820:	40020044 	.word	0x40020044
 8004824:	40020058 	.word	0x40020058
 8004828:	4002006c 	.word	0x4002006c
 800482c:	40020000 	.word	0x40020000

08004830 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004830:	b480      	push	{r7}
 8004832:	b08b      	sub	sp, #44	; 0x2c
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800483a:	2300      	movs	r3, #0
 800483c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800483e:	2300      	movs	r3, #0
 8004840:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004842:	e169      	b.n	8004b18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004844:	2201      	movs	r2, #1
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	69fa      	ldr	r2, [r7, #28]
 8004854:	4013      	ands	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	429a      	cmp	r2, r3
 800485e:	f040 8158 	bne.w	8004b12 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	4a9a      	ldr	r2, [pc, #616]	; (8004ad0 <HAL_GPIO_Init+0x2a0>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d05e      	beq.n	800492a <HAL_GPIO_Init+0xfa>
 800486c:	4a98      	ldr	r2, [pc, #608]	; (8004ad0 <HAL_GPIO_Init+0x2a0>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d875      	bhi.n	800495e <HAL_GPIO_Init+0x12e>
 8004872:	4a98      	ldr	r2, [pc, #608]	; (8004ad4 <HAL_GPIO_Init+0x2a4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d058      	beq.n	800492a <HAL_GPIO_Init+0xfa>
 8004878:	4a96      	ldr	r2, [pc, #600]	; (8004ad4 <HAL_GPIO_Init+0x2a4>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d86f      	bhi.n	800495e <HAL_GPIO_Init+0x12e>
 800487e:	4a96      	ldr	r2, [pc, #600]	; (8004ad8 <HAL_GPIO_Init+0x2a8>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d052      	beq.n	800492a <HAL_GPIO_Init+0xfa>
 8004884:	4a94      	ldr	r2, [pc, #592]	; (8004ad8 <HAL_GPIO_Init+0x2a8>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d869      	bhi.n	800495e <HAL_GPIO_Init+0x12e>
 800488a:	4a94      	ldr	r2, [pc, #592]	; (8004adc <HAL_GPIO_Init+0x2ac>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d04c      	beq.n	800492a <HAL_GPIO_Init+0xfa>
 8004890:	4a92      	ldr	r2, [pc, #584]	; (8004adc <HAL_GPIO_Init+0x2ac>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d863      	bhi.n	800495e <HAL_GPIO_Init+0x12e>
 8004896:	4a92      	ldr	r2, [pc, #584]	; (8004ae0 <HAL_GPIO_Init+0x2b0>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d046      	beq.n	800492a <HAL_GPIO_Init+0xfa>
 800489c:	4a90      	ldr	r2, [pc, #576]	; (8004ae0 <HAL_GPIO_Init+0x2b0>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d85d      	bhi.n	800495e <HAL_GPIO_Init+0x12e>
 80048a2:	2b12      	cmp	r3, #18
 80048a4:	d82a      	bhi.n	80048fc <HAL_GPIO_Init+0xcc>
 80048a6:	2b12      	cmp	r3, #18
 80048a8:	d859      	bhi.n	800495e <HAL_GPIO_Init+0x12e>
 80048aa:	a201      	add	r2, pc, #4	; (adr r2, 80048b0 <HAL_GPIO_Init+0x80>)
 80048ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b0:	0800492b 	.word	0x0800492b
 80048b4:	08004905 	.word	0x08004905
 80048b8:	08004917 	.word	0x08004917
 80048bc:	08004959 	.word	0x08004959
 80048c0:	0800495f 	.word	0x0800495f
 80048c4:	0800495f 	.word	0x0800495f
 80048c8:	0800495f 	.word	0x0800495f
 80048cc:	0800495f 	.word	0x0800495f
 80048d0:	0800495f 	.word	0x0800495f
 80048d4:	0800495f 	.word	0x0800495f
 80048d8:	0800495f 	.word	0x0800495f
 80048dc:	0800495f 	.word	0x0800495f
 80048e0:	0800495f 	.word	0x0800495f
 80048e4:	0800495f 	.word	0x0800495f
 80048e8:	0800495f 	.word	0x0800495f
 80048ec:	0800495f 	.word	0x0800495f
 80048f0:	0800495f 	.word	0x0800495f
 80048f4:	0800490d 	.word	0x0800490d
 80048f8:	08004921 	.word	0x08004921
 80048fc:	4a79      	ldr	r2, [pc, #484]	; (8004ae4 <HAL_GPIO_Init+0x2b4>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d013      	beq.n	800492a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004902:	e02c      	b.n	800495e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	623b      	str	r3, [r7, #32]
          break;
 800490a:	e029      	b.n	8004960 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	3304      	adds	r3, #4
 8004912:	623b      	str	r3, [r7, #32]
          break;
 8004914:	e024      	b.n	8004960 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	3308      	adds	r3, #8
 800491c:	623b      	str	r3, [r7, #32]
          break;
 800491e:	e01f      	b.n	8004960 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	330c      	adds	r3, #12
 8004926:	623b      	str	r3, [r7, #32]
          break;
 8004928:	e01a      	b.n	8004960 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d102      	bne.n	8004938 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004932:	2304      	movs	r3, #4
 8004934:	623b      	str	r3, [r7, #32]
          break;
 8004936:	e013      	b.n	8004960 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d105      	bne.n	800494c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004940:	2308      	movs	r3, #8
 8004942:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	69fa      	ldr	r2, [r7, #28]
 8004948:	611a      	str	r2, [r3, #16]
          break;
 800494a:	e009      	b.n	8004960 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800494c:	2308      	movs	r3, #8
 800494e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	69fa      	ldr	r2, [r7, #28]
 8004954:	615a      	str	r2, [r3, #20]
          break;
 8004956:	e003      	b.n	8004960 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004958:	2300      	movs	r3, #0
 800495a:	623b      	str	r3, [r7, #32]
          break;
 800495c:	e000      	b.n	8004960 <HAL_GPIO_Init+0x130>
          break;
 800495e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	2bff      	cmp	r3, #255	; 0xff
 8004964:	d801      	bhi.n	800496a <HAL_GPIO_Init+0x13a>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	e001      	b.n	800496e <HAL_GPIO_Init+0x13e>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	3304      	adds	r3, #4
 800496e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	2bff      	cmp	r3, #255	; 0xff
 8004974:	d802      	bhi.n	800497c <HAL_GPIO_Init+0x14c>
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	e002      	b.n	8004982 <HAL_GPIO_Init+0x152>
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	3b08      	subs	r3, #8
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	210f      	movs	r1, #15
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	fa01 f303 	lsl.w	r3, r1, r3
 8004990:	43db      	mvns	r3, r3
 8004992:	401a      	ands	r2, r3
 8004994:	6a39      	ldr	r1, [r7, #32]
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	fa01 f303 	lsl.w	r3, r1, r3
 800499c:	431a      	orrs	r2, r3
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f000 80b1 	beq.w	8004b12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80049b0:	4b4d      	ldr	r3, [pc, #308]	; (8004ae8 <HAL_GPIO_Init+0x2b8>)
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	4a4c      	ldr	r2, [pc, #304]	; (8004ae8 <HAL_GPIO_Init+0x2b8>)
 80049b6:	f043 0301 	orr.w	r3, r3, #1
 80049ba:	6193      	str	r3, [r2, #24]
 80049bc:	4b4a      	ldr	r3, [pc, #296]	; (8004ae8 <HAL_GPIO_Init+0x2b8>)
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	60bb      	str	r3, [r7, #8]
 80049c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80049c8:	4a48      	ldr	r2, [pc, #288]	; (8004aec <HAL_GPIO_Init+0x2bc>)
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	089b      	lsrs	r3, r3, #2
 80049ce:	3302      	adds	r3, #2
 80049d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	f003 0303 	and.w	r3, r3, #3
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	220f      	movs	r2, #15
 80049e0:	fa02 f303 	lsl.w	r3, r2, r3
 80049e4:	43db      	mvns	r3, r3
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	4013      	ands	r3, r2
 80049ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a40      	ldr	r2, [pc, #256]	; (8004af0 <HAL_GPIO_Init+0x2c0>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d013      	beq.n	8004a1c <HAL_GPIO_Init+0x1ec>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a3f      	ldr	r2, [pc, #252]	; (8004af4 <HAL_GPIO_Init+0x2c4>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d00d      	beq.n	8004a18 <HAL_GPIO_Init+0x1e8>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a3e      	ldr	r2, [pc, #248]	; (8004af8 <HAL_GPIO_Init+0x2c8>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d007      	beq.n	8004a14 <HAL_GPIO_Init+0x1e4>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a3d      	ldr	r2, [pc, #244]	; (8004afc <HAL_GPIO_Init+0x2cc>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d101      	bne.n	8004a10 <HAL_GPIO_Init+0x1e0>
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e006      	b.n	8004a1e <HAL_GPIO_Init+0x1ee>
 8004a10:	2304      	movs	r3, #4
 8004a12:	e004      	b.n	8004a1e <HAL_GPIO_Init+0x1ee>
 8004a14:	2302      	movs	r3, #2
 8004a16:	e002      	b.n	8004a1e <HAL_GPIO_Init+0x1ee>
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e000      	b.n	8004a1e <HAL_GPIO_Init+0x1ee>
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a20:	f002 0203 	and.w	r2, r2, #3
 8004a24:	0092      	lsls	r2, r2, #2
 8004a26:	4093      	lsls	r3, r2
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004a2e:	492f      	ldr	r1, [pc, #188]	; (8004aec <HAL_GPIO_Init+0x2bc>)
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	089b      	lsrs	r3, r3, #2
 8004a34:	3302      	adds	r3, #2
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d006      	beq.n	8004a56 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004a48:	4b2d      	ldr	r3, [pc, #180]	; (8004b00 <HAL_GPIO_Init+0x2d0>)
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	492c      	ldr	r1, [pc, #176]	; (8004b00 <HAL_GPIO_Init+0x2d0>)
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	608b      	str	r3, [r1, #8]
 8004a54:	e006      	b.n	8004a64 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004a56:	4b2a      	ldr	r3, [pc, #168]	; (8004b00 <HAL_GPIO_Init+0x2d0>)
 8004a58:	689a      	ldr	r2, [r3, #8]
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	43db      	mvns	r3, r3
 8004a5e:	4928      	ldr	r1, [pc, #160]	; (8004b00 <HAL_GPIO_Init+0x2d0>)
 8004a60:	4013      	ands	r3, r2
 8004a62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d006      	beq.n	8004a7e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004a70:	4b23      	ldr	r3, [pc, #140]	; (8004b00 <HAL_GPIO_Init+0x2d0>)
 8004a72:	68da      	ldr	r2, [r3, #12]
 8004a74:	4922      	ldr	r1, [pc, #136]	; (8004b00 <HAL_GPIO_Init+0x2d0>)
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	60cb      	str	r3, [r1, #12]
 8004a7c:	e006      	b.n	8004a8c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004a7e:	4b20      	ldr	r3, [pc, #128]	; (8004b00 <HAL_GPIO_Init+0x2d0>)
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	43db      	mvns	r3, r3
 8004a86:	491e      	ldr	r1, [pc, #120]	; (8004b00 <HAL_GPIO_Init+0x2d0>)
 8004a88:	4013      	ands	r3, r2
 8004a8a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d006      	beq.n	8004aa6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004a98:	4b19      	ldr	r3, [pc, #100]	; (8004b00 <HAL_GPIO_Init+0x2d0>)
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	4918      	ldr	r1, [pc, #96]	; (8004b00 <HAL_GPIO_Init+0x2d0>)
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	604b      	str	r3, [r1, #4]
 8004aa4:	e006      	b.n	8004ab4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004aa6:	4b16      	ldr	r3, [pc, #88]	; (8004b00 <HAL_GPIO_Init+0x2d0>)
 8004aa8:	685a      	ldr	r2, [r3, #4]
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	43db      	mvns	r3, r3
 8004aae:	4914      	ldr	r1, [pc, #80]	; (8004b00 <HAL_GPIO_Init+0x2d0>)
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d021      	beq.n	8004b04 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004ac0:	4b0f      	ldr	r3, [pc, #60]	; (8004b00 <HAL_GPIO_Init+0x2d0>)
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	490e      	ldr	r1, [pc, #56]	; (8004b00 <HAL_GPIO_Init+0x2d0>)
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	600b      	str	r3, [r1, #0]
 8004acc:	e021      	b.n	8004b12 <HAL_GPIO_Init+0x2e2>
 8004ace:	bf00      	nop
 8004ad0:	10320000 	.word	0x10320000
 8004ad4:	10310000 	.word	0x10310000
 8004ad8:	10220000 	.word	0x10220000
 8004adc:	10210000 	.word	0x10210000
 8004ae0:	10120000 	.word	0x10120000
 8004ae4:	10110000 	.word	0x10110000
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	40010000 	.word	0x40010000
 8004af0:	40010800 	.word	0x40010800
 8004af4:	40010c00 	.word	0x40010c00
 8004af8:	40011000 	.word	0x40011000
 8004afc:	40011400 	.word	0x40011400
 8004b00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004b04:	4b0b      	ldr	r3, [pc, #44]	; (8004b34 <HAL_GPIO_Init+0x304>)
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	43db      	mvns	r3, r3
 8004b0c:	4909      	ldr	r1, [pc, #36]	; (8004b34 <HAL_GPIO_Init+0x304>)
 8004b0e:	4013      	ands	r3, r2
 8004b10:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	3301      	adds	r3, #1
 8004b16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f47f ae8e 	bne.w	8004844 <HAL_GPIO_Init+0x14>
  }
}
 8004b28:	bf00      	nop
 8004b2a:	bf00      	nop
 8004b2c:	372c      	adds	r7, #44	; 0x2c
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bc80      	pop	{r7}
 8004b32:	4770      	bx	lr
 8004b34:	40010400 	.word	0x40010400

08004b38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	460b      	mov	r3, r1
 8004b42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	887b      	ldrh	r3, [r7, #2]
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d002      	beq.n	8004b56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b50:	2301      	movs	r3, #1
 8004b52:	73fb      	strb	r3, [r7, #15]
 8004b54:	e001      	b.n	8004b5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b56:	2300      	movs	r3, #0
 8004b58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bc80      	pop	{r7}
 8004b64:	4770      	bx	lr

08004b66 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	460b      	mov	r3, r1
 8004b70:	807b      	strh	r3, [r7, #2]
 8004b72:	4613      	mov	r3, r2
 8004b74:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b76:	787b      	ldrb	r3, [r7, #1]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b7c:	887a      	ldrh	r2, [r7, #2]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004b82:	e003      	b.n	8004b8c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b84:	887b      	ldrh	r3, [r7, #2]
 8004b86:	041a      	lsls	r2, r3, #16
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	611a      	str	r2, [r3, #16]
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bc80      	pop	{r7}
 8004b94:	4770      	bx	lr

08004b96 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b085      	sub	sp, #20
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ba8:	887a      	ldrh	r2, [r7, #2]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	4013      	ands	r3, r2
 8004bae:	041a      	lsls	r2, r3, #16
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	43d9      	mvns	r1, r3
 8004bb4:	887b      	ldrh	r3, [r7, #2]
 8004bb6:	400b      	ands	r3, r1
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	611a      	str	r2, [r3, #16]
}
 8004bbe:	bf00      	nop
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bc80      	pop	{r7}
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	4603      	mov	r3, r0
 8004bd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004bd2:	4b08      	ldr	r3, [pc, #32]	; (8004bf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bd4:	695a      	ldr	r2, [r3, #20]
 8004bd6:	88fb      	ldrh	r3, [r7, #6]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d006      	beq.n	8004bec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004bde:	4a05      	ldr	r2, [pc, #20]	; (8004bf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004be0:	88fb      	ldrh	r3, [r7, #6]
 8004be2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004be4:	88fb      	ldrh	r3, [r7, #6]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fd feac 	bl	8002944 <HAL_GPIO_EXTI_Callback>
  }
}
 8004bec:	bf00      	nop
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	40010400 	.word	0x40010400

08004bf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e12b      	b.n	8004e62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d106      	bne.n	8004c24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7fd fafe 	bl	8002220 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2224      	movs	r2, #36	; 0x24
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f022 0201 	bic.w	r2, r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c5c:	f001 f960 	bl	8005f20 <HAL_RCC_GetPCLK1Freq>
 8004c60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	4a81      	ldr	r2, [pc, #516]	; (8004e6c <HAL_I2C_Init+0x274>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d807      	bhi.n	8004c7c <HAL_I2C_Init+0x84>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4a80      	ldr	r2, [pc, #512]	; (8004e70 <HAL_I2C_Init+0x278>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	bf94      	ite	ls
 8004c74:	2301      	movls	r3, #1
 8004c76:	2300      	movhi	r3, #0
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	e006      	b.n	8004c8a <HAL_I2C_Init+0x92>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	4a7d      	ldr	r2, [pc, #500]	; (8004e74 <HAL_I2C_Init+0x27c>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	bf94      	ite	ls
 8004c84:	2301      	movls	r3, #1
 8004c86:	2300      	movhi	r3, #0
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e0e7      	b.n	8004e62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4a78      	ldr	r2, [pc, #480]	; (8004e78 <HAL_I2C_Init+0x280>)
 8004c96:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9a:	0c9b      	lsrs	r3, r3, #18
 8004c9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	4a6a      	ldr	r2, [pc, #424]	; (8004e6c <HAL_I2C_Init+0x274>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d802      	bhi.n	8004ccc <HAL_I2C_Init+0xd4>
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	3301      	adds	r3, #1
 8004cca:	e009      	b.n	8004ce0 <HAL_I2C_Init+0xe8>
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004cd2:	fb02 f303 	mul.w	r3, r2, r3
 8004cd6:	4a69      	ldr	r2, [pc, #420]	; (8004e7c <HAL_I2C_Init+0x284>)
 8004cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cdc:	099b      	lsrs	r3, r3, #6
 8004cde:	3301      	adds	r3, #1
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	6812      	ldr	r2, [r2, #0]
 8004ce4:	430b      	orrs	r3, r1
 8004ce6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004cf2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	495c      	ldr	r1, [pc, #368]	; (8004e6c <HAL_I2C_Init+0x274>)
 8004cfc:	428b      	cmp	r3, r1
 8004cfe:	d819      	bhi.n	8004d34 <HAL_I2C_Init+0x13c>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	1e59      	subs	r1, r3, #1
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d0e:	1c59      	adds	r1, r3, #1
 8004d10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d14:	400b      	ands	r3, r1
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <HAL_I2C_Init+0x138>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	1e59      	subs	r1, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d28:	3301      	adds	r3, #1
 8004d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d2e:	e051      	b.n	8004dd4 <HAL_I2C_Init+0x1dc>
 8004d30:	2304      	movs	r3, #4
 8004d32:	e04f      	b.n	8004dd4 <HAL_I2C_Init+0x1dc>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d111      	bne.n	8004d60 <HAL_I2C_Init+0x168>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	1e58      	subs	r0, r3, #1
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6859      	ldr	r1, [r3, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	440b      	add	r3, r1
 8004d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d4e:	3301      	adds	r3, #1
 8004d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	bf0c      	ite	eq
 8004d58:	2301      	moveq	r3, #1
 8004d5a:	2300      	movne	r3, #0
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	e012      	b.n	8004d86 <HAL_I2C_Init+0x18e>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	1e58      	subs	r0, r3, #1
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6859      	ldr	r1, [r3, #4]
 8004d68:	460b      	mov	r3, r1
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	440b      	add	r3, r1
 8004d6e:	0099      	lsls	r1, r3, #2
 8004d70:	440b      	add	r3, r1
 8004d72:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d76:	3301      	adds	r3, #1
 8004d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	bf0c      	ite	eq
 8004d80:	2301      	moveq	r3, #1
 8004d82:	2300      	movne	r3, #0
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <HAL_I2C_Init+0x196>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e022      	b.n	8004dd4 <HAL_I2C_Init+0x1dc>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10e      	bne.n	8004db4 <HAL_I2C_Init+0x1bc>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	1e58      	subs	r0, r3, #1
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6859      	ldr	r1, [r3, #4]
 8004d9e:	460b      	mov	r3, r1
 8004da0:	005b      	lsls	r3, r3, #1
 8004da2:	440b      	add	r3, r1
 8004da4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004da8:	3301      	adds	r3, #1
 8004daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004db2:	e00f      	b.n	8004dd4 <HAL_I2C_Init+0x1dc>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	1e58      	subs	r0, r3, #1
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6859      	ldr	r1, [r3, #4]
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	440b      	add	r3, r1
 8004dc2:	0099      	lsls	r1, r3, #2
 8004dc4:	440b      	add	r3, r1
 8004dc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dca:	3301      	adds	r3, #1
 8004dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dd4:	6879      	ldr	r1, [r7, #4]
 8004dd6:	6809      	ldr	r1, [r1, #0]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	69da      	ldr	r2, [r3, #28]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	431a      	orrs	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004e02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6911      	ldr	r1, [r2, #16]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	68d2      	ldr	r2, [r2, #12]
 8004e0e:	4311      	orrs	r1, r2
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6812      	ldr	r2, [r2, #0]
 8004e14:	430b      	orrs	r3, r1
 8004e16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	695a      	ldr	r2, [r3, #20]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f042 0201 	orr.w	r2, r2, #1
 8004e42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	000186a0 	.word	0x000186a0
 8004e70:	001e847f 	.word	0x001e847f
 8004e74:	003d08ff 	.word	0x003d08ff
 8004e78:	431bde83 	.word	0x431bde83
 8004e7c:	10624dd3 	.word	0x10624dd3

08004e80 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b088      	sub	sp, #32
 8004e84:	af02      	add	r7, sp, #8
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	607a      	str	r2, [r7, #4]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	817b      	strh	r3, [r7, #10]
 8004e90:	4613      	mov	r3, r2
 8004e92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e94:	f7fe feb2 	bl	8003bfc <HAL_GetTick>
 8004e98:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b20      	cmp	r3, #32
 8004ea4:	f040 80e0 	bne.w	8005068 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	2319      	movs	r3, #25
 8004eae:	2201      	movs	r2, #1
 8004eb0:	4970      	ldr	r1, [pc, #448]	; (8005074 <HAL_I2C_Master_Transmit+0x1f4>)
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 fa92 	bl	80053dc <I2C_WaitOnFlagUntilTimeout>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	e0d3      	b.n	800506a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d101      	bne.n	8004ed0 <HAL_I2C_Master_Transmit+0x50>
 8004ecc:	2302      	movs	r3, #2
 8004ece:	e0cc      	b.n	800506a <HAL_I2C_Master_Transmit+0x1ea>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d007      	beq.n	8004ef6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f042 0201 	orr.w	r2, r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2221      	movs	r2, #33	; 0x21
 8004f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2210      	movs	r2, #16
 8004f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	893a      	ldrh	r2, [r7, #8]
 8004f26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	4a50      	ldr	r2, [pc, #320]	; (8005078 <HAL_I2C_Master_Transmit+0x1f8>)
 8004f36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004f38:	8979      	ldrh	r1, [r7, #10]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	6a3a      	ldr	r2, [r7, #32]
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f000 f9ca 	bl	80052d8 <I2C_MasterRequestWrite>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e08d      	b.n	800506a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f4e:	2300      	movs	r3, #0
 8004f50:	613b      	str	r3, [r7, #16]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	613b      	str	r3, [r7, #16]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	613b      	str	r3, [r7, #16]
 8004f62:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004f64:	e066      	b.n	8005034 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	6a39      	ldr	r1, [r7, #32]
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f000 fb50 	bl	8005610 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00d      	beq.n	8004f92 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	2b04      	cmp	r3, #4
 8004f7c:	d107      	bne.n	8004f8e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e06b      	b.n	800506a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f96:	781a      	ldrb	r2, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	1c5a      	adds	r2, r3, #1
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	f003 0304 	and.w	r3, r3, #4
 8004fcc:	2b04      	cmp	r3, #4
 8004fce:	d11b      	bne.n	8005008 <HAL_I2C_Master_Transmit+0x188>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d017      	beq.n	8005008 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	781a      	ldrb	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005000:	3b01      	subs	r3, #1
 8005002:	b29a      	uxth	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	6a39      	ldr	r1, [r7, #32]
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f000 fb47 	bl	80056a0 <I2C_WaitOnBTFFlagUntilTimeout>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00d      	beq.n	8005034 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501c:	2b04      	cmp	r3, #4
 800501e:	d107      	bne.n	8005030 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800502e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e01a      	b.n	800506a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005038:	2b00      	cmp	r3, #0
 800503a:	d194      	bne.n	8004f66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800504a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2220      	movs	r2, #32
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005064:	2300      	movs	r3, #0
 8005066:	e000      	b.n	800506a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005068:	2302      	movs	r3, #2
  }
}
 800506a:	4618      	mov	r0, r3
 800506c:	3718      	adds	r7, #24
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	00100002 	.word	0x00100002
 8005078:	ffff0000 	.word	0xffff0000

0800507c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b08a      	sub	sp, #40	; 0x28
 8005080:	af02      	add	r7, sp, #8
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	607a      	str	r2, [r7, #4]
 8005086:	603b      	str	r3, [r7, #0]
 8005088:	460b      	mov	r3, r1
 800508a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800508c:	f7fe fdb6 	bl	8003bfc <HAL_GetTick>
 8005090:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005092:	2300      	movs	r3, #0
 8005094:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b20      	cmp	r3, #32
 80050a0:	f040 8111 	bne.w	80052c6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	2319      	movs	r3, #25
 80050aa:	2201      	movs	r2, #1
 80050ac:	4988      	ldr	r1, [pc, #544]	; (80052d0 <HAL_I2C_IsDeviceReady+0x254>)
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 f994 	bl	80053dc <I2C_WaitOnFlagUntilTimeout>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80050ba:	2302      	movs	r3, #2
 80050bc:	e104      	b.n	80052c8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d101      	bne.n	80050cc <HAL_I2C_IsDeviceReady+0x50>
 80050c8:	2302      	movs	r3, #2
 80050ca:	e0fd      	b.n	80052c8 <HAL_I2C_IsDeviceReady+0x24c>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d007      	beq.n	80050f2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f042 0201 	orr.w	r2, r2, #1
 80050f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005100:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2224      	movs	r2, #36	; 0x24
 8005106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4a70      	ldr	r2, [pc, #448]	; (80052d4 <HAL_I2C_IsDeviceReady+0x258>)
 8005114:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005124:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2200      	movs	r2, #0
 800512e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f000 f952 	bl	80053dc <I2C_WaitOnFlagUntilTimeout>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00d      	beq.n	800515a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800514c:	d103      	bne.n	8005156 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005154:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e0b6      	b.n	80052c8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800515a:	897b      	ldrh	r3, [r7, #10]
 800515c:	b2db      	uxtb	r3, r3
 800515e:	461a      	mov	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005168:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800516a:	f7fe fd47 	bl	8003bfc <HAL_GetTick>
 800516e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b02      	cmp	r3, #2
 800517c:	bf0c      	ite	eq
 800517e:	2301      	moveq	r3, #1
 8005180:	2300      	movne	r3, #0
 8005182:	b2db      	uxtb	r3, r3
 8005184:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005194:	bf0c      	ite	eq
 8005196:	2301      	moveq	r3, #1
 8005198:	2300      	movne	r3, #0
 800519a:	b2db      	uxtb	r3, r3
 800519c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800519e:	e025      	b.n	80051ec <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80051a0:	f7fe fd2c 	bl	8003bfc <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d302      	bcc.n	80051b6 <HAL_I2C_IsDeviceReady+0x13a>
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d103      	bne.n	80051be <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	22a0      	movs	r2, #160	; 0xa0
 80051ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	bf0c      	ite	eq
 80051cc:	2301      	moveq	r3, #1
 80051ce:	2300      	movne	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051e2:	bf0c      	ite	eq
 80051e4:	2301      	moveq	r3, #1
 80051e6:	2300      	movne	r3, #0
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2ba0      	cmp	r3, #160	; 0xa0
 80051f6:	d005      	beq.n	8005204 <HAL_I2C_IsDeviceReady+0x188>
 80051f8:	7dfb      	ldrb	r3, [r7, #23]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d102      	bne.n	8005204 <HAL_I2C_IsDeviceReady+0x188>
 80051fe:	7dbb      	ldrb	r3, [r7, #22]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0cd      	beq.n	80051a0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2220      	movs	r2, #32
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b02      	cmp	r3, #2
 8005218:	d129      	bne.n	800526e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005228:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800522a:	2300      	movs	r3, #0
 800522c:	613b      	str	r3, [r7, #16]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	613b      	str	r3, [r7, #16]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	613b      	str	r3, [r7, #16]
 800523e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	9300      	str	r3, [sp, #0]
 8005244:	2319      	movs	r3, #25
 8005246:	2201      	movs	r2, #1
 8005248:	4921      	ldr	r1, [pc, #132]	; (80052d0 <HAL_I2C_IsDeviceReady+0x254>)
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 f8c6 	bl	80053dc <I2C_WaitOnFlagUntilTimeout>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e036      	b.n	80052c8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2220      	movs	r2, #32
 800525e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800526a:	2300      	movs	r3, #0
 800526c:	e02c      	b.n	80052c8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800527c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005286:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	2319      	movs	r3, #25
 800528e:	2201      	movs	r2, #1
 8005290:	490f      	ldr	r1, [pc, #60]	; (80052d0 <HAL_I2C_IsDeviceReady+0x254>)
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f000 f8a2 	bl	80053dc <I2C_WaitOnFlagUntilTimeout>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e012      	b.n	80052c8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	3301      	adds	r3, #1
 80052a6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	f4ff af32 	bcc.w	8005116 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2220      	movs	r2, #32
 80052b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e000      	b.n	80052c8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80052c6:	2302      	movs	r3, #2
  }
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3720      	adds	r7, #32
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	00100002 	.word	0x00100002
 80052d4:	ffff0000 	.word	0xffff0000

080052d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b088      	sub	sp, #32
 80052dc:	af02      	add	r7, sp, #8
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	607a      	str	r2, [r7, #4]
 80052e2:	603b      	str	r3, [r7, #0]
 80052e4:	460b      	mov	r3, r1
 80052e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	d006      	beq.n	8005302 <I2C_MasterRequestWrite+0x2a>
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d003      	beq.n	8005302 <I2C_MasterRequestWrite+0x2a>
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005300:	d108      	bne.n	8005314 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	e00b      	b.n	800532c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005318:	2b12      	cmp	r3, #18
 800531a:	d107      	bne.n	800532c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800532a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f000 f84f 	bl	80053dc <I2C_WaitOnFlagUntilTimeout>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00d      	beq.n	8005360 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005352:	d103      	bne.n	800535c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f44f 7200 	mov.w	r2, #512	; 0x200
 800535a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e035      	b.n	80053cc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005368:	d108      	bne.n	800537c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800536a:	897b      	ldrh	r3, [r7, #10]
 800536c:	b2db      	uxtb	r3, r3
 800536e:	461a      	mov	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005378:	611a      	str	r2, [r3, #16]
 800537a:	e01b      	b.n	80053b4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800537c:	897b      	ldrh	r3, [r7, #10]
 800537e:	11db      	asrs	r3, r3, #7
 8005380:	b2db      	uxtb	r3, r3
 8005382:	f003 0306 	and.w	r3, r3, #6
 8005386:	b2db      	uxtb	r3, r3
 8005388:	f063 030f 	orn	r3, r3, #15
 800538c:	b2da      	uxtb	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	490e      	ldr	r1, [pc, #56]	; (80053d4 <I2C_MasterRequestWrite+0xfc>)
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f000 f898 	bl	80054d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e010      	b.n	80053cc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80053aa:	897b      	ldrh	r3, [r7, #10]
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	4907      	ldr	r1, [pc, #28]	; (80053d8 <I2C_MasterRequestWrite+0x100>)
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f000 f888 	bl	80054d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d001      	beq.n	80053ca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e000      	b.n	80053cc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3718      	adds	r7, #24
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	00010008 	.word	0x00010008
 80053d8:	00010002 	.word	0x00010002

080053dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	603b      	str	r3, [r7, #0]
 80053e8:	4613      	mov	r3, r2
 80053ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053ec:	e048      	b.n	8005480 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f4:	d044      	beq.n	8005480 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053f6:	f7fe fc01 	bl	8003bfc <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	429a      	cmp	r2, r3
 8005404:	d302      	bcc.n	800540c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d139      	bne.n	8005480 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	0c1b      	lsrs	r3, r3, #16
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b01      	cmp	r3, #1
 8005414:	d10d      	bne.n	8005432 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	43da      	mvns	r2, r3
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	4013      	ands	r3, r2
 8005422:	b29b      	uxth	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	bf0c      	ite	eq
 8005428:	2301      	moveq	r3, #1
 800542a:	2300      	movne	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	461a      	mov	r2, r3
 8005430:	e00c      	b.n	800544c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	43da      	mvns	r2, r3
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	4013      	ands	r3, r2
 800543e:	b29b      	uxth	r3, r3
 8005440:	2b00      	cmp	r3, #0
 8005442:	bf0c      	ite	eq
 8005444:	2301      	moveq	r3, #1
 8005446:	2300      	movne	r3, #0
 8005448:	b2db      	uxtb	r3, r3
 800544a:	461a      	mov	r2, r3
 800544c:	79fb      	ldrb	r3, [r7, #7]
 800544e:	429a      	cmp	r2, r3
 8005450:	d116      	bne.n	8005480 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2220      	movs	r2, #32
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546c:	f043 0220 	orr.w	r2, r3, #32
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e023      	b.n	80054c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	0c1b      	lsrs	r3, r3, #16
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b01      	cmp	r3, #1
 8005488:	d10d      	bne.n	80054a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	43da      	mvns	r2, r3
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	4013      	ands	r3, r2
 8005496:	b29b      	uxth	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	bf0c      	ite	eq
 800549c:	2301      	moveq	r3, #1
 800549e:	2300      	movne	r3, #0
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	461a      	mov	r2, r3
 80054a4:	e00c      	b.n	80054c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	43da      	mvns	r2, r3
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	4013      	ands	r3, r2
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	bf0c      	ite	eq
 80054b8:	2301      	moveq	r3, #1
 80054ba:	2300      	movne	r3, #0
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	461a      	mov	r2, r3
 80054c0:	79fb      	ldrb	r3, [r7, #7]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d093      	beq.n	80053ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
 80054dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054de:	e071      	b.n	80055c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ee:	d123      	bne.n	8005538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005508:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2220      	movs	r2, #32
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005524:	f043 0204 	orr.w	r2, r3, #4
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e067      	b.n	8005608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553e:	d041      	beq.n	80055c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005540:	f7fe fb5c 	bl	8003bfc <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	429a      	cmp	r2, r3
 800554e:	d302      	bcc.n	8005556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d136      	bne.n	80055c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	0c1b      	lsrs	r3, r3, #16
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b01      	cmp	r3, #1
 800555e:	d10c      	bne.n	800557a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	43da      	mvns	r2, r3
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	4013      	ands	r3, r2
 800556c:	b29b      	uxth	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	bf14      	ite	ne
 8005572:	2301      	movne	r3, #1
 8005574:	2300      	moveq	r3, #0
 8005576:	b2db      	uxtb	r3, r3
 8005578:	e00b      	b.n	8005592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	43da      	mvns	r2, r3
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	4013      	ands	r3, r2
 8005586:	b29b      	uxth	r3, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	bf14      	ite	ne
 800558c:	2301      	movne	r3, #1
 800558e:	2300      	moveq	r3, #0
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d016      	beq.n	80055c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2220      	movs	r2, #32
 80055a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b0:	f043 0220 	orr.w	r2, r3, #32
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e021      	b.n	8005608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	0c1b      	lsrs	r3, r3, #16
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d10c      	bne.n	80055e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	43da      	mvns	r2, r3
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	4013      	ands	r3, r2
 80055da:	b29b      	uxth	r3, r3
 80055dc:	2b00      	cmp	r3, #0
 80055de:	bf14      	ite	ne
 80055e0:	2301      	movne	r3, #1
 80055e2:	2300      	moveq	r3, #0
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	e00b      	b.n	8005600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	43da      	mvns	r2, r3
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	4013      	ands	r3, r2
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	bf14      	ite	ne
 80055fa:	2301      	movne	r3, #1
 80055fc:	2300      	moveq	r3, #0
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	2b00      	cmp	r3, #0
 8005602:	f47f af6d 	bne.w	80054e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800561c:	e034      	b.n	8005688 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f000 f886 	bl	8005730 <I2C_IsAcknowledgeFailed>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e034      	b.n	8005698 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005634:	d028      	beq.n	8005688 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005636:	f7fe fae1 	bl	8003bfc <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	429a      	cmp	r2, r3
 8005644:	d302      	bcc.n	800564c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d11d      	bne.n	8005688 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005656:	2b80      	cmp	r3, #128	; 0x80
 8005658:	d016      	beq.n	8005688 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2220      	movs	r2, #32
 8005664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005674:	f043 0220 	orr.w	r2, r3, #32
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e007      	b.n	8005698 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005692:	2b80      	cmp	r3, #128	; 0x80
 8005694:	d1c3      	bne.n	800561e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056ac:	e034      	b.n	8005718 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f000 f83e 	bl	8005730 <I2C_IsAcknowledgeFailed>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e034      	b.n	8005728 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c4:	d028      	beq.n	8005718 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056c6:	f7fe fa99 	bl	8003bfc <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d302      	bcc.n	80056dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d11d      	bne.n	8005718 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	f003 0304 	and.w	r3, r3, #4
 80056e6:	2b04      	cmp	r3, #4
 80056e8:	d016      	beq.n	8005718 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2220      	movs	r2, #32
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005704:	f043 0220 	orr.w	r2, r3, #32
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e007      	b.n	8005728 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	f003 0304 	and.w	r3, r3, #4
 8005722:	2b04      	cmp	r3, #4
 8005724:	d1c3      	bne.n	80056ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005746:	d11b      	bne.n	8005780 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005750:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2220      	movs	r2, #32
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576c:	f043 0204 	orr.w	r2, r3, #4
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e000      	b.n	8005782 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	bc80      	pop	{r7}
 800578a:	4770      	bx	lr

0800578c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e272      	b.n	8005c84 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f000 8087 	beq.w	80058ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80057ac:	4b92      	ldr	r3, [pc, #584]	; (80059f8 <HAL_RCC_OscConfig+0x26c>)
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f003 030c 	and.w	r3, r3, #12
 80057b4:	2b04      	cmp	r3, #4
 80057b6:	d00c      	beq.n	80057d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80057b8:	4b8f      	ldr	r3, [pc, #572]	; (80059f8 <HAL_RCC_OscConfig+0x26c>)
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f003 030c 	and.w	r3, r3, #12
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d112      	bne.n	80057ea <HAL_RCC_OscConfig+0x5e>
 80057c4:	4b8c      	ldr	r3, [pc, #560]	; (80059f8 <HAL_RCC_OscConfig+0x26c>)
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057d0:	d10b      	bne.n	80057ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057d2:	4b89      	ldr	r3, [pc, #548]	; (80059f8 <HAL_RCC_OscConfig+0x26c>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d06c      	beq.n	80058b8 <HAL_RCC_OscConfig+0x12c>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d168      	bne.n	80058b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e24c      	b.n	8005c84 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057f2:	d106      	bne.n	8005802 <HAL_RCC_OscConfig+0x76>
 80057f4:	4b80      	ldr	r3, [pc, #512]	; (80059f8 <HAL_RCC_OscConfig+0x26c>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a7f      	ldr	r2, [pc, #508]	; (80059f8 <HAL_RCC_OscConfig+0x26c>)
 80057fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057fe:	6013      	str	r3, [r2, #0]
 8005800:	e02e      	b.n	8005860 <HAL_RCC_OscConfig+0xd4>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10c      	bne.n	8005824 <HAL_RCC_OscConfig+0x98>
 800580a:	4b7b      	ldr	r3, [pc, #492]	; (80059f8 <HAL_RCC_OscConfig+0x26c>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a7a      	ldr	r2, [pc, #488]	; (80059f8 <HAL_RCC_OscConfig+0x26c>)
 8005810:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005814:	6013      	str	r3, [r2, #0]
 8005816:	4b78      	ldr	r3, [pc, #480]	; (80059f8 <HAL_RCC_OscConfig+0x26c>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a77      	ldr	r2, [pc, #476]	; (80059f8 <HAL_RCC_OscConfig+0x26c>)
 800581c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005820:	6013      	str	r3, [r2, #0]
 8005822:	e01d      	b.n	8005860 <HAL_RCC_OscConfig+0xd4>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800582c:	d10c      	bne.n	8005848 <HAL_RCC_OscConfig+0xbc>
 800582e:	4b72      	ldr	r3, [pc, #456]	; (80059f8 <HAL_RCC_OscConfig+0x26c>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a71      	ldr	r2, [pc, #452]	; (80059f8 <HAL_RCC_OscConfig+0x26c>)
 8005834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005838:	6013      	str	r3, [r2, #0]
 800583a:	4b6f      	ldr	r3, [pc, #444]	; (80059f8 <HAL_RCC_OscConfig+0x26c>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a6e      	ldr	r2, [pc, #440]	; (80059f8 <HAL_RCC_OscConfig+0x26c>)
 8005840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005844:	6013      	str	r3, [r2, #0]
 8005846:	e00b      	b.n	8005860 <HAL_RCC_OscConfig+0xd4>
 8005848:	4b6b      	ldr	r3, [pc, #428]	; (80059f8 <HAL_RCC_OscConfig+0x26c>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a6a      	ldr	r2, [pc, #424]	; (80059f8 <HAL_RCC_OscConfig+0x26c>)
 800584e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005852:	6013      	str	r3, [r2, #0]
 8005854:	4b68      	ldr	r3, [pc, #416]	; (80059f8 <HAL_RCC_OscConfig+0x26c>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a67      	ldr	r2, [pc, #412]	; (80059f8 <HAL_RCC_OscConfig+0x26c>)
 800585a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800585e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d013      	beq.n	8005890 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005868:	f7fe f9c8 	bl	8003bfc <HAL_GetTick>
 800586c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005870:	f7fe f9c4 	bl	8003bfc <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b64      	cmp	r3, #100	; 0x64
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e200      	b.n	8005c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005882:	4b5d      	ldr	r3, [pc, #372]	; (80059f8 <HAL_RCC_OscConfig+0x26c>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0f0      	beq.n	8005870 <HAL_RCC_OscConfig+0xe4>
 800588e:	e014      	b.n	80058ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005890:	f7fe f9b4 	bl	8003bfc <HAL_GetTick>
 8005894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005896:	e008      	b.n	80058aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005898:	f7fe f9b0 	bl	8003bfc <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b64      	cmp	r3, #100	; 0x64
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e1ec      	b.n	8005c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058aa:	4b53      	ldr	r3, [pc, #332]	; (80059f8 <HAL_RCC_OscConfig+0x26c>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1f0      	bne.n	8005898 <HAL_RCC_OscConfig+0x10c>
 80058b6:	e000      	b.n	80058ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d063      	beq.n	800598e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80058c6:	4b4c      	ldr	r3, [pc, #304]	; (80059f8 <HAL_RCC_OscConfig+0x26c>)
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f003 030c 	and.w	r3, r3, #12
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00b      	beq.n	80058ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80058d2:	4b49      	ldr	r3, [pc, #292]	; (80059f8 <HAL_RCC_OscConfig+0x26c>)
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f003 030c 	and.w	r3, r3, #12
 80058da:	2b08      	cmp	r3, #8
 80058dc:	d11c      	bne.n	8005918 <HAL_RCC_OscConfig+0x18c>
 80058de:	4b46      	ldr	r3, [pc, #280]	; (80059f8 <HAL_RCC_OscConfig+0x26c>)
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d116      	bne.n	8005918 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ea:	4b43      	ldr	r3, [pc, #268]	; (80059f8 <HAL_RCC_OscConfig+0x26c>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d005      	beq.n	8005902 <HAL_RCC_OscConfig+0x176>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d001      	beq.n	8005902 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e1c0      	b.n	8005c84 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005902:	4b3d      	ldr	r3, [pc, #244]	; (80059f8 <HAL_RCC_OscConfig+0x26c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	4939      	ldr	r1, [pc, #228]	; (80059f8 <HAL_RCC_OscConfig+0x26c>)
 8005912:	4313      	orrs	r3, r2
 8005914:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005916:	e03a      	b.n	800598e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d020      	beq.n	8005962 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005920:	4b36      	ldr	r3, [pc, #216]	; (80059fc <HAL_RCC_OscConfig+0x270>)
 8005922:	2201      	movs	r2, #1
 8005924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005926:	f7fe f969 	bl	8003bfc <HAL_GetTick>
 800592a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800592c:	e008      	b.n	8005940 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800592e:	f7fe f965 	bl	8003bfc <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	2b02      	cmp	r3, #2
 800593a:	d901      	bls.n	8005940 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e1a1      	b.n	8005c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005940:	4b2d      	ldr	r3, [pc, #180]	; (80059f8 <HAL_RCC_OscConfig+0x26c>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d0f0      	beq.n	800592e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800594c:	4b2a      	ldr	r3, [pc, #168]	; (80059f8 <HAL_RCC_OscConfig+0x26c>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	00db      	lsls	r3, r3, #3
 800595a:	4927      	ldr	r1, [pc, #156]	; (80059f8 <HAL_RCC_OscConfig+0x26c>)
 800595c:	4313      	orrs	r3, r2
 800595e:	600b      	str	r3, [r1, #0]
 8005960:	e015      	b.n	800598e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005962:	4b26      	ldr	r3, [pc, #152]	; (80059fc <HAL_RCC_OscConfig+0x270>)
 8005964:	2200      	movs	r2, #0
 8005966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005968:	f7fe f948 	bl	8003bfc <HAL_GetTick>
 800596c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800596e:	e008      	b.n	8005982 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005970:	f7fe f944 	bl	8003bfc <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b02      	cmp	r3, #2
 800597c:	d901      	bls.n	8005982 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e180      	b.n	8005c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005982:	4b1d      	ldr	r3, [pc, #116]	; (80059f8 <HAL_RCC_OscConfig+0x26c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1f0      	bne.n	8005970 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0308 	and.w	r3, r3, #8
 8005996:	2b00      	cmp	r3, #0
 8005998:	d03a      	beq.n	8005a10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d019      	beq.n	80059d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059a2:	4b17      	ldr	r3, [pc, #92]	; (8005a00 <HAL_RCC_OscConfig+0x274>)
 80059a4:	2201      	movs	r2, #1
 80059a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059a8:	f7fe f928 	bl	8003bfc <HAL_GetTick>
 80059ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059ae:	e008      	b.n	80059c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059b0:	f7fe f924 	bl	8003bfc <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e160      	b.n	8005c84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059c2:	4b0d      	ldr	r3, [pc, #52]	; (80059f8 <HAL_RCC_OscConfig+0x26c>)
 80059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d0f0      	beq.n	80059b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80059ce:	2001      	movs	r0, #1
 80059d0:	f000 face 	bl	8005f70 <RCC_Delay>
 80059d4:	e01c      	b.n	8005a10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059d6:	4b0a      	ldr	r3, [pc, #40]	; (8005a00 <HAL_RCC_OscConfig+0x274>)
 80059d8:	2200      	movs	r2, #0
 80059da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059dc:	f7fe f90e 	bl	8003bfc <HAL_GetTick>
 80059e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059e2:	e00f      	b.n	8005a04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059e4:	f7fe f90a 	bl	8003bfc <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d908      	bls.n	8005a04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e146      	b.n	8005c84 <HAL_RCC_OscConfig+0x4f8>
 80059f6:	bf00      	nop
 80059f8:	40021000 	.word	0x40021000
 80059fc:	42420000 	.word	0x42420000
 8005a00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a04:	4b92      	ldr	r3, [pc, #584]	; (8005c50 <HAL_RCC_OscConfig+0x4c4>)
 8005a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a08:	f003 0302 	and.w	r3, r3, #2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1e9      	bne.n	80059e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0304 	and.w	r3, r3, #4
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 80a6 	beq.w	8005b6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a22:	4b8b      	ldr	r3, [pc, #556]	; (8005c50 <HAL_RCC_OscConfig+0x4c4>)
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10d      	bne.n	8005a4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a2e:	4b88      	ldr	r3, [pc, #544]	; (8005c50 <HAL_RCC_OscConfig+0x4c4>)
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	4a87      	ldr	r2, [pc, #540]	; (8005c50 <HAL_RCC_OscConfig+0x4c4>)
 8005a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a38:	61d3      	str	r3, [r2, #28]
 8005a3a:	4b85      	ldr	r3, [pc, #532]	; (8005c50 <HAL_RCC_OscConfig+0x4c4>)
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a42:	60bb      	str	r3, [r7, #8]
 8005a44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a46:	2301      	movs	r3, #1
 8005a48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a4a:	4b82      	ldr	r3, [pc, #520]	; (8005c54 <HAL_RCC_OscConfig+0x4c8>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d118      	bne.n	8005a88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a56:	4b7f      	ldr	r3, [pc, #508]	; (8005c54 <HAL_RCC_OscConfig+0x4c8>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a7e      	ldr	r2, [pc, #504]	; (8005c54 <HAL_RCC_OscConfig+0x4c8>)
 8005a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a62:	f7fe f8cb 	bl	8003bfc <HAL_GetTick>
 8005a66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a68:	e008      	b.n	8005a7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a6a:	f7fe f8c7 	bl	8003bfc <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	2b64      	cmp	r3, #100	; 0x64
 8005a76:	d901      	bls.n	8005a7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e103      	b.n	8005c84 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a7c:	4b75      	ldr	r3, [pc, #468]	; (8005c54 <HAL_RCC_OscConfig+0x4c8>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d0f0      	beq.n	8005a6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d106      	bne.n	8005a9e <HAL_RCC_OscConfig+0x312>
 8005a90:	4b6f      	ldr	r3, [pc, #444]	; (8005c50 <HAL_RCC_OscConfig+0x4c4>)
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	4a6e      	ldr	r2, [pc, #440]	; (8005c50 <HAL_RCC_OscConfig+0x4c4>)
 8005a96:	f043 0301 	orr.w	r3, r3, #1
 8005a9a:	6213      	str	r3, [r2, #32]
 8005a9c:	e02d      	b.n	8005afa <HAL_RCC_OscConfig+0x36e>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10c      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x334>
 8005aa6:	4b6a      	ldr	r3, [pc, #424]	; (8005c50 <HAL_RCC_OscConfig+0x4c4>)
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	4a69      	ldr	r2, [pc, #420]	; (8005c50 <HAL_RCC_OscConfig+0x4c4>)
 8005aac:	f023 0301 	bic.w	r3, r3, #1
 8005ab0:	6213      	str	r3, [r2, #32]
 8005ab2:	4b67      	ldr	r3, [pc, #412]	; (8005c50 <HAL_RCC_OscConfig+0x4c4>)
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	4a66      	ldr	r2, [pc, #408]	; (8005c50 <HAL_RCC_OscConfig+0x4c4>)
 8005ab8:	f023 0304 	bic.w	r3, r3, #4
 8005abc:	6213      	str	r3, [r2, #32]
 8005abe:	e01c      	b.n	8005afa <HAL_RCC_OscConfig+0x36e>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	2b05      	cmp	r3, #5
 8005ac6:	d10c      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x356>
 8005ac8:	4b61      	ldr	r3, [pc, #388]	; (8005c50 <HAL_RCC_OscConfig+0x4c4>)
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	4a60      	ldr	r2, [pc, #384]	; (8005c50 <HAL_RCC_OscConfig+0x4c4>)
 8005ace:	f043 0304 	orr.w	r3, r3, #4
 8005ad2:	6213      	str	r3, [r2, #32]
 8005ad4:	4b5e      	ldr	r3, [pc, #376]	; (8005c50 <HAL_RCC_OscConfig+0x4c4>)
 8005ad6:	6a1b      	ldr	r3, [r3, #32]
 8005ad8:	4a5d      	ldr	r2, [pc, #372]	; (8005c50 <HAL_RCC_OscConfig+0x4c4>)
 8005ada:	f043 0301 	orr.w	r3, r3, #1
 8005ade:	6213      	str	r3, [r2, #32]
 8005ae0:	e00b      	b.n	8005afa <HAL_RCC_OscConfig+0x36e>
 8005ae2:	4b5b      	ldr	r3, [pc, #364]	; (8005c50 <HAL_RCC_OscConfig+0x4c4>)
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	4a5a      	ldr	r2, [pc, #360]	; (8005c50 <HAL_RCC_OscConfig+0x4c4>)
 8005ae8:	f023 0301 	bic.w	r3, r3, #1
 8005aec:	6213      	str	r3, [r2, #32]
 8005aee:	4b58      	ldr	r3, [pc, #352]	; (8005c50 <HAL_RCC_OscConfig+0x4c4>)
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	4a57      	ldr	r2, [pc, #348]	; (8005c50 <HAL_RCC_OscConfig+0x4c4>)
 8005af4:	f023 0304 	bic.w	r3, r3, #4
 8005af8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d015      	beq.n	8005b2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b02:	f7fe f87b 	bl	8003bfc <HAL_GetTick>
 8005b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b08:	e00a      	b.n	8005b20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b0a:	f7fe f877 	bl	8003bfc <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d901      	bls.n	8005b20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e0b1      	b.n	8005c84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b20:	4b4b      	ldr	r3, [pc, #300]	; (8005c50 <HAL_RCC_OscConfig+0x4c4>)
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d0ee      	beq.n	8005b0a <HAL_RCC_OscConfig+0x37e>
 8005b2c:	e014      	b.n	8005b58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b2e:	f7fe f865 	bl	8003bfc <HAL_GetTick>
 8005b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b34:	e00a      	b.n	8005b4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b36:	f7fe f861 	bl	8003bfc <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d901      	bls.n	8005b4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e09b      	b.n	8005c84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b4c:	4b40      	ldr	r3, [pc, #256]	; (8005c50 <HAL_RCC_OscConfig+0x4c4>)
 8005b4e:	6a1b      	ldr	r3, [r3, #32]
 8005b50:	f003 0302 	and.w	r3, r3, #2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1ee      	bne.n	8005b36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005b58:	7dfb      	ldrb	r3, [r7, #23]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d105      	bne.n	8005b6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b5e:	4b3c      	ldr	r3, [pc, #240]	; (8005c50 <HAL_RCC_OscConfig+0x4c4>)
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	4a3b      	ldr	r2, [pc, #236]	; (8005c50 <HAL_RCC_OscConfig+0x4c4>)
 8005b64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f000 8087 	beq.w	8005c82 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b74:	4b36      	ldr	r3, [pc, #216]	; (8005c50 <HAL_RCC_OscConfig+0x4c4>)
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f003 030c 	and.w	r3, r3, #12
 8005b7c:	2b08      	cmp	r3, #8
 8005b7e:	d061      	beq.n	8005c44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	69db      	ldr	r3, [r3, #28]
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d146      	bne.n	8005c16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b88:	4b33      	ldr	r3, [pc, #204]	; (8005c58 <HAL_RCC_OscConfig+0x4cc>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b8e:	f7fe f835 	bl	8003bfc <HAL_GetTick>
 8005b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b94:	e008      	b.n	8005ba8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b96:	f7fe f831 	bl	8003bfc <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d901      	bls.n	8005ba8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e06d      	b.n	8005c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ba8:	4b29      	ldr	r3, [pc, #164]	; (8005c50 <HAL_RCC_OscConfig+0x4c4>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1f0      	bne.n	8005b96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bbc:	d108      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005bbe:	4b24      	ldr	r3, [pc, #144]	; (8005c50 <HAL_RCC_OscConfig+0x4c4>)
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	4921      	ldr	r1, [pc, #132]	; (8005c50 <HAL_RCC_OscConfig+0x4c4>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bd0:	4b1f      	ldr	r3, [pc, #124]	; (8005c50 <HAL_RCC_OscConfig+0x4c4>)
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a19      	ldr	r1, [r3, #32]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	430b      	orrs	r3, r1
 8005be2:	491b      	ldr	r1, [pc, #108]	; (8005c50 <HAL_RCC_OscConfig+0x4c4>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005be8:	4b1b      	ldr	r3, [pc, #108]	; (8005c58 <HAL_RCC_OscConfig+0x4cc>)
 8005bea:	2201      	movs	r2, #1
 8005bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bee:	f7fe f805 	bl	8003bfc <HAL_GetTick>
 8005bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005bf4:	e008      	b.n	8005c08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bf6:	f7fe f801 	bl	8003bfc <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d901      	bls.n	8005c08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e03d      	b.n	8005c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c08:	4b11      	ldr	r3, [pc, #68]	; (8005c50 <HAL_RCC_OscConfig+0x4c4>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d0f0      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x46a>
 8005c14:	e035      	b.n	8005c82 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c16:	4b10      	ldr	r3, [pc, #64]	; (8005c58 <HAL_RCC_OscConfig+0x4cc>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c1c:	f7fd ffee 	bl	8003bfc <HAL_GetTick>
 8005c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c22:	e008      	b.n	8005c36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c24:	f7fd ffea 	bl	8003bfc <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e026      	b.n	8005c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c36:	4b06      	ldr	r3, [pc, #24]	; (8005c50 <HAL_RCC_OscConfig+0x4c4>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1f0      	bne.n	8005c24 <HAL_RCC_OscConfig+0x498>
 8005c42:	e01e      	b.n	8005c82 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	69db      	ldr	r3, [r3, #28]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d107      	bne.n	8005c5c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e019      	b.n	8005c84 <HAL_RCC_OscConfig+0x4f8>
 8005c50:	40021000 	.word	0x40021000
 8005c54:	40007000 	.word	0x40007000
 8005c58:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005c5c:	4b0b      	ldr	r3, [pc, #44]	; (8005c8c <HAL_RCC_OscConfig+0x500>)
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a1b      	ldr	r3, [r3, #32]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d106      	bne.n	8005c7e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d001      	beq.n	8005c82 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e000      	b.n	8005c84 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3718      	adds	r7, #24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	40021000 	.word	0x40021000

08005c90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e0d0      	b.n	8005e46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ca4:	4b6a      	ldr	r3, [pc, #424]	; (8005e50 <HAL_RCC_ClockConfig+0x1c0>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d910      	bls.n	8005cd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cb2:	4b67      	ldr	r3, [pc, #412]	; (8005e50 <HAL_RCC_ClockConfig+0x1c0>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f023 0207 	bic.w	r2, r3, #7
 8005cba:	4965      	ldr	r1, [pc, #404]	; (8005e50 <HAL_RCC_ClockConfig+0x1c0>)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cc2:	4b63      	ldr	r3, [pc, #396]	; (8005e50 <HAL_RCC_ClockConfig+0x1c0>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0307 	and.w	r3, r3, #7
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d001      	beq.n	8005cd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e0b8      	b.n	8005e46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0302 	and.w	r3, r3, #2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d020      	beq.n	8005d22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d005      	beq.n	8005cf8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cec:	4b59      	ldr	r3, [pc, #356]	; (8005e54 <HAL_RCC_ClockConfig+0x1c4>)
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	4a58      	ldr	r2, [pc, #352]	; (8005e54 <HAL_RCC_ClockConfig+0x1c4>)
 8005cf2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005cf6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0308 	and.w	r3, r3, #8
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d005      	beq.n	8005d10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d04:	4b53      	ldr	r3, [pc, #332]	; (8005e54 <HAL_RCC_ClockConfig+0x1c4>)
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	4a52      	ldr	r2, [pc, #328]	; (8005e54 <HAL_RCC_ClockConfig+0x1c4>)
 8005d0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005d0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d10:	4b50      	ldr	r3, [pc, #320]	; (8005e54 <HAL_RCC_ClockConfig+0x1c4>)
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	494d      	ldr	r1, [pc, #308]	; (8005e54 <HAL_RCC_ClockConfig+0x1c4>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d040      	beq.n	8005db0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d107      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d36:	4b47      	ldr	r3, [pc, #284]	; (8005e54 <HAL_RCC_ClockConfig+0x1c4>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d115      	bne.n	8005d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e07f      	b.n	8005e46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d107      	bne.n	8005d5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d4e:	4b41      	ldr	r3, [pc, #260]	; (8005e54 <HAL_RCC_ClockConfig+0x1c4>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d109      	bne.n	8005d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e073      	b.n	8005e46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d5e:	4b3d      	ldr	r3, [pc, #244]	; (8005e54 <HAL_RCC_ClockConfig+0x1c4>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e06b      	b.n	8005e46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d6e:	4b39      	ldr	r3, [pc, #228]	; (8005e54 <HAL_RCC_ClockConfig+0x1c4>)
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f023 0203 	bic.w	r2, r3, #3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	4936      	ldr	r1, [pc, #216]	; (8005e54 <HAL_RCC_ClockConfig+0x1c4>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d80:	f7fd ff3c 	bl	8003bfc <HAL_GetTick>
 8005d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d86:	e00a      	b.n	8005d9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d88:	f7fd ff38 	bl	8003bfc <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d901      	bls.n	8005d9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e053      	b.n	8005e46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d9e:	4b2d      	ldr	r3, [pc, #180]	; (8005e54 <HAL_RCC_ClockConfig+0x1c4>)
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f003 020c 	and.w	r2, r3, #12
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d1eb      	bne.n	8005d88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005db0:	4b27      	ldr	r3, [pc, #156]	; (8005e50 <HAL_RCC_ClockConfig+0x1c0>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0307 	and.w	r3, r3, #7
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d210      	bcs.n	8005de0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dbe:	4b24      	ldr	r3, [pc, #144]	; (8005e50 <HAL_RCC_ClockConfig+0x1c0>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f023 0207 	bic.w	r2, r3, #7
 8005dc6:	4922      	ldr	r1, [pc, #136]	; (8005e50 <HAL_RCC_ClockConfig+0x1c0>)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dce:	4b20      	ldr	r3, [pc, #128]	; (8005e50 <HAL_RCC_ClockConfig+0x1c0>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0307 	and.w	r3, r3, #7
 8005dd6:	683a      	ldr	r2, [r7, #0]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d001      	beq.n	8005de0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e032      	b.n	8005e46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d008      	beq.n	8005dfe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dec:	4b19      	ldr	r3, [pc, #100]	; (8005e54 <HAL_RCC_ClockConfig+0x1c4>)
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	4916      	ldr	r1, [pc, #88]	; (8005e54 <HAL_RCC_ClockConfig+0x1c4>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0308 	and.w	r3, r3, #8
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d009      	beq.n	8005e1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e0a:	4b12      	ldr	r3, [pc, #72]	; (8005e54 <HAL_RCC_ClockConfig+0x1c4>)
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	00db      	lsls	r3, r3, #3
 8005e18:	490e      	ldr	r1, [pc, #56]	; (8005e54 <HAL_RCC_ClockConfig+0x1c4>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e1e:	f000 f821 	bl	8005e64 <HAL_RCC_GetSysClockFreq>
 8005e22:	4602      	mov	r2, r0
 8005e24:	4b0b      	ldr	r3, [pc, #44]	; (8005e54 <HAL_RCC_ClockConfig+0x1c4>)
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	091b      	lsrs	r3, r3, #4
 8005e2a:	f003 030f 	and.w	r3, r3, #15
 8005e2e:	490a      	ldr	r1, [pc, #40]	; (8005e58 <HAL_RCC_ClockConfig+0x1c8>)
 8005e30:	5ccb      	ldrb	r3, [r1, r3]
 8005e32:	fa22 f303 	lsr.w	r3, r2, r3
 8005e36:	4a09      	ldr	r2, [pc, #36]	; (8005e5c <HAL_RCC_ClockConfig+0x1cc>)
 8005e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005e3a:	4b09      	ldr	r3, [pc, #36]	; (8005e60 <HAL_RCC_ClockConfig+0x1d0>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7fd fe9a 	bl	8003b78 <HAL_InitTick>

  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	40022000 	.word	0x40022000
 8005e54:	40021000 	.word	0x40021000
 8005e58:	0800e384 	.word	0x0800e384
 8005e5c:	20000014 	.word	0x20000014
 8005e60:	20000018 	.word	0x20000018

08005e64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60fb      	str	r3, [r7, #12]
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60bb      	str	r3, [r7, #8]
 8005e72:	2300      	movs	r3, #0
 8005e74:	617b      	str	r3, [r7, #20]
 8005e76:	2300      	movs	r3, #0
 8005e78:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005e7e:	4b1e      	ldr	r3, [pc, #120]	; (8005ef8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f003 030c 	and.w	r3, r3, #12
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	d002      	beq.n	8005e94 <HAL_RCC_GetSysClockFreq+0x30>
 8005e8e:	2b08      	cmp	r3, #8
 8005e90:	d003      	beq.n	8005e9a <HAL_RCC_GetSysClockFreq+0x36>
 8005e92:	e027      	b.n	8005ee4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005e94:	4b19      	ldr	r3, [pc, #100]	; (8005efc <HAL_RCC_GetSysClockFreq+0x98>)
 8005e96:	613b      	str	r3, [r7, #16]
      break;
 8005e98:	e027      	b.n	8005eea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	0c9b      	lsrs	r3, r3, #18
 8005e9e:	f003 030f 	and.w	r3, r3, #15
 8005ea2:	4a17      	ldr	r2, [pc, #92]	; (8005f00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005ea4:	5cd3      	ldrb	r3, [r2, r3]
 8005ea6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d010      	beq.n	8005ed4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005eb2:	4b11      	ldr	r3, [pc, #68]	; (8005ef8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	0c5b      	lsrs	r3, r3, #17
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	4a11      	ldr	r2, [pc, #68]	; (8005f04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005ebe:	5cd3      	ldrb	r3, [r2, r3]
 8005ec0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a0d      	ldr	r2, [pc, #52]	; (8005efc <HAL_RCC_GetSysClockFreq+0x98>)
 8005ec6:	fb03 f202 	mul.w	r2, r3, r2
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed0:	617b      	str	r3, [r7, #20]
 8005ed2:	e004      	b.n	8005ede <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a0c      	ldr	r2, [pc, #48]	; (8005f08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005ed8:	fb02 f303 	mul.w	r3, r2, r3
 8005edc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	613b      	str	r3, [r7, #16]
      break;
 8005ee2:	e002      	b.n	8005eea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005ee4:	4b05      	ldr	r3, [pc, #20]	; (8005efc <HAL_RCC_GetSysClockFreq+0x98>)
 8005ee6:	613b      	str	r3, [r7, #16]
      break;
 8005ee8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005eea:	693b      	ldr	r3, [r7, #16]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	371c      	adds	r7, #28
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bc80      	pop	{r7}
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	40021000 	.word	0x40021000
 8005efc:	007a1200 	.word	0x007a1200
 8005f00:	0800e39c 	.word	0x0800e39c
 8005f04:	0800e3ac 	.word	0x0800e3ac
 8005f08:	003d0900 	.word	0x003d0900

08005f0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f10:	4b02      	ldr	r3, [pc, #8]	; (8005f1c <HAL_RCC_GetHCLKFreq+0x10>)
 8005f12:	681b      	ldr	r3, [r3, #0]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bc80      	pop	{r7}
 8005f1a:	4770      	bx	lr
 8005f1c:	20000014 	.word	0x20000014

08005f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f24:	f7ff fff2 	bl	8005f0c <HAL_RCC_GetHCLKFreq>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	4b05      	ldr	r3, [pc, #20]	; (8005f40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	0a1b      	lsrs	r3, r3, #8
 8005f30:	f003 0307 	and.w	r3, r3, #7
 8005f34:	4903      	ldr	r1, [pc, #12]	; (8005f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f36:	5ccb      	ldrb	r3, [r1, r3]
 8005f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	40021000 	.word	0x40021000
 8005f44:	0800e394 	.word	0x0800e394

08005f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f4c:	f7ff ffde 	bl	8005f0c <HAL_RCC_GetHCLKFreq>
 8005f50:	4602      	mov	r2, r0
 8005f52:	4b05      	ldr	r3, [pc, #20]	; (8005f68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	0adb      	lsrs	r3, r3, #11
 8005f58:	f003 0307 	and.w	r3, r3, #7
 8005f5c:	4903      	ldr	r1, [pc, #12]	; (8005f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f5e:	5ccb      	ldrb	r3, [r1, r3]
 8005f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	40021000 	.word	0x40021000
 8005f6c:	0800e394 	.word	0x0800e394

08005f70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005f78:	4b0a      	ldr	r3, [pc, #40]	; (8005fa4 <RCC_Delay+0x34>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a0a      	ldr	r2, [pc, #40]	; (8005fa8 <RCC_Delay+0x38>)
 8005f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f82:	0a5b      	lsrs	r3, r3, #9
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	fb02 f303 	mul.w	r3, r2, r3
 8005f8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005f8c:	bf00      	nop
  }
  while (Delay --);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	1e5a      	subs	r2, r3, #1
 8005f92:	60fa      	str	r2, [r7, #12]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1f9      	bne.n	8005f8c <RCC_Delay+0x1c>
}
 8005f98:	bf00      	nop
 8005f9a:	bf00      	nop
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bc80      	pop	{r7}
 8005fa2:	4770      	bx	lr
 8005fa4:	20000014 	.word	0x20000014
 8005fa8:	10624dd3 	.word	0x10624dd3

08005fac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	613b      	str	r3, [r7, #16]
 8005fb8:	2300      	movs	r3, #0
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d07d      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fcc:	4b4f      	ldr	r3, [pc, #316]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fce:	69db      	ldr	r3, [r3, #28]
 8005fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d10d      	bne.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fd8:	4b4c      	ldr	r3, [pc, #304]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fda:	69db      	ldr	r3, [r3, #28]
 8005fdc:	4a4b      	ldr	r2, [pc, #300]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fe2:	61d3      	str	r3, [r2, #28]
 8005fe4:	4b49      	ldr	r3, [pc, #292]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fe6:	69db      	ldr	r3, [r3, #28]
 8005fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fec:	60bb      	str	r3, [r7, #8]
 8005fee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ff4:	4b46      	ldr	r3, [pc, #280]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d118      	bne.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006000:	4b43      	ldr	r3, [pc, #268]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a42      	ldr	r2, [pc, #264]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800600a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800600c:	f7fd fdf6 	bl	8003bfc <HAL_GetTick>
 8006010:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006012:	e008      	b.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006014:	f7fd fdf2 	bl	8003bfc <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	2b64      	cmp	r3, #100	; 0x64
 8006020:	d901      	bls.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e06d      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006026:	4b3a      	ldr	r3, [pc, #232]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800602e:	2b00      	cmp	r3, #0
 8006030:	d0f0      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006032:	4b36      	ldr	r3, [pc, #216]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800603a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d02e      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	429a      	cmp	r2, r3
 800604e:	d027      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006050:	4b2e      	ldr	r3, [pc, #184]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006052:	6a1b      	ldr	r3, [r3, #32]
 8006054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006058:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800605a:	4b2e      	ldr	r3, [pc, #184]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800605c:	2201      	movs	r2, #1
 800605e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006060:	4b2c      	ldr	r3, [pc, #176]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006062:	2200      	movs	r2, #0
 8006064:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006066:	4a29      	ldr	r2, [pc, #164]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b00      	cmp	r3, #0
 8006074:	d014      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006076:	f7fd fdc1 	bl	8003bfc <HAL_GetTick>
 800607a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800607c:	e00a      	b.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800607e:	f7fd fdbd 	bl	8003bfc <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	f241 3288 	movw	r2, #5000	; 0x1388
 800608c:	4293      	cmp	r3, r2
 800608e:	d901      	bls.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e036      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006094:	4b1d      	ldr	r3, [pc, #116]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	f003 0302 	and.w	r3, r3, #2
 800609c:	2b00      	cmp	r3, #0
 800609e:	d0ee      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060a0:	4b1a      	ldr	r3, [pc, #104]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060a2:	6a1b      	ldr	r3, [r3, #32]
 80060a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	4917      	ldr	r1, [pc, #92]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80060b2:	7dfb      	ldrb	r3, [r7, #23]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d105      	bne.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060b8:	4b14      	ldr	r3, [pc, #80]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ba:	69db      	ldr	r3, [r3, #28]
 80060bc:	4a13      	ldr	r2, [pc, #76]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0302 	and.w	r3, r3, #2
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d008      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060d0:	4b0e      	ldr	r3, [pc, #56]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	490b      	ldr	r1, [pc, #44]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0310 	and.w	r3, r3, #16
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d008      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060ee:	4b07      	ldr	r3, [pc, #28]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	4904      	ldr	r1, [pc, #16]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3718      	adds	r7, #24
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	40021000 	.word	0x40021000
 8006110:	40007000 	.word	0x40007000
 8006114:	42420440 	.word	0x42420440

08006118 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b088      	sub	sp, #32
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	617b      	str	r3, [r7, #20]
 8006124:	2300      	movs	r3, #0
 8006126:	61fb      	str	r3, [r7, #28]
 8006128:	2300      	movs	r3, #0
 800612a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800612c:	2300      	movs	r3, #0
 800612e:	60fb      	str	r3, [r7, #12]
 8006130:	2300      	movs	r3, #0
 8006132:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b10      	cmp	r3, #16
 8006138:	d00a      	beq.n	8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b10      	cmp	r3, #16
 800613e:	f200 808a 	bhi.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d045      	beq.n	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b02      	cmp	r3, #2
 800614c:	d075      	beq.n	800623a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800614e:	e082      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8006150:	4b46      	ldr	r3, [pc, #280]	; (800626c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006156:	4b45      	ldr	r3, [pc, #276]	; (800626c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d07b      	beq.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	0c9b      	lsrs	r3, r3, #18
 8006166:	f003 030f 	and.w	r3, r3, #15
 800616a:	4a41      	ldr	r2, [pc, #260]	; (8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800616c:	5cd3      	ldrb	r3, [r2, r3]
 800616e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d015      	beq.n	80061a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800617a:	4b3c      	ldr	r3, [pc, #240]	; (800626c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	0c5b      	lsrs	r3, r3, #17
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	4a3b      	ldr	r2, [pc, #236]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8006186:	5cd3      	ldrb	r3, [r2, r3]
 8006188:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00d      	beq.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006194:	4a38      	ldr	r2, [pc, #224]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	fbb2 f2f3 	udiv	r2, r2, r3
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	fb02 f303 	mul.w	r3, r2, r3
 80061a2:	61fb      	str	r3, [r7, #28]
 80061a4:	e004      	b.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	4a34      	ldr	r2, [pc, #208]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80061aa:	fb02 f303 	mul.w	r3, r2, r3
 80061ae:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80061b0:	4b2e      	ldr	r3, [pc, #184]	; (800626c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061bc:	d102      	bne.n	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	61bb      	str	r3, [r7, #24]
      break;
 80061c2:	e04a      	b.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	005b      	lsls	r3, r3, #1
 80061c8:	4a2d      	ldr	r2, [pc, #180]	; (8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80061ca:	fba2 2303 	umull	r2, r3, r2, r3
 80061ce:	085b      	lsrs	r3, r3, #1
 80061d0:	61bb      	str	r3, [r7, #24]
      break;
 80061d2:	e042      	b.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80061d4:	4b25      	ldr	r3, [pc, #148]	; (800626c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061e4:	d108      	bne.n	80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f003 0302 	and.w	r3, r3, #2
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d003      	beq.n	80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80061f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061f4:	61bb      	str	r3, [r7, #24]
 80061f6:	e01f      	b.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006202:	d109      	bne.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006204:	4b19      	ldr	r3, [pc, #100]	; (800626c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006208:	f003 0302 	and.w	r3, r3, #2
 800620c:	2b00      	cmp	r3, #0
 800620e:	d003      	beq.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8006210:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006214:	61bb      	str	r3, [r7, #24]
 8006216:	e00f      	b.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800621e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006222:	d11c      	bne.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006224:	4b11      	ldr	r3, [pc, #68]	; (800626c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d016      	beq.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8006230:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006234:	61bb      	str	r3, [r7, #24]
      break;
 8006236:	e012      	b.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006238:	e011      	b.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800623a:	f7ff fe85 	bl	8005f48 <HAL_RCC_GetPCLK2Freq>
 800623e:	4602      	mov	r2, r0
 8006240:	4b0a      	ldr	r3, [pc, #40]	; (800626c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	0b9b      	lsrs	r3, r3, #14
 8006246:	f003 0303 	and.w	r3, r3, #3
 800624a:	3301      	adds	r3, #1
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006252:	61bb      	str	r3, [r7, #24]
      break;
 8006254:	e004      	b.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006256:	bf00      	nop
 8006258:	e002      	b.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800625a:	bf00      	nop
 800625c:	e000      	b.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800625e:	bf00      	nop
    }
  }
  return (frequency);
 8006260:	69bb      	ldr	r3, [r7, #24]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3720      	adds	r7, #32
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	40021000 	.word	0x40021000
 8006270:	0800e3b0 	.word	0x0800e3b0
 8006274:	0800e3c0 	.word	0x0800e3c0
 8006278:	007a1200 	.word	0x007a1200
 800627c:	003d0900 	.word	0x003d0900
 8006280:	aaaaaaab 	.word	0xaaaaaaab

08006284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e041      	b.n	800631a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d106      	bne.n	80062b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7fd fb8c 	bl	80039c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2202      	movs	r2, #2
 80062b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	3304      	adds	r3, #4
 80062c0:	4619      	mov	r1, r3
 80062c2:	4610      	mov	r0, r2
 80062c4:	f000 f940 	bl	8006548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3708      	adds	r7, #8
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
	...

08006324 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006332:	b2db      	uxtb	r3, r3
 8006334:	2b01      	cmp	r3, #1
 8006336:	d001      	beq.n	800633c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e032      	b.n	80063a2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2202      	movs	r2, #2
 8006340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a18      	ldr	r2, [pc, #96]	; (80063ac <HAL_TIM_Base_Start+0x88>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d00e      	beq.n	800636c <HAL_TIM_Base_Start+0x48>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006356:	d009      	beq.n	800636c <HAL_TIM_Base_Start+0x48>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a14      	ldr	r2, [pc, #80]	; (80063b0 <HAL_TIM_Base_Start+0x8c>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d004      	beq.n	800636c <HAL_TIM_Base_Start+0x48>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a13      	ldr	r2, [pc, #76]	; (80063b4 <HAL_TIM_Base_Start+0x90>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d111      	bne.n	8006390 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f003 0307 	and.w	r3, r3, #7
 8006376:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2b06      	cmp	r3, #6
 800637c:	d010      	beq.n	80063a0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f042 0201 	orr.w	r2, r2, #1
 800638c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800638e:	e007      	b.n	80063a0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f042 0201 	orr.w	r2, r2, #1
 800639e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3714      	adds	r7, #20
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bc80      	pop	{r7}
 80063aa:	4770      	bx	lr
 80063ac:	40012c00 	.word	0x40012c00
 80063b0:	40000400 	.word	0x40000400
 80063b4:	40000800 	.word	0x40000800

080063b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063c2:	2300      	movs	r3, #0
 80063c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d101      	bne.n	80063d4 <HAL_TIM_ConfigClockSource+0x1c>
 80063d0:	2302      	movs	r3, #2
 80063d2:	e0b4      	b.n	800653e <HAL_TIM_ConfigClockSource+0x186>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2202      	movs	r2, #2
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80063f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800640c:	d03e      	beq.n	800648c <HAL_TIM_ConfigClockSource+0xd4>
 800640e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006412:	f200 8087 	bhi.w	8006524 <HAL_TIM_ConfigClockSource+0x16c>
 8006416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800641a:	f000 8086 	beq.w	800652a <HAL_TIM_ConfigClockSource+0x172>
 800641e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006422:	d87f      	bhi.n	8006524 <HAL_TIM_ConfigClockSource+0x16c>
 8006424:	2b70      	cmp	r3, #112	; 0x70
 8006426:	d01a      	beq.n	800645e <HAL_TIM_ConfigClockSource+0xa6>
 8006428:	2b70      	cmp	r3, #112	; 0x70
 800642a:	d87b      	bhi.n	8006524 <HAL_TIM_ConfigClockSource+0x16c>
 800642c:	2b60      	cmp	r3, #96	; 0x60
 800642e:	d050      	beq.n	80064d2 <HAL_TIM_ConfigClockSource+0x11a>
 8006430:	2b60      	cmp	r3, #96	; 0x60
 8006432:	d877      	bhi.n	8006524 <HAL_TIM_ConfigClockSource+0x16c>
 8006434:	2b50      	cmp	r3, #80	; 0x50
 8006436:	d03c      	beq.n	80064b2 <HAL_TIM_ConfigClockSource+0xfa>
 8006438:	2b50      	cmp	r3, #80	; 0x50
 800643a:	d873      	bhi.n	8006524 <HAL_TIM_ConfigClockSource+0x16c>
 800643c:	2b40      	cmp	r3, #64	; 0x40
 800643e:	d058      	beq.n	80064f2 <HAL_TIM_ConfigClockSource+0x13a>
 8006440:	2b40      	cmp	r3, #64	; 0x40
 8006442:	d86f      	bhi.n	8006524 <HAL_TIM_ConfigClockSource+0x16c>
 8006444:	2b30      	cmp	r3, #48	; 0x30
 8006446:	d064      	beq.n	8006512 <HAL_TIM_ConfigClockSource+0x15a>
 8006448:	2b30      	cmp	r3, #48	; 0x30
 800644a:	d86b      	bhi.n	8006524 <HAL_TIM_ConfigClockSource+0x16c>
 800644c:	2b20      	cmp	r3, #32
 800644e:	d060      	beq.n	8006512 <HAL_TIM_ConfigClockSource+0x15a>
 8006450:	2b20      	cmp	r3, #32
 8006452:	d867      	bhi.n	8006524 <HAL_TIM_ConfigClockSource+0x16c>
 8006454:	2b00      	cmp	r3, #0
 8006456:	d05c      	beq.n	8006512 <HAL_TIM_ConfigClockSource+0x15a>
 8006458:	2b10      	cmp	r3, #16
 800645a:	d05a      	beq.n	8006512 <HAL_TIM_ConfigClockSource+0x15a>
 800645c:	e062      	b.n	8006524 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800646e:	f000 f944 	bl	80066fa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006480:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	609a      	str	r2, [r3, #8]
      break;
 800648a:	e04f      	b.n	800652c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800649c:	f000 f92d 	bl	80066fa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689a      	ldr	r2, [r3, #8]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064ae:	609a      	str	r2, [r3, #8]
      break;
 80064b0:	e03c      	b.n	800652c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064be:	461a      	mov	r2, r3
 80064c0:	f000 f8a4 	bl	800660c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2150      	movs	r1, #80	; 0x50
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 f8fb 	bl	80066c6 <TIM_ITRx_SetConfig>
      break;
 80064d0:	e02c      	b.n	800652c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064de:	461a      	mov	r2, r3
 80064e0:	f000 f8c2 	bl	8006668 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2160      	movs	r1, #96	; 0x60
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 f8eb 	bl	80066c6 <TIM_ITRx_SetConfig>
      break;
 80064f0:	e01c      	b.n	800652c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064fe:	461a      	mov	r2, r3
 8006500:	f000 f884 	bl	800660c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2140      	movs	r1, #64	; 0x40
 800650a:	4618      	mov	r0, r3
 800650c:	f000 f8db 	bl	80066c6 <TIM_ITRx_SetConfig>
      break;
 8006510:	e00c      	b.n	800652c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4619      	mov	r1, r3
 800651c:	4610      	mov	r0, r2
 800651e:	f000 f8d2 	bl	80066c6 <TIM_ITRx_SetConfig>
      break;
 8006522:	e003      	b.n	800652c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	73fb      	strb	r3, [r7, #15]
      break;
 8006528:	e000      	b.n	800652c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800652a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800653c:	7bfb      	ldrb	r3, [r7, #15]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
	...

08006548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a29      	ldr	r2, [pc, #164]	; (8006600 <TIM_Base_SetConfig+0xb8>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d00b      	beq.n	8006578 <TIM_Base_SetConfig+0x30>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006566:	d007      	beq.n	8006578 <TIM_Base_SetConfig+0x30>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a26      	ldr	r2, [pc, #152]	; (8006604 <TIM_Base_SetConfig+0xbc>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d003      	beq.n	8006578 <TIM_Base_SetConfig+0x30>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a25      	ldr	r2, [pc, #148]	; (8006608 <TIM_Base_SetConfig+0xc0>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d108      	bne.n	800658a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800657e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	4313      	orrs	r3, r2
 8006588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a1c      	ldr	r2, [pc, #112]	; (8006600 <TIM_Base_SetConfig+0xb8>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d00b      	beq.n	80065aa <TIM_Base_SetConfig+0x62>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006598:	d007      	beq.n	80065aa <TIM_Base_SetConfig+0x62>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a19      	ldr	r2, [pc, #100]	; (8006604 <TIM_Base_SetConfig+0xbc>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d003      	beq.n	80065aa <TIM_Base_SetConfig+0x62>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a18      	ldr	r2, [pc, #96]	; (8006608 <TIM_Base_SetConfig+0xc0>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d108      	bne.n	80065bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a07      	ldr	r2, [pc, #28]	; (8006600 <TIM_Base_SetConfig+0xb8>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d103      	bne.n	80065f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	691a      	ldr	r2, [r3, #16]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	615a      	str	r2, [r3, #20]
}
 80065f6:	bf00      	nop
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bc80      	pop	{r7}
 80065fe:	4770      	bx	lr
 8006600:	40012c00 	.word	0x40012c00
 8006604:	40000400 	.word	0x40000400
 8006608:	40000800 	.word	0x40000800

0800660c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800660c:	b480      	push	{r7}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6a1b      	ldr	r3, [r3, #32]
 800661c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	f023 0201 	bic.w	r2, r3, #1
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006636:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	011b      	lsls	r3, r3, #4
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	4313      	orrs	r3, r2
 8006640:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f023 030a 	bic.w	r3, r3, #10
 8006648:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	4313      	orrs	r3, r2
 8006650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	621a      	str	r2, [r3, #32]
}
 800665e:	bf00      	nop
 8006660:	371c      	adds	r7, #28
 8006662:	46bd      	mov	sp, r7
 8006664:	bc80      	pop	{r7}
 8006666:	4770      	bx	lr

08006668 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006668:	b480      	push	{r7}
 800666a:	b087      	sub	sp, #28
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6a1b      	ldr	r3, [r3, #32]
 8006678:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	f023 0210 	bic.w	r2, r3, #16
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006692:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	031b      	lsls	r3, r3, #12
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	4313      	orrs	r3, r2
 800669c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	011b      	lsls	r3, r3, #4
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	693a      	ldr	r2, [r7, #16]
 80066b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	621a      	str	r2, [r3, #32]
}
 80066bc:	bf00      	nop
 80066be:	371c      	adds	r7, #28
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bc80      	pop	{r7}
 80066c4:	4770      	bx	lr

080066c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066c6:	b480      	push	{r7}
 80066c8:	b085      	sub	sp, #20
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
 80066ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	f043 0307 	orr.w	r3, r3, #7
 80066e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	609a      	str	r2, [r3, #8]
}
 80066f0:	bf00      	nop
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bc80      	pop	{r7}
 80066f8:	4770      	bx	lr

080066fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b087      	sub	sp, #28
 80066fe:	af00      	add	r7, sp, #0
 8006700:	60f8      	str	r0, [r7, #12]
 8006702:	60b9      	str	r1, [r7, #8]
 8006704:	607a      	str	r2, [r7, #4]
 8006706:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006714:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	021a      	lsls	r2, r3, #8
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	431a      	orrs	r2, r3
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	4313      	orrs	r3, r2
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	4313      	orrs	r3, r2
 8006726:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	609a      	str	r2, [r3, #8]
}
 800672e:	bf00      	nop
 8006730:	371c      	adds	r7, #28
 8006732:	46bd      	mov	sp, r7
 8006734:	bc80      	pop	{r7}
 8006736:	4770      	bx	lr

08006738 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006748:	2b01      	cmp	r3, #1
 800674a:	d101      	bne.n	8006750 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800674c:	2302      	movs	r3, #2
 800674e:	e046      	b.n	80067de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2202      	movs	r2, #2
 800675c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006776:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	4313      	orrs	r3, r2
 8006780:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a16      	ldr	r2, [pc, #88]	; (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d00e      	beq.n	80067b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800679c:	d009      	beq.n	80067b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a12      	ldr	r2, [pc, #72]	; (80067ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d004      	beq.n	80067b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a10      	ldr	r2, [pc, #64]	; (80067f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d10c      	bne.n	80067cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	68ba      	ldr	r2, [r7, #8]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bc80      	pop	{r7}
 80067e6:	4770      	bx	lr
 80067e8:	40012c00 	.word	0x40012c00
 80067ec:	40000400 	.word	0x40000400
 80067f0:	40000800 	.word	0x40000800

080067f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e042      	b.n	800688c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b00      	cmp	r3, #0
 8006810:	d106      	bne.n	8006820 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f7fd f91c 	bl	8003a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2224      	movs	r2, #36	; 0x24
 8006824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68da      	ldr	r2, [r3, #12]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006836:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fcd5 	bl	80071e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	691a      	ldr	r2, [r3, #16]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800684c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	695a      	ldr	r2, [r3, #20]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800685c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800686c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2220      	movs	r2, #32
 8006878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2220      	movs	r2, #32
 8006880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3708      	adds	r7, #8
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	4613      	mov	r3, r2
 80068a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b20      	cmp	r3, #32
 80068ac:	d112      	bne.n	80068d4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d002      	beq.n	80068ba <HAL_UART_Receive_IT+0x26>
 80068b4:	88fb      	ldrh	r3, [r7, #6]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d101      	bne.n	80068be <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e00b      	b.n	80068d6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80068c4:	88fb      	ldrh	r3, [r7, #6]
 80068c6:	461a      	mov	r2, r3
 80068c8:	68b9      	ldr	r1, [r7, #8]
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f000 fab7 	bl	8006e3e <UART_Start_Receive_IT>
 80068d0:	4603      	mov	r3, r0
 80068d2:	e000      	b.n	80068d6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80068d4:	2302      	movs	r3, #2
  }
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
	...

080068e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b0ba      	sub	sp, #232	; 0xe8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006906:	2300      	movs	r3, #0
 8006908:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800690c:	2300      	movs	r3, #0
 800690e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006916:	f003 030f 	and.w	r3, r3, #15
 800691a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800691e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10f      	bne.n	8006946 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800692a:	f003 0320 	and.w	r3, r3, #32
 800692e:	2b00      	cmp	r3, #0
 8006930:	d009      	beq.n	8006946 <HAL_UART_IRQHandler+0x66>
 8006932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006936:	f003 0320 	and.w	r3, r3, #32
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fb93 	bl	800706a <UART_Receive_IT>
      return;
 8006944:	e25b      	b.n	8006dfe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006946:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800694a:	2b00      	cmp	r3, #0
 800694c:	f000 80de 	beq.w	8006b0c <HAL_UART_IRQHandler+0x22c>
 8006950:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006954:	f003 0301 	and.w	r3, r3, #1
 8006958:	2b00      	cmp	r3, #0
 800695a:	d106      	bne.n	800696a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800695c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006960:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 80d1 	beq.w	8006b0c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800696a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00b      	beq.n	800698e <HAL_UART_IRQHandler+0xae>
 8006976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800697a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800697e:	2b00      	cmp	r3, #0
 8006980:	d005      	beq.n	800698e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006986:	f043 0201 	orr.w	r2, r3, #1
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800698e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006992:	f003 0304 	and.w	r3, r3, #4
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00b      	beq.n	80069b2 <HAL_UART_IRQHandler+0xd2>
 800699a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d005      	beq.n	80069b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069aa:	f043 0202 	orr.w	r2, r3, #2
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00b      	beq.n	80069d6 <HAL_UART_IRQHandler+0xf6>
 80069be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d005      	beq.n	80069d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ce:	f043 0204 	orr.w	r2, r3, #4
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80069d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069da:	f003 0308 	and.w	r3, r3, #8
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d011      	beq.n	8006a06 <HAL_UART_IRQHandler+0x126>
 80069e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069e6:	f003 0320 	and.w	r3, r3, #32
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d105      	bne.n	80069fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80069ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d005      	beq.n	8006a06 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069fe:	f043 0208 	orr.w	r2, r3, #8
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f000 81f2 	beq.w	8006df4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a14:	f003 0320 	and.w	r3, r3, #32
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d008      	beq.n	8006a2e <HAL_UART_IRQHandler+0x14e>
 8006a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a20:	f003 0320 	and.w	r3, r3, #32
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d002      	beq.n	8006a2e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fb1e 	bl	800706a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	bf14      	ite	ne
 8006a3c:	2301      	movne	r3, #1
 8006a3e:	2300      	moveq	r3, #0
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a4a:	f003 0308 	and.w	r3, r3, #8
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d103      	bne.n	8006a5a <HAL_UART_IRQHandler+0x17a>
 8006a52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d04f      	beq.n	8006afa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fa28 	bl	8006eb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d041      	beq.n	8006af2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	3314      	adds	r3, #20
 8006a74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a7c:	e853 3f00 	ldrex	r3, [r3]
 8006a80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006a84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	3314      	adds	r3, #20
 8006a96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006aa6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006aaa:	e841 2300 	strex	r3, r2, [r1]
 8006aae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ab2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1d9      	bne.n	8006a6e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d013      	beq.n	8006aea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac6:	4a7e      	ldr	r2, [pc, #504]	; (8006cc0 <HAL_UART_IRQHandler+0x3e0>)
 8006ac8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fd fe36 	bl	8004740 <HAL_DMA_Abort_IT>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d016      	beq.n	8006b08 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae8:	e00e      	b.n	8006b08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f993 	bl	8006e16 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af0:	e00a      	b.n	8006b08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f98f 	bl	8006e16 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af8:	e006      	b.n	8006b08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f98b 	bl	8006e16 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006b06:	e175      	b.n	8006df4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b08:	bf00      	nop
    return;
 8006b0a:	e173      	b.n	8006df4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	f040 814f 	bne.w	8006db4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b1a:	f003 0310 	and.w	r3, r3, #16
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 8148 	beq.w	8006db4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b28:	f003 0310 	and.w	r3, r3, #16
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f000 8141 	beq.w	8006db4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b32:	2300      	movs	r3, #0
 8006b34:	60bb      	str	r3, [r7, #8]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	60bb      	str	r3, [r7, #8]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	60bb      	str	r3, [r7, #8]
 8006b46:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f000 80b6 	beq.w	8006cc4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f000 8145 	beq.w	8006df8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b76:	429a      	cmp	r2, r3
 8006b78:	f080 813e 	bcs.w	8006df8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b82:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	2b20      	cmp	r3, #32
 8006b8c:	f000 8088 	beq.w	8006ca0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	330c      	adds	r3, #12
 8006b96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b9e:	e853 3f00 	ldrex	r3, [r3]
 8006ba2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ba6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006baa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	330c      	adds	r3, #12
 8006bb8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006bbc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006bc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006bc8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006bcc:	e841 2300 	strex	r3, r2, [r1]
 8006bd0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006bd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1d9      	bne.n	8006b90 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3314      	adds	r3, #20
 8006be2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006be6:	e853 3f00 	ldrex	r3, [r3]
 8006bea:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006bec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bee:	f023 0301 	bic.w	r3, r3, #1
 8006bf2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	3314      	adds	r3, #20
 8006bfc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006c00:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006c04:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c06:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006c08:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c0c:	e841 2300 	strex	r3, r2, [r1]
 8006c10:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006c12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1e1      	bne.n	8006bdc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	3314      	adds	r3, #20
 8006c1e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c22:	e853 3f00 	ldrex	r3, [r3]
 8006c26:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	3314      	adds	r3, #20
 8006c38:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006c3c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c3e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c40:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006c42:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c44:	e841 2300 	strex	r3, r2, [r1]
 8006c48:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006c4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1e3      	bne.n	8006c18 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2220      	movs	r2, #32
 8006c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	330c      	adds	r3, #12
 8006c64:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c68:	e853 3f00 	ldrex	r3, [r3]
 8006c6c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c70:	f023 0310 	bic.w	r3, r3, #16
 8006c74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	330c      	adds	r3, #12
 8006c7e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006c82:	65ba      	str	r2, [r7, #88]	; 0x58
 8006c84:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c86:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c8a:	e841 2300 	strex	r3, r2, [r1]
 8006c8e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1e3      	bne.n	8006c5e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fd fd15 	bl	80046ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f8b6 	bl	8006e28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006cbc:	e09c      	b.n	8006df8 <HAL_UART_IRQHandler+0x518>
 8006cbe:	bf00      	nop
 8006cc0:	08006f75 	.word	0x08006f75
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f000 808e 	beq.w	8006dfc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006ce0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 8089 	beq.w	8006dfc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	330c      	adds	r3, #12
 8006cf0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf4:	e853 3f00 	ldrex	r3, [r3]
 8006cf8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	330c      	adds	r3, #12
 8006d0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006d0e:	647a      	str	r2, [r7, #68]	; 0x44
 8006d10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d16:	e841 2300 	strex	r3, r2, [r1]
 8006d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1e3      	bne.n	8006cea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	3314      	adds	r3, #20
 8006d28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2c:	e853 3f00 	ldrex	r3, [r3]
 8006d30:	623b      	str	r3, [r7, #32]
   return(result);
 8006d32:	6a3b      	ldr	r3, [r7, #32]
 8006d34:	f023 0301 	bic.w	r3, r3, #1
 8006d38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	3314      	adds	r3, #20
 8006d42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006d46:	633a      	str	r2, [r7, #48]	; 0x30
 8006d48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d4e:	e841 2300 	strex	r3, r2, [r1]
 8006d52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1e3      	bne.n	8006d22 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2220      	movs	r2, #32
 8006d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	330c      	adds	r3, #12
 8006d6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	e853 3f00 	ldrex	r3, [r3]
 8006d76:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f023 0310 	bic.w	r3, r3, #16
 8006d7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	330c      	adds	r3, #12
 8006d88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006d8c:	61fa      	str	r2, [r7, #28]
 8006d8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d90:	69b9      	ldr	r1, [r7, #24]
 8006d92:	69fa      	ldr	r2, [r7, #28]
 8006d94:	e841 2300 	strex	r3, r2, [r1]
 8006d98:	617b      	str	r3, [r7, #20]
   return(result);
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1e3      	bne.n	8006d68 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2202      	movs	r2, #2
 8006da4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006da6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006daa:	4619      	mov	r1, r3
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f83b 	bl	8006e28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006db2:	e023      	b.n	8006dfc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d009      	beq.n	8006dd4 <HAL_UART_IRQHandler+0x4f4>
 8006dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d003      	beq.n	8006dd4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 f8e5 	bl	8006f9c <UART_Transmit_IT>
    return;
 8006dd2:	e014      	b.n	8006dfe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00e      	beq.n	8006dfe <HAL_UART_IRQHandler+0x51e>
 8006de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d008      	beq.n	8006dfe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 f924 	bl	800703a <UART_EndTransmit_IT>
    return;
 8006df2:	e004      	b.n	8006dfe <HAL_UART_IRQHandler+0x51e>
    return;
 8006df4:	bf00      	nop
 8006df6:	e002      	b.n	8006dfe <HAL_UART_IRQHandler+0x51e>
      return;
 8006df8:	bf00      	nop
 8006dfa:	e000      	b.n	8006dfe <HAL_UART_IRQHandler+0x51e>
      return;
 8006dfc:	bf00      	nop
  }
}
 8006dfe:	37e8      	adds	r7, #232	; 0xe8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bc80      	pop	{r7}
 8006e14:	4770      	bx	lr

08006e16 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b083      	sub	sp, #12
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e1e:	bf00      	nop
 8006e20:	370c      	adds	r7, #12
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bc80      	pop	{r7}
 8006e26:	4770      	bx	lr

08006e28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	460b      	mov	r3, r1
 8006e32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bc80      	pop	{r7}
 8006e3c:	4770      	bx	lr

08006e3e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b085      	sub	sp, #20
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	60f8      	str	r0, [r7, #12]
 8006e46:	60b9      	str	r1, [r7, #8]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	68ba      	ldr	r2, [r7, #8]
 8006e50:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	88fa      	ldrh	r2, [r7, #6]
 8006e56:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	88fa      	ldrh	r2, [r7, #6]
 8006e5c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2222      	movs	r2, #34	; 0x22
 8006e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d007      	beq.n	8006e84 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68da      	ldr	r2, [r3, #12]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e82:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	695a      	ldr	r2, [r3, #20]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f042 0201 	orr.w	r2, r2, #1
 8006e92:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68da      	ldr	r2, [r3, #12]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f042 0220 	orr.w	r2, r2, #32
 8006ea2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3714      	adds	r7, #20
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bc80      	pop	{r7}
 8006eae:	4770      	bx	lr

08006eb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b095      	sub	sp, #84	; 0x54
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	330c      	adds	r3, #12
 8006ebe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ec2:	e853 3f00 	ldrex	r3, [r3]
 8006ec6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	330c      	adds	r3, #12
 8006ed6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ed8:	643a      	str	r2, [r7, #64]	; 0x40
 8006eda:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006edc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ede:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ee0:	e841 2300 	strex	r3, r2, [r1]
 8006ee4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1e5      	bne.n	8006eb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	3314      	adds	r3, #20
 8006ef2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef4:	6a3b      	ldr	r3, [r7, #32]
 8006ef6:	e853 3f00 	ldrex	r3, [r3]
 8006efa:	61fb      	str	r3, [r7, #28]
   return(result);
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	f023 0301 	bic.w	r3, r3, #1
 8006f02:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	3314      	adds	r3, #20
 8006f0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f14:	e841 2300 	strex	r3, r2, [r1]
 8006f18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1e5      	bne.n	8006eec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d119      	bne.n	8006f5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	330c      	adds	r3, #12
 8006f2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	e853 3f00 	ldrex	r3, [r3]
 8006f36:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	f023 0310 	bic.w	r3, r3, #16
 8006f3e:	647b      	str	r3, [r7, #68]	; 0x44
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	330c      	adds	r3, #12
 8006f46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f48:	61ba      	str	r2, [r7, #24]
 8006f4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4c:	6979      	ldr	r1, [r7, #20]
 8006f4e:	69ba      	ldr	r2, [r7, #24]
 8006f50:	e841 2300 	strex	r3, r2, [r1]
 8006f54:	613b      	str	r3, [r7, #16]
   return(result);
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1e5      	bne.n	8006f28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2220      	movs	r2, #32
 8006f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006f6a:	bf00      	nop
 8006f6c:	3754      	adds	r7, #84	; 0x54
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bc80      	pop	{r7}
 8006f72:	4770      	bx	lr

08006f74 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f8e:	68f8      	ldr	r0, [r7, #12]
 8006f90:	f7ff ff41 	bl	8006e16 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f94:	bf00      	nop
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	2b21      	cmp	r3, #33	; 0x21
 8006fae:	d13e      	bne.n	800702e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fb8:	d114      	bne.n	8006fe4 <UART_Transmit_IT+0x48>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d110      	bne.n	8006fe4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	881b      	ldrh	r3, [r3, #0]
 8006fcc:	461a      	mov	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fd6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a1b      	ldr	r3, [r3, #32]
 8006fdc:	1c9a      	adds	r2, r3, #2
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	621a      	str	r2, [r3, #32]
 8006fe2:	e008      	b.n	8006ff6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a1b      	ldr	r3, [r3, #32]
 8006fe8:	1c59      	adds	r1, r3, #1
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	6211      	str	r1, [r2, #32]
 8006fee:	781a      	ldrb	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	4619      	mov	r1, r3
 8007004:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10f      	bne.n	800702a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68da      	ldr	r2, [r3, #12]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007018:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68da      	ldr	r2, [r3, #12]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007028:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800702a:	2300      	movs	r3, #0
 800702c:	e000      	b.n	8007030 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800702e:	2302      	movs	r3, #2
  }
}
 8007030:	4618      	mov	r0, r3
 8007032:	3714      	adds	r7, #20
 8007034:	46bd      	mov	sp, r7
 8007036:	bc80      	pop	{r7}
 8007038:	4770      	bx	lr

0800703a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b082      	sub	sp, #8
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68da      	ldr	r2, [r3, #12]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007050:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2220      	movs	r2, #32
 8007056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7ff fed2 	bl	8006e04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3708      	adds	r7, #8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b08c      	sub	sp, #48	; 0x30
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007078:	b2db      	uxtb	r3, r3
 800707a:	2b22      	cmp	r3, #34	; 0x22
 800707c:	f040 80ae 	bne.w	80071dc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007088:	d117      	bne.n	80070ba <UART_Receive_IT+0x50>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d113      	bne.n	80070ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007092:	2300      	movs	r3, #0
 8007094:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070a8:	b29a      	uxth	r2, r3
 80070aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b2:	1c9a      	adds	r2, r3, #2
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	629a      	str	r2, [r3, #40]	; 0x28
 80070b8:	e026      	b.n	8007108 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80070c0:	2300      	movs	r3, #0
 80070c2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070cc:	d007      	beq.n	80070de <UART_Receive_IT+0x74>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d10a      	bne.n	80070ec <UART_Receive_IT+0x82>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d106      	bne.n	80070ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	b2da      	uxtb	r2, r3
 80070e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e8:	701a      	strb	r2, [r3, #0]
 80070ea:	e008      	b.n	80070fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070f8:	b2da      	uxtb	r2, r3
 80070fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007102:	1c5a      	adds	r2, r3, #1
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800710c:	b29b      	uxth	r3, r3
 800710e:	3b01      	subs	r3, #1
 8007110:	b29b      	uxth	r3, r3
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	4619      	mov	r1, r3
 8007116:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007118:	2b00      	cmp	r3, #0
 800711a:	d15d      	bne.n	80071d8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68da      	ldr	r2, [r3, #12]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f022 0220 	bic.w	r2, r2, #32
 800712a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68da      	ldr	r2, [r3, #12]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800713a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	695a      	ldr	r2, [r3, #20]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f022 0201 	bic.w	r2, r2, #1
 800714a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2220      	movs	r2, #32
 8007150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715e:	2b01      	cmp	r3, #1
 8007160:	d135      	bne.n	80071ce <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	330c      	adds	r3, #12
 800716e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	e853 3f00 	ldrex	r3, [r3]
 8007176:	613b      	str	r3, [r7, #16]
   return(result);
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	f023 0310 	bic.w	r3, r3, #16
 800717e:	627b      	str	r3, [r7, #36]	; 0x24
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	330c      	adds	r3, #12
 8007186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007188:	623a      	str	r2, [r7, #32]
 800718a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718c:	69f9      	ldr	r1, [r7, #28]
 800718e:	6a3a      	ldr	r2, [r7, #32]
 8007190:	e841 2300 	strex	r3, r2, [r1]
 8007194:	61bb      	str	r3, [r7, #24]
   return(result);
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1e5      	bne.n	8007168 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0310 	and.w	r3, r3, #16
 80071a6:	2b10      	cmp	r3, #16
 80071a8:	d10a      	bne.n	80071c0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071aa:	2300      	movs	r3, #0
 80071ac:	60fb      	str	r3, [r7, #12]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	60fb      	str	r3, [r7, #12]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	60fb      	str	r3, [r7, #12]
 80071be:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80071c4:	4619      	mov	r1, r3
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f7ff fe2e 	bl	8006e28 <HAL_UARTEx_RxEventCallback>
 80071cc:	e002      	b.n	80071d4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f7fb fba6 	bl	8002920 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80071d4:	2300      	movs	r3, #0
 80071d6:	e002      	b.n	80071de <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80071d8:	2300      	movs	r3, #0
 80071da:	e000      	b.n	80071de <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80071dc:	2302      	movs	r3, #2
  }
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3730      	adds	r7, #48	; 0x30
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
	...

080071e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	68da      	ldr	r2, [r3, #12]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	430a      	orrs	r2, r1
 8007204:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	689a      	ldr	r2, [r3, #8]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	431a      	orrs	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	695b      	ldr	r3, [r3, #20]
 8007214:	4313      	orrs	r3, r2
 8007216:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007222:	f023 030c 	bic.w	r3, r3, #12
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	6812      	ldr	r2, [r2, #0]
 800722a:	68b9      	ldr	r1, [r7, #8]
 800722c:	430b      	orrs	r3, r1
 800722e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	699a      	ldr	r2, [r3, #24]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	430a      	orrs	r2, r1
 8007244:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a2c      	ldr	r2, [pc, #176]	; (80072fc <UART_SetConfig+0x114>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d103      	bne.n	8007258 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007250:	f7fe fe7a 	bl	8005f48 <HAL_RCC_GetPCLK2Freq>
 8007254:	60f8      	str	r0, [r7, #12]
 8007256:	e002      	b.n	800725e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007258:	f7fe fe62 	bl	8005f20 <HAL_RCC_GetPCLK1Freq>
 800725c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	4613      	mov	r3, r2
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4413      	add	r3, r2
 8007266:	009a      	lsls	r2, r3, #2
 8007268:	441a      	add	r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	fbb2 f3f3 	udiv	r3, r2, r3
 8007274:	4a22      	ldr	r2, [pc, #136]	; (8007300 <UART_SetConfig+0x118>)
 8007276:	fba2 2303 	umull	r2, r3, r2, r3
 800727a:	095b      	lsrs	r3, r3, #5
 800727c:	0119      	lsls	r1, r3, #4
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	4613      	mov	r3, r2
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	4413      	add	r3, r2
 8007286:	009a      	lsls	r2, r3, #2
 8007288:	441a      	add	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	fbb2 f2f3 	udiv	r2, r2, r3
 8007294:	4b1a      	ldr	r3, [pc, #104]	; (8007300 <UART_SetConfig+0x118>)
 8007296:	fba3 0302 	umull	r0, r3, r3, r2
 800729a:	095b      	lsrs	r3, r3, #5
 800729c:	2064      	movs	r0, #100	; 0x64
 800729e:	fb00 f303 	mul.w	r3, r0, r3
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	011b      	lsls	r3, r3, #4
 80072a6:	3332      	adds	r3, #50	; 0x32
 80072a8:	4a15      	ldr	r2, [pc, #84]	; (8007300 <UART_SetConfig+0x118>)
 80072aa:	fba2 2303 	umull	r2, r3, r2, r3
 80072ae:	095b      	lsrs	r3, r3, #5
 80072b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072b4:	4419      	add	r1, r3
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	4613      	mov	r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4413      	add	r3, r2
 80072be:	009a      	lsls	r2, r3, #2
 80072c0:	441a      	add	r2, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80072cc:	4b0c      	ldr	r3, [pc, #48]	; (8007300 <UART_SetConfig+0x118>)
 80072ce:	fba3 0302 	umull	r0, r3, r3, r2
 80072d2:	095b      	lsrs	r3, r3, #5
 80072d4:	2064      	movs	r0, #100	; 0x64
 80072d6:	fb00 f303 	mul.w	r3, r0, r3
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	011b      	lsls	r3, r3, #4
 80072de:	3332      	adds	r3, #50	; 0x32
 80072e0:	4a07      	ldr	r2, [pc, #28]	; (8007300 <UART_SetConfig+0x118>)
 80072e2:	fba2 2303 	umull	r2, r3, r2, r3
 80072e6:	095b      	lsrs	r3, r3, #5
 80072e8:	f003 020f 	and.w	r2, r3, #15
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	440a      	add	r2, r1
 80072f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80072f4:	bf00      	nop
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	40013800 	.word	0x40013800
 8007300:	51eb851f 	.word	0x51eb851f

08007304 <atof>:
 8007304:	2100      	movs	r1, #0
 8007306:	f000 be1b 	b.w	8007f40 <strtod>

0800730a <atoi>:
 800730a:	220a      	movs	r2, #10
 800730c:	2100      	movs	r1, #0
 800730e:	f000 bea1 	b.w	8008054 <strtol>

08007312 <sulp>:
 8007312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007316:	460f      	mov	r7, r1
 8007318:	4690      	mov	r8, r2
 800731a:	f003 fb39 	bl	800a990 <__ulp>
 800731e:	4604      	mov	r4, r0
 8007320:	460d      	mov	r5, r1
 8007322:	f1b8 0f00 	cmp.w	r8, #0
 8007326:	d011      	beq.n	800734c <sulp+0x3a>
 8007328:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800732c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007330:	2b00      	cmp	r3, #0
 8007332:	dd0b      	ble.n	800734c <sulp+0x3a>
 8007334:	2400      	movs	r4, #0
 8007336:	051b      	lsls	r3, r3, #20
 8007338:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800733c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007340:	4622      	mov	r2, r4
 8007342:	462b      	mov	r3, r5
 8007344:	f7f9 f8d2 	bl	80004ec <__aeabi_dmul>
 8007348:	4604      	mov	r4, r0
 800734a:	460d      	mov	r5, r1
 800734c:	4620      	mov	r0, r4
 800734e:	4629      	mov	r1, r5
 8007350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007354:	0000      	movs	r0, r0
	...

08007358 <_strtod_l>:
 8007358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800735c:	b09f      	sub	sp, #124	; 0x7c
 800735e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007360:	2200      	movs	r2, #0
 8007362:	4604      	mov	r4, r0
 8007364:	921a      	str	r2, [sp, #104]	; 0x68
 8007366:	460d      	mov	r5, r1
 8007368:	f04f 0800 	mov.w	r8, #0
 800736c:	f04f 0900 	mov.w	r9, #0
 8007370:	460a      	mov	r2, r1
 8007372:	9219      	str	r2, [sp, #100]	; 0x64
 8007374:	7811      	ldrb	r1, [r2, #0]
 8007376:	292b      	cmp	r1, #43	; 0x2b
 8007378:	d04a      	beq.n	8007410 <_strtod_l+0xb8>
 800737a:	d838      	bhi.n	80073ee <_strtod_l+0x96>
 800737c:	290d      	cmp	r1, #13
 800737e:	d832      	bhi.n	80073e6 <_strtod_l+0x8e>
 8007380:	2908      	cmp	r1, #8
 8007382:	d832      	bhi.n	80073ea <_strtod_l+0x92>
 8007384:	2900      	cmp	r1, #0
 8007386:	d03b      	beq.n	8007400 <_strtod_l+0xa8>
 8007388:	2200      	movs	r2, #0
 800738a:	920e      	str	r2, [sp, #56]	; 0x38
 800738c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800738e:	7832      	ldrb	r2, [r6, #0]
 8007390:	2a30      	cmp	r2, #48	; 0x30
 8007392:	f040 80b2 	bne.w	80074fa <_strtod_l+0x1a2>
 8007396:	7872      	ldrb	r2, [r6, #1]
 8007398:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800739c:	2a58      	cmp	r2, #88	; 0x58
 800739e:	d16e      	bne.n	800747e <_strtod_l+0x126>
 80073a0:	9302      	str	r3, [sp, #8]
 80073a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073a4:	4620      	mov	r0, r4
 80073a6:	9301      	str	r3, [sp, #4]
 80073a8:	ab1a      	add	r3, sp, #104	; 0x68
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	4a8c      	ldr	r2, [pc, #560]	; (80075e0 <_strtod_l+0x288>)
 80073ae:	ab1b      	add	r3, sp, #108	; 0x6c
 80073b0:	a919      	add	r1, sp, #100	; 0x64
 80073b2:	f002 fbc9 	bl	8009b48 <__gethex>
 80073b6:	f010 070f 	ands.w	r7, r0, #15
 80073ba:	4605      	mov	r5, r0
 80073bc:	d005      	beq.n	80073ca <_strtod_l+0x72>
 80073be:	2f06      	cmp	r7, #6
 80073c0:	d128      	bne.n	8007414 <_strtod_l+0xbc>
 80073c2:	2300      	movs	r3, #0
 80073c4:	3601      	adds	r6, #1
 80073c6:	9619      	str	r6, [sp, #100]	; 0x64
 80073c8:	930e      	str	r3, [sp, #56]	; 0x38
 80073ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f040 85a0 	bne.w	8007f12 <_strtod_l+0xbba>
 80073d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073d4:	b1cb      	cbz	r3, 800740a <_strtod_l+0xb2>
 80073d6:	4642      	mov	r2, r8
 80073d8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80073dc:	4610      	mov	r0, r2
 80073de:	4619      	mov	r1, r3
 80073e0:	b01f      	add	sp, #124	; 0x7c
 80073e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073e6:	2920      	cmp	r1, #32
 80073e8:	d1ce      	bne.n	8007388 <_strtod_l+0x30>
 80073ea:	3201      	adds	r2, #1
 80073ec:	e7c1      	b.n	8007372 <_strtod_l+0x1a>
 80073ee:	292d      	cmp	r1, #45	; 0x2d
 80073f0:	d1ca      	bne.n	8007388 <_strtod_l+0x30>
 80073f2:	2101      	movs	r1, #1
 80073f4:	910e      	str	r1, [sp, #56]	; 0x38
 80073f6:	1c51      	adds	r1, r2, #1
 80073f8:	9119      	str	r1, [sp, #100]	; 0x64
 80073fa:	7852      	ldrb	r2, [r2, #1]
 80073fc:	2a00      	cmp	r2, #0
 80073fe:	d1c5      	bne.n	800738c <_strtod_l+0x34>
 8007400:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007402:	9519      	str	r5, [sp, #100]	; 0x64
 8007404:	2b00      	cmp	r3, #0
 8007406:	f040 8582 	bne.w	8007f0e <_strtod_l+0xbb6>
 800740a:	4642      	mov	r2, r8
 800740c:	464b      	mov	r3, r9
 800740e:	e7e5      	b.n	80073dc <_strtod_l+0x84>
 8007410:	2100      	movs	r1, #0
 8007412:	e7ef      	b.n	80073f4 <_strtod_l+0x9c>
 8007414:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007416:	b13a      	cbz	r2, 8007428 <_strtod_l+0xd0>
 8007418:	2135      	movs	r1, #53	; 0x35
 800741a:	a81c      	add	r0, sp, #112	; 0x70
 800741c:	f003 fba4 	bl	800ab68 <__copybits>
 8007420:	4620      	mov	r0, r4
 8007422:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007424:	f002 ff88 	bl	800a338 <_Bfree>
 8007428:	3f01      	subs	r7, #1
 800742a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800742c:	2f04      	cmp	r7, #4
 800742e:	d806      	bhi.n	800743e <_strtod_l+0xe6>
 8007430:	e8df f007 	tbb	[pc, r7]
 8007434:	201d0314 	.word	0x201d0314
 8007438:	14          	.byte	0x14
 8007439:	00          	.byte	0x00
 800743a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800743e:	05e9      	lsls	r1, r5, #23
 8007440:	bf48      	it	mi
 8007442:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007446:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800744a:	0d1b      	lsrs	r3, r3, #20
 800744c:	051b      	lsls	r3, r3, #20
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1bb      	bne.n	80073ca <_strtod_l+0x72>
 8007452:	f001 fc09 	bl	8008c68 <__errno>
 8007456:	2322      	movs	r3, #34	; 0x22
 8007458:	6003      	str	r3, [r0, #0]
 800745a:	e7b6      	b.n	80073ca <_strtod_l+0x72>
 800745c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007460:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007464:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007468:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800746c:	e7e7      	b.n	800743e <_strtod_l+0xe6>
 800746e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80075e4 <_strtod_l+0x28c>
 8007472:	e7e4      	b.n	800743e <_strtod_l+0xe6>
 8007474:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007478:	f04f 38ff 	mov.w	r8, #4294967295
 800747c:	e7df      	b.n	800743e <_strtod_l+0xe6>
 800747e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007480:	1c5a      	adds	r2, r3, #1
 8007482:	9219      	str	r2, [sp, #100]	; 0x64
 8007484:	785b      	ldrb	r3, [r3, #1]
 8007486:	2b30      	cmp	r3, #48	; 0x30
 8007488:	d0f9      	beq.n	800747e <_strtod_l+0x126>
 800748a:	2b00      	cmp	r3, #0
 800748c:	d09d      	beq.n	80073ca <_strtod_l+0x72>
 800748e:	2301      	movs	r3, #1
 8007490:	f04f 0a00 	mov.w	sl, #0
 8007494:	220a      	movs	r2, #10
 8007496:	46d3      	mov	fp, sl
 8007498:	9305      	str	r3, [sp, #20]
 800749a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800749c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80074a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80074a2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80074a4:	7806      	ldrb	r6, [r0, #0]
 80074a6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80074aa:	b2d9      	uxtb	r1, r3
 80074ac:	2909      	cmp	r1, #9
 80074ae:	d926      	bls.n	80074fe <_strtod_l+0x1a6>
 80074b0:	2201      	movs	r2, #1
 80074b2:	494d      	ldr	r1, [pc, #308]	; (80075e8 <_strtod_l+0x290>)
 80074b4:	f001 fb63 	bl	8008b7e <strncmp>
 80074b8:	2800      	cmp	r0, #0
 80074ba:	d030      	beq.n	800751e <_strtod_l+0x1c6>
 80074bc:	2000      	movs	r0, #0
 80074be:	4632      	mov	r2, r6
 80074c0:	4603      	mov	r3, r0
 80074c2:	465e      	mov	r6, fp
 80074c4:	9008      	str	r0, [sp, #32]
 80074c6:	2a65      	cmp	r2, #101	; 0x65
 80074c8:	d001      	beq.n	80074ce <_strtod_l+0x176>
 80074ca:	2a45      	cmp	r2, #69	; 0x45
 80074cc:	d113      	bne.n	80074f6 <_strtod_l+0x19e>
 80074ce:	b91e      	cbnz	r6, 80074d8 <_strtod_l+0x180>
 80074d0:	9a05      	ldr	r2, [sp, #20]
 80074d2:	4302      	orrs	r2, r0
 80074d4:	d094      	beq.n	8007400 <_strtod_l+0xa8>
 80074d6:	2600      	movs	r6, #0
 80074d8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80074da:	1c6a      	adds	r2, r5, #1
 80074dc:	9219      	str	r2, [sp, #100]	; 0x64
 80074de:	786a      	ldrb	r2, [r5, #1]
 80074e0:	2a2b      	cmp	r2, #43	; 0x2b
 80074e2:	d074      	beq.n	80075ce <_strtod_l+0x276>
 80074e4:	2a2d      	cmp	r2, #45	; 0x2d
 80074e6:	d078      	beq.n	80075da <_strtod_l+0x282>
 80074e8:	f04f 0c00 	mov.w	ip, #0
 80074ec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80074f0:	2909      	cmp	r1, #9
 80074f2:	d97f      	bls.n	80075f4 <_strtod_l+0x29c>
 80074f4:	9519      	str	r5, [sp, #100]	; 0x64
 80074f6:	2700      	movs	r7, #0
 80074f8:	e09e      	b.n	8007638 <_strtod_l+0x2e0>
 80074fa:	2300      	movs	r3, #0
 80074fc:	e7c8      	b.n	8007490 <_strtod_l+0x138>
 80074fe:	f1bb 0f08 	cmp.w	fp, #8
 8007502:	bfd8      	it	le
 8007504:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8007506:	f100 0001 	add.w	r0, r0, #1
 800750a:	bfd6      	itet	le
 800750c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007510:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007514:	930a      	strle	r3, [sp, #40]	; 0x28
 8007516:	f10b 0b01 	add.w	fp, fp, #1
 800751a:	9019      	str	r0, [sp, #100]	; 0x64
 800751c:	e7c1      	b.n	80074a2 <_strtod_l+0x14a>
 800751e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007520:	1c5a      	adds	r2, r3, #1
 8007522:	9219      	str	r2, [sp, #100]	; 0x64
 8007524:	785a      	ldrb	r2, [r3, #1]
 8007526:	f1bb 0f00 	cmp.w	fp, #0
 800752a:	d037      	beq.n	800759c <_strtod_l+0x244>
 800752c:	465e      	mov	r6, fp
 800752e:	9008      	str	r0, [sp, #32]
 8007530:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007534:	2b09      	cmp	r3, #9
 8007536:	d912      	bls.n	800755e <_strtod_l+0x206>
 8007538:	2301      	movs	r3, #1
 800753a:	e7c4      	b.n	80074c6 <_strtod_l+0x16e>
 800753c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800753e:	3001      	adds	r0, #1
 8007540:	1c5a      	adds	r2, r3, #1
 8007542:	9219      	str	r2, [sp, #100]	; 0x64
 8007544:	785a      	ldrb	r2, [r3, #1]
 8007546:	2a30      	cmp	r2, #48	; 0x30
 8007548:	d0f8      	beq.n	800753c <_strtod_l+0x1e4>
 800754a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800754e:	2b08      	cmp	r3, #8
 8007550:	f200 84e4 	bhi.w	8007f1c <_strtod_l+0xbc4>
 8007554:	9008      	str	r0, [sp, #32]
 8007556:	2000      	movs	r0, #0
 8007558:	4606      	mov	r6, r0
 800755a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800755c:	930b      	str	r3, [sp, #44]	; 0x2c
 800755e:	3a30      	subs	r2, #48	; 0x30
 8007560:	f100 0301 	add.w	r3, r0, #1
 8007564:	d014      	beq.n	8007590 <_strtod_l+0x238>
 8007566:	9908      	ldr	r1, [sp, #32]
 8007568:	eb00 0c06 	add.w	ip, r0, r6
 800756c:	4419      	add	r1, r3
 800756e:	9108      	str	r1, [sp, #32]
 8007570:	4633      	mov	r3, r6
 8007572:	210a      	movs	r1, #10
 8007574:	4563      	cmp	r3, ip
 8007576:	d113      	bne.n	80075a0 <_strtod_l+0x248>
 8007578:	1833      	adds	r3, r6, r0
 800757a:	2b08      	cmp	r3, #8
 800757c:	f106 0601 	add.w	r6, r6, #1
 8007580:	4406      	add	r6, r0
 8007582:	dc1a      	bgt.n	80075ba <_strtod_l+0x262>
 8007584:	230a      	movs	r3, #10
 8007586:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007588:	fb03 2301 	mla	r3, r3, r1, r2
 800758c:	930a      	str	r3, [sp, #40]	; 0x28
 800758e:	2300      	movs	r3, #0
 8007590:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007592:	4618      	mov	r0, r3
 8007594:	1c51      	adds	r1, r2, #1
 8007596:	9119      	str	r1, [sp, #100]	; 0x64
 8007598:	7852      	ldrb	r2, [r2, #1]
 800759a:	e7c9      	b.n	8007530 <_strtod_l+0x1d8>
 800759c:	4658      	mov	r0, fp
 800759e:	e7d2      	b.n	8007546 <_strtod_l+0x1ee>
 80075a0:	2b08      	cmp	r3, #8
 80075a2:	f103 0301 	add.w	r3, r3, #1
 80075a6:	dc03      	bgt.n	80075b0 <_strtod_l+0x258>
 80075a8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80075aa:	434f      	muls	r7, r1
 80075ac:	970a      	str	r7, [sp, #40]	; 0x28
 80075ae:	e7e1      	b.n	8007574 <_strtod_l+0x21c>
 80075b0:	2b10      	cmp	r3, #16
 80075b2:	bfd8      	it	le
 80075b4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80075b8:	e7dc      	b.n	8007574 <_strtod_l+0x21c>
 80075ba:	2e10      	cmp	r6, #16
 80075bc:	bfdc      	itt	le
 80075be:	230a      	movle	r3, #10
 80075c0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80075c4:	e7e3      	b.n	800758e <_strtod_l+0x236>
 80075c6:	2300      	movs	r3, #0
 80075c8:	9308      	str	r3, [sp, #32]
 80075ca:	2301      	movs	r3, #1
 80075cc:	e780      	b.n	80074d0 <_strtod_l+0x178>
 80075ce:	f04f 0c00 	mov.w	ip, #0
 80075d2:	1caa      	adds	r2, r5, #2
 80075d4:	9219      	str	r2, [sp, #100]	; 0x64
 80075d6:	78aa      	ldrb	r2, [r5, #2]
 80075d8:	e788      	b.n	80074ec <_strtod_l+0x194>
 80075da:	f04f 0c01 	mov.w	ip, #1
 80075de:	e7f8      	b.n	80075d2 <_strtod_l+0x27a>
 80075e0:	0800e3c4 	.word	0x0800e3c4
 80075e4:	7ff00000 	.word	0x7ff00000
 80075e8:	0800e3c2 	.word	0x0800e3c2
 80075ec:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80075ee:	1c51      	adds	r1, r2, #1
 80075f0:	9119      	str	r1, [sp, #100]	; 0x64
 80075f2:	7852      	ldrb	r2, [r2, #1]
 80075f4:	2a30      	cmp	r2, #48	; 0x30
 80075f6:	d0f9      	beq.n	80075ec <_strtod_l+0x294>
 80075f8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80075fc:	2908      	cmp	r1, #8
 80075fe:	f63f af7a 	bhi.w	80074f6 <_strtod_l+0x19e>
 8007602:	3a30      	subs	r2, #48	; 0x30
 8007604:	9209      	str	r2, [sp, #36]	; 0x24
 8007606:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007608:	920c      	str	r2, [sp, #48]	; 0x30
 800760a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800760c:	1c57      	adds	r7, r2, #1
 800760e:	9719      	str	r7, [sp, #100]	; 0x64
 8007610:	7852      	ldrb	r2, [r2, #1]
 8007612:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007616:	f1be 0f09 	cmp.w	lr, #9
 800761a:	d938      	bls.n	800768e <_strtod_l+0x336>
 800761c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800761e:	1a7f      	subs	r7, r7, r1
 8007620:	2f08      	cmp	r7, #8
 8007622:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007626:	dc03      	bgt.n	8007630 <_strtod_l+0x2d8>
 8007628:	9909      	ldr	r1, [sp, #36]	; 0x24
 800762a:	428f      	cmp	r7, r1
 800762c:	bfa8      	it	ge
 800762e:	460f      	movge	r7, r1
 8007630:	f1bc 0f00 	cmp.w	ip, #0
 8007634:	d000      	beq.n	8007638 <_strtod_l+0x2e0>
 8007636:	427f      	negs	r7, r7
 8007638:	2e00      	cmp	r6, #0
 800763a:	d14f      	bne.n	80076dc <_strtod_l+0x384>
 800763c:	9905      	ldr	r1, [sp, #20]
 800763e:	4301      	orrs	r1, r0
 8007640:	f47f aec3 	bne.w	80073ca <_strtod_l+0x72>
 8007644:	2b00      	cmp	r3, #0
 8007646:	f47f aedb 	bne.w	8007400 <_strtod_l+0xa8>
 800764a:	2a69      	cmp	r2, #105	; 0x69
 800764c:	d029      	beq.n	80076a2 <_strtod_l+0x34a>
 800764e:	dc26      	bgt.n	800769e <_strtod_l+0x346>
 8007650:	2a49      	cmp	r2, #73	; 0x49
 8007652:	d026      	beq.n	80076a2 <_strtod_l+0x34a>
 8007654:	2a4e      	cmp	r2, #78	; 0x4e
 8007656:	f47f aed3 	bne.w	8007400 <_strtod_l+0xa8>
 800765a:	499a      	ldr	r1, [pc, #616]	; (80078c4 <_strtod_l+0x56c>)
 800765c:	a819      	add	r0, sp, #100	; 0x64
 800765e:	f002 fcb5 	bl	8009fcc <__match>
 8007662:	2800      	cmp	r0, #0
 8007664:	f43f aecc 	beq.w	8007400 <_strtod_l+0xa8>
 8007668:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	2b28      	cmp	r3, #40	; 0x28
 800766e:	d12f      	bne.n	80076d0 <_strtod_l+0x378>
 8007670:	4995      	ldr	r1, [pc, #596]	; (80078c8 <_strtod_l+0x570>)
 8007672:	aa1c      	add	r2, sp, #112	; 0x70
 8007674:	a819      	add	r0, sp, #100	; 0x64
 8007676:	f002 fcbd 	bl	8009ff4 <__hexnan>
 800767a:	2805      	cmp	r0, #5
 800767c:	d128      	bne.n	80076d0 <_strtod_l+0x378>
 800767e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007680:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007684:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007688:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800768c:	e69d      	b.n	80073ca <_strtod_l+0x72>
 800768e:	210a      	movs	r1, #10
 8007690:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007692:	fb01 2107 	mla	r1, r1, r7, r2
 8007696:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800769a:	9209      	str	r2, [sp, #36]	; 0x24
 800769c:	e7b5      	b.n	800760a <_strtod_l+0x2b2>
 800769e:	2a6e      	cmp	r2, #110	; 0x6e
 80076a0:	e7d9      	b.n	8007656 <_strtod_l+0x2fe>
 80076a2:	498a      	ldr	r1, [pc, #552]	; (80078cc <_strtod_l+0x574>)
 80076a4:	a819      	add	r0, sp, #100	; 0x64
 80076a6:	f002 fc91 	bl	8009fcc <__match>
 80076aa:	2800      	cmp	r0, #0
 80076ac:	f43f aea8 	beq.w	8007400 <_strtod_l+0xa8>
 80076b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80076b2:	4987      	ldr	r1, [pc, #540]	; (80078d0 <_strtod_l+0x578>)
 80076b4:	3b01      	subs	r3, #1
 80076b6:	a819      	add	r0, sp, #100	; 0x64
 80076b8:	9319      	str	r3, [sp, #100]	; 0x64
 80076ba:	f002 fc87 	bl	8009fcc <__match>
 80076be:	b910      	cbnz	r0, 80076c6 <_strtod_l+0x36e>
 80076c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80076c2:	3301      	adds	r3, #1
 80076c4:	9319      	str	r3, [sp, #100]	; 0x64
 80076c6:	f04f 0800 	mov.w	r8, #0
 80076ca:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80078d4 <_strtod_l+0x57c>
 80076ce:	e67c      	b.n	80073ca <_strtod_l+0x72>
 80076d0:	4881      	ldr	r0, [pc, #516]	; (80078d8 <_strtod_l+0x580>)
 80076d2:	f001 fb13 	bl	8008cfc <nan>
 80076d6:	4680      	mov	r8, r0
 80076d8:	4689      	mov	r9, r1
 80076da:	e676      	b.n	80073ca <_strtod_l+0x72>
 80076dc:	9b08      	ldr	r3, [sp, #32]
 80076de:	f1bb 0f00 	cmp.w	fp, #0
 80076e2:	bf08      	it	eq
 80076e4:	46b3      	moveq	fp, r6
 80076e6:	1afb      	subs	r3, r7, r3
 80076e8:	2e10      	cmp	r6, #16
 80076ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80076ec:	4635      	mov	r5, r6
 80076ee:	9309      	str	r3, [sp, #36]	; 0x24
 80076f0:	bfa8      	it	ge
 80076f2:	2510      	movge	r5, #16
 80076f4:	f7f8 fe80 	bl	80003f8 <__aeabi_ui2d>
 80076f8:	2e09      	cmp	r6, #9
 80076fa:	4680      	mov	r8, r0
 80076fc:	4689      	mov	r9, r1
 80076fe:	dd13      	ble.n	8007728 <_strtod_l+0x3d0>
 8007700:	4b76      	ldr	r3, [pc, #472]	; (80078dc <_strtod_l+0x584>)
 8007702:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007706:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800770a:	f7f8 feef 	bl	80004ec <__aeabi_dmul>
 800770e:	4680      	mov	r8, r0
 8007710:	4650      	mov	r0, sl
 8007712:	4689      	mov	r9, r1
 8007714:	f7f8 fe70 	bl	80003f8 <__aeabi_ui2d>
 8007718:	4602      	mov	r2, r0
 800771a:	460b      	mov	r3, r1
 800771c:	4640      	mov	r0, r8
 800771e:	4649      	mov	r1, r9
 8007720:	f7f8 fd2e 	bl	8000180 <__adddf3>
 8007724:	4680      	mov	r8, r0
 8007726:	4689      	mov	r9, r1
 8007728:	2e0f      	cmp	r6, #15
 800772a:	dc36      	bgt.n	800779a <_strtod_l+0x442>
 800772c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800772e:	2b00      	cmp	r3, #0
 8007730:	f43f ae4b 	beq.w	80073ca <_strtod_l+0x72>
 8007734:	dd22      	ble.n	800777c <_strtod_l+0x424>
 8007736:	2b16      	cmp	r3, #22
 8007738:	dc09      	bgt.n	800774e <_strtod_l+0x3f6>
 800773a:	4968      	ldr	r1, [pc, #416]	; (80078dc <_strtod_l+0x584>)
 800773c:	4642      	mov	r2, r8
 800773e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007742:	464b      	mov	r3, r9
 8007744:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007748:	f7f8 fed0 	bl	80004ec <__aeabi_dmul>
 800774c:	e7c3      	b.n	80076d6 <_strtod_l+0x37e>
 800774e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007750:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007754:	4293      	cmp	r3, r2
 8007756:	db20      	blt.n	800779a <_strtod_l+0x442>
 8007758:	4c60      	ldr	r4, [pc, #384]	; (80078dc <_strtod_l+0x584>)
 800775a:	f1c6 060f 	rsb	r6, r6, #15
 800775e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007762:	4642      	mov	r2, r8
 8007764:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007768:	464b      	mov	r3, r9
 800776a:	f7f8 febf 	bl	80004ec <__aeabi_dmul>
 800776e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007770:	1b9e      	subs	r6, r3, r6
 8007772:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007776:	e9d4 2300 	ldrd	r2, r3, [r4]
 800777a:	e7e5      	b.n	8007748 <_strtod_l+0x3f0>
 800777c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800777e:	3316      	adds	r3, #22
 8007780:	db0b      	blt.n	800779a <_strtod_l+0x442>
 8007782:	9b08      	ldr	r3, [sp, #32]
 8007784:	4640      	mov	r0, r8
 8007786:	1bdf      	subs	r7, r3, r7
 8007788:	4b54      	ldr	r3, [pc, #336]	; (80078dc <_strtod_l+0x584>)
 800778a:	4649      	mov	r1, r9
 800778c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007790:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007794:	f7f8 ffd4 	bl	8000740 <__aeabi_ddiv>
 8007798:	e79d      	b.n	80076d6 <_strtod_l+0x37e>
 800779a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800779c:	1b75      	subs	r5, r6, r5
 800779e:	441d      	add	r5, r3
 80077a0:	2d00      	cmp	r5, #0
 80077a2:	dd70      	ble.n	8007886 <_strtod_l+0x52e>
 80077a4:	f015 030f 	ands.w	r3, r5, #15
 80077a8:	d00a      	beq.n	80077c0 <_strtod_l+0x468>
 80077aa:	494c      	ldr	r1, [pc, #304]	; (80078dc <_strtod_l+0x584>)
 80077ac:	4642      	mov	r2, r8
 80077ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80077b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077b6:	464b      	mov	r3, r9
 80077b8:	f7f8 fe98 	bl	80004ec <__aeabi_dmul>
 80077bc:	4680      	mov	r8, r0
 80077be:	4689      	mov	r9, r1
 80077c0:	f035 050f 	bics.w	r5, r5, #15
 80077c4:	d04d      	beq.n	8007862 <_strtod_l+0x50a>
 80077c6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80077ca:	dd22      	ble.n	8007812 <_strtod_l+0x4ba>
 80077cc:	2600      	movs	r6, #0
 80077ce:	46b3      	mov	fp, r6
 80077d0:	960b      	str	r6, [sp, #44]	; 0x2c
 80077d2:	9608      	str	r6, [sp, #32]
 80077d4:	2322      	movs	r3, #34	; 0x22
 80077d6:	f04f 0800 	mov.w	r8, #0
 80077da:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80078d4 <_strtod_l+0x57c>
 80077de:	6023      	str	r3, [r4, #0]
 80077e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f43f adf1 	beq.w	80073ca <_strtod_l+0x72>
 80077e8:	4620      	mov	r0, r4
 80077ea:	991a      	ldr	r1, [sp, #104]	; 0x68
 80077ec:	f002 fda4 	bl	800a338 <_Bfree>
 80077f0:	4620      	mov	r0, r4
 80077f2:	9908      	ldr	r1, [sp, #32]
 80077f4:	f002 fda0 	bl	800a338 <_Bfree>
 80077f8:	4659      	mov	r1, fp
 80077fa:	4620      	mov	r0, r4
 80077fc:	f002 fd9c 	bl	800a338 <_Bfree>
 8007800:	4620      	mov	r0, r4
 8007802:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007804:	f002 fd98 	bl	800a338 <_Bfree>
 8007808:	4631      	mov	r1, r6
 800780a:	4620      	mov	r0, r4
 800780c:	f002 fd94 	bl	800a338 <_Bfree>
 8007810:	e5db      	b.n	80073ca <_strtod_l+0x72>
 8007812:	4b33      	ldr	r3, [pc, #204]	; (80078e0 <_strtod_l+0x588>)
 8007814:	4640      	mov	r0, r8
 8007816:	9305      	str	r3, [sp, #20]
 8007818:	2300      	movs	r3, #0
 800781a:	4649      	mov	r1, r9
 800781c:	469a      	mov	sl, r3
 800781e:	112d      	asrs	r5, r5, #4
 8007820:	2d01      	cmp	r5, #1
 8007822:	dc21      	bgt.n	8007868 <_strtod_l+0x510>
 8007824:	b10b      	cbz	r3, 800782a <_strtod_l+0x4d2>
 8007826:	4680      	mov	r8, r0
 8007828:	4689      	mov	r9, r1
 800782a:	492d      	ldr	r1, [pc, #180]	; (80078e0 <_strtod_l+0x588>)
 800782c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007830:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007834:	4642      	mov	r2, r8
 8007836:	e9d1 0100 	ldrd	r0, r1, [r1]
 800783a:	464b      	mov	r3, r9
 800783c:	f7f8 fe56 	bl	80004ec <__aeabi_dmul>
 8007840:	4b24      	ldr	r3, [pc, #144]	; (80078d4 <_strtod_l+0x57c>)
 8007842:	460a      	mov	r2, r1
 8007844:	400b      	ands	r3, r1
 8007846:	4927      	ldr	r1, [pc, #156]	; (80078e4 <_strtod_l+0x58c>)
 8007848:	4680      	mov	r8, r0
 800784a:	428b      	cmp	r3, r1
 800784c:	d8be      	bhi.n	80077cc <_strtod_l+0x474>
 800784e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007852:	428b      	cmp	r3, r1
 8007854:	bf86      	itte	hi
 8007856:	f04f 38ff 	movhi.w	r8, #4294967295
 800785a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80078e8 <_strtod_l+0x590>
 800785e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007862:	2300      	movs	r3, #0
 8007864:	9305      	str	r3, [sp, #20]
 8007866:	e07b      	b.n	8007960 <_strtod_l+0x608>
 8007868:	07ea      	lsls	r2, r5, #31
 800786a:	d505      	bpl.n	8007878 <_strtod_l+0x520>
 800786c:	9b05      	ldr	r3, [sp, #20]
 800786e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007872:	f7f8 fe3b 	bl	80004ec <__aeabi_dmul>
 8007876:	2301      	movs	r3, #1
 8007878:	9a05      	ldr	r2, [sp, #20]
 800787a:	f10a 0a01 	add.w	sl, sl, #1
 800787e:	3208      	adds	r2, #8
 8007880:	106d      	asrs	r5, r5, #1
 8007882:	9205      	str	r2, [sp, #20]
 8007884:	e7cc      	b.n	8007820 <_strtod_l+0x4c8>
 8007886:	d0ec      	beq.n	8007862 <_strtod_l+0x50a>
 8007888:	426d      	negs	r5, r5
 800788a:	f015 020f 	ands.w	r2, r5, #15
 800788e:	d00a      	beq.n	80078a6 <_strtod_l+0x54e>
 8007890:	4b12      	ldr	r3, [pc, #72]	; (80078dc <_strtod_l+0x584>)
 8007892:	4640      	mov	r0, r8
 8007894:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007898:	4649      	mov	r1, r9
 800789a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789e:	f7f8 ff4f 	bl	8000740 <__aeabi_ddiv>
 80078a2:	4680      	mov	r8, r0
 80078a4:	4689      	mov	r9, r1
 80078a6:	112d      	asrs	r5, r5, #4
 80078a8:	d0db      	beq.n	8007862 <_strtod_l+0x50a>
 80078aa:	2d1f      	cmp	r5, #31
 80078ac:	dd1e      	ble.n	80078ec <_strtod_l+0x594>
 80078ae:	2600      	movs	r6, #0
 80078b0:	46b3      	mov	fp, r6
 80078b2:	960b      	str	r6, [sp, #44]	; 0x2c
 80078b4:	9608      	str	r6, [sp, #32]
 80078b6:	2322      	movs	r3, #34	; 0x22
 80078b8:	f04f 0800 	mov.w	r8, #0
 80078bc:	f04f 0900 	mov.w	r9, #0
 80078c0:	6023      	str	r3, [r4, #0]
 80078c2:	e78d      	b.n	80077e0 <_strtod_l+0x488>
 80078c4:	0800e526 	.word	0x0800e526
 80078c8:	0800e3d8 	.word	0x0800e3d8
 80078cc:	0800e51e 	.word	0x0800e51e
 80078d0:	0800e558 	.word	0x0800e558
 80078d4:	7ff00000 	.word	0x7ff00000
 80078d8:	0800e7e8 	.word	0x0800e7e8
 80078dc:	0800e6c8 	.word	0x0800e6c8
 80078e0:	0800e6a0 	.word	0x0800e6a0
 80078e4:	7ca00000 	.word	0x7ca00000
 80078e8:	7fefffff 	.word	0x7fefffff
 80078ec:	f015 0310 	ands.w	r3, r5, #16
 80078f0:	bf18      	it	ne
 80078f2:	236a      	movne	r3, #106	; 0x6a
 80078f4:	4640      	mov	r0, r8
 80078f6:	9305      	str	r3, [sp, #20]
 80078f8:	4649      	mov	r1, r9
 80078fa:	2300      	movs	r3, #0
 80078fc:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8007bc8 <_strtod_l+0x870>
 8007900:	07ea      	lsls	r2, r5, #31
 8007902:	d504      	bpl.n	800790e <_strtod_l+0x5b6>
 8007904:	e9da 2300 	ldrd	r2, r3, [sl]
 8007908:	f7f8 fdf0 	bl	80004ec <__aeabi_dmul>
 800790c:	2301      	movs	r3, #1
 800790e:	106d      	asrs	r5, r5, #1
 8007910:	f10a 0a08 	add.w	sl, sl, #8
 8007914:	d1f4      	bne.n	8007900 <_strtod_l+0x5a8>
 8007916:	b10b      	cbz	r3, 800791c <_strtod_l+0x5c4>
 8007918:	4680      	mov	r8, r0
 800791a:	4689      	mov	r9, r1
 800791c:	9b05      	ldr	r3, [sp, #20]
 800791e:	b1bb      	cbz	r3, 8007950 <_strtod_l+0x5f8>
 8007920:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007924:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007928:	2b00      	cmp	r3, #0
 800792a:	4649      	mov	r1, r9
 800792c:	dd10      	ble.n	8007950 <_strtod_l+0x5f8>
 800792e:	2b1f      	cmp	r3, #31
 8007930:	f340 8128 	ble.w	8007b84 <_strtod_l+0x82c>
 8007934:	2b34      	cmp	r3, #52	; 0x34
 8007936:	bfd8      	it	le
 8007938:	f04f 33ff 	movle.w	r3, #4294967295
 800793c:	f04f 0800 	mov.w	r8, #0
 8007940:	bfcf      	iteee	gt
 8007942:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007946:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800794a:	4093      	lslle	r3, r2
 800794c:	ea03 0901 	andle.w	r9, r3, r1
 8007950:	2200      	movs	r2, #0
 8007952:	2300      	movs	r3, #0
 8007954:	4640      	mov	r0, r8
 8007956:	4649      	mov	r1, r9
 8007958:	f7f9 f830 	bl	80009bc <__aeabi_dcmpeq>
 800795c:	2800      	cmp	r0, #0
 800795e:	d1a6      	bne.n	80078ae <_strtod_l+0x556>
 8007960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007962:	465a      	mov	r2, fp
 8007964:	9300      	str	r3, [sp, #0]
 8007966:	4620      	mov	r0, r4
 8007968:	4633      	mov	r3, r6
 800796a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800796c:	f002 fd4c 	bl	800a408 <__s2b>
 8007970:	900b      	str	r0, [sp, #44]	; 0x2c
 8007972:	2800      	cmp	r0, #0
 8007974:	f43f af2a 	beq.w	80077cc <_strtod_l+0x474>
 8007978:	2600      	movs	r6, #0
 800797a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800797c:	9b08      	ldr	r3, [sp, #32]
 800797e:	2a00      	cmp	r2, #0
 8007980:	eba3 0307 	sub.w	r3, r3, r7
 8007984:	bfa8      	it	ge
 8007986:	2300      	movge	r3, #0
 8007988:	46b3      	mov	fp, r6
 800798a:	9312      	str	r3, [sp, #72]	; 0x48
 800798c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007990:	9316      	str	r3, [sp, #88]	; 0x58
 8007992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007994:	4620      	mov	r0, r4
 8007996:	6859      	ldr	r1, [r3, #4]
 8007998:	f002 fc8e 	bl	800a2b8 <_Balloc>
 800799c:	9008      	str	r0, [sp, #32]
 800799e:	2800      	cmp	r0, #0
 80079a0:	f43f af18 	beq.w	80077d4 <_strtod_l+0x47c>
 80079a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079a6:	300c      	adds	r0, #12
 80079a8:	691a      	ldr	r2, [r3, #16]
 80079aa:	f103 010c 	add.w	r1, r3, #12
 80079ae:	3202      	adds	r2, #2
 80079b0:	0092      	lsls	r2, r2, #2
 80079b2:	f001 f994 	bl	8008cde <memcpy>
 80079b6:	ab1c      	add	r3, sp, #112	; 0x70
 80079b8:	9301      	str	r3, [sp, #4]
 80079ba:	ab1b      	add	r3, sp, #108	; 0x6c
 80079bc:	9300      	str	r3, [sp, #0]
 80079be:	4642      	mov	r2, r8
 80079c0:	464b      	mov	r3, r9
 80079c2:	4620      	mov	r0, r4
 80079c4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80079c8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80079cc:	f003 f848 	bl	800aa60 <__d2b>
 80079d0:	901a      	str	r0, [sp, #104]	; 0x68
 80079d2:	2800      	cmp	r0, #0
 80079d4:	f43f aefe 	beq.w	80077d4 <_strtod_l+0x47c>
 80079d8:	2101      	movs	r1, #1
 80079da:	4620      	mov	r0, r4
 80079dc:	f002 fdac 	bl	800a538 <__i2b>
 80079e0:	4683      	mov	fp, r0
 80079e2:	2800      	cmp	r0, #0
 80079e4:	f43f aef6 	beq.w	80077d4 <_strtod_l+0x47c>
 80079e8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80079ea:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80079ec:	2f00      	cmp	r7, #0
 80079ee:	bfab      	itete	ge
 80079f0:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 80079f2:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80079f4:	eb07 0a03 	addge.w	sl, r7, r3
 80079f8:	1bdd      	sublt	r5, r3, r7
 80079fa:	9b05      	ldr	r3, [sp, #20]
 80079fc:	bfa8      	it	ge
 80079fe:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007a00:	eba7 0703 	sub.w	r7, r7, r3
 8007a04:	4417      	add	r7, r2
 8007a06:	4b71      	ldr	r3, [pc, #452]	; (8007bcc <_strtod_l+0x874>)
 8007a08:	f107 37ff 	add.w	r7, r7, #4294967295
 8007a0c:	bfb8      	it	lt
 8007a0e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8007a12:	429f      	cmp	r7, r3
 8007a14:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007a18:	f280 80c7 	bge.w	8007baa <_strtod_l+0x852>
 8007a1c:	1bdb      	subs	r3, r3, r7
 8007a1e:	2b1f      	cmp	r3, #31
 8007a20:	f04f 0101 	mov.w	r1, #1
 8007a24:	eba2 0203 	sub.w	r2, r2, r3
 8007a28:	f300 80b3 	bgt.w	8007b92 <_strtod_l+0x83a>
 8007a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a30:	9313      	str	r3, [sp, #76]	; 0x4c
 8007a32:	2300      	movs	r3, #0
 8007a34:	9310      	str	r3, [sp, #64]	; 0x40
 8007a36:	eb0a 0702 	add.w	r7, sl, r2
 8007a3a:	9b05      	ldr	r3, [sp, #20]
 8007a3c:	45ba      	cmp	sl, r7
 8007a3e:	4415      	add	r5, r2
 8007a40:	441d      	add	r5, r3
 8007a42:	4653      	mov	r3, sl
 8007a44:	bfa8      	it	ge
 8007a46:	463b      	movge	r3, r7
 8007a48:	42ab      	cmp	r3, r5
 8007a4a:	bfa8      	it	ge
 8007a4c:	462b      	movge	r3, r5
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	bfc2      	ittt	gt
 8007a52:	1aff      	subgt	r7, r7, r3
 8007a54:	1aed      	subgt	r5, r5, r3
 8007a56:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007a5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	dd17      	ble.n	8007a90 <_strtod_l+0x738>
 8007a60:	4659      	mov	r1, fp
 8007a62:	461a      	mov	r2, r3
 8007a64:	4620      	mov	r0, r4
 8007a66:	f002 fe25 	bl	800a6b4 <__pow5mult>
 8007a6a:	4683      	mov	fp, r0
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	f43f aeb1 	beq.w	80077d4 <_strtod_l+0x47c>
 8007a72:	4601      	mov	r1, r0
 8007a74:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007a76:	4620      	mov	r0, r4
 8007a78:	f002 fd74 	bl	800a564 <__multiply>
 8007a7c:	900a      	str	r0, [sp, #40]	; 0x28
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	f43f aea8 	beq.w	80077d4 <_strtod_l+0x47c>
 8007a84:	4620      	mov	r0, r4
 8007a86:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007a88:	f002 fc56 	bl	800a338 <_Bfree>
 8007a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a8e:	931a      	str	r3, [sp, #104]	; 0x68
 8007a90:	2f00      	cmp	r7, #0
 8007a92:	f300 808f 	bgt.w	8007bb4 <_strtod_l+0x85c>
 8007a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	dd08      	ble.n	8007aae <_strtod_l+0x756>
 8007a9c:	4620      	mov	r0, r4
 8007a9e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007aa0:	9908      	ldr	r1, [sp, #32]
 8007aa2:	f002 fe07 	bl	800a6b4 <__pow5mult>
 8007aa6:	9008      	str	r0, [sp, #32]
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	f43f ae93 	beq.w	80077d4 <_strtod_l+0x47c>
 8007aae:	2d00      	cmp	r5, #0
 8007ab0:	dd08      	ble.n	8007ac4 <_strtod_l+0x76c>
 8007ab2:	462a      	mov	r2, r5
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	9908      	ldr	r1, [sp, #32]
 8007ab8:	f002 fe56 	bl	800a768 <__lshift>
 8007abc:	9008      	str	r0, [sp, #32]
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	f43f ae88 	beq.w	80077d4 <_strtod_l+0x47c>
 8007ac4:	f1ba 0f00 	cmp.w	sl, #0
 8007ac8:	dd08      	ble.n	8007adc <_strtod_l+0x784>
 8007aca:	4659      	mov	r1, fp
 8007acc:	4652      	mov	r2, sl
 8007ace:	4620      	mov	r0, r4
 8007ad0:	f002 fe4a 	bl	800a768 <__lshift>
 8007ad4:	4683      	mov	fp, r0
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	f43f ae7c 	beq.w	80077d4 <_strtod_l+0x47c>
 8007adc:	4620      	mov	r0, r4
 8007ade:	9a08      	ldr	r2, [sp, #32]
 8007ae0:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007ae2:	f002 fec9 	bl	800a878 <__mdiff>
 8007ae6:	4606      	mov	r6, r0
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	f43f ae73 	beq.w	80077d4 <_strtod_l+0x47c>
 8007aee:	2500      	movs	r5, #0
 8007af0:	68c3      	ldr	r3, [r0, #12]
 8007af2:	4659      	mov	r1, fp
 8007af4:	60c5      	str	r5, [r0, #12]
 8007af6:	930a      	str	r3, [sp, #40]	; 0x28
 8007af8:	f002 fea2 	bl	800a840 <__mcmp>
 8007afc:	42a8      	cmp	r0, r5
 8007afe:	da6b      	bge.n	8007bd8 <_strtod_l+0x880>
 8007b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b02:	ea53 0308 	orrs.w	r3, r3, r8
 8007b06:	f040 808f 	bne.w	8007c28 <_strtod_l+0x8d0>
 8007b0a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f040 808a 	bne.w	8007c28 <_strtod_l+0x8d0>
 8007b14:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b18:	0d1b      	lsrs	r3, r3, #20
 8007b1a:	051b      	lsls	r3, r3, #20
 8007b1c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007b20:	f240 8082 	bls.w	8007c28 <_strtod_l+0x8d0>
 8007b24:	6973      	ldr	r3, [r6, #20]
 8007b26:	b913      	cbnz	r3, 8007b2e <_strtod_l+0x7d6>
 8007b28:	6933      	ldr	r3, [r6, #16]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	dd7c      	ble.n	8007c28 <_strtod_l+0x8d0>
 8007b2e:	4631      	mov	r1, r6
 8007b30:	2201      	movs	r2, #1
 8007b32:	4620      	mov	r0, r4
 8007b34:	f002 fe18 	bl	800a768 <__lshift>
 8007b38:	4659      	mov	r1, fp
 8007b3a:	4606      	mov	r6, r0
 8007b3c:	f002 fe80 	bl	800a840 <__mcmp>
 8007b40:	2800      	cmp	r0, #0
 8007b42:	dd71      	ble.n	8007c28 <_strtod_l+0x8d0>
 8007b44:	9905      	ldr	r1, [sp, #20]
 8007b46:	464b      	mov	r3, r9
 8007b48:	4a21      	ldr	r2, [pc, #132]	; (8007bd0 <_strtod_l+0x878>)
 8007b4a:	2900      	cmp	r1, #0
 8007b4c:	f000 808d 	beq.w	8007c6a <_strtod_l+0x912>
 8007b50:	ea02 0109 	and.w	r1, r2, r9
 8007b54:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007b58:	f300 8087 	bgt.w	8007c6a <_strtod_l+0x912>
 8007b5c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007b60:	f77f aea9 	ble.w	80078b6 <_strtod_l+0x55e>
 8007b64:	4640      	mov	r0, r8
 8007b66:	4649      	mov	r1, r9
 8007b68:	4b1a      	ldr	r3, [pc, #104]	; (8007bd4 <_strtod_l+0x87c>)
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f7f8 fcbe 	bl	80004ec <__aeabi_dmul>
 8007b70:	4b17      	ldr	r3, [pc, #92]	; (8007bd0 <_strtod_l+0x878>)
 8007b72:	4680      	mov	r8, r0
 8007b74:	400b      	ands	r3, r1
 8007b76:	4689      	mov	r9, r1
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f47f ae35 	bne.w	80077e8 <_strtod_l+0x490>
 8007b7e:	2322      	movs	r3, #34	; 0x22
 8007b80:	6023      	str	r3, [r4, #0]
 8007b82:	e631      	b.n	80077e8 <_strtod_l+0x490>
 8007b84:	f04f 32ff 	mov.w	r2, #4294967295
 8007b88:	fa02 f303 	lsl.w	r3, r2, r3
 8007b8c:	ea03 0808 	and.w	r8, r3, r8
 8007b90:	e6de      	b.n	8007950 <_strtod_l+0x5f8>
 8007b92:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8007b96:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8007b9a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8007b9e:	37e2      	adds	r7, #226	; 0xe2
 8007ba0:	fa01 f307 	lsl.w	r3, r1, r7
 8007ba4:	9310      	str	r3, [sp, #64]	; 0x40
 8007ba6:	9113      	str	r1, [sp, #76]	; 0x4c
 8007ba8:	e745      	b.n	8007a36 <_strtod_l+0x6de>
 8007baa:	2300      	movs	r3, #0
 8007bac:	9310      	str	r3, [sp, #64]	; 0x40
 8007bae:	2301      	movs	r3, #1
 8007bb0:	9313      	str	r3, [sp, #76]	; 0x4c
 8007bb2:	e740      	b.n	8007a36 <_strtod_l+0x6de>
 8007bb4:	463a      	mov	r2, r7
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007bba:	f002 fdd5 	bl	800a768 <__lshift>
 8007bbe:	901a      	str	r0, [sp, #104]	; 0x68
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	f47f af68 	bne.w	8007a96 <_strtod_l+0x73e>
 8007bc6:	e605      	b.n	80077d4 <_strtod_l+0x47c>
 8007bc8:	0800e3f0 	.word	0x0800e3f0
 8007bcc:	fffffc02 	.word	0xfffffc02
 8007bd0:	7ff00000 	.word	0x7ff00000
 8007bd4:	39500000 	.word	0x39500000
 8007bd8:	46ca      	mov	sl, r9
 8007bda:	d165      	bne.n	8007ca8 <_strtod_l+0x950>
 8007bdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bde:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007be2:	b352      	cbz	r2, 8007c3a <_strtod_l+0x8e2>
 8007be4:	4a9e      	ldr	r2, [pc, #632]	; (8007e60 <_strtod_l+0xb08>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d12a      	bne.n	8007c40 <_strtod_l+0x8e8>
 8007bea:	9b05      	ldr	r3, [sp, #20]
 8007bec:	4641      	mov	r1, r8
 8007bee:	b1fb      	cbz	r3, 8007c30 <_strtod_l+0x8d8>
 8007bf0:	4b9c      	ldr	r3, [pc, #624]	; (8007e64 <_strtod_l+0xb0c>)
 8007bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8007bf6:	ea09 0303 	and.w	r3, r9, r3
 8007bfa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007bfe:	d81a      	bhi.n	8007c36 <_strtod_l+0x8de>
 8007c00:	0d1b      	lsrs	r3, r3, #20
 8007c02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007c06:	fa02 f303 	lsl.w	r3, r2, r3
 8007c0a:	4299      	cmp	r1, r3
 8007c0c:	d118      	bne.n	8007c40 <_strtod_l+0x8e8>
 8007c0e:	4b96      	ldr	r3, [pc, #600]	; (8007e68 <_strtod_l+0xb10>)
 8007c10:	459a      	cmp	sl, r3
 8007c12:	d102      	bne.n	8007c1a <_strtod_l+0x8c2>
 8007c14:	3101      	adds	r1, #1
 8007c16:	f43f addd 	beq.w	80077d4 <_strtod_l+0x47c>
 8007c1a:	f04f 0800 	mov.w	r8, #0
 8007c1e:	4b91      	ldr	r3, [pc, #580]	; (8007e64 <_strtod_l+0xb0c>)
 8007c20:	ea0a 0303 	and.w	r3, sl, r3
 8007c24:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007c28:	9b05      	ldr	r3, [sp, #20]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d19a      	bne.n	8007b64 <_strtod_l+0x80c>
 8007c2e:	e5db      	b.n	80077e8 <_strtod_l+0x490>
 8007c30:	f04f 33ff 	mov.w	r3, #4294967295
 8007c34:	e7e9      	b.n	8007c0a <_strtod_l+0x8b2>
 8007c36:	4613      	mov	r3, r2
 8007c38:	e7e7      	b.n	8007c0a <_strtod_l+0x8b2>
 8007c3a:	ea53 0308 	orrs.w	r3, r3, r8
 8007c3e:	d081      	beq.n	8007b44 <_strtod_l+0x7ec>
 8007c40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c42:	b1e3      	cbz	r3, 8007c7e <_strtod_l+0x926>
 8007c44:	ea13 0f0a 	tst.w	r3, sl
 8007c48:	d0ee      	beq.n	8007c28 <_strtod_l+0x8d0>
 8007c4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c4c:	4640      	mov	r0, r8
 8007c4e:	4649      	mov	r1, r9
 8007c50:	9a05      	ldr	r2, [sp, #20]
 8007c52:	b1c3      	cbz	r3, 8007c86 <_strtod_l+0x92e>
 8007c54:	f7ff fb5d 	bl	8007312 <sulp>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007c5e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007c60:	f7f8 fa8e 	bl	8000180 <__adddf3>
 8007c64:	4680      	mov	r8, r0
 8007c66:	4689      	mov	r9, r1
 8007c68:	e7de      	b.n	8007c28 <_strtod_l+0x8d0>
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007c70:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007c74:	f04f 38ff 	mov.w	r8, #4294967295
 8007c78:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007c7c:	e7d4      	b.n	8007c28 <_strtod_l+0x8d0>
 8007c7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c80:	ea13 0f08 	tst.w	r3, r8
 8007c84:	e7e0      	b.n	8007c48 <_strtod_l+0x8f0>
 8007c86:	f7ff fb44 	bl	8007312 <sulp>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007c90:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007c92:	f7f8 fa73 	bl	800017c <__aeabi_dsub>
 8007c96:	2200      	movs	r2, #0
 8007c98:	2300      	movs	r3, #0
 8007c9a:	4680      	mov	r8, r0
 8007c9c:	4689      	mov	r9, r1
 8007c9e:	f7f8 fe8d 	bl	80009bc <__aeabi_dcmpeq>
 8007ca2:	2800      	cmp	r0, #0
 8007ca4:	d0c0      	beq.n	8007c28 <_strtod_l+0x8d0>
 8007ca6:	e606      	b.n	80078b6 <_strtod_l+0x55e>
 8007ca8:	4659      	mov	r1, fp
 8007caa:	4630      	mov	r0, r6
 8007cac:	f002 ff2e 	bl	800ab0c <__ratio>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007cbe:	f7f8 fe91 	bl	80009e4 <__aeabi_dcmple>
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	d06f      	beq.n	8007da6 <_strtod_l+0xa4e>
 8007cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d17c      	bne.n	8007dc6 <_strtod_l+0xa6e>
 8007ccc:	f1b8 0f00 	cmp.w	r8, #0
 8007cd0:	d159      	bne.n	8007d86 <_strtod_l+0xa2e>
 8007cd2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d17b      	bne.n	8007dd2 <_strtod_l+0xa7a>
 8007cda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007cde:	2200      	movs	r2, #0
 8007ce0:	4b62      	ldr	r3, [pc, #392]	; (8007e6c <_strtod_l+0xb14>)
 8007ce2:	f7f8 fe75 	bl	80009d0 <__aeabi_dcmplt>
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	d15a      	bne.n	8007da0 <_strtod_l+0xa48>
 8007cea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007cee:	2200      	movs	r2, #0
 8007cf0:	4b5f      	ldr	r3, [pc, #380]	; (8007e70 <_strtod_l+0xb18>)
 8007cf2:	f7f8 fbfb 	bl	80004ec <__aeabi_dmul>
 8007cf6:	4605      	mov	r5, r0
 8007cf8:	460f      	mov	r7, r1
 8007cfa:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007cfe:	9506      	str	r5, [sp, #24]
 8007d00:	9307      	str	r3, [sp, #28]
 8007d02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d06:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007d0a:	4b56      	ldr	r3, [pc, #344]	; (8007e64 <_strtod_l+0xb0c>)
 8007d0c:	4a55      	ldr	r2, [pc, #340]	; (8007e64 <_strtod_l+0xb0c>)
 8007d0e:	ea0a 0303 	and.w	r3, sl, r3
 8007d12:	9313      	str	r3, [sp, #76]	; 0x4c
 8007d14:	4b57      	ldr	r3, [pc, #348]	; (8007e74 <_strtod_l+0xb1c>)
 8007d16:	ea0a 0202 	and.w	r2, sl, r2
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	f040 80b0 	bne.w	8007e80 <_strtod_l+0xb28>
 8007d20:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007d24:	4640      	mov	r0, r8
 8007d26:	4649      	mov	r1, r9
 8007d28:	f002 fe32 	bl	800a990 <__ulp>
 8007d2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d30:	f7f8 fbdc 	bl	80004ec <__aeabi_dmul>
 8007d34:	4642      	mov	r2, r8
 8007d36:	464b      	mov	r3, r9
 8007d38:	f7f8 fa22 	bl	8000180 <__adddf3>
 8007d3c:	f8df a124 	ldr.w	sl, [pc, #292]	; 8007e64 <_strtod_l+0xb0c>
 8007d40:	4a4d      	ldr	r2, [pc, #308]	; (8007e78 <_strtod_l+0xb20>)
 8007d42:	ea01 0a0a 	and.w	sl, r1, sl
 8007d46:	4592      	cmp	sl, r2
 8007d48:	4680      	mov	r8, r0
 8007d4a:	d948      	bls.n	8007dde <_strtod_l+0xa86>
 8007d4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d4e:	4b46      	ldr	r3, [pc, #280]	; (8007e68 <_strtod_l+0xb10>)
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d103      	bne.n	8007d5c <_strtod_l+0xa04>
 8007d54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d56:	3301      	adds	r3, #1
 8007d58:	f43f ad3c 	beq.w	80077d4 <_strtod_l+0x47c>
 8007d5c:	f04f 38ff 	mov.w	r8, #4294967295
 8007d60:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8007e68 <_strtod_l+0xb10>
 8007d64:	4620      	mov	r0, r4
 8007d66:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007d68:	f002 fae6 	bl	800a338 <_Bfree>
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	9908      	ldr	r1, [sp, #32]
 8007d70:	f002 fae2 	bl	800a338 <_Bfree>
 8007d74:	4659      	mov	r1, fp
 8007d76:	4620      	mov	r0, r4
 8007d78:	f002 fade 	bl	800a338 <_Bfree>
 8007d7c:	4631      	mov	r1, r6
 8007d7e:	4620      	mov	r0, r4
 8007d80:	f002 fada 	bl	800a338 <_Bfree>
 8007d84:	e605      	b.n	8007992 <_strtod_l+0x63a>
 8007d86:	f1b8 0f01 	cmp.w	r8, #1
 8007d8a:	d103      	bne.n	8007d94 <_strtod_l+0xa3c>
 8007d8c:	f1b9 0f00 	cmp.w	r9, #0
 8007d90:	f43f ad91 	beq.w	80078b6 <_strtod_l+0x55e>
 8007d94:	2200      	movs	r2, #0
 8007d96:	4b39      	ldr	r3, [pc, #228]	; (8007e7c <_strtod_l+0xb24>)
 8007d98:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007d9a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007d9e:	e016      	b.n	8007dce <_strtod_l+0xa76>
 8007da0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007da2:	4f33      	ldr	r7, [pc, #204]	; (8007e70 <_strtod_l+0xb18>)
 8007da4:	e7a9      	b.n	8007cfa <_strtod_l+0x9a2>
 8007da6:	4b32      	ldr	r3, [pc, #200]	; (8007e70 <_strtod_l+0xb18>)
 8007da8:	2200      	movs	r2, #0
 8007daa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007dae:	f7f8 fb9d 	bl	80004ec <__aeabi_dmul>
 8007db2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007db4:	4605      	mov	r5, r0
 8007db6:	460f      	mov	r7, r1
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d09e      	beq.n	8007cfa <_strtod_l+0x9a2>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007dc4:	e79d      	b.n	8007d02 <_strtod_l+0x9aa>
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	4b28      	ldr	r3, [pc, #160]	; (8007e6c <_strtod_l+0xb14>)
 8007dca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007dce:	4f27      	ldr	r7, [pc, #156]	; (8007e6c <_strtod_l+0xb14>)
 8007dd0:	e797      	b.n	8007d02 <_strtod_l+0x9aa>
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	4b29      	ldr	r3, [pc, #164]	; (8007e7c <_strtod_l+0xb24>)
 8007dd6:	4645      	mov	r5, r8
 8007dd8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007ddc:	e7f7      	b.n	8007dce <_strtod_l+0xa76>
 8007dde:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8007de2:	9b05      	ldr	r3, [sp, #20]
 8007de4:	46ca      	mov	sl, r9
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1bc      	bne.n	8007d64 <_strtod_l+0xa0c>
 8007dea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007dee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007df0:	0d1b      	lsrs	r3, r3, #20
 8007df2:	051b      	lsls	r3, r3, #20
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d1b5      	bne.n	8007d64 <_strtod_l+0xa0c>
 8007df8:	4628      	mov	r0, r5
 8007dfa:	4639      	mov	r1, r7
 8007dfc:	f7f9 f942 	bl	8001084 <__aeabi_d2lz>
 8007e00:	f7f8 fb46 	bl	8000490 <__aeabi_l2d>
 8007e04:	4602      	mov	r2, r0
 8007e06:	460b      	mov	r3, r1
 8007e08:	4628      	mov	r0, r5
 8007e0a:	4639      	mov	r1, r7
 8007e0c:	f7f8 f9b6 	bl	800017c <__aeabi_dsub>
 8007e10:	460b      	mov	r3, r1
 8007e12:	4602      	mov	r2, r0
 8007e14:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8007e18:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007e1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e1e:	ea4a 0a08 	orr.w	sl, sl, r8
 8007e22:	ea5a 0a03 	orrs.w	sl, sl, r3
 8007e26:	d06c      	beq.n	8007f02 <_strtod_l+0xbaa>
 8007e28:	a309      	add	r3, pc, #36	; (adr r3, 8007e50 <_strtod_l+0xaf8>)
 8007e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2e:	f7f8 fdcf 	bl	80009d0 <__aeabi_dcmplt>
 8007e32:	2800      	cmp	r0, #0
 8007e34:	f47f acd8 	bne.w	80077e8 <_strtod_l+0x490>
 8007e38:	a307      	add	r3, pc, #28	; (adr r3, 8007e58 <_strtod_l+0xb00>)
 8007e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e42:	f7f8 fde3 	bl	8000a0c <__aeabi_dcmpgt>
 8007e46:	2800      	cmp	r0, #0
 8007e48:	d08c      	beq.n	8007d64 <_strtod_l+0xa0c>
 8007e4a:	e4cd      	b.n	80077e8 <_strtod_l+0x490>
 8007e4c:	f3af 8000 	nop.w
 8007e50:	94a03595 	.word	0x94a03595
 8007e54:	3fdfffff 	.word	0x3fdfffff
 8007e58:	35afe535 	.word	0x35afe535
 8007e5c:	3fe00000 	.word	0x3fe00000
 8007e60:	000fffff 	.word	0x000fffff
 8007e64:	7ff00000 	.word	0x7ff00000
 8007e68:	7fefffff 	.word	0x7fefffff
 8007e6c:	3ff00000 	.word	0x3ff00000
 8007e70:	3fe00000 	.word	0x3fe00000
 8007e74:	7fe00000 	.word	0x7fe00000
 8007e78:	7c9fffff 	.word	0x7c9fffff
 8007e7c:	bff00000 	.word	0xbff00000
 8007e80:	9b05      	ldr	r3, [sp, #20]
 8007e82:	b333      	cbz	r3, 8007ed2 <_strtod_l+0xb7a>
 8007e84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e86:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007e8a:	d822      	bhi.n	8007ed2 <_strtod_l+0xb7a>
 8007e8c:	a328      	add	r3, pc, #160	; (adr r3, 8007f30 <_strtod_l+0xbd8>)
 8007e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e92:	4628      	mov	r0, r5
 8007e94:	4639      	mov	r1, r7
 8007e96:	f7f8 fda5 	bl	80009e4 <__aeabi_dcmple>
 8007e9a:	b1a0      	cbz	r0, 8007ec6 <_strtod_l+0xb6e>
 8007e9c:	4639      	mov	r1, r7
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	f7f8 fdfc 	bl	8000a9c <__aeabi_d2uiz>
 8007ea4:	2801      	cmp	r0, #1
 8007ea6:	bf38      	it	cc
 8007ea8:	2001      	movcc	r0, #1
 8007eaa:	f7f8 faa5 	bl	80003f8 <__aeabi_ui2d>
 8007eae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eb0:	4605      	mov	r5, r0
 8007eb2:	460f      	mov	r7, r1
 8007eb4:	bb03      	cbnz	r3, 8007ef8 <_strtod_l+0xba0>
 8007eb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007eba:	9014      	str	r0, [sp, #80]	; 0x50
 8007ebc:	9315      	str	r3, [sp, #84]	; 0x54
 8007ebe:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007ec2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007ec6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ec8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007eca:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007ece:	1a9b      	subs	r3, r3, r2
 8007ed0:	9311      	str	r3, [sp, #68]	; 0x44
 8007ed2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007ed4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007ed6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8007eda:	f002 fd59 	bl	800a990 <__ulp>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	4640      	mov	r0, r8
 8007ee4:	4649      	mov	r1, r9
 8007ee6:	f7f8 fb01 	bl	80004ec <__aeabi_dmul>
 8007eea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007eec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007eee:	f7f8 f947 	bl	8000180 <__adddf3>
 8007ef2:	4680      	mov	r8, r0
 8007ef4:	4689      	mov	r9, r1
 8007ef6:	e774      	b.n	8007de2 <_strtod_l+0xa8a>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	460b      	mov	r3, r1
 8007efc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007f00:	e7dd      	b.n	8007ebe <_strtod_l+0xb66>
 8007f02:	a30d      	add	r3, pc, #52	; (adr r3, 8007f38 <_strtod_l+0xbe0>)
 8007f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f08:	f7f8 fd62 	bl	80009d0 <__aeabi_dcmplt>
 8007f0c:	e79b      	b.n	8007e46 <_strtod_l+0xaee>
 8007f0e:	2300      	movs	r3, #0
 8007f10:	930e      	str	r3, [sp, #56]	; 0x38
 8007f12:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007f14:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f16:	6013      	str	r3, [r2, #0]
 8007f18:	f7ff ba5b 	b.w	80073d2 <_strtod_l+0x7a>
 8007f1c:	2a65      	cmp	r2, #101	; 0x65
 8007f1e:	f43f ab52 	beq.w	80075c6 <_strtod_l+0x26e>
 8007f22:	2a45      	cmp	r2, #69	; 0x45
 8007f24:	f43f ab4f 	beq.w	80075c6 <_strtod_l+0x26e>
 8007f28:	2301      	movs	r3, #1
 8007f2a:	f7ff bb87 	b.w	800763c <_strtod_l+0x2e4>
 8007f2e:	bf00      	nop
 8007f30:	ffc00000 	.word	0xffc00000
 8007f34:	41dfffff 	.word	0x41dfffff
 8007f38:	94a03595 	.word	0x94a03595
 8007f3c:	3fcfffff 	.word	0x3fcfffff

08007f40 <strtod>:
 8007f40:	460a      	mov	r2, r1
 8007f42:	4601      	mov	r1, r0
 8007f44:	4802      	ldr	r0, [pc, #8]	; (8007f50 <strtod+0x10>)
 8007f46:	4b03      	ldr	r3, [pc, #12]	; (8007f54 <strtod+0x14>)
 8007f48:	6800      	ldr	r0, [r0, #0]
 8007f4a:	f7ff ba05 	b.w	8007358 <_strtod_l>
 8007f4e:	bf00      	nop
 8007f50:	200001e4 	.word	0x200001e4
 8007f54:	2000002c 	.word	0x2000002c

08007f58 <_strtol_l.constprop.0>:
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f5e:	4686      	mov	lr, r0
 8007f60:	4690      	mov	r8, r2
 8007f62:	d001      	beq.n	8007f68 <_strtol_l.constprop.0+0x10>
 8007f64:	2b24      	cmp	r3, #36	; 0x24
 8007f66:	d906      	bls.n	8007f76 <_strtol_l.constprop.0+0x1e>
 8007f68:	f000 fe7e 	bl	8008c68 <__errno>
 8007f6c:	2316      	movs	r3, #22
 8007f6e:	6003      	str	r3, [r0, #0]
 8007f70:	2000      	movs	r0, #0
 8007f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f76:	460d      	mov	r5, r1
 8007f78:	4835      	ldr	r0, [pc, #212]	; (8008050 <_strtol_l.constprop.0+0xf8>)
 8007f7a:	462a      	mov	r2, r5
 8007f7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f80:	5d06      	ldrb	r6, [r0, r4]
 8007f82:	f016 0608 	ands.w	r6, r6, #8
 8007f86:	d1f8      	bne.n	8007f7a <_strtol_l.constprop.0+0x22>
 8007f88:	2c2d      	cmp	r4, #45	; 0x2d
 8007f8a:	d12e      	bne.n	8007fea <_strtol_l.constprop.0+0x92>
 8007f8c:	2601      	movs	r6, #1
 8007f8e:	782c      	ldrb	r4, [r5, #0]
 8007f90:	1c95      	adds	r5, r2, #2
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d057      	beq.n	8008046 <_strtol_l.constprop.0+0xee>
 8007f96:	2b10      	cmp	r3, #16
 8007f98:	d109      	bne.n	8007fae <_strtol_l.constprop.0+0x56>
 8007f9a:	2c30      	cmp	r4, #48	; 0x30
 8007f9c:	d107      	bne.n	8007fae <_strtol_l.constprop.0+0x56>
 8007f9e:	782a      	ldrb	r2, [r5, #0]
 8007fa0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007fa4:	2a58      	cmp	r2, #88	; 0x58
 8007fa6:	d149      	bne.n	800803c <_strtol_l.constprop.0+0xe4>
 8007fa8:	2310      	movs	r3, #16
 8007faa:	786c      	ldrb	r4, [r5, #1]
 8007fac:	3502      	adds	r5, #2
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8007fb4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007fb8:	fbbc f9f3 	udiv	r9, ip, r3
 8007fbc:	4610      	mov	r0, r2
 8007fbe:	fb03 ca19 	mls	sl, r3, r9, ip
 8007fc2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007fc6:	2f09      	cmp	r7, #9
 8007fc8:	d814      	bhi.n	8007ff4 <_strtol_l.constprop.0+0x9c>
 8007fca:	463c      	mov	r4, r7
 8007fcc:	42a3      	cmp	r3, r4
 8007fce:	dd20      	ble.n	8008012 <_strtol_l.constprop.0+0xba>
 8007fd0:	1c57      	adds	r7, r2, #1
 8007fd2:	d007      	beq.n	8007fe4 <_strtol_l.constprop.0+0x8c>
 8007fd4:	4581      	cmp	r9, r0
 8007fd6:	d319      	bcc.n	800800c <_strtol_l.constprop.0+0xb4>
 8007fd8:	d101      	bne.n	8007fde <_strtol_l.constprop.0+0x86>
 8007fda:	45a2      	cmp	sl, r4
 8007fdc:	db16      	blt.n	800800c <_strtol_l.constprop.0+0xb4>
 8007fde:	2201      	movs	r2, #1
 8007fe0:	fb00 4003 	mla	r0, r0, r3, r4
 8007fe4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007fe8:	e7eb      	b.n	8007fc2 <_strtol_l.constprop.0+0x6a>
 8007fea:	2c2b      	cmp	r4, #43	; 0x2b
 8007fec:	bf04      	itt	eq
 8007fee:	782c      	ldrbeq	r4, [r5, #0]
 8007ff0:	1c95      	addeq	r5, r2, #2
 8007ff2:	e7ce      	b.n	8007f92 <_strtol_l.constprop.0+0x3a>
 8007ff4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007ff8:	2f19      	cmp	r7, #25
 8007ffa:	d801      	bhi.n	8008000 <_strtol_l.constprop.0+0xa8>
 8007ffc:	3c37      	subs	r4, #55	; 0x37
 8007ffe:	e7e5      	b.n	8007fcc <_strtol_l.constprop.0+0x74>
 8008000:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008004:	2f19      	cmp	r7, #25
 8008006:	d804      	bhi.n	8008012 <_strtol_l.constprop.0+0xba>
 8008008:	3c57      	subs	r4, #87	; 0x57
 800800a:	e7df      	b.n	8007fcc <_strtol_l.constprop.0+0x74>
 800800c:	f04f 32ff 	mov.w	r2, #4294967295
 8008010:	e7e8      	b.n	8007fe4 <_strtol_l.constprop.0+0x8c>
 8008012:	1c53      	adds	r3, r2, #1
 8008014:	d108      	bne.n	8008028 <_strtol_l.constprop.0+0xd0>
 8008016:	2322      	movs	r3, #34	; 0x22
 8008018:	4660      	mov	r0, ip
 800801a:	f8ce 3000 	str.w	r3, [lr]
 800801e:	f1b8 0f00 	cmp.w	r8, #0
 8008022:	d0a6      	beq.n	8007f72 <_strtol_l.constprop.0+0x1a>
 8008024:	1e69      	subs	r1, r5, #1
 8008026:	e006      	b.n	8008036 <_strtol_l.constprop.0+0xde>
 8008028:	b106      	cbz	r6, 800802c <_strtol_l.constprop.0+0xd4>
 800802a:	4240      	negs	r0, r0
 800802c:	f1b8 0f00 	cmp.w	r8, #0
 8008030:	d09f      	beq.n	8007f72 <_strtol_l.constprop.0+0x1a>
 8008032:	2a00      	cmp	r2, #0
 8008034:	d1f6      	bne.n	8008024 <_strtol_l.constprop.0+0xcc>
 8008036:	f8c8 1000 	str.w	r1, [r8]
 800803a:	e79a      	b.n	8007f72 <_strtol_l.constprop.0+0x1a>
 800803c:	2430      	movs	r4, #48	; 0x30
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1b5      	bne.n	8007fae <_strtol_l.constprop.0+0x56>
 8008042:	2308      	movs	r3, #8
 8008044:	e7b3      	b.n	8007fae <_strtol_l.constprop.0+0x56>
 8008046:	2c30      	cmp	r4, #48	; 0x30
 8008048:	d0a9      	beq.n	8007f9e <_strtol_l.constprop.0+0x46>
 800804a:	230a      	movs	r3, #10
 800804c:	e7af      	b.n	8007fae <_strtol_l.constprop.0+0x56>
 800804e:	bf00      	nop
 8008050:	0800e419 	.word	0x0800e419

08008054 <strtol>:
 8008054:	4613      	mov	r3, r2
 8008056:	460a      	mov	r2, r1
 8008058:	4601      	mov	r1, r0
 800805a:	4802      	ldr	r0, [pc, #8]	; (8008064 <strtol+0x10>)
 800805c:	6800      	ldr	r0, [r0, #0]
 800805e:	f7ff bf7b 	b.w	8007f58 <_strtol_l.constprop.0>
 8008062:	bf00      	nop
 8008064:	200001e4 	.word	0x200001e4

08008068 <__cvt>:
 8008068:	2b00      	cmp	r3, #0
 800806a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800806e:	461f      	mov	r7, r3
 8008070:	bfbb      	ittet	lt
 8008072:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008076:	461f      	movlt	r7, r3
 8008078:	2300      	movge	r3, #0
 800807a:	232d      	movlt	r3, #45	; 0x2d
 800807c:	b088      	sub	sp, #32
 800807e:	4614      	mov	r4, r2
 8008080:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008082:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008084:	7013      	strb	r3, [r2, #0]
 8008086:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008088:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800808c:	f023 0820 	bic.w	r8, r3, #32
 8008090:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008094:	d005      	beq.n	80080a2 <__cvt+0x3a>
 8008096:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800809a:	d100      	bne.n	800809e <__cvt+0x36>
 800809c:	3501      	adds	r5, #1
 800809e:	2302      	movs	r3, #2
 80080a0:	e000      	b.n	80080a4 <__cvt+0x3c>
 80080a2:	2303      	movs	r3, #3
 80080a4:	aa07      	add	r2, sp, #28
 80080a6:	9204      	str	r2, [sp, #16]
 80080a8:	aa06      	add	r2, sp, #24
 80080aa:	e9cd a202 	strd	sl, r2, [sp, #8]
 80080ae:	e9cd 3500 	strd	r3, r5, [sp]
 80080b2:	4622      	mov	r2, r4
 80080b4:	463b      	mov	r3, r7
 80080b6:	f000 feb3 	bl	8008e20 <_dtoa_r>
 80080ba:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80080be:	4606      	mov	r6, r0
 80080c0:	d102      	bne.n	80080c8 <__cvt+0x60>
 80080c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080c4:	07db      	lsls	r3, r3, #31
 80080c6:	d522      	bpl.n	800810e <__cvt+0xa6>
 80080c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080cc:	eb06 0905 	add.w	r9, r6, r5
 80080d0:	d110      	bne.n	80080f4 <__cvt+0x8c>
 80080d2:	7833      	ldrb	r3, [r6, #0]
 80080d4:	2b30      	cmp	r3, #48	; 0x30
 80080d6:	d10a      	bne.n	80080ee <__cvt+0x86>
 80080d8:	2200      	movs	r2, #0
 80080da:	2300      	movs	r3, #0
 80080dc:	4620      	mov	r0, r4
 80080de:	4639      	mov	r1, r7
 80080e0:	f7f8 fc6c 	bl	80009bc <__aeabi_dcmpeq>
 80080e4:	b918      	cbnz	r0, 80080ee <__cvt+0x86>
 80080e6:	f1c5 0501 	rsb	r5, r5, #1
 80080ea:	f8ca 5000 	str.w	r5, [sl]
 80080ee:	f8da 3000 	ldr.w	r3, [sl]
 80080f2:	4499      	add	r9, r3
 80080f4:	2200      	movs	r2, #0
 80080f6:	2300      	movs	r3, #0
 80080f8:	4620      	mov	r0, r4
 80080fa:	4639      	mov	r1, r7
 80080fc:	f7f8 fc5e 	bl	80009bc <__aeabi_dcmpeq>
 8008100:	b108      	cbz	r0, 8008106 <__cvt+0x9e>
 8008102:	f8cd 901c 	str.w	r9, [sp, #28]
 8008106:	2230      	movs	r2, #48	; 0x30
 8008108:	9b07      	ldr	r3, [sp, #28]
 800810a:	454b      	cmp	r3, r9
 800810c:	d307      	bcc.n	800811e <__cvt+0xb6>
 800810e:	4630      	mov	r0, r6
 8008110:	9b07      	ldr	r3, [sp, #28]
 8008112:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008114:	1b9b      	subs	r3, r3, r6
 8008116:	6013      	str	r3, [r2, #0]
 8008118:	b008      	add	sp, #32
 800811a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800811e:	1c59      	adds	r1, r3, #1
 8008120:	9107      	str	r1, [sp, #28]
 8008122:	701a      	strb	r2, [r3, #0]
 8008124:	e7f0      	b.n	8008108 <__cvt+0xa0>

08008126 <__exponent>:
 8008126:	4603      	mov	r3, r0
 8008128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800812a:	2900      	cmp	r1, #0
 800812c:	f803 2b02 	strb.w	r2, [r3], #2
 8008130:	bfb6      	itet	lt
 8008132:	222d      	movlt	r2, #45	; 0x2d
 8008134:	222b      	movge	r2, #43	; 0x2b
 8008136:	4249      	neglt	r1, r1
 8008138:	2909      	cmp	r1, #9
 800813a:	7042      	strb	r2, [r0, #1]
 800813c:	dd2a      	ble.n	8008194 <__exponent+0x6e>
 800813e:	f10d 0207 	add.w	r2, sp, #7
 8008142:	4617      	mov	r7, r2
 8008144:	260a      	movs	r6, #10
 8008146:	fb91 f5f6 	sdiv	r5, r1, r6
 800814a:	4694      	mov	ip, r2
 800814c:	fb06 1415 	mls	r4, r6, r5, r1
 8008150:	3430      	adds	r4, #48	; 0x30
 8008152:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008156:	460c      	mov	r4, r1
 8008158:	2c63      	cmp	r4, #99	; 0x63
 800815a:	4629      	mov	r1, r5
 800815c:	f102 32ff 	add.w	r2, r2, #4294967295
 8008160:	dcf1      	bgt.n	8008146 <__exponent+0x20>
 8008162:	3130      	adds	r1, #48	; 0x30
 8008164:	f1ac 0402 	sub.w	r4, ip, #2
 8008168:	f802 1c01 	strb.w	r1, [r2, #-1]
 800816c:	4622      	mov	r2, r4
 800816e:	1c41      	adds	r1, r0, #1
 8008170:	42ba      	cmp	r2, r7
 8008172:	d30a      	bcc.n	800818a <__exponent+0x64>
 8008174:	f10d 0209 	add.w	r2, sp, #9
 8008178:	eba2 020c 	sub.w	r2, r2, ip
 800817c:	42bc      	cmp	r4, r7
 800817e:	bf88      	it	hi
 8008180:	2200      	movhi	r2, #0
 8008182:	4413      	add	r3, r2
 8008184:	1a18      	subs	r0, r3, r0
 8008186:	b003      	add	sp, #12
 8008188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800818a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800818e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008192:	e7ed      	b.n	8008170 <__exponent+0x4a>
 8008194:	2330      	movs	r3, #48	; 0x30
 8008196:	3130      	adds	r1, #48	; 0x30
 8008198:	7083      	strb	r3, [r0, #2]
 800819a:	70c1      	strb	r1, [r0, #3]
 800819c:	1d03      	adds	r3, r0, #4
 800819e:	e7f1      	b.n	8008184 <__exponent+0x5e>

080081a0 <_printf_float>:
 80081a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a4:	b091      	sub	sp, #68	; 0x44
 80081a6:	460c      	mov	r4, r1
 80081a8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80081ac:	4616      	mov	r6, r2
 80081ae:	461f      	mov	r7, r3
 80081b0:	4605      	mov	r5, r0
 80081b2:	f000 fd0f 	bl	8008bd4 <_localeconv_r>
 80081b6:	6803      	ldr	r3, [r0, #0]
 80081b8:	4618      	mov	r0, r3
 80081ba:	9309      	str	r3, [sp, #36]	; 0x24
 80081bc:	f7f7 ffd2 	bl	8000164 <strlen>
 80081c0:	2300      	movs	r3, #0
 80081c2:	930e      	str	r3, [sp, #56]	; 0x38
 80081c4:	f8d8 3000 	ldr.w	r3, [r8]
 80081c8:	900a      	str	r0, [sp, #40]	; 0x28
 80081ca:	3307      	adds	r3, #7
 80081cc:	f023 0307 	bic.w	r3, r3, #7
 80081d0:	f103 0208 	add.w	r2, r3, #8
 80081d4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80081d8:	f8d4 b000 	ldr.w	fp, [r4]
 80081dc:	f8c8 2000 	str.w	r2, [r8]
 80081e0:	e9d3 a800 	ldrd	sl, r8, [r3]
 80081e4:	4652      	mov	r2, sl
 80081e6:	4643      	mov	r3, r8
 80081e8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80081ec:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80081f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80081f2:	f04f 32ff 	mov.w	r2, #4294967295
 80081f6:	4650      	mov	r0, sl
 80081f8:	4b9c      	ldr	r3, [pc, #624]	; (800846c <_printf_float+0x2cc>)
 80081fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081fc:	f7f8 fc10 	bl	8000a20 <__aeabi_dcmpun>
 8008200:	bb70      	cbnz	r0, 8008260 <_printf_float+0xc0>
 8008202:	f04f 32ff 	mov.w	r2, #4294967295
 8008206:	4650      	mov	r0, sl
 8008208:	4b98      	ldr	r3, [pc, #608]	; (800846c <_printf_float+0x2cc>)
 800820a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800820c:	f7f8 fbea 	bl	80009e4 <__aeabi_dcmple>
 8008210:	bb30      	cbnz	r0, 8008260 <_printf_float+0xc0>
 8008212:	2200      	movs	r2, #0
 8008214:	2300      	movs	r3, #0
 8008216:	4650      	mov	r0, sl
 8008218:	4641      	mov	r1, r8
 800821a:	f7f8 fbd9 	bl	80009d0 <__aeabi_dcmplt>
 800821e:	b110      	cbz	r0, 8008226 <_printf_float+0x86>
 8008220:	232d      	movs	r3, #45	; 0x2d
 8008222:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008226:	4a92      	ldr	r2, [pc, #584]	; (8008470 <_printf_float+0x2d0>)
 8008228:	4b92      	ldr	r3, [pc, #584]	; (8008474 <_printf_float+0x2d4>)
 800822a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800822e:	bf94      	ite	ls
 8008230:	4690      	movls	r8, r2
 8008232:	4698      	movhi	r8, r3
 8008234:	2303      	movs	r3, #3
 8008236:	f04f 0a00 	mov.w	sl, #0
 800823a:	6123      	str	r3, [r4, #16]
 800823c:	f02b 0304 	bic.w	r3, fp, #4
 8008240:	6023      	str	r3, [r4, #0]
 8008242:	4633      	mov	r3, r6
 8008244:	4621      	mov	r1, r4
 8008246:	4628      	mov	r0, r5
 8008248:	9700      	str	r7, [sp, #0]
 800824a:	aa0f      	add	r2, sp, #60	; 0x3c
 800824c:	f000 f9d6 	bl	80085fc <_printf_common>
 8008250:	3001      	adds	r0, #1
 8008252:	f040 8090 	bne.w	8008376 <_printf_float+0x1d6>
 8008256:	f04f 30ff 	mov.w	r0, #4294967295
 800825a:	b011      	add	sp, #68	; 0x44
 800825c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008260:	4652      	mov	r2, sl
 8008262:	4643      	mov	r3, r8
 8008264:	4650      	mov	r0, sl
 8008266:	4641      	mov	r1, r8
 8008268:	f7f8 fbda 	bl	8000a20 <__aeabi_dcmpun>
 800826c:	b148      	cbz	r0, 8008282 <_printf_float+0xe2>
 800826e:	f1b8 0f00 	cmp.w	r8, #0
 8008272:	bfb8      	it	lt
 8008274:	232d      	movlt	r3, #45	; 0x2d
 8008276:	4a80      	ldr	r2, [pc, #512]	; (8008478 <_printf_float+0x2d8>)
 8008278:	bfb8      	it	lt
 800827a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800827e:	4b7f      	ldr	r3, [pc, #508]	; (800847c <_printf_float+0x2dc>)
 8008280:	e7d3      	b.n	800822a <_printf_float+0x8a>
 8008282:	6863      	ldr	r3, [r4, #4]
 8008284:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008288:	1c5a      	adds	r2, r3, #1
 800828a:	d142      	bne.n	8008312 <_printf_float+0x172>
 800828c:	2306      	movs	r3, #6
 800828e:	6063      	str	r3, [r4, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	9206      	str	r2, [sp, #24]
 8008294:	aa0e      	add	r2, sp, #56	; 0x38
 8008296:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800829a:	aa0d      	add	r2, sp, #52	; 0x34
 800829c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80082a0:	9203      	str	r2, [sp, #12]
 80082a2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80082a6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80082aa:	6023      	str	r3, [r4, #0]
 80082ac:	6863      	ldr	r3, [r4, #4]
 80082ae:	4652      	mov	r2, sl
 80082b0:	9300      	str	r3, [sp, #0]
 80082b2:	4628      	mov	r0, r5
 80082b4:	4643      	mov	r3, r8
 80082b6:	910b      	str	r1, [sp, #44]	; 0x2c
 80082b8:	f7ff fed6 	bl	8008068 <__cvt>
 80082bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082be:	4680      	mov	r8, r0
 80082c0:	2947      	cmp	r1, #71	; 0x47
 80082c2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80082c4:	d108      	bne.n	80082d8 <_printf_float+0x138>
 80082c6:	1cc8      	adds	r0, r1, #3
 80082c8:	db02      	blt.n	80082d0 <_printf_float+0x130>
 80082ca:	6863      	ldr	r3, [r4, #4]
 80082cc:	4299      	cmp	r1, r3
 80082ce:	dd40      	ble.n	8008352 <_printf_float+0x1b2>
 80082d0:	f1a9 0902 	sub.w	r9, r9, #2
 80082d4:	fa5f f989 	uxtb.w	r9, r9
 80082d8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80082dc:	d81f      	bhi.n	800831e <_printf_float+0x17e>
 80082de:	464a      	mov	r2, r9
 80082e0:	3901      	subs	r1, #1
 80082e2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80082e6:	910d      	str	r1, [sp, #52]	; 0x34
 80082e8:	f7ff ff1d 	bl	8008126 <__exponent>
 80082ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082ee:	4682      	mov	sl, r0
 80082f0:	1813      	adds	r3, r2, r0
 80082f2:	2a01      	cmp	r2, #1
 80082f4:	6123      	str	r3, [r4, #16]
 80082f6:	dc02      	bgt.n	80082fe <_printf_float+0x15e>
 80082f8:	6822      	ldr	r2, [r4, #0]
 80082fa:	07d2      	lsls	r2, r2, #31
 80082fc:	d501      	bpl.n	8008302 <_printf_float+0x162>
 80082fe:	3301      	adds	r3, #1
 8008300:	6123      	str	r3, [r4, #16]
 8008302:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008306:	2b00      	cmp	r3, #0
 8008308:	d09b      	beq.n	8008242 <_printf_float+0xa2>
 800830a:	232d      	movs	r3, #45	; 0x2d
 800830c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008310:	e797      	b.n	8008242 <_printf_float+0xa2>
 8008312:	2947      	cmp	r1, #71	; 0x47
 8008314:	d1bc      	bne.n	8008290 <_printf_float+0xf0>
 8008316:	2b00      	cmp	r3, #0
 8008318:	d1ba      	bne.n	8008290 <_printf_float+0xf0>
 800831a:	2301      	movs	r3, #1
 800831c:	e7b7      	b.n	800828e <_printf_float+0xee>
 800831e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008322:	d118      	bne.n	8008356 <_printf_float+0x1b6>
 8008324:	2900      	cmp	r1, #0
 8008326:	6863      	ldr	r3, [r4, #4]
 8008328:	dd0b      	ble.n	8008342 <_printf_float+0x1a2>
 800832a:	6121      	str	r1, [r4, #16]
 800832c:	b913      	cbnz	r3, 8008334 <_printf_float+0x194>
 800832e:	6822      	ldr	r2, [r4, #0]
 8008330:	07d0      	lsls	r0, r2, #31
 8008332:	d502      	bpl.n	800833a <_printf_float+0x19a>
 8008334:	3301      	adds	r3, #1
 8008336:	440b      	add	r3, r1
 8008338:	6123      	str	r3, [r4, #16]
 800833a:	f04f 0a00 	mov.w	sl, #0
 800833e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008340:	e7df      	b.n	8008302 <_printf_float+0x162>
 8008342:	b913      	cbnz	r3, 800834a <_printf_float+0x1aa>
 8008344:	6822      	ldr	r2, [r4, #0]
 8008346:	07d2      	lsls	r2, r2, #31
 8008348:	d501      	bpl.n	800834e <_printf_float+0x1ae>
 800834a:	3302      	adds	r3, #2
 800834c:	e7f4      	b.n	8008338 <_printf_float+0x198>
 800834e:	2301      	movs	r3, #1
 8008350:	e7f2      	b.n	8008338 <_printf_float+0x198>
 8008352:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008356:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008358:	4299      	cmp	r1, r3
 800835a:	db05      	blt.n	8008368 <_printf_float+0x1c8>
 800835c:	6823      	ldr	r3, [r4, #0]
 800835e:	6121      	str	r1, [r4, #16]
 8008360:	07d8      	lsls	r0, r3, #31
 8008362:	d5ea      	bpl.n	800833a <_printf_float+0x19a>
 8008364:	1c4b      	adds	r3, r1, #1
 8008366:	e7e7      	b.n	8008338 <_printf_float+0x198>
 8008368:	2900      	cmp	r1, #0
 800836a:	bfcc      	ite	gt
 800836c:	2201      	movgt	r2, #1
 800836e:	f1c1 0202 	rsble	r2, r1, #2
 8008372:	4413      	add	r3, r2
 8008374:	e7e0      	b.n	8008338 <_printf_float+0x198>
 8008376:	6823      	ldr	r3, [r4, #0]
 8008378:	055a      	lsls	r2, r3, #21
 800837a:	d407      	bmi.n	800838c <_printf_float+0x1ec>
 800837c:	6923      	ldr	r3, [r4, #16]
 800837e:	4642      	mov	r2, r8
 8008380:	4631      	mov	r1, r6
 8008382:	4628      	mov	r0, r5
 8008384:	47b8      	blx	r7
 8008386:	3001      	adds	r0, #1
 8008388:	d12b      	bne.n	80083e2 <_printf_float+0x242>
 800838a:	e764      	b.n	8008256 <_printf_float+0xb6>
 800838c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008390:	f240 80dd 	bls.w	800854e <_printf_float+0x3ae>
 8008394:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008398:	2200      	movs	r2, #0
 800839a:	2300      	movs	r3, #0
 800839c:	f7f8 fb0e 	bl	80009bc <__aeabi_dcmpeq>
 80083a0:	2800      	cmp	r0, #0
 80083a2:	d033      	beq.n	800840c <_printf_float+0x26c>
 80083a4:	2301      	movs	r3, #1
 80083a6:	4631      	mov	r1, r6
 80083a8:	4628      	mov	r0, r5
 80083aa:	4a35      	ldr	r2, [pc, #212]	; (8008480 <_printf_float+0x2e0>)
 80083ac:	47b8      	blx	r7
 80083ae:	3001      	adds	r0, #1
 80083b0:	f43f af51 	beq.w	8008256 <_printf_float+0xb6>
 80083b4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80083b8:	429a      	cmp	r2, r3
 80083ba:	db02      	blt.n	80083c2 <_printf_float+0x222>
 80083bc:	6823      	ldr	r3, [r4, #0]
 80083be:	07d8      	lsls	r0, r3, #31
 80083c0:	d50f      	bpl.n	80083e2 <_printf_float+0x242>
 80083c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083c6:	4631      	mov	r1, r6
 80083c8:	4628      	mov	r0, r5
 80083ca:	47b8      	blx	r7
 80083cc:	3001      	adds	r0, #1
 80083ce:	f43f af42 	beq.w	8008256 <_printf_float+0xb6>
 80083d2:	f04f 0800 	mov.w	r8, #0
 80083d6:	f104 091a 	add.w	r9, r4, #26
 80083da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083dc:	3b01      	subs	r3, #1
 80083de:	4543      	cmp	r3, r8
 80083e0:	dc09      	bgt.n	80083f6 <_printf_float+0x256>
 80083e2:	6823      	ldr	r3, [r4, #0]
 80083e4:	079b      	lsls	r3, r3, #30
 80083e6:	f100 8104 	bmi.w	80085f2 <_printf_float+0x452>
 80083ea:	68e0      	ldr	r0, [r4, #12]
 80083ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083ee:	4298      	cmp	r0, r3
 80083f0:	bfb8      	it	lt
 80083f2:	4618      	movlt	r0, r3
 80083f4:	e731      	b.n	800825a <_printf_float+0xba>
 80083f6:	2301      	movs	r3, #1
 80083f8:	464a      	mov	r2, r9
 80083fa:	4631      	mov	r1, r6
 80083fc:	4628      	mov	r0, r5
 80083fe:	47b8      	blx	r7
 8008400:	3001      	adds	r0, #1
 8008402:	f43f af28 	beq.w	8008256 <_printf_float+0xb6>
 8008406:	f108 0801 	add.w	r8, r8, #1
 800840a:	e7e6      	b.n	80083da <_printf_float+0x23a>
 800840c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800840e:	2b00      	cmp	r3, #0
 8008410:	dc38      	bgt.n	8008484 <_printf_float+0x2e4>
 8008412:	2301      	movs	r3, #1
 8008414:	4631      	mov	r1, r6
 8008416:	4628      	mov	r0, r5
 8008418:	4a19      	ldr	r2, [pc, #100]	; (8008480 <_printf_float+0x2e0>)
 800841a:	47b8      	blx	r7
 800841c:	3001      	adds	r0, #1
 800841e:	f43f af1a 	beq.w	8008256 <_printf_float+0xb6>
 8008422:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008426:	4313      	orrs	r3, r2
 8008428:	d102      	bne.n	8008430 <_printf_float+0x290>
 800842a:	6823      	ldr	r3, [r4, #0]
 800842c:	07d9      	lsls	r1, r3, #31
 800842e:	d5d8      	bpl.n	80083e2 <_printf_float+0x242>
 8008430:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008434:	4631      	mov	r1, r6
 8008436:	4628      	mov	r0, r5
 8008438:	47b8      	blx	r7
 800843a:	3001      	adds	r0, #1
 800843c:	f43f af0b 	beq.w	8008256 <_printf_float+0xb6>
 8008440:	f04f 0900 	mov.w	r9, #0
 8008444:	f104 0a1a 	add.w	sl, r4, #26
 8008448:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800844a:	425b      	negs	r3, r3
 800844c:	454b      	cmp	r3, r9
 800844e:	dc01      	bgt.n	8008454 <_printf_float+0x2b4>
 8008450:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008452:	e794      	b.n	800837e <_printf_float+0x1de>
 8008454:	2301      	movs	r3, #1
 8008456:	4652      	mov	r2, sl
 8008458:	4631      	mov	r1, r6
 800845a:	4628      	mov	r0, r5
 800845c:	47b8      	blx	r7
 800845e:	3001      	adds	r0, #1
 8008460:	f43f aef9 	beq.w	8008256 <_printf_float+0xb6>
 8008464:	f109 0901 	add.w	r9, r9, #1
 8008468:	e7ee      	b.n	8008448 <_printf_float+0x2a8>
 800846a:	bf00      	nop
 800846c:	7fefffff 	.word	0x7fefffff
 8008470:	0800e519 	.word	0x0800e519
 8008474:	0800e51d 	.word	0x0800e51d
 8008478:	0800e521 	.word	0x0800e521
 800847c:	0800e525 	.word	0x0800e525
 8008480:	0800e529 	.word	0x0800e529
 8008484:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008486:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008488:	429a      	cmp	r2, r3
 800848a:	bfa8      	it	ge
 800848c:	461a      	movge	r2, r3
 800848e:	2a00      	cmp	r2, #0
 8008490:	4691      	mov	r9, r2
 8008492:	dc37      	bgt.n	8008504 <_printf_float+0x364>
 8008494:	f04f 0b00 	mov.w	fp, #0
 8008498:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800849c:	f104 021a 	add.w	r2, r4, #26
 80084a0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80084a4:	ebaa 0309 	sub.w	r3, sl, r9
 80084a8:	455b      	cmp	r3, fp
 80084aa:	dc33      	bgt.n	8008514 <_printf_float+0x374>
 80084ac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80084b0:	429a      	cmp	r2, r3
 80084b2:	db3b      	blt.n	800852c <_printf_float+0x38c>
 80084b4:	6823      	ldr	r3, [r4, #0]
 80084b6:	07da      	lsls	r2, r3, #31
 80084b8:	d438      	bmi.n	800852c <_printf_float+0x38c>
 80084ba:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80084be:	eba2 0903 	sub.w	r9, r2, r3
 80084c2:	eba2 020a 	sub.w	r2, r2, sl
 80084c6:	4591      	cmp	r9, r2
 80084c8:	bfa8      	it	ge
 80084ca:	4691      	movge	r9, r2
 80084cc:	f1b9 0f00 	cmp.w	r9, #0
 80084d0:	dc34      	bgt.n	800853c <_printf_float+0x39c>
 80084d2:	f04f 0800 	mov.w	r8, #0
 80084d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084da:	f104 0a1a 	add.w	sl, r4, #26
 80084de:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80084e2:	1a9b      	subs	r3, r3, r2
 80084e4:	eba3 0309 	sub.w	r3, r3, r9
 80084e8:	4543      	cmp	r3, r8
 80084ea:	f77f af7a 	ble.w	80083e2 <_printf_float+0x242>
 80084ee:	2301      	movs	r3, #1
 80084f0:	4652      	mov	r2, sl
 80084f2:	4631      	mov	r1, r6
 80084f4:	4628      	mov	r0, r5
 80084f6:	47b8      	blx	r7
 80084f8:	3001      	adds	r0, #1
 80084fa:	f43f aeac 	beq.w	8008256 <_printf_float+0xb6>
 80084fe:	f108 0801 	add.w	r8, r8, #1
 8008502:	e7ec      	b.n	80084de <_printf_float+0x33e>
 8008504:	4613      	mov	r3, r2
 8008506:	4631      	mov	r1, r6
 8008508:	4642      	mov	r2, r8
 800850a:	4628      	mov	r0, r5
 800850c:	47b8      	blx	r7
 800850e:	3001      	adds	r0, #1
 8008510:	d1c0      	bne.n	8008494 <_printf_float+0x2f4>
 8008512:	e6a0      	b.n	8008256 <_printf_float+0xb6>
 8008514:	2301      	movs	r3, #1
 8008516:	4631      	mov	r1, r6
 8008518:	4628      	mov	r0, r5
 800851a:	920b      	str	r2, [sp, #44]	; 0x2c
 800851c:	47b8      	blx	r7
 800851e:	3001      	adds	r0, #1
 8008520:	f43f ae99 	beq.w	8008256 <_printf_float+0xb6>
 8008524:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008526:	f10b 0b01 	add.w	fp, fp, #1
 800852a:	e7b9      	b.n	80084a0 <_printf_float+0x300>
 800852c:	4631      	mov	r1, r6
 800852e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008532:	4628      	mov	r0, r5
 8008534:	47b8      	blx	r7
 8008536:	3001      	adds	r0, #1
 8008538:	d1bf      	bne.n	80084ba <_printf_float+0x31a>
 800853a:	e68c      	b.n	8008256 <_printf_float+0xb6>
 800853c:	464b      	mov	r3, r9
 800853e:	4631      	mov	r1, r6
 8008540:	4628      	mov	r0, r5
 8008542:	eb08 020a 	add.w	r2, r8, sl
 8008546:	47b8      	blx	r7
 8008548:	3001      	adds	r0, #1
 800854a:	d1c2      	bne.n	80084d2 <_printf_float+0x332>
 800854c:	e683      	b.n	8008256 <_printf_float+0xb6>
 800854e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008550:	2a01      	cmp	r2, #1
 8008552:	dc01      	bgt.n	8008558 <_printf_float+0x3b8>
 8008554:	07db      	lsls	r3, r3, #31
 8008556:	d539      	bpl.n	80085cc <_printf_float+0x42c>
 8008558:	2301      	movs	r3, #1
 800855a:	4642      	mov	r2, r8
 800855c:	4631      	mov	r1, r6
 800855e:	4628      	mov	r0, r5
 8008560:	47b8      	blx	r7
 8008562:	3001      	adds	r0, #1
 8008564:	f43f ae77 	beq.w	8008256 <_printf_float+0xb6>
 8008568:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800856c:	4631      	mov	r1, r6
 800856e:	4628      	mov	r0, r5
 8008570:	47b8      	blx	r7
 8008572:	3001      	adds	r0, #1
 8008574:	f43f ae6f 	beq.w	8008256 <_printf_float+0xb6>
 8008578:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800857c:	2200      	movs	r2, #0
 800857e:	2300      	movs	r3, #0
 8008580:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8008584:	f7f8 fa1a 	bl	80009bc <__aeabi_dcmpeq>
 8008588:	b9d8      	cbnz	r0, 80085c2 <_printf_float+0x422>
 800858a:	f109 33ff 	add.w	r3, r9, #4294967295
 800858e:	f108 0201 	add.w	r2, r8, #1
 8008592:	4631      	mov	r1, r6
 8008594:	4628      	mov	r0, r5
 8008596:	47b8      	blx	r7
 8008598:	3001      	adds	r0, #1
 800859a:	d10e      	bne.n	80085ba <_printf_float+0x41a>
 800859c:	e65b      	b.n	8008256 <_printf_float+0xb6>
 800859e:	2301      	movs	r3, #1
 80085a0:	464a      	mov	r2, r9
 80085a2:	4631      	mov	r1, r6
 80085a4:	4628      	mov	r0, r5
 80085a6:	47b8      	blx	r7
 80085a8:	3001      	adds	r0, #1
 80085aa:	f43f ae54 	beq.w	8008256 <_printf_float+0xb6>
 80085ae:	f108 0801 	add.w	r8, r8, #1
 80085b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085b4:	3b01      	subs	r3, #1
 80085b6:	4543      	cmp	r3, r8
 80085b8:	dcf1      	bgt.n	800859e <_printf_float+0x3fe>
 80085ba:	4653      	mov	r3, sl
 80085bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80085c0:	e6de      	b.n	8008380 <_printf_float+0x1e0>
 80085c2:	f04f 0800 	mov.w	r8, #0
 80085c6:	f104 091a 	add.w	r9, r4, #26
 80085ca:	e7f2      	b.n	80085b2 <_printf_float+0x412>
 80085cc:	2301      	movs	r3, #1
 80085ce:	4642      	mov	r2, r8
 80085d0:	e7df      	b.n	8008592 <_printf_float+0x3f2>
 80085d2:	2301      	movs	r3, #1
 80085d4:	464a      	mov	r2, r9
 80085d6:	4631      	mov	r1, r6
 80085d8:	4628      	mov	r0, r5
 80085da:	47b8      	blx	r7
 80085dc:	3001      	adds	r0, #1
 80085de:	f43f ae3a 	beq.w	8008256 <_printf_float+0xb6>
 80085e2:	f108 0801 	add.w	r8, r8, #1
 80085e6:	68e3      	ldr	r3, [r4, #12]
 80085e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80085ea:	1a5b      	subs	r3, r3, r1
 80085ec:	4543      	cmp	r3, r8
 80085ee:	dcf0      	bgt.n	80085d2 <_printf_float+0x432>
 80085f0:	e6fb      	b.n	80083ea <_printf_float+0x24a>
 80085f2:	f04f 0800 	mov.w	r8, #0
 80085f6:	f104 0919 	add.w	r9, r4, #25
 80085fa:	e7f4      	b.n	80085e6 <_printf_float+0x446>

080085fc <_printf_common>:
 80085fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008600:	4616      	mov	r6, r2
 8008602:	4699      	mov	r9, r3
 8008604:	688a      	ldr	r2, [r1, #8]
 8008606:	690b      	ldr	r3, [r1, #16]
 8008608:	4607      	mov	r7, r0
 800860a:	4293      	cmp	r3, r2
 800860c:	bfb8      	it	lt
 800860e:	4613      	movlt	r3, r2
 8008610:	6033      	str	r3, [r6, #0]
 8008612:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008616:	460c      	mov	r4, r1
 8008618:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800861c:	b10a      	cbz	r2, 8008622 <_printf_common+0x26>
 800861e:	3301      	adds	r3, #1
 8008620:	6033      	str	r3, [r6, #0]
 8008622:	6823      	ldr	r3, [r4, #0]
 8008624:	0699      	lsls	r1, r3, #26
 8008626:	bf42      	ittt	mi
 8008628:	6833      	ldrmi	r3, [r6, #0]
 800862a:	3302      	addmi	r3, #2
 800862c:	6033      	strmi	r3, [r6, #0]
 800862e:	6825      	ldr	r5, [r4, #0]
 8008630:	f015 0506 	ands.w	r5, r5, #6
 8008634:	d106      	bne.n	8008644 <_printf_common+0x48>
 8008636:	f104 0a19 	add.w	sl, r4, #25
 800863a:	68e3      	ldr	r3, [r4, #12]
 800863c:	6832      	ldr	r2, [r6, #0]
 800863e:	1a9b      	subs	r3, r3, r2
 8008640:	42ab      	cmp	r3, r5
 8008642:	dc2b      	bgt.n	800869c <_printf_common+0xa0>
 8008644:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008648:	1e13      	subs	r3, r2, #0
 800864a:	6822      	ldr	r2, [r4, #0]
 800864c:	bf18      	it	ne
 800864e:	2301      	movne	r3, #1
 8008650:	0692      	lsls	r2, r2, #26
 8008652:	d430      	bmi.n	80086b6 <_printf_common+0xba>
 8008654:	4649      	mov	r1, r9
 8008656:	4638      	mov	r0, r7
 8008658:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800865c:	47c0      	blx	r8
 800865e:	3001      	adds	r0, #1
 8008660:	d023      	beq.n	80086aa <_printf_common+0xae>
 8008662:	6823      	ldr	r3, [r4, #0]
 8008664:	6922      	ldr	r2, [r4, #16]
 8008666:	f003 0306 	and.w	r3, r3, #6
 800866a:	2b04      	cmp	r3, #4
 800866c:	bf14      	ite	ne
 800866e:	2500      	movne	r5, #0
 8008670:	6833      	ldreq	r3, [r6, #0]
 8008672:	f04f 0600 	mov.w	r6, #0
 8008676:	bf08      	it	eq
 8008678:	68e5      	ldreq	r5, [r4, #12]
 800867a:	f104 041a 	add.w	r4, r4, #26
 800867e:	bf08      	it	eq
 8008680:	1aed      	subeq	r5, r5, r3
 8008682:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008686:	bf08      	it	eq
 8008688:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800868c:	4293      	cmp	r3, r2
 800868e:	bfc4      	itt	gt
 8008690:	1a9b      	subgt	r3, r3, r2
 8008692:	18ed      	addgt	r5, r5, r3
 8008694:	42b5      	cmp	r5, r6
 8008696:	d11a      	bne.n	80086ce <_printf_common+0xd2>
 8008698:	2000      	movs	r0, #0
 800869a:	e008      	b.n	80086ae <_printf_common+0xb2>
 800869c:	2301      	movs	r3, #1
 800869e:	4652      	mov	r2, sl
 80086a0:	4649      	mov	r1, r9
 80086a2:	4638      	mov	r0, r7
 80086a4:	47c0      	blx	r8
 80086a6:	3001      	adds	r0, #1
 80086a8:	d103      	bne.n	80086b2 <_printf_common+0xb6>
 80086aa:	f04f 30ff 	mov.w	r0, #4294967295
 80086ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086b2:	3501      	adds	r5, #1
 80086b4:	e7c1      	b.n	800863a <_printf_common+0x3e>
 80086b6:	2030      	movs	r0, #48	; 0x30
 80086b8:	18e1      	adds	r1, r4, r3
 80086ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086be:	1c5a      	adds	r2, r3, #1
 80086c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086c4:	4422      	add	r2, r4
 80086c6:	3302      	adds	r3, #2
 80086c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086cc:	e7c2      	b.n	8008654 <_printf_common+0x58>
 80086ce:	2301      	movs	r3, #1
 80086d0:	4622      	mov	r2, r4
 80086d2:	4649      	mov	r1, r9
 80086d4:	4638      	mov	r0, r7
 80086d6:	47c0      	blx	r8
 80086d8:	3001      	adds	r0, #1
 80086da:	d0e6      	beq.n	80086aa <_printf_common+0xae>
 80086dc:	3601      	adds	r6, #1
 80086de:	e7d9      	b.n	8008694 <_printf_common+0x98>

080086e0 <_printf_i>:
 80086e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086e4:	7e0f      	ldrb	r7, [r1, #24]
 80086e6:	4691      	mov	r9, r2
 80086e8:	2f78      	cmp	r7, #120	; 0x78
 80086ea:	4680      	mov	r8, r0
 80086ec:	460c      	mov	r4, r1
 80086ee:	469a      	mov	sl, r3
 80086f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80086f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80086f6:	d807      	bhi.n	8008708 <_printf_i+0x28>
 80086f8:	2f62      	cmp	r7, #98	; 0x62
 80086fa:	d80a      	bhi.n	8008712 <_printf_i+0x32>
 80086fc:	2f00      	cmp	r7, #0
 80086fe:	f000 80d5 	beq.w	80088ac <_printf_i+0x1cc>
 8008702:	2f58      	cmp	r7, #88	; 0x58
 8008704:	f000 80c1 	beq.w	800888a <_printf_i+0x1aa>
 8008708:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800870c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008710:	e03a      	b.n	8008788 <_printf_i+0xa8>
 8008712:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008716:	2b15      	cmp	r3, #21
 8008718:	d8f6      	bhi.n	8008708 <_printf_i+0x28>
 800871a:	a101      	add	r1, pc, #4	; (adr r1, 8008720 <_printf_i+0x40>)
 800871c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008720:	08008779 	.word	0x08008779
 8008724:	0800878d 	.word	0x0800878d
 8008728:	08008709 	.word	0x08008709
 800872c:	08008709 	.word	0x08008709
 8008730:	08008709 	.word	0x08008709
 8008734:	08008709 	.word	0x08008709
 8008738:	0800878d 	.word	0x0800878d
 800873c:	08008709 	.word	0x08008709
 8008740:	08008709 	.word	0x08008709
 8008744:	08008709 	.word	0x08008709
 8008748:	08008709 	.word	0x08008709
 800874c:	08008893 	.word	0x08008893
 8008750:	080087b9 	.word	0x080087b9
 8008754:	0800884d 	.word	0x0800884d
 8008758:	08008709 	.word	0x08008709
 800875c:	08008709 	.word	0x08008709
 8008760:	080088b5 	.word	0x080088b5
 8008764:	08008709 	.word	0x08008709
 8008768:	080087b9 	.word	0x080087b9
 800876c:	08008709 	.word	0x08008709
 8008770:	08008709 	.word	0x08008709
 8008774:	08008855 	.word	0x08008855
 8008778:	682b      	ldr	r3, [r5, #0]
 800877a:	1d1a      	adds	r2, r3, #4
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	602a      	str	r2, [r5, #0]
 8008780:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008784:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008788:	2301      	movs	r3, #1
 800878a:	e0a0      	b.n	80088ce <_printf_i+0x1ee>
 800878c:	6820      	ldr	r0, [r4, #0]
 800878e:	682b      	ldr	r3, [r5, #0]
 8008790:	0607      	lsls	r7, r0, #24
 8008792:	f103 0104 	add.w	r1, r3, #4
 8008796:	6029      	str	r1, [r5, #0]
 8008798:	d501      	bpl.n	800879e <_printf_i+0xbe>
 800879a:	681e      	ldr	r6, [r3, #0]
 800879c:	e003      	b.n	80087a6 <_printf_i+0xc6>
 800879e:	0646      	lsls	r6, r0, #25
 80087a0:	d5fb      	bpl.n	800879a <_printf_i+0xba>
 80087a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80087a6:	2e00      	cmp	r6, #0
 80087a8:	da03      	bge.n	80087b2 <_printf_i+0xd2>
 80087aa:	232d      	movs	r3, #45	; 0x2d
 80087ac:	4276      	negs	r6, r6
 80087ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087b2:	230a      	movs	r3, #10
 80087b4:	4859      	ldr	r0, [pc, #356]	; (800891c <_printf_i+0x23c>)
 80087b6:	e012      	b.n	80087de <_printf_i+0xfe>
 80087b8:	682b      	ldr	r3, [r5, #0]
 80087ba:	6820      	ldr	r0, [r4, #0]
 80087bc:	1d19      	adds	r1, r3, #4
 80087be:	6029      	str	r1, [r5, #0]
 80087c0:	0605      	lsls	r5, r0, #24
 80087c2:	d501      	bpl.n	80087c8 <_printf_i+0xe8>
 80087c4:	681e      	ldr	r6, [r3, #0]
 80087c6:	e002      	b.n	80087ce <_printf_i+0xee>
 80087c8:	0641      	lsls	r1, r0, #25
 80087ca:	d5fb      	bpl.n	80087c4 <_printf_i+0xe4>
 80087cc:	881e      	ldrh	r6, [r3, #0]
 80087ce:	2f6f      	cmp	r7, #111	; 0x6f
 80087d0:	bf0c      	ite	eq
 80087d2:	2308      	moveq	r3, #8
 80087d4:	230a      	movne	r3, #10
 80087d6:	4851      	ldr	r0, [pc, #324]	; (800891c <_printf_i+0x23c>)
 80087d8:	2100      	movs	r1, #0
 80087da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087de:	6865      	ldr	r5, [r4, #4]
 80087e0:	2d00      	cmp	r5, #0
 80087e2:	bfa8      	it	ge
 80087e4:	6821      	ldrge	r1, [r4, #0]
 80087e6:	60a5      	str	r5, [r4, #8]
 80087e8:	bfa4      	itt	ge
 80087ea:	f021 0104 	bicge.w	r1, r1, #4
 80087ee:	6021      	strge	r1, [r4, #0]
 80087f0:	b90e      	cbnz	r6, 80087f6 <_printf_i+0x116>
 80087f2:	2d00      	cmp	r5, #0
 80087f4:	d04b      	beq.n	800888e <_printf_i+0x1ae>
 80087f6:	4615      	mov	r5, r2
 80087f8:	fbb6 f1f3 	udiv	r1, r6, r3
 80087fc:	fb03 6711 	mls	r7, r3, r1, r6
 8008800:	5dc7      	ldrb	r7, [r0, r7]
 8008802:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008806:	4637      	mov	r7, r6
 8008808:	42bb      	cmp	r3, r7
 800880a:	460e      	mov	r6, r1
 800880c:	d9f4      	bls.n	80087f8 <_printf_i+0x118>
 800880e:	2b08      	cmp	r3, #8
 8008810:	d10b      	bne.n	800882a <_printf_i+0x14a>
 8008812:	6823      	ldr	r3, [r4, #0]
 8008814:	07de      	lsls	r6, r3, #31
 8008816:	d508      	bpl.n	800882a <_printf_i+0x14a>
 8008818:	6923      	ldr	r3, [r4, #16]
 800881a:	6861      	ldr	r1, [r4, #4]
 800881c:	4299      	cmp	r1, r3
 800881e:	bfde      	ittt	le
 8008820:	2330      	movle	r3, #48	; 0x30
 8008822:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008826:	f105 35ff 	addle.w	r5, r5, #4294967295
 800882a:	1b52      	subs	r2, r2, r5
 800882c:	6122      	str	r2, [r4, #16]
 800882e:	464b      	mov	r3, r9
 8008830:	4621      	mov	r1, r4
 8008832:	4640      	mov	r0, r8
 8008834:	f8cd a000 	str.w	sl, [sp]
 8008838:	aa03      	add	r2, sp, #12
 800883a:	f7ff fedf 	bl	80085fc <_printf_common>
 800883e:	3001      	adds	r0, #1
 8008840:	d14a      	bne.n	80088d8 <_printf_i+0x1f8>
 8008842:	f04f 30ff 	mov.w	r0, #4294967295
 8008846:	b004      	add	sp, #16
 8008848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800884c:	6823      	ldr	r3, [r4, #0]
 800884e:	f043 0320 	orr.w	r3, r3, #32
 8008852:	6023      	str	r3, [r4, #0]
 8008854:	2778      	movs	r7, #120	; 0x78
 8008856:	4832      	ldr	r0, [pc, #200]	; (8008920 <_printf_i+0x240>)
 8008858:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800885c:	6823      	ldr	r3, [r4, #0]
 800885e:	6829      	ldr	r1, [r5, #0]
 8008860:	061f      	lsls	r7, r3, #24
 8008862:	f851 6b04 	ldr.w	r6, [r1], #4
 8008866:	d402      	bmi.n	800886e <_printf_i+0x18e>
 8008868:	065f      	lsls	r7, r3, #25
 800886a:	bf48      	it	mi
 800886c:	b2b6      	uxthmi	r6, r6
 800886e:	07df      	lsls	r7, r3, #31
 8008870:	bf48      	it	mi
 8008872:	f043 0320 	orrmi.w	r3, r3, #32
 8008876:	6029      	str	r1, [r5, #0]
 8008878:	bf48      	it	mi
 800887a:	6023      	strmi	r3, [r4, #0]
 800887c:	b91e      	cbnz	r6, 8008886 <_printf_i+0x1a6>
 800887e:	6823      	ldr	r3, [r4, #0]
 8008880:	f023 0320 	bic.w	r3, r3, #32
 8008884:	6023      	str	r3, [r4, #0]
 8008886:	2310      	movs	r3, #16
 8008888:	e7a6      	b.n	80087d8 <_printf_i+0xf8>
 800888a:	4824      	ldr	r0, [pc, #144]	; (800891c <_printf_i+0x23c>)
 800888c:	e7e4      	b.n	8008858 <_printf_i+0x178>
 800888e:	4615      	mov	r5, r2
 8008890:	e7bd      	b.n	800880e <_printf_i+0x12e>
 8008892:	682b      	ldr	r3, [r5, #0]
 8008894:	6826      	ldr	r6, [r4, #0]
 8008896:	1d18      	adds	r0, r3, #4
 8008898:	6961      	ldr	r1, [r4, #20]
 800889a:	6028      	str	r0, [r5, #0]
 800889c:	0635      	lsls	r5, r6, #24
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	d501      	bpl.n	80088a6 <_printf_i+0x1c6>
 80088a2:	6019      	str	r1, [r3, #0]
 80088a4:	e002      	b.n	80088ac <_printf_i+0x1cc>
 80088a6:	0670      	lsls	r0, r6, #25
 80088a8:	d5fb      	bpl.n	80088a2 <_printf_i+0x1c2>
 80088aa:	8019      	strh	r1, [r3, #0]
 80088ac:	2300      	movs	r3, #0
 80088ae:	4615      	mov	r5, r2
 80088b0:	6123      	str	r3, [r4, #16]
 80088b2:	e7bc      	b.n	800882e <_printf_i+0x14e>
 80088b4:	682b      	ldr	r3, [r5, #0]
 80088b6:	2100      	movs	r1, #0
 80088b8:	1d1a      	adds	r2, r3, #4
 80088ba:	602a      	str	r2, [r5, #0]
 80088bc:	681d      	ldr	r5, [r3, #0]
 80088be:	6862      	ldr	r2, [r4, #4]
 80088c0:	4628      	mov	r0, r5
 80088c2:	f000 f9fe 	bl	8008cc2 <memchr>
 80088c6:	b108      	cbz	r0, 80088cc <_printf_i+0x1ec>
 80088c8:	1b40      	subs	r0, r0, r5
 80088ca:	6060      	str	r0, [r4, #4]
 80088cc:	6863      	ldr	r3, [r4, #4]
 80088ce:	6123      	str	r3, [r4, #16]
 80088d0:	2300      	movs	r3, #0
 80088d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088d6:	e7aa      	b.n	800882e <_printf_i+0x14e>
 80088d8:	462a      	mov	r2, r5
 80088da:	4649      	mov	r1, r9
 80088dc:	4640      	mov	r0, r8
 80088de:	6923      	ldr	r3, [r4, #16]
 80088e0:	47d0      	blx	sl
 80088e2:	3001      	adds	r0, #1
 80088e4:	d0ad      	beq.n	8008842 <_printf_i+0x162>
 80088e6:	6823      	ldr	r3, [r4, #0]
 80088e8:	079b      	lsls	r3, r3, #30
 80088ea:	d413      	bmi.n	8008914 <_printf_i+0x234>
 80088ec:	68e0      	ldr	r0, [r4, #12]
 80088ee:	9b03      	ldr	r3, [sp, #12]
 80088f0:	4298      	cmp	r0, r3
 80088f2:	bfb8      	it	lt
 80088f4:	4618      	movlt	r0, r3
 80088f6:	e7a6      	b.n	8008846 <_printf_i+0x166>
 80088f8:	2301      	movs	r3, #1
 80088fa:	4632      	mov	r2, r6
 80088fc:	4649      	mov	r1, r9
 80088fe:	4640      	mov	r0, r8
 8008900:	47d0      	blx	sl
 8008902:	3001      	adds	r0, #1
 8008904:	d09d      	beq.n	8008842 <_printf_i+0x162>
 8008906:	3501      	adds	r5, #1
 8008908:	68e3      	ldr	r3, [r4, #12]
 800890a:	9903      	ldr	r1, [sp, #12]
 800890c:	1a5b      	subs	r3, r3, r1
 800890e:	42ab      	cmp	r3, r5
 8008910:	dcf2      	bgt.n	80088f8 <_printf_i+0x218>
 8008912:	e7eb      	b.n	80088ec <_printf_i+0x20c>
 8008914:	2500      	movs	r5, #0
 8008916:	f104 0619 	add.w	r6, r4, #25
 800891a:	e7f5      	b.n	8008908 <_printf_i+0x228>
 800891c:	0800e52b 	.word	0x0800e52b
 8008920:	0800e53c 	.word	0x0800e53c

08008924 <std>:
 8008924:	2300      	movs	r3, #0
 8008926:	b510      	push	{r4, lr}
 8008928:	4604      	mov	r4, r0
 800892a:	e9c0 3300 	strd	r3, r3, [r0]
 800892e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008932:	6083      	str	r3, [r0, #8]
 8008934:	8181      	strh	r1, [r0, #12]
 8008936:	6643      	str	r3, [r0, #100]	; 0x64
 8008938:	81c2      	strh	r2, [r0, #14]
 800893a:	6183      	str	r3, [r0, #24]
 800893c:	4619      	mov	r1, r3
 800893e:	2208      	movs	r2, #8
 8008940:	305c      	adds	r0, #92	; 0x5c
 8008942:	f000 f914 	bl	8008b6e <memset>
 8008946:	4b0d      	ldr	r3, [pc, #52]	; (800897c <std+0x58>)
 8008948:	6224      	str	r4, [r4, #32]
 800894a:	6263      	str	r3, [r4, #36]	; 0x24
 800894c:	4b0c      	ldr	r3, [pc, #48]	; (8008980 <std+0x5c>)
 800894e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008950:	4b0c      	ldr	r3, [pc, #48]	; (8008984 <std+0x60>)
 8008952:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008954:	4b0c      	ldr	r3, [pc, #48]	; (8008988 <std+0x64>)
 8008956:	6323      	str	r3, [r4, #48]	; 0x30
 8008958:	4b0c      	ldr	r3, [pc, #48]	; (800898c <std+0x68>)
 800895a:	429c      	cmp	r4, r3
 800895c:	d006      	beq.n	800896c <std+0x48>
 800895e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008962:	4294      	cmp	r4, r2
 8008964:	d002      	beq.n	800896c <std+0x48>
 8008966:	33d0      	adds	r3, #208	; 0xd0
 8008968:	429c      	cmp	r4, r3
 800896a:	d105      	bne.n	8008978 <std+0x54>
 800896c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008974:	f000 b9a2 	b.w	8008cbc <__retarget_lock_init_recursive>
 8008978:	bd10      	pop	{r4, pc}
 800897a:	bf00      	nop
 800897c:	08008ae9 	.word	0x08008ae9
 8008980:	08008b0b 	.word	0x08008b0b
 8008984:	08008b43 	.word	0x08008b43
 8008988:	08008b67 	.word	0x08008b67
 800898c:	20000a9c 	.word	0x20000a9c

08008990 <stdio_exit_handler>:
 8008990:	4a02      	ldr	r2, [pc, #8]	; (800899c <stdio_exit_handler+0xc>)
 8008992:	4903      	ldr	r1, [pc, #12]	; (80089a0 <stdio_exit_handler+0x10>)
 8008994:	4803      	ldr	r0, [pc, #12]	; (80089a4 <stdio_exit_handler+0x14>)
 8008996:	f000 b869 	b.w	8008a6c <_fwalk_sglue>
 800899a:	bf00      	nop
 800899c:	20000020 	.word	0x20000020
 80089a0:	0800afc1 	.word	0x0800afc1
 80089a4:	20000198 	.word	0x20000198

080089a8 <cleanup_stdio>:
 80089a8:	6841      	ldr	r1, [r0, #4]
 80089aa:	4b0c      	ldr	r3, [pc, #48]	; (80089dc <cleanup_stdio+0x34>)
 80089ac:	b510      	push	{r4, lr}
 80089ae:	4299      	cmp	r1, r3
 80089b0:	4604      	mov	r4, r0
 80089b2:	d001      	beq.n	80089b8 <cleanup_stdio+0x10>
 80089b4:	f002 fb04 	bl	800afc0 <_fflush_r>
 80089b8:	68a1      	ldr	r1, [r4, #8]
 80089ba:	4b09      	ldr	r3, [pc, #36]	; (80089e0 <cleanup_stdio+0x38>)
 80089bc:	4299      	cmp	r1, r3
 80089be:	d002      	beq.n	80089c6 <cleanup_stdio+0x1e>
 80089c0:	4620      	mov	r0, r4
 80089c2:	f002 fafd 	bl	800afc0 <_fflush_r>
 80089c6:	68e1      	ldr	r1, [r4, #12]
 80089c8:	4b06      	ldr	r3, [pc, #24]	; (80089e4 <cleanup_stdio+0x3c>)
 80089ca:	4299      	cmp	r1, r3
 80089cc:	d004      	beq.n	80089d8 <cleanup_stdio+0x30>
 80089ce:	4620      	mov	r0, r4
 80089d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089d4:	f002 baf4 	b.w	800afc0 <_fflush_r>
 80089d8:	bd10      	pop	{r4, pc}
 80089da:	bf00      	nop
 80089dc:	20000a9c 	.word	0x20000a9c
 80089e0:	20000b04 	.word	0x20000b04
 80089e4:	20000b6c 	.word	0x20000b6c

080089e8 <global_stdio_init.part.0>:
 80089e8:	b510      	push	{r4, lr}
 80089ea:	4b0b      	ldr	r3, [pc, #44]	; (8008a18 <global_stdio_init.part.0+0x30>)
 80089ec:	4c0b      	ldr	r4, [pc, #44]	; (8008a1c <global_stdio_init.part.0+0x34>)
 80089ee:	4a0c      	ldr	r2, [pc, #48]	; (8008a20 <global_stdio_init.part.0+0x38>)
 80089f0:	4620      	mov	r0, r4
 80089f2:	601a      	str	r2, [r3, #0]
 80089f4:	2104      	movs	r1, #4
 80089f6:	2200      	movs	r2, #0
 80089f8:	f7ff ff94 	bl	8008924 <std>
 80089fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008a00:	2201      	movs	r2, #1
 8008a02:	2109      	movs	r1, #9
 8008a04:	f7ff ff8e 	bl	8008924 <std>
 8008a08:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008a0c:	2202      	movs	r2, #2
 8008a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a12:	2112      	movs	r1, #18
 8008a14:	f7ff bf86 	b.w	8008924 <std>
 8008a18:	20000bd4 	.word	0x20000bd4
 8008a1c:	20000a9c 	.word	0x20000a9c
 8008a20:	08008991 	.word	0x08008991

08008a24 <__sfp_lock_acquire>:
 8008a24:	4801      	ldr	r0, [pc, #4]	; (8008a2c <__sfp_lock_acquire+0x8>)
 8008a26:	f000 b94a 	b.w	8008cbe <__retarget_lock_acquire_recursive>
 8008a2a:	bf00      	nop
 8008a2c:	20000bdd 	.word	0x20000bdd

08008a30 <__sfp_lock_release>:
 8008a30:	4801      	ldr	r0, [pc, #4]	; (8008a38 <__sfp_lock_release+0x8>)
 8008a32:	f000 b945 	b.w	8008cc0 <__retarget_lock_release_recursive>
 8008a36:	bf00      	nop
 8008a38:	20000bdd 	.word	0x20000bdd

08008a3c <__sinit>:
 8008a3c:	b510      	push	{r4, lr}
 8008a3e:	4604      	mov	r4, r0
 8008a40:	f7ff fff0 	bl	8008a24 <__sfp_lock_acquire>
 8008a44:	6a23      	ldr	r3, [r4, #32]
 8008a46:	b11b      	cbz	r3, 8008a50 <__sinit+0x14>
 8008a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a4c:	f7ff bff0 	b.w	8008a30 <__sfp_lock_release>
 8008a50:	4b04      	ldr	r3, [pc, #16]	; (8008a64 <__sinit+0x28>)
 8008a52:	6223      	str	r3, [r4, #32]
 8008a54:	4b04      	ldr	r3, [pc, #16]	; (8008a68 <__sinit+0x2c>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1f5      	bne.n	8008a48 <__sinit+0xc>
 8008a5c:	f7ff ffc4 	bl	80089e8 <global_stdio_init.part.0>
 8008a60:	e7f2      	b.n	8008a48 <__sinit+0xc>
 8008a62:	bf00      	nop
 8008a64:	080089a9 	.word	0x080089a9
 8008a68:	20000bd4 	.word	0x20000bd4

08008a6c <_fwalk_sglue>:
 8008a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a70:	4607      	mov	r7, r0
 8008a72:	4688      	mov	r8, r1
 8008a74:	4614      	mov	r4, r2
 8008a76:	2600      	movs	r6, #0
 8008a78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a7c:	f1b9 0901 	subs.w	r9, r9, #1
 8008a80:	d505      	bpl.n	8008a8e <_fwalk_sglue+0x22>
 8008a82:	6824      	ldr	r4, [r4, #0]
 8008a84:	2c00      	cmp	r4, #0
 8008a86:	d1f7      	bne.n	8008a78 <_fwalk_sglue+0xc>
 8008a88:	4630      	mov	r0, r6
 8008a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a8e:	89ab      	ldrh	r3, [r5, #12]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d907      	bls.n	8008aa4 <_fwalk_sglue+0x38>
 8008a94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	d003      	beq.n	8008aa4 <_fwalk_sglue+0x38>
 8008a9c:	4629      	mov	r1, r5
 8008a9e:	4638      	mov	r0, r7
 8008aa0:	47c0      	blx	r8
 8008aa2:	4306      	orrs	r6, r0
 8008aa4:	3568      	adds	r5, #104	; 0x68
 8008aa6:	e7e9      	b.n	8008a7c <_fwalk_sglue+0x10>

08008aa8 <siprintf>:
 8008aa8:	b40e      	push	{r1, r2, r3}
 8008aaa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008aae:	b500      	push	{lr}
 8008ab0:	b09c      	sub	sp, #112	; 0x70
 8008ab2:	ab1d      	add	r3, sp, #116	; 0x74
 8008ab4:	9002      	str	r0, [sp, #8]
 8008ab6:	9006      	str	r0, [sp, #24]
 8008ab8:	9107      	str	r1, [sp, #28]
 8008aba:	9104      	str	r1, [sp, #16]
 8008abc:	4808      	ldr	r0, [pc, #32]	; (8008ae0 <siprintf+0x38>)
 8008abe:	4909      	ldr	r1, [pc, #36]	; (8008ae4 <siprintf+0x3c>)
 8008ac0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ac4:	9105      	str	r1, [sp, #20]
 8008ac6:	6800      	ldr	r0, [r0, #0]
 8008ac8:	a902      	add	r1, sp, #8
 8008aca:	9301      	str	r3, [sp, #4]
 8008acc:	f002 f8f8 	bl	800acc0 <_svfiprintf_r>
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	9b02      	ldr	r3, [sp, #8]
 8008ad4:	701a      	strb	r2, [r3, #0]
 8008ad6:	b01c      	add	sp, #112	; 0x70
 8008ad8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008adc:	b003      	add	sp, #12
 8008ade:	4770      	bx	lr
 8008ae0:	200001e4 	.word	0x200001e4
 8008ae4:	ffff0208 	.word	0xffff0208

08008ae8 <__sread>:
 8008ae8:	b510      	push	{r4, lr}
 8008aea:	460c      	mov	r4, r1
 8008aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008af0:	f000 f896 	bl	8008c20 <_read_r>
 8008af4:	2800      	cmp	r0, #0
 8008af6:	bfab      	itete	ge
 8008af8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008afa:	89a3      	ldrhlt	r3, [r4, #12]
 8008afc:	181b      	addge	r3, r3, r0
 8008afe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b02:	bfac      	ite	ge
 8008b04:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b06:	81a3      	strhlt	r3, [r4, #12]
 8008b08:	bd10      	pop	{r4, pc}

08008b0a <__swrite>:
 8008b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b0e:	461f      	mov	r7, r3
 8008b10:	898b      	ldrh	r3, [r1, #12]
 8008b12:	4605      	mov	r5, r0
 8008b14:	05db      	lsls	r3, r3, #23
 8008b16:	460c      	mov	r4, r1
 8008b18:	4616      	mov	r6, r2
 8008b1a:	d505      	bpl.n	8008b28 <__swrite+0x1e>
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b24:	f000 f86a 	bl	8008bfc <_lseek_r>
 8008b28:	89a3      	ldrh	r3, [r4, #12]
 8008b2a:	4632      	mov	r2, r6
 8008b2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b30:	81a3      	strh	r3, [r4, #12]
 8008b32:	4628      	mov	r0, r5
 8008b34:	463b      	mov	r3, r7
 8008b36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b3e:	f000 b881 	b.w	8008c44 <_write_r>

08008b42 <__sseek>:
 8008b42:	b510      	push	{r4, lr}
 8008b44:	460c      	mov	r4, r1
 8008b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b4a:	f000 f857 	bl	8008bfc <_lseek_r>
 8008b4e:	1c43      	adds	r3, r0, #1
 8008b50:	89a3      	ldrh	r3, [r4, #12]
 8008b52:	bf15      	itete	ne
 8008b54:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b5e:	81a3      	strheq	r3, [r4, #12]
 8008b60:	bf18      	it	ne
 8008b62:	81a3      	strhne	r3, [r4, #12]
 8008b64:	bd10      	pop	{r4, pc}

08008b66 <__sclose>:
 8008b66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b6a:	f000 b837 	b.w	8008bdc <_close_r>

08008b6e <memset>:
 8008b6e:	4603      	mov	r3, r0
 8008b70:	4402      	add	r2, r0
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d100      	bne.n	8008b78 <memset+0xa>
 8008b76:	4770      	bx	lr
 8008b78:	f803 1b01 	strb.w	r1, [r3], #1
 8008b7c:	e7f9      	b.n	8008b72 <memset+0x4>

08008b7e <strncmp>:
 8008b7e:	b510      	push	{r4, lr}
 8008b80:	b16a      	cbz	r2, 8008b9e <strncmp+0x20>
 8008b82:	3901      	subs	r1, #1
 8008b84:	1884      	adds	r4, r0, r2
 8008b86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b8a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d103      	bne.n	8008b9a <strncmp+0x1c>
 8008b92:	42a0      	cmp	r0, r4
 8008b94:	d001      	beq.n	8008b9a <strncmp+0x1c>
 8008b96:	2a00      	cmp	r2, #0
 8008b98:	d1f5      	bne.n	8008b86 <strncmp+0x8>
 8008b9a:	1ad0      	subs	r0, r2, r3
 8008b9c:	bd10      	pop	{r4, pc}
 8008b9e:	4610      	mov	r0, r2
 8008ba0:	e7fc      	b.n	8008b9c <strncmp+0x1e>

08008ba2 <strpbrk>:
 8008ba2:	b570      	push	{r4, r5, r6, lr}
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	7800      	ldrb	r0, [r0, #0]
 8008ba8:	b190      	cbz	r0, 8008bd0 <strpbrk+0x2e>
 8008baa:	460c      	mov	r4, r1
 8008bac:	4618      	mov	r0, r3
 8008bae:	f813 5b01 	ldrb.w	r5, [r3], #1
 8008bb2:	b14d      	cbz	r5, 8008bc8 <strpbrk+0x26>
 8008bb4:	460a      	mov	r2, r1
 8008bb6:	e001      	b.n	8008bbc <strpbrk+0x1a>
 8008bb8:	42ae      	cmp	r6, r5
 8008bba:	d009      	beq.n	8008bd0 <strpbrk+0x2e>
 8008bbc:	4614      	mov	r4, r2
 8008bbe:	f812 6b01 	ldrb.w	r6, [r2], #1
 8008bc2:	2e00      	cmp	r6, #0
 8008bc4:	d1f8      	bne.n	8008bb8 <strpbrk+0x16>
 8008bc6:	e7f1      	b.n	8008bac <strpbrk+0xa>
 8008bc8:	7823      	ldrb	r3, [r4, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	bf08      	it	eq
 8008bce:	2000      	moveq	r0, #0
 8008bd0:	bd70      	pop	{r4, r5, r6, pc}
	...

08008bd4 <_localeconv_r>:
 8008bd4:	4800      	ldr	r0, [pc, #0]	; (8008bd8 <_localeconv_r+0x4>)
 8008bd6:	4770      	bx	lr
 8008bd8:	2000011c 	.word	0x2000011c

08008bdc <_close_r>:
 8008bdc:	b538      	push	{r3, r4, r5, lr}
 8008bde:	2300      	movs	r3, #0
 8008be0:	4d05      	ldr	r5, [pc, #20]	; (8008bf8 <_close_r+0x1c>)
 8008be2:	4604      	mov	r4, r0
 8008be4:	4608      	mov	r0, r1
 8008be6:	602b      	str	r3, [r5, #0]
 8008be8:	f7fa fe32 	bl	8003850 <_close>
 8008bec:	1c43      	adds	r3, r0, #1
 8008bee:	d102      	bne.n	8008bf6 <_close_r+0x1a>
 8008bf0:	682b      	ldr	r3, [r5, #0]
 8008bf2:	b103      	cbz	r3, 8008bf6 <_close_r+0x1a>
 8008bf4:	6023      	str	r3, [r4, #0]
 8008bf6:	bd38      	pop	{r3, r4, r5, pc}
 8008bf8:	20000bd8 	.word	0x20000bd8

08008bfc <_lseek_r>:
 8008bfc:	b538      	push	{r3, r4, r5, lr}
 8008bfe:	4604      	mov	r4, r0
 8008c00:	4608      	mov	r0, r1
 8008c02:	4611      	mov	r1, r2
 8008c04:	2200      	movs	r2, #0
 8008c06:	4d05      	ldr	r5, [pc, #20]	; (8008c1c <_lseek_r+0x20>)
 8008c08:	602a      	str	r2, [r5, #0]
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	f7fa fe44 	bl	8003898 <_lseek>
 8008c10:	1c43      	adds	r3, r0, #1
 8008c12:	d102      	bne.n	8008c1a <_lseek_r+0x1e>
 8008c14:	682b      	ldr	r3, [r5, #0]
 8008c16:	b103      	cbz	r3, 8008c1a <_lseek_r+0x1e>
 8008c18:	6023      	str	r3, [r4, #0]
 8008c1a:	bd38      	pop	{r3, r4, r5, pc}
 8008c1c:	20000bd8 	.word	0x20000bd8

08008c20 <_read_r>:
 8008c20:	b538      	push	{r3, r4, r5, lr}
 8008c22:	4604      	mov	r4, r0
 8008c24:	4608      	mov	r0, r1
 8008c26:	4611      	mov	r1, r2
 8008c28:	2200      	movs	r2, #0
 8008c2a:	4d05      	ldr	r5, [pc, #20]	; (8008c40 <_read_r+0x20>)
 8008c2c:	602a      	str	r2, [r5, #0]
 8008c2e:	461a      	mov	r2, r3
 8008c30:	f7fa fdd5 	bl	80037de <_read>
 8008c34:	1c43      	adds	r3, r0, #1
 8008c36:	d102      	bne.n	8008c3e <_read_r+0x1e>
 8008c38:	682b      	ldr	r3, [r5, #0]
 8008c3a:	b103      	cbz	r3, 8008c3e <_read_r+0x1e>
 8008c3c:	6023      	str	r3, [r4, #0]
 8008c3e:	bd38      	pop	{r3, r4, r5, pc}
 8008c40:	20000bd8 	.word	0x20000bd8

08008c44 <_write_r>:
 8008c44:	b538      	push	{r3, r4, r5, lr}
 8008c46:	4604      	mov	r4, r0
 8008c48:	4608      	mov	r0, r1
 8008c4a:	4611      	mov	r1, r2
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	4d05      	ldr	r5, [pc, #20]	; (8008c64 <_write_r+0x20>)
 8008c50:	602a      	str	r2, [r5, #0]
 8008c52:	461a      	mov	r2, r3
 8008c54:	f7fa fde0 	bl	8003818 <_write>
 8008c58:	1c43      	adds	r3, r0, #1
 8008c5a:	d102      	bne.n	8008c62 <_write_r+0x1e>
 8008c5c:	682b      	ldr	r3, [r5, #0]
 8008c5e:	b103      	cbz	r3, 8008c62 <_write_r+0x1e>
 8008c60:	6023      	str	r3, [r4, #0]
 8008c62:	bd38      	pop	{r3, r4, r5, pc}
 8008c64:	20000bd8 	.word	0x20000bd8

08008c68 <__errno>:
 8008c68:	4b01      	ldr	r3, [pc, #4]	; (8008c70 <__errno+0x8>)
 8008c6a:	6818      	ldr	r0, [r3, #0]
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop
 8008c70:	200001e4 	.word	0x200001e4

08008c74 <__libc_init_array>:
 8008c74:	b570      	push	{r4, r5, r6, lr}
 8008c76:	2600      	movs	r6, #0
 8008c78:	4d0c      	ldr	r5, [pc, #48]	; (8008cac <__libc_init_array+0x38>)
 8008c7a:	4c0d      	ldr	r4, [pc, #52]	; (8008cb0 <__libc_init_array+0x3c>)
 8008c7c:	1b64      	subs	r4, r4, r5
 8008c7e:	10a4      	asrs	r4, r4, #2
 8008c80:	42a6      	cmp	r6, r4
 8008c82:	d109      	bne.n	8008c98 <__libc_init_array+0x24>
 8008c84:	f004 f8a4 	bl	800cdd0 <_init>
 8008c88:	2600      	movs	r6, #0
 8008c8a:	4d0a      	ldr	r5, [pc, #40]	; (8008cb4 <__libc_init_array+0x40>)
 8008c8c:	4c0a      	ldr	r4, [pc, #40]	; (8008cb8 <__libc_init_array+0x44>)
 8008c8e:	1b64      	subs	r4, r4, r5
 8008c90:	10a4      	asrs	r4, r4, #2
 8008c92:	42a6      	cmp	r6, r4
 8008c94:	d105      	bne.n	8008ca2 <__libc_init_array+0x2e>
 8008c96:	bd70      	pop	{r4, r5, r6, pc}
 8008c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c9c:	4798      	blx	r3
 8008c9e:	3601      	adds	r6, #1
 8008ca0:	e7ee      	b.n	8008c80 <__libc_init_array+0xc>
 8008ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ca6:	4798      	blx	r3
 8008ca8:	3601      	adds	r6, #1
 8008caa:	e7f2      	b.n	8008c92 <__libc_init_array+0x1e>
 8008cac:	0800ea38 	.word	0x0800ea38
 8008cb0:	0800ea38 	.word	0x0800ea38
 8008cb4:	0800ea38 	.word	0x0800ea38
 8008cb8:	0800ea3c 	.word	0x0800ea3c

08008cbc <__retarget_lock_init_recursive>:
 8008cbc:	4770      	bx	lr

08008cbe <__retarget_lock_acquire_recursive>:
 8008cbe:	4770      	bx	lr

08008cc0 <__retarget_lock_release_recursive>:
 8008cc0:	4770      	bx	lr

08008cc2 <memchr>:
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	b510      	push	{r4, lr}
 8008cc6:	b2c9      	uxtb	r1, r1
 8008cc8:	4402      	add	r2, r0
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	4618      	mov	r0, r3
 8008cce:	d101      	bne.n	8008cd4 <memchr+0x12>
 8008cd0:	2000      	movs	r0, #0
 8008cd2:	e003      	b.n	8008cdc <memchr+0x1a>
 8008cd4:	7804      	ldrb	r4, [r0, #0]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	428c      	cmp	r4, r1
 8008cda:	d1f6      	bne.n	8008cca <memchr+0x8>
 8008cdc:	bd10      	pop	{r4, pc}

08008cde <memcpy>:
 8008cde:	440a      	add	r2, r1
 8008ce0:	4291      	cmp	r1, r2
 8008ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ce6:	d100      	bne.n	8008cea <memcpy+0xc>
 8008ce8:	4770      	bx	lr
 8008cea:	b510      	push	{r4, lr}
 8008cec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cf0:	4291      	cmp	r1, r2
 8008cf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cf6:	d1f9      	bne.n	8008cec <memcpy+0xe>
 8008cf8:	bd10      	pop	{r4, pc}
	...

08008cfc <nan>:
 8008cfc:	2000      	movs	r0, #0
 8008cfe:	4901      	ldr	r1, [pc, #4]	; (8008d04 <nan+0x8>)
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop
 8008d04:	7ff80000 	.word	0x7ff80000

08008d08 <quorem>:
 8008d08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d0c:	6903      	ldr	r3, [r0, #16]
 8008d0e:	690c      	ldr	r4, [r1, #16]
 8008d10:	4607      	mov	r7, r0
 8008d12:	42a3      	cmp	r3, r4
 8008d14:	db7f      	blt.n	8008e16 <quorem+0x10e>
 8008d16:	3c01      	subs	r4, #1
 8008d18:	f100 0514 	add.w	r5, r0, #20
 8008d1c:	f101 0814 	add.w	r8, r1, #20
 8008d20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d24:	9301      	str	r3, [sp, #4]
 8008d26:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008d2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	429a      	cmp	r2, r3
 8008d32:	fbb2 f6f3 	udiv	r6, r2, r3
 8008d36:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008d3a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008d3e:	d331      	bcc.n	8008da4 <quorem+0x9c>
 8008d40:	f04f 0e00 	mov.w	lr, #0
 8008d44:	4640      	mov	r0, r8
 8008d46:	46ac      	mov	ip, r5
 8008d48:	46f2      	mov	sl, lr
 8008d4a:	f850 2b04 	ldr.w	r2, [r0], #4
 8008d4e:	b293      	uxth	r3, r2
 8008d50:	fb06 e303 	mla	r3, r6, r3, lr
 8008d54:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d58:	0c1a      	lsrs	r2, r3, #16
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	fb06 220e 	mla	r2, r6, lr, r2
 8008d60:	ebaa 0303 	sub.w	r3, sl, r3
 8008d64:	f8dc a000 	ldr.w	sl, [ip]
 8008d68:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d6c:	fa1f fa8a 	uxth.w	sl, sl
 8008d70:	4453      	add	r3, sl
 8008d72:	f8dc a000 	ldr.w	sl, [ip]
 8008d76:	b292      	uxth	r2, r2
 8008d78:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008d7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d86:	4581      	cmp	r9, r0
 8008d88:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008d8c:	f84c 3b04 	str.w	r3, [ip], #4
 8008d90:	d2db      	bcs.n	8008d4a <quorem+0x42>
 8008d92:	f855 300b 	ldr.w	r3, [r5, fp]
 8008d96:	b92b      	cbnz	r3, 8008da4 <quorem+0x9c>
 8008d98:	9b01      	ldr	r3, [sp, #4]
 8008d9a:	3b04      	subs	r3, #4
 8008d9c:	429d      	cmp	r5, r3
 8008d9e:	461a      	mov	r2, r3
 8008da0:	d32d      	bcc.n	8008dfe <quorem+0xf6>
 8008da2:	613c      	str	r4, [r7, #16]
 8008da4:	4638      	mov	r0, r7
 8008da6:	f001 fd4b 	bl	800a840 <__mcmp>
 8008daa:	2800      	cmp	r0, #0
 8008dac:	db23      	blt.n	8008df6 <quorem+0xee>
 8008dae:	4629      	mov	r1, r5
 8008db0:	2000      	movs	r0, #0
 8008db2:	3601      	adds	r6, #1
 8008db4:	f858 2b04 	ldr.w	r2, [r8], #4
 8008db8:	f8d1 c000 	ldr.w	ip, [r1]
 8008dbc:	b293      	uxth	r3, r2
 8008dbe:	1ac3      	subs	r3, r0, r3
 8008dc0:	0c12      	lsrs	r2, r2, #16
 8008dc2:	fa1f f08c 	uxth.w	r0, ip
 8008dc6:	4403      	add	r3, r0
 8008dc8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008dcc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008dd6:	45c1      	cmp	r9, r8
 8008dd8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008ddc:	f841 3b04 	str.w	r3, [r1], #4
 8008de0:	d2e8      	bcs.n	8008db4 <quorem+0xac>
 8008de2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008de6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008dea:	b922      	cbnz	r2, 8008df6 <quorem+0xee>
 8008dec:	3b04      	subs	r3, #4
 8008dee:	429d      	cmp	r5, r3
 8008df0:	461a      	mov	r2, r3
 8008df2:	d30a      	bcc.n	8008e0a <quorem+0x102>
 8008df4:	613c      	str	r4, [r7, #16]
 8008df6:	4630      	mov	r0, r6
 8008df8:	b003      	add	sp, #12
 8008dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dfe:	6812      	ldr	r2, [r2, #0]
 8008e00:	3b04      	subs	r3, #4
 8008e02:	2a00      	cmp	r2, #0
 8008e04:	d1cd      	bne.n	8008da2 <quorem+0x9a>
 8008e06:	3c01      	subs	r4, #1
 8008e08:	e7c8      	b.n	8008d9c <quorem+0x94>
 8008e0a:	6812      	ldr	r2, [r2, #0]
 8008e0c:	3b04      	subs	r3, #4
 8008e0e:	2a00      	cmp	r2, #0
 8008e10:	d1f0      	bne.n	8008df4 <quorem+0xec>
 8008e12:	3c01      	subs	r4, #1
 8008e14:	e7eb      	b.n	8008dee <quorem+0xe6>
 8008e16:	2000      	movs	r0, #0
 8008e18:	e7ee      	b.n	8008df8 <quorem+0xf0>
 8008e1a:	0000      	movs	r0, r0
 8008e1c:	0000      	movs	r0, r0
	...

08008e20 <_dtoa_r>:
 8008e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e24:	4616      	mov	r6, r2
 8008e26:	461f      	mov	r7, r3
 8008e28:	69c4      	ldr	r4, [r0, #28]
 8008e2a:	b099      	sub	sp, #100	; 0x64
 8008e2c:	4605      	mov	r5, r0
 8008e2e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008e32:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008e36:	b974      	cbnz	r4, 8008e56 <_dtoa_r+0x36>
 8008e38:	2010      	movs	r0, #16
 8008e3a:	f001 f977 	bl	800a12c <malloc>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	61e8      	str	r0, [r5, #28]
 8008e42:	b920      	cbnz	r0, 8008e4e <_dtoa_r+0x2e>
 8008e44:	21ef      	movs	r1, #239	; 0xef
 8008e46:	4bac      	ldr	r3, [pc, #688]	; (80090f8 <_dtoa_r+0x2d8>)
 8008e48:	48ac      	ldr	r0, [pc, #688]	; (80090fc <_dtoa_r+0x2dc>)
 8008e4a:	f002 f90b 	bl	800b064 <__assert_func>
 8008e4e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e52:	6004      	str	r4, [r0, #0]
 8008e54:	60c4      	str	r4, [r0, #12]
 8008e56:	69eb      	ldr	r3, [r5, #28]
 8008e58:	6819      	ldr	r1, [r3, #0]
 8008e5a:	b151      	cbz	r1, 8008e72 <_dtoa_r+0x52>
 8008e5c:	685a      	ldr	r2, [r3, #4]
 8008e5e:	2301      	movs	r3, #1
 8008e60:	4093      	lsls	r3, r2
 8008e62:	604a      	str	r2, [r1, #4]
 8008e64:	608b      	str	r3, [r1, #8]
 8008e66:	4628      	mov	r0, r5
 8008e68:	f001 fa66 	bl	800a338 <_Bfree>
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	69eb      	ldr	r3, [r5, #28]
 8008e70:	601a      	str	r2, [r3, #0]
 8008e72:	1e3b      	subs	r3, r7, #0
 8008e74:	bfaf      	iteee	ge
 8008e76:	2300      	movge	r3, #0
 8008e78:	2201      	movlt	r2, #1
 8008e7a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008e7e:	9305      	strlt	r3, [sp, #20]
 8008e80:	bfa8      	it	ge
 8008e82:	f8c8 3000 	strge.w	r3, [r8]
 8008e86:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008e8a:	4b9d      	ldr	r3, [pc, #628]	; (8009100 <_dtoa_r+0x2e0>)
 8008e8c:	bfb8      	it	lt
 8008e8e:	f8c8 2000 	strlt.w	r2, [r8]
 8008e92:	ea33 0309 	bics.w	r3, r3, r9
 8008e96:	d119      	bne.n	8008ecc <_dtoa_r+0xac>
 8008e98:	f242 730f 	movw	r3, #9999	; 0x270f
 8008e9c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008e9e:	6013      	str	r3, [r2, #0]
 8008ea0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ea4:	4333      	orrs	r3, r6
 8008ea6:	f000 8589 	beq.w	80099bc <_dtoa_r+0xb9c>
 8008eaa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008eac:	b953      	cbnz	r3, 8008ec4 <_dtoa_r+0xa4>
 8008eae:	4b95      	ldr	r3, [pc, #596]	; (8009104 <_dtoa_r+0x2e4>)
 8008eb0:	e023      	b.n	8008efa <_dtoa_r+0xda>
 8008eb2:	4b95      	ldr	r3, [pc, #596]	; (8009108 <_dtoa_r+0x2e8>)
 8008eb4:	9303      	str	r3, [sp, #12]
 8008eb6:	3308      	adds	r3, #8
 8008eb8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008eba:	6013      	str	r3, [r2, #0]
 8008ebc:	9803      	ldr	r0, [sp, #12]
 8008ebe:	b019      	add	sp, #100	; 0x64
 8008ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec4:	4b8f      	ldr	r3, [pc, #572]	; (8009104 <_dtoa_r+0x2e4>)
 8008ec6:	9303      	str	r3, [sp, #12]
 8008ec8:	3303      	adds	r3, #3
 8008eca:	e7f5      	b.n	8008eb8 <_dtoa_r+0x98>
 8008ecc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008ed0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008ed4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008ed8:	2200      	movs	r2, #0
 8008eda:	2300      	movs	r3, #0
 8008edc:	f7f7 fd6e 	bl	80009bc <__aeabi_dcmpeq>
 8008ee0:	4680      	mov	r8, r0
 8008ee2:	b160      	cbz	r0, 8008efe <_dtoa_r+0xde>
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008ee8:	6013      	str	r3, [r2, #0]
 8008eea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f000 8562 	beq.w	80099b6 <_dtoa_r+0xb96>
 8008ef2:	4b86      	ldr	r3, [pc, #536]	; (800910c <_dtoa_r+0x2ec>)
 8008ef4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008ef6:	6013      	str	r3, [r2, #0]
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	9303      	str	r3, [sp, #12]
 8008efc:	e7de      	b.n	8008ebc <_dtoa_r+0x9c>
 8008efe:	ab16      	add	r3, sp, #88	; 0x58
 8008f00:	9301      	str	r3, [sp, #4]
 8008f02:	ab17      	add	r3, sp, #92	; 0x5c
 8008f04:	9300      	str	r3, [sp, #0]
 8008f06:	4628      	mov	r0, r5
 8008f08:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008f0c:	f001 fda8 	bl	800aa60 <__d2b>
 8008f10:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008f14:	4682      	mov	sl, r0
 8008f16:	2c00      	cmp	r4, #0
 8008f18:	d07e      	beq.n	8009018 <_dtoa_r+0x1f8>
 8008f1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008f1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f20:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008f24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f28:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008f2c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008f30:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008f34:	4619      	mov	r1, r3
 8008f36:	2200      	movs	r2, #0
 8008f38:	4b75      	ldr	r3, [pc, #468]	; (8009110 <_dtoa_r+0x2f0>)
 8008f3a:	f7f7 f91f 	bl	800017c <__aeabi_dsub>
 8008f3e:	a368      	add	r3, pc, #416	; (adr r3, 80090e0 <_dtoa_r+0x2c0>)
 8008f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f44:	f7f7 fad2 	bl	80004ec <__aeabi_dmul>
 8008f48:	a367      	add	r3, pc, #412	; (adr r3, 80090e8 <_dtoa_r+0x2c8>)
 8008f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4e:	f7f7 f917 	bl	8000180 <__adddf3>
 8008f52:	4606      	mov	r6, r0
 8008f54:	4620      	mov	r0, r4
 8008f56:	460f      	mov	r7, r1
 8008f58:	f7f7 fa5e 	bl	8000418 <__aeabi_i2d>
 8008f5c:	a364      	add	r3, pc, #400	; (adr r3, 80090f0 <_dtoa_r+0x2d0>)
 8008f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f62:	f7f7 fac3 	bl	80004ec <__aeabi_dmul>
 8008f66:	4602      	mov	r2, r0
 8008f68:	460b      	mov	r3, r1
 8008f6a:	4630      	mov	r0, r6
 8008f6c:	4639      	mov	r1, r7
 8008f6e:	f7f7 f907 	bl	8000180 <__adddf3>
 8008f72:	4606      	mov	r6, r0
 8008f74:	460f      	mov	r7, r1
 8008f76:	f7f7 fd69 	bl	8000a4c <__aeabi_d2iz>
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	4683      	mov	fp, r0
 8008f7e:	2300      	movs	r3, #0
 8008f80:	4630      	mov	r0, r6
 8008f82:	4639      	mov	r1, r7
 8008f84:	f7f7 fd24 	bl	80009d0 <__aeabi_dcmplt>
 8008f88:	b148      	cbz	r0, 8008f9e <_dtoa_r+0x17e>
 8008f8a:	4658      	mov	r0, fp
 8008f8c:	f7f7 fa44 	bl	8000418 <__aeabi_i2d>
 8008f90:	4632      	mov	r2, r6
 8008f92:	463b      	mov	r3, r7
 8008f94:	f7f7 fd12 	bl	80009bc <__aeabi_dcmpeq>
 8008f98:	b908      	cbnz	r0, 8008f9e <_dtoa_r+0x17e>
 8008f9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008f9e:	f1bb 0f16 	cmp.w	fp, #22
 8008fa2:	d857      	bhi.n	8009054 <_dtoa_r+0x234>
 8008fa4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008fa8:	4b5a      	ldr	r3, [pc, #360]	; (8009114 <_dtoa_r+0x2f4>)
 8008faa:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb2:	f7f7 fd0d 	bl	80009d0 <__aeabi_dcmplt>
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	d04e      	beq.n	8009058 <_dtoa_r+0x238>
 8008fba:	2300      	movs	r3, #0
 8008fbc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008fc0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fc2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008fc4:	1b1b      	subs	r3, r3, r4
 8008fc6:	1e5a      	subs	r2, r3, #1
 8008fc8:	bf46      	itte	mi
 8008fca:	f1c3 0901 	rsbmi	r9, r3, #1
 8008fce:	2300      	movmi	r3, #0
 8008fd0:	f04f 0900 	movpl.w	r9, #0
 8008fd4:	9209      	str	r2, [sp, #36]	; 0x24
 8008fd6:	bf48      	it	mi
 8008fd8:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008fda:	f1bb 0f00 	cmp.w	fp, #0
 8008fde:	db3d      	blt.n	800905c <_dtoa_r+0x23c>
 8008fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fe2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8008fe6:	445b      	add	r3, fp
 8008fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8008fea:	2300      	movs	r3, #0
 8008fec:	930a      	str	r3, [sp, #40]	; 0x28
 8008fee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ff0:	2b09      	cmp	r3, #9
 8008ff2:	d867      	bhi.n	80090c4 <_dtoa_r+0x2a4>
 8008ff4:	2b05      	cmp	r3, #5
 8008ff6:	bfc4      	itt	gt
 8008ff8:	3b04      	subgt	r3, #4
 8008ffa:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008ffc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ffe:	bfc8      	it	gt
 8009000:	2400      	movgt	r4, #0
 8009002:	f1a3 0302 	sub.w	r3, r3, #2
 8009006:	bfd8      	it	le
 8009008:	2401      	movle	r4, #1
 800900a:	2b03      	cmp	r3, #3
 800900c:	f200 8086 	bhi.w	800911c <_dtoa_r+0x2fc>
 8009010:	e8df f003 	tbb	[pc, r3]
 8009014:	5637392c 	.word	0x5637392c
 8009018:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800901c:	441c      	add	r4, r3
 800901e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009022:	2b20      	cmp	r3, #32
 8009024:	bfc1      	itttt	gt
 8009026:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800902a:	fa09 f903 	lslgt.w	r9, r9, r3
 800902e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8009032:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009036:	bfd6      	itet	le
 8009038:	f1c3 0320 	rsble	r3, r3, #32
 800903c:	ea49 0003 	orrgt.w	r0, r9, r3
 8009040:	fa06 f003 	lslle.w	r0, r6, r3
 8009044:	f7f7 f9d8 	bl	80003f8 <__aeabi_ui2d>
 8009048:	2201      	movs	r2, #1
 800904a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800904e:	3c01      	subs	r4, #1
 8009050:	9213      	str	r2, [sp, #76]	; 0x4c
 8009052:	e76f      	b.n	8008f34 <_dtoa_r+0x114>
 8009054:	2301      	movs	r3, #1
 8009056:	e7b3      	b.n	8008fc0 <_dtoa_r+0x1a0>
 8009058:	900f      	str	r0, [sp, #60]	; 0x3c
 800905a:	e7b2      	b.n	8008fc2 <_dtoa_r+0x1a2>
 800905c:	f1cb 0300 	rsb	r3, fp, #0
 8009060:	930a      	str	r3, [sp, #40]	; 0x28
 8009062:	2300      	movs	r3, #0
 8009064:	eba9 090b 	sub.w	r9, r9, fp
 8009068:	930e      	str	r3, [sp, #56]	; 0x38
 800906a:	e7c0      	b.n	8008fee <_dtoa_r+0x1ce>
 800906c:	2300      	movs	r3, #0
 800906e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009070:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009072:	2b00      	cmp	r3, #0
 8009074:	dc55      	bgt.n	8009122 <_dtoa_r+0x302>
 8009076:	2301      	movs	r3, #1
 8009078:	461a      	mov	r2, r3
 800907a:	9306      	str	r3, [sp, #24]
 800907c:	9308      	str	r3, [sp, #32]
 800907e:	9223      	str	r2, [sp, #140]	; 0x8c
 8009080:	e00b      	b.n	800909a <_dtoa_r+0x27a>
 8009082:	2301      	movs	r3, #1
 8009084:	e7f3      	b.n	800906e <_dtoa_r+0x24e>
 8009086:	2300      	movs	r3, #0
 8009088:	930b      	str	r3, [sp, #44]	; 0x2c
 800908a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800908c:	445b      	add	r3, fp
 800908e:	9306      	str	r3, [sp, #24]
 8009090:	3301      	adds	r3, #1
 8009092:	2b01      	cmp	r3, #1
 8009094:	9308      	str	r3, [sp, #32]
 8009096:	bfb8      	it	lt
 8009098:	2301      	movlt	r3, #1
 800909a:	2100      	movs	r1, #0
 800909c:	2204      	movs	r2, #4
 800909e:	69e8      	ldr	r0, [r5, #28]
 80090a0:	f102 0614 	add.w	r6, r2, #20
 80090a4:	429e      	cmp	r6, r3
 80090a6:	d940      	bls.n	800912a <_dtoa_r+0x30a>
 80090a8:	6041      	str	r1, [r0, #4]
 80090aa:	4628      	mov	r0, r5
 80090ac:	f001 f904 	bl	800a2b8 <_Balloc>
 80090b0:	9003      	str	r0, [sp, #12]
 80090b2:	2800      	cmp	r0, #0
 80090b4:	d13c      	bne.n	8009130 <_dtoa_r+0x310>
 80090b6:	4602      	mov	r2, r0
 80090b8:	f240 11af 	movw	r1, #431	; 0x1af
 80090bc:	4b16      	ldr	r3, [pc, #88]	; (8009118 <_dtoa_r+0x2f8>)
 80090be:	e6c3      	b.n	8008e48 <_dtoa_r+0x28>
 80090c0:	2301      	movs	r3, #1
 80090c2:	e7e1      	b.n	8009088 <_dtoa_r+0x268>
 80090c4:	2401      	movs	r4, #1
 80090c6:	2300      	movs	r3, #0
 80090c8:	940b      	str	r4, [sp, #44]	; 0x2c
 80090ca:	9322      	str	r3, [sp, #136]	; 0x88
 80090cc:	f04f 33ff 	mov.w	r3, #4294967295
 80090d0:	2200      	movs	r2, #0
 80090d2:	9306      	str	r3, [sp, #24]
 80090d4:	9308      	str	r3, [sp, #32]
 80090d6:	2312      	movs	r3, #18
 80090d8:	e7d1      	b.n	800907e <_dtoa_r+0x25e>
 80090da:	bf00      	nop
 80090dc:	f3af 8000 	nop.w
 80090e0:	636f4361 	.word	0x636f4361
 80090e4:	3fd287a7 	.word	0x3fd287a7
 80090e8:	8b60c8b3 	.word	0x8b60c8b3
 80090ec:	3fc68a28 	.word	0x3fc68a28
 80090f0:	509f79fb 	.word	0x509f79fb
 80090f4:	3fd34413 	.word	0x3fd34413
 80090f8:	0800e562 	.word	0x0800e562
 80090fc:	0800e579 	.word	0x0800e579
 8009100:	7ff00000 	.word	0x7ff00000
 8009104:	0800e55e 	.word	0x0800e55e
 8009108:	0800e555 	.word	0x0800e555
 800910c:	0800e52a 	.word	0x0800e52a
 8009110:	3ff80000 	.word	0x3ff80000
 8009114:	0800e6c8 	.word	0x0800e6c8
 8009118:	0800e5d1 	.word	0x0800e5d1
 800911c:	2301      	movs	r3, #1
 800911e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009120:	e7d4      	b.n	80090cc <_dtoa_r+0x2ac>
 8009122:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009124:	9306      	str	r3, [sp, #24]
 8009126:	9308      	str	r3, [sp, #32]
 8009128:	e7b7      	b.n	800909a <_dtoa_r+0x27a>
 800912a:	3101      	adds	r1, #1
 800912c:	0052      	lsls	r2, r2, #1
 800912e:	e7b7      	b.n	80090a0 <_dtoa_r+0x280>
 8009130:	69eb      	ldr	r3, [r5, #28]
 8009132:	9a03      	ldr	r2, [sp, #12]
 8009134:	601a      	str	r2, [r3, #0]
 8009136:	9b08      	ldr	r3, [sp, #32]
 8009138:	2b0e      	cmp	r3, #14
 800913a:	f200 80a8 	bhi.w	800928e <_dtoa_r+0x46e>
 800913e:	2c00      	cmp	r4, #0
 8009140:	f000 80a5 	beq.w	800928e <_dtoa_r+0x46e>
 8009144:	f1bb 0f00 	cmp.w	fp, #0
 8009148:	dd34      	ble.n	80091b4 <_dtoa_r+0x394>
 800914a:	4b9a      	ldr	r3, [pc, #616]	; (80093b4 <_dtoa_r+0x594>)
 800914c:	f00b 020f 	and.w	r2, fp, #15
 8009150:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009154:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009158:	e9d3 3400 	ldrd	r3, r4, [r3]
 800915c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009160:	ea4f 142b 	mov.w	r4, fp, asr #4
 8009164:	d016      	beq.n	8009194 <_dtoa_r+0x374>
 8009166:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800916a:	4b93      	ldr	r3, [pc, #588]	; (80093b8 <_dtoa_r+0x598>)
 800916c:	2703      	movs	r7, #3
 800916e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009172:	f7f7 fae5 	bl	8000740 <__aeabi_ddiv>
 8009176:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800917a:	f004 040f 	and.w	r4, r4, #15
 800917e:	4e8e      	ldr	r6, [pc, #568]	; (80093b8 <_dtoa_r+0x598>)
 8009180:	b954      	cbnz	r4, 8009198 <_dtoa_r+0x378>
 8009182:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009186:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800918a:	f7f7 fad9 	bl	8000740 <__aeabi_ddiv>
 800918e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009192:	e029      	b.n	80091e8 <_dtoa_r+0x3c8>
 8009194:	2702      	movs	r7, #2
 8009196:	e7f2      	b.n	800917e <_dtoa_r+0x35e>
 8009198:	07e1      	lsls	r1, r4, #31
 800919a:	d508      	bpl.n	80091ae <_dtoa_r+0x38e>
 800919c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80091a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80091a4:	f7f7 f9a2 	bl	80004ec <__aeabi_dmul>
 80091a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80091ac:	3701      	adds	r7, #1
 80091ae:	1064      	asrs	r4, r4, #1
 80091b0:	3608      	adds	r6, #8
 80091b2:	e7e5      	b.n	8009180 <_dtoa_r+0x360>
 80091b4:	f000 80a5 	beq.w	8009302 <_dtoa_r+0x4e2>
 80091b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80091bc:	f1cb 0400 	rsb	r4, fp, #0
 80091c0:	4b7c      	ldr	r3, [pc, #496]	; (80093b4 <_dtoa_r+0x594>)
 80091c2:	f004 020f 	and.w	r2, r4, #15
 80091c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ce:	f7f7 f98d 	bl	80004ec <__aeabi_dmul>
 80091d2:	2702      	movs	r7, #2
 80091d4:	2300      	movs	r3, #0
 80091d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80091da:	4e77      	ldr	r6, [pc, #476]	; (80093b8 <_dtoa_r+0x598>)
 80091dc:	1124      	asrs	r4, r4, #4
 80091de:	2c00      	cmp	r4, #0
 80091e0:	f040 8084 	bne.w	80092ec <_dtoa_r+0x4cc>
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d1d2      	bne.n	800918e <_dtoa_r+0x36e>
 80091e8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80091ec:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80091f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f000 8087 	beq.w	8009306 <_dtoa_r+0x4e6>
 80091f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80091fc:	2200      	movs	r2, #0
 80091fe:	4b6f      	ldr	r3, [pc, #444]	; (80093bc <_dtoa_r+0x59c>)
 8009200:	f7f7 fbe6 	bl	80009d0 <__aeabi_dcmplt>
 8009204:	2800      	cmp	r0, #0
 8009206:	d07e      	beq.n	8009306 <_dtoa_r+0x4e6>
 8009208:	9b08      	ldr	r3, [sp, #32]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d07b      	beq.n	8009306 <_dtoa_r+0x4e6>
 800920e:	9b06      	ldr	r3, [sp, #24]
 8009210:	2b00      	cmp	r3, #0
 8009212:	dd38      	ble.n	8009286 <_dtoa_r+0x466>
 8009214:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009218:	2200      	movs	r2, #0
 800921a:	4b69      	ldr	r3, [pc, #420]	; (80093c0 <_dtoa_r+0x5a0>)
 800921c:	f7f7 f966 	bl	80004ec <__aeabi_dmul>
 8009220:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009224:	9c06      	ldr	r4, [sp, #24]
 8009226:	f10b 38ff 	add.w	r8, fp, #4294967295
 800922a:	3701      	adds	r7, #1
 800922c:	4638      	mov	r0, r7
 800922e:	f7f7 f8f3 	bl	8000418 <__aeabi_i2d>
 8009232:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009236:	f7f7 f959 	bl	80004ec <__aeabi_dmul>
 800923a:	2200      	movs	r2, #0
 800923c:	4b61      	ldr	r3, [pc, #388]	; (80093c4 <_dtoa_r+0x5a4>)
 800923e:	f7f6 ff9f 	bl	8000180 <__adddf3>
 8009242:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009246:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800924a:	9611      	str	r6, [sp, #68]	; 0x44
 800924c:	2c00      	cmp	r4, #0
 800924e:	d15d      	bne.n	800930c <_dtoa_r+0x4ec>
 8009250:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009254:	2200      	movs	r2, #0
 8009256:	4b5c      	ldr	r3, [pc, #368]	; (80093c8 <_dtoa_r+0x5a8>)
 8009258:	f7f6 ff90 	bl	800017c <__aeabi_dsub>
 800925c:	4602      	mov	r2, r0
 800925e:	460b      	mov	r3, r1
 8009260:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009264:	4633      	mov	r3, r6
 8009266:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009268:	f7f7 fbd0 	bl	8000a0c <__aeabi_dcmpgt>
 800926c:	2800      	cmp	r0, #0
 800926e:	f040 8295 	bne.w	800979c <_dtoa_r+0x97c>
 8009272:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009276:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009278:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800927c:	f7f7 fba8 	bl	80009d0 <__aeabi_dcmplt>
 8009280:	2800      	cmp	r0, #0
 8009282:	f040 8289 	bne.w	8009798 <_dtoa_r+0x978>
 8009286:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800928a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800928e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009290:	2b00      	cmp	r3, #0
 8009292:	f2c0 8151 	blt.w	8009538 <_dtoa_r+0x718>
 8009296:	f1bb 0f0e 	cmp.w	fp, #14
 800929a:	f300 814d 	bgt.w	8009538 <_dtoa_r+0x718>
 800929e:	4b45      	ldr	r3, [pc, #276]	; (80093b4 <_dtoa_r+0x594>)
 80092a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80092a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80092a8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80092ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	f280 80da 	bge.w	8009468 <_dtoa_r+0x648>
 80092b4:	9b08      	ldr	r3, [sp, #32]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	f300 80d6 	bgt.w	8009468 <_dtoa_r+0x648>
 80092bc:	f040 826b 	bne.w	8009796 <_dtoa_r+0x976>
 80092c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092c4:	2200      	movs	r2, #0
 80092c6:	4b40      	ldr	r3, [pc, #256]	; (80093c8 <_dtoa_r+0x5a8>)
 80092c8:	f7f7 f910 	bl	80004ec <__aeabi_dmul>
 80092cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092d0:	f7f7 fb92 	bl	80009f8 <__aeabi_dcmpge>
 80092d4:	9c08      	ldr	r4, [sp, #32]
 80092d6:	4626      	mov	r6, r4
 80092d8:	2800      	cmp	r0, #0
 80092da:	f040 8241 	bne.w	8009760 <_dtoa_r+0x940>
 80092de:	2331      	movs	r3, #49	; 0x31
 80092e0:	9f03      	ldr	r7, [sp, #12]
 80092e2:	f10b 0b01 	add.w	fp, fp, #1
 80092e6:	f807 3b01 	strb.w	r3, [r7], #1
 80092ea:	e23d      	b.n	8009768 <_dtoa_r+0x948>
 80092ec:	07e2      	lsls	r2, r4, #31
 80092ee:	d505      	bpl.n	80092fc <_dtoa_r+0x4dc>
 80092f0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80092f4:	f7f7 f8fa 	bl	80004ec <__aeabi_dmul>
 80092f8:	2301      	movs	r3, #1
 80092fa:	3701      	adds	r7, #1
 80092fc:	1064      	asrs	r4, r4, #1
 80092fe:	3608      	adds	r6, #8
 8009300:	e76d      	b.n	80091de <_dtoa_r+0x3be>
 8009302:	2702      	movs	r7, #2
 8009304:	e770      	b.n	80091e8 <_dtoa_r+0x3c8>
 8009306:	46d8      	mov	r8, fp
 8009308:	9c08      	ldr	r4, [sp, #32]
 800930a:	e78f      	b.n	800922c <_dtoa_r+0x40c>
 800930c:	9903      	ldr	r1, [sp, #12]
 800930e:	4b29      	ldr	r3, [pc, #164]	; (80093b4 <_dtoa_r+0x594>)
 8009310:	4421      	add	r1, r4
 8009312:	9112      	str	r1, [sp, #72]	; 0x48
 8009314:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009316:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800931a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800931e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009322:	2900      	cmp	r1, #0
 8009324:	d054      	beq.n	80093d0 <_dtoa_r+0x5b0>
 8009326:	2000      	movs	r0, #0
 8009328:	4928      	ldr	r1, [pc, #160]	; (80093cc <_dtoa_r+0x5ac>)
 800932a:	f7f7 fa09 	bl	8000740 <__aeabi_ddiv>
 800932e:	463b      	mov	r3, r7
 8009330:	4632      	mov	r2, r6
 8009332:	f7f6 ff23 	bl	800017c <__aeabi_dsub>
 8009336:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800933a:	9f03      	ldr	r7, [sp, #12]
 800933c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009340:	f7f7 fb84 	bl	8000a4c <__aeabi_d2iz>
 8009344:	4604      	mov	r4, r0
 8009346:	f7f7 f867 	bl	8000418 <__aeabi_i2d>
 800934a:	4602      	mov	r2, r0
 800934c:	460b      	mov	r3, r1
 800934e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009352:	f7f6 ff13 	bl	800017c <__aeabi_dsub>
 8009356:	4602      	mov	r2, r0
 8009358:	460b      	mov	r3, r1
 800935a:	3430      	adds	r4, #48	; 0x30
 800935c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009360:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009364:	f807 4b01 	strb.w	r4, [r7], #1
 8009368:	f7f7 fb32 	bl	80009d0 <__aeabi_dcmplt>
 800936c:	2800      	cmp	r0, #0
 800936e:	d173      	bne.n	8009458 <_dtoa_r+0x638>
 8009370:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009374:	2000      	movs	r0, #0
 8009376:	4911      	ldr	r1, [pc, #68]	; (80093bc <_dtoa_r+0x59c>)
 8009378:	f7f6 ff00 	bl	800017c <__aeabi_dsub>
 800937c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009380:	f7f7 fb26 	bl	80009d0 <__aeabi_dcmplt>
 8009384:	2800      	cmp	r0, #0
 8009386:	f040 80b6 	bne.w	80094f6 <_dtoa_r+0x6d6>
 800938a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800938c:	429f      	cmp	r7, r3
 800938e:	f43f af7a 	beq.w	8009286 <_dtoa_r+0x466>
 8009392:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009396:	2200      	movs	r2, #0
 8009398:	4b09      	ldr	r3, [pc, #36]	; (80093c0 <_dtoa_r+0x5a0>)
 800939a:	f7f7 f8a7 	bl	80004ec <__aeabi_dmul>
 800939e:	2200      	movs	r2, #0
 80093a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80093a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093a8:	4b05      	ldr	r3, [pc, #20]	; (80093c0 <_dtoa_r+0x5a0>)
 80093aa:	f7f7 f89f 	bl	80004ec <__aeabi_dmul>
 80093ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80093b2:	e7c3      	b.n	800933c <_dtoa_r+0x51c>
 80093b4:	0800e6c8 	.word	0x0800e6c8
 80093b8:	0800e6a0 	.word	0x0800e6a0
 80093bc:	3ff00000 	.word	0x3ff00000
 80093c0:	40240000 	.word	0x40240000
 80093c4:	401c0000 	.word	0x401c0000
 80093c8:	40140000 	.word	0x40140000
 80093cc:	3fe00000 	.word	0x3fe00000
 80093d0:	4630      	mov	r0, r6
 80093d2:	4639      	mov	r1, r7
 80093d4:	f7f7 f88a 	bl	80004ec <__aeabi_dmul>
 80093d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80093da:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80093de:	9c03      	ldr	r4, [sp, #12]
 80093e0:	9314      	str	r3, [sp, #80]	; 0x50
 80093e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093e6:	f7f7 fb31 	bl	8000a4c <__aeabi_d2iz>
 80093ea:	9015      	str	r0, [sp, #84]	; 0x54
 80093ec:	f7f7 f814 	bl	8000418 <__aeabi_i2d>
 80093f0:	4602      	mov	r2, r0
 80093f2:	460b      	mov	r3, r1
 80093f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093f8:	f7f6 fec0 	bl	800017c <__aeabi_dsub>
 80093fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093fe:	4606      	mov	r6, r0
 8009400:	3330      	adds	r3, #48	; 0x30
 8009402:	f804 3b01 	strb.w	r3, [r4], #1
 8009406:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009408:	460f      	mov	r7, r1
 800940a:	429c      	cmp	r4, r3
 800940c:	f04f 0200 	mov.w	r2, #0
 8009410:	d124      	bne.n	800945c <_dtoa_r+0x63c>
 8009412:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009416:	4baf      	ldr	r3, [pc, #700]	; (80096d4 <_dtoa_r+0x8b4>)
 8009418:	f7f6 feb2 	bl	8000180 <__adddf3>
 800941c:	4602      	mov	r2, r0
 800941e:	460b      	mov	r3, r1
 8009420:	4630      	mov	r0, r6
 8009422:	4639      	mov	r1, r7
 8009424:	f7f7 faf2 	bl	8000a0c <__aeabi_dcmpgt>
 8009428:	2800      	cmp	r0, #0
 800942a:	d163      	bne.n	80094f4 <_dtoa_r+0x6d4>
 800942c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009430:	2000      	movs	r0, #0
 8009432:	49a8      	ldr	r1, [pc, #672]	; (80096d4 <_dtoa_r+0x8b4>)
 8009434:	f7f6 fea2 	bl	800017c <__aeabi_dsub>
 8009438:	4602      	mov	r2, r0
 800943a:	460b      	mov	r3, r1
 800943c:	4630      	mov	r0, r6
 800943e:	4639      	mov	r1, r7
 8009440:	f7f7 fac6 	bl	80009d0 <__aeabi_dcmplt>
 8009444:	2800      	cmp	r0, #0
 8009446:	f43f af1e 	beq.w	8009286 <_dtoa_r+0x466>
 800944a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800944c:	1e7b      	subs	r3, r7, #1
 800944e:	9314      	str	r3, [sp, #80]	; 0x50
 8009450:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009454:	2b30      	cmp	r3, #48	; 0x30
 8009456:	d0f8      	beq.n	800944a <_dtoa_r+0x62a>
 8009458:	46c3      	mov	fp, r8
 800945a:	e03b      	b.n	80094d4 <_dtoa_r+0x6b4>
 800945c:	4b9e      	ldr	r3, [pc, #632]	; (80096d8 <_dtoa_r+0x8b8>)
 800945e:	f7f7 f845 	bl	80004ec <__aeabi_dmul>
 8009462:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009466:	e7bc      	b.n	80093e2 <_dtoa_r+0x5c2>
 8009468:	9f03      	ldr	r7, [sp, #12]
 800946a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800946e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009472:	4640      	mov	r0, r8
 8009474:	4649      	mov	r1, r9
 8009476:	f7f7 f963 	bl	8000740 <__aeabi_ddiv>
 800947a:	f7f7 fae7 	bl	8000a4c <__aeabi_d2iz>
 800947e:	4604      	mov	r4, r0
 8009480:	f7f6 ffca 	bl	8000418 <__aeabi_i2d>
 8009484:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009488:	f7f7 f830 	bl	80004ec <__aeabi_dmul>
 800948c:	4602      	mov	r2, r0
 800948e:	460b      	mov	r3, r1
 8009490:	4640      	mov	r0, r8
 8009492:	4649      	mov	r1, r9
 8009494:	f7f6 fe72 	bl	800017c <__aeabi_dsub>
 8009498:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800949c:	f807 6b01 	strb.w	r6, [r7], #1
 80094a0:	9e03      	ldr	r6, [sp, #12]
 80094a2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80094a6:	1bbe      	subs	r6, r7, r6
 80094a8:	45b4      	cmp	ip, r6
 80094aa:	4602      	mov	r2, r0
 80094ac:	460b      	mov	r3, r1
 80094ae:	d136      	bne.n	800951e <_dtoa_r+0x6fe>
 80094b0:	f7f6 fe66 	bl	8000180 <__adddf3>
 80094b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80094b8:	4680      	mov	r8, r0
 80094ba:	4689      	mov	r9, r1
 80094bc:	f7f7 faa6 	bl	8000a0c <__aeabi_dcmpgt>
 80094c0:	bb58      	cbnz	r0, 800951a <_dtoa_r+0x6fa>
 80094c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80094c6:	4640      	mov	r0, r8
 80094c8:	4649      	mov	r1, r9
 80094ca:	f7f7 fa77 	bl	80009bc <__aeabi_dcmpeq>
 80094ce:	b108      	cbz	r0, 80094d4 <_dtoa_r+0x6b4>
 80094d0:	07e3      	lsls	r3, r4, #31
 80094d2:	d422      	bmi.n	800951a <_dtoa_r+0x6fa>
 80094d4:	4651      	mov	r1, sl
 80094d6:	4628      	mov	r0, r5
 80094d8:	f000 ff2e 	bl	800a338 <_Bfree>
 80094dc:	2300      	movs	r3, #0
 80094de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80094e0:	703b      	strb	r3, [r7, #0]
 80094e2:	f10b 0301 	add.w	r3, fp, #1
 80094e6:	6013      	str	r3, [r2, #0]
 80094e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	f43f ace6 	beq.w	8008ebc <_dtoa_r+0x9c>
 80094f0:	601f      	str	r7, [r3, #0]
 80094f2:	e4e3      	b.n	8008ebc <_dtoa_r+0x9c>
 80094f4:	4627      	mov	r7, r4
 80094f6:	463b      	mov	r3, r7
 80094f8:	461f      	mov	r7, r3
 80094fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094fe:	2a39      	cmp	r2, #57	; 0x39
 8009500:	d107      	bne.n	8009512 <_dtoa_r+0x6f2>
 8009502:	9a03      	ldr	r2, [sp, #12]
 8009504:	429a      	cmp	r2, r3
 8009506:	d1f7      	bne.n	80094f8 <_dtoa_r+0x6d8>
 8009508:	2230      	movs	r2, #48	; 0x30
 800950a:	9903      	ldr	r1, [sp, #12]
 800950c:	f108 0801 	add.w	r8, r8, #1
 8009510:	700a      	strb	r2, [r1, #0]
 8009512:	781a      	ldrb	r2, [r3, #0]
 8009514:	3201      	adds	r2, #1
 8009516:	701a      	strb	r2, [r3, #0]
 8009518:	e79e      	b.n	8009458 <_dtoa_r+0x638>
 800951a:	46d8      	mov	r8, fp
 800951c:	e7eb      	b.n	80094f6 <_dtoa_r+0x6d6>
 800951e:	2200      	movs	r2, #0
 8009520:	4b6d      	ldr	r3, [pc, #436]	; (80096d8 <_dtoa_r+0x8b8>)
 8009522:	f7f6 ffe3 	bl	80004ec <__aeabi_dmul>
 8009526:	2200      	movs	r2, #0
 8009528:	2300      	movs	r3, #0
 800952a:	4680      	mov	r8, r0
 800952c:	4689      	mov	r9, r1
 800952e:	f7f7 fa45 	bl	80009bc <__aeabi_dcmpeq>
 8009532:	2800      	cmp	r0, #0
 8009534:	d09b      	beq.n	800946e <_dtoa_r+0x64e>
 8009536:	e7cd      	b.n	80094d4 <_dtoa_r+0x6b4>
 8009538:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800953a:	2a00      	cmp	r2, #0
 800953c:	f000 80c4 	beq.w	80096c8 <_dtoa_r+0x8a8>
 8009540:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009542:	2a01      	cmp	r2, #1
 8009544:	f300 80a8 	bgt.w	8009698 <_dtoa_r+0x878>
 8009548:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800954a:	2a00      	cmp	r2, #0
 800954c:	f000 80a0 	beq.w	8009690 <_dtoa_r+0x870>
 8009550:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009554:	464f      	mov	r7, r9
 8009556:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009558:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800955a:	2101      	movs	r1, #1
 800955c:	441a      	add	r2, r3
 800955e:	4628      	mov	r0, r5
 8009560:	4499      	add	r9, r3
 8009562:	9209      	str	r2, [sp, #36]	; 0x24
 8009564:	f000 ffe8 	bl	800a538 <__i2b>
 8009568:	4606      	mov	r6, r0
 800956a:	b15f      	cbz	r7, 8009584 <_dtoa_r+0x764>
 800956c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800956e:	2b00      	cmp	r3, #0
 8009570:	dd08      	ble.n	8009584 <_dtoa_r+0x764>
 8009572:	42bb      	cmp	r3, r7
 8009574:	bfa8      	it	ge
 8009576:	463b      	movge	r3, r7
 8009578:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800957a:	eba9 0903 	sub.w	r9, r9, r3
 800957e:	1aff      	subs	r7, r7, r3
 8009580:	1ad3      	subs	r3, r2, r3
 8009582:	9309      	str	r3, [sp, #36]	; 0x24
 8009584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009586:	b1f3      	cbz	r3, 80095c6 <_dtoa_r+0x7a6>
 8009588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800958a:	2b00      	cmp	r3, #0
 800958c:	f000 80a0 	beq.w	80096d0 <_dtoa_r+0x8b0>
 8009590:	2c00      	cmp	r4, #0
 8009592:	dd10      	ble.n	80095b6 <_dtoa_r+0x796>
 8009594:	4631      	mov	r1, r6
 8009596:	4622      	mov	r2, r4
 8009598:	4628      	mov	r0, r5
 800959a:	f001 f88b 	bl	800a6b4 <__pow5mult>
 800959e:	4652      	mov	r2, sl
 80095a0:	4601      	mov	r1, r0
 80095a2:	4606      	mov	r6, r0
 80095a4:	4628      	mov	r0, r5
 80095a6:	f000 ffdd 	bl	800a564 <__multiply>
 80095aa:	4680      	mov	r8, r0
 80095ac:	4651      	mov	r1, sl
 80095ae:	4628      	mov	r0, r5
 80095b0:	f000 fec2 	bl	800a338 <_Bfree>
 80095b4:	46c2      	mov	sl, r8
 80095b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095b8:	1b1a      	subs	r2, r3, r4
 80095ba:	d004      	beq.n	80095c6 <_dtoa_r+0x7a6>
 80095bc:	4651      	mov	r1, sl
 80095be:	4628      	mov	r0, r5
 80095c0:	f001 f878 	bl	800a6b4 <__pow5mult>
 80095c4:	4682      	mov	sl, r0
 80095c6:	2101      	movs	r1, #1
 80095c8:	4628      	mov	r0, r5
 80095ca:	f000 ffb5 	bl	800a538 <__i2b>
 80095ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095d0:	4604      	mov	r4, r0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	f340 8082 	ble.w	80096dc <_dtoa_r+0x8bc>
 80095d8:	461a      	mov	r2, r3
 80095da:	4601      	mov	r1, r0
 80095dc:	4628      	mov	r0, r5
 80095de:	f001 f869 	bl	800a6b4 <__pow5mult>
 80095e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80095e4:	4604      	mov	r4, r0
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	dd7b      	ble.n	80096e2 <_dtoa_r+0x8c2>
 80095ea:	f04f 0800 	mov.w	r8, #0
 80095ee:	6923      	ldr	r3, [r4, #16]
 80095f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80095f4:	6918      	ldr	r0, [r3, #16]
 80095f6:	f000 ff51 	bl	800a49c <__hi0bits>
 80095fa:	f1c0 0020 	rsb	r0, r0, #32
 80095fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009600:	4418      	add	r0, r3
 8009602:	f010 001f 	ands.w	r0, r0, #31
 8009606:	f000 8092 	beq.w	800972e <_dtoa_r+0x90e>
 800960a:	f1c0 0320 	rsb	r3, r0, #32
 800960e:	2b04      	cmp	r3, #4
 8009610:	f340 8085 	ble.w	800971e <_dtoa_r+0x8fe>
 8009614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009616:	f1c0 001c 	rsb	r0, r0, #28
 800961a:	4403      	add	r3, r0
 800961c:	4481      	add	r9, r0
 800961e:	4407      	add	r7, r0
 8009620:	9309      	str	r3, [sp, #36]	; 0x24
 8009622:	f1b9 0f00 	cmp.w	r9, #0
 8009626:	dd05      	ble.n	8009634 <_dtoa_r+0x814>
 8009628:	4651      	mov	r1, sl
 800962a:	464a      	mov	r2, r9
 800962c:	4628      	mov	r0, r5
 800962e:	f001 f89b 	bl	800a768 <__lshift>
 8009632:	4682      	mov	sl, r0
 8009634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009636:	2b00      	cmp	r3, #0
 8009638:	dd05      	ble.n	8009646 <_dtoa_r+0x826>
 800963a:	4621      	mov	r1, r4
 800963c:	461a      	mov	r2, r3
 800963e:	4628      	mov	r0, r5
 8009640:	f001 f892 	bl	800a768 <__lshift>
 8009644:	4604      	mov	r4, r0
 8009646:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009648:	2b00      	cmp	r3, #0
 800964a:	d072      	beq.n	8009732 <_dtoa_r+0x912>
 800964c:	4621      	mov	r1, r4
 800964e:	4650      	mov	r0, sl
 8009650:	f001 f8f6 	bl	800a840 <__mcmp>
 8009654:	2800      	cmp	r0, #0
 8009656:	da6c      	bge.n	8009732 <_dtoa_r+0x912>
 8009658:	2300      	movs	r3, #0
 800965a:	4651      	mov	r1, sl
 800965c:	220a      	movs	r2, #10
 800965e:	4628      	mov	r0, r5
 8009660:	f000 fe8c 	bl	800a37c <__multadd>
 8009664:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009666:	4682      	mov	sl, r0
 8009668:	f10b 3bff 	add.w	fp, fp, #4294967295
 800966c:	2b00      	cmp	r3, #0
 800966e:	f000 81ac 	beq.w	80099ca <_dtoa_r+0xbaa>
 8009672:	2300      	movs	r3, #0
 8009674:	4631      	mov	r1, r6
 8009676:	220a      	movs	r2, #10
 8009678:	4628      	mov	r0, r5
 800967a:	f000 fe7f 	bl	800a37c <__multadd>
 800967e:	9b06      	ldr	r3, [sp, #24]
 8009680:	4606      	mov	r6, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	f300 8093 	bgt.w	80097ae <_dtoa_r+0x98e>
 8009688:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800968a:	2b02      	cmp	r3, #2
 800968c:	dc59      	bgt.n	8009742 <_dtoa_r+0x922>
 800968e:	e08e      	b.n	80097ae <_dtoa_r+0x98e>
 8009690:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009692:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009696:	e75d      	b.n	8009554 <_dtoa_r+0x734>
 8009698:	9b08      	ldr	r3, [sp, #32]
 800969a:	1e5c      	subs	r4, r3, #1
 800969c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800969e:	42a3      	cmp	r3, r4
 80096a0:	bfbf      	itttt	lt
 80096a2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80096a4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80096a6:	1ae3      	sublt	r3, r4, r3
 80096a8:	18d2      	addlt	r2, r2, r3
 80096aa:	bfa8      	it	ge
 80096ac:	1b1c      	subge	r4, r3, r4
 80096ae:	9b08      	ldr	r3, [sp, #32]
 80096b0:	bfbe      	ittt	lt
 80096b2:	940a      	strlt	r4, [sp, #40]	; 0x28
 80096b4:	920e      	strlt	r2, [sp, #56]	; 0x38
 80096b6:	2400      	movlt	r4, #0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	bfb5      	itete	lt
 80096bc:	eba9 0703 	sublt.w	r7, r9, r3
 80096c0:	464f      	movge	r7, r9
 80096c2:	2300      	movlt	r3, #0
 80096c4:	9b08      	ldrge	r3, [sp, #32]
 80096c6:	e747      	b.n	8009558 <_dtoa_r+0x738>
 80096c8:	464f      	mov	r7, r9
 80096ca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80096cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80096ce:	e74c      	b.n	800956a <_dtoa_r+0x74a>
 80096d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096d2:	e773      	b.n	80095bc <_dtoa_r+0x79c>
 80096d4:	3fe00000 	.word	0x3fe00000
 80096d8:	40240000 	.word	0x40240000
 80096dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80096de:	2b01      	cmp	r3, #1
 80096e0:	dc18      	bgt.n	8009714 <_dtoa_r+0x8f4>
 80096e2:	9b04      	ldr	r3, [sp, #16]
 80096e4:	b9b3      	cbnz	r3, 8009714 <_dtoa_r+0x8f4>
 80096e6:	9b05      	ldr	r3, [sp, #20]
 80096e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096ec:	b993      	cbnz	r3, 8009714 <_dtoa_r+0x8f4>
 80096ee:	9b05      	ldr	r3, [sp, #20]
 80096f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80096f4:	0d1b      	lsrs	r3, r3, #20
 80096f6:	051b      	lsls	r3, r3, #20
 80096f8:	b17b      	cbz	r3, 800971a <_dtoa_r+0x8fa>
 80096fa:	f04f 0801 	mov.w	r8, #1
 80096fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009700:	f109 0901 	add.w	r9, r9, #1
 8009704:	3301      	adds	r3, #1
 8009706:	9309      	str	r3, [sp, #36]	; 0x24
 8009708:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800970a:	2b00      	cmp	r3, #0
 800970c:	f47f af6f 	bne.w	80095ee <_dtoa_r+0x7ce>
 8009710:	2001      	movs	r0, #1
 8009712:	e774      	b.n	80095fe <_dtoa_r+0x7de>
 8009714:	f04f 0800 	mov.w	r8, #0
 8009718:	e7f6      	b.n	8009708 <_dtoa_r+0x8e8>
 800971a:	4698      	mov	r8, r3
 800971c:	e7f4      	b.n	8009708 <_dtoa_r+0x8e8>
 800971e:	d080      	beq.n	8009622 <_dtoa_r+0x802>
 8009720:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009722:	331c      	adds	r3, #28
 8009724:	441a      	add	r2, r3
 8009726:	4499      	add	r9, r3
 8009728:	441f      	add	r7, r3
 800972a:	9209      	str	r2, [sp, #36]	; 0x24
 800972c:	e779      	b.n	8009622 <_dtoa_r+0x802>
 800972e:	4603      	mov	r3, r0
 8009730:	e7f6      	b.n	8009720 <_dtoa_r+0x900>
 8009732:	9b08      	ldr	r3, [sp, #32]
 8009734:	2b00      	cmp	r3, #0
 8009736:	dc34      	bgt.n	80097a2 <_dtoa_r+0x982>
 8009738:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800973a:	2b02      	cmp	r3, #2
 800973c:	dd31      	ble.n	80097a2 <_dtoa_r+0x982>
 800973e:	9b08      	ldr	r3, [sp, #32]
 8009740:	9306      	str	r3, [sp, #24]
 8009742:	9b06      	ldr	r3, [sp, #24]
 8009744:	b963      	cbnz	r3, 8009760 <_dtoa_r+0x940>
 8009746:	4621      	mov	r1, r4
 8009748:	2205      	movs	r2, #5
 800974a:	4628      	mov	r0, r5
 800974c:	f000 fe16 	bl	800a37c <__multadd>
 8009750:	4601      	mov	r1, r0
 8009752:	4604      	mov	r4, r0
 8009754:	4650      	mov	r0, sl
 8009756:	f001 f873 	bl	800a840 <__mcmp>
 800975a:	2800      	cmp	r0, #0
 800975c:	f73f adbf 	bgt.w	80092de <_dtoa_r+0x4be>
 8009760:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009762:	9f03      	ldr	r7, [sp, #12]
 8009764:	ea6f 0b03 	mvn.w	fp, r3
 8009768:	f04f 0800 	mov.w	r8, #0
 800976c:	4621      	mov	r1, r4
 800976e:	4628      	mov	r0, r5
 8009770:	f000 fde2 	bl	800a338 <_Bfree>
 8009774:	2e00      	cmp	r6, #0
 8009776:	f43f aead 	beq.w	80094d4 <_dtoa_r+0x6b4>
 800977a:	f1b8 0f00 	cmp.w	r8, #0
 800977e:	d005      	beq.n	800978c <_dtoa_r+0x96c>
 8009780:	45b0      	cmp	r8, r6
 8009782:	d003      	beq.n	800978c <_dtoa_r+0x96c>
 8009784:	4641      	mov	r1, r8
 8009786:	4628      	mov	r0, r5
 8009788:	f000 fdd6 	bl	800a338 <_Bfree>
 800978c:	4631      	mov	r1, r6
 800978e:	4628      	mov	r0, r5
 8009790:	f000 fdd2 	bl	800a338 <_Bfree>
 8009794:	e69e      	b.n	80094d4 <_dtoa_r+0x6b4>
 8009796:	2400      	movs	r4, #0
 8009798:	4626      	mov	r6, r4
 800979a:	e7e1      	b.n	8009760 <_dtoa_r+0x940>
 800979c:	46c3      	mov	fp, r8
 800979e:	4626      	mov	r6, r4
 80097a0:	e59d      	b.n	80092de <_dtoa_r+0x4be>
 80097a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f000 80c8 	beq.w	800993a <_dtoa_r+0xb1a>
 80097aa:	9b08      	ldr	r3, [sp, #32]
 80097ac:	9306      	str	r3, [sp, #24]
 80097ae:	2f00      	cmp	r7, #0
 80097b0:	dd05      	ble.n	80097be <_dtoa_r+0x99e>
 80097b2:	4631      	mov	r1, r6
 80097b4:	463a      	mov	r2, r7
 80097b6:	4628      	mov	r0, r5
 80097b8:	f000 ffd6 	bl	800a768 <__lshift>
 80097bc:	4606      	mov	r6, r0
 80097be:	f1b8 0f00 	cmp.w	r8, #0
 80097c2:	d05b      	beq.n	800987c <_dtoa_r+0xa5c>
 80097c4:	4628      	mov	r0, r5
 80097c6:	6871      	ldr	r1, [r6, #4]
 80097c8:	f000 fd76 	bl	800a2b8 <_Balloc>
 80097cc:	4607      	mov	r7, r0
 80097ce:	b928      	cbnz	r0, 80097dc <_dtoa_r+0x9bc>
 80097d0:	4602      	mov	r2, r0
 80097d2:	f240 21ef 	movw	r1, #751	; 0x2ef
 80097d6:	4b81      	ldr	r3, [pc, #516]	; (80099dc <_dtoa_r+0xbbc>)
 80097d8:	f7ff bb36 	b.w	8008e48 <_dtoa_r+0x28>
 80097dc:	6932      	ldr	r2, [r6, #16]
 80097de:	f106 010c 	add.w	r1, r6, #12
 80097e2:	3202      	adds	r2, #2
 80097e4:	0092      	lsls	r2, r2, #2
 80097e6:	300c      	adds	r0, #12
 80097e8:	f7ff fa79 	bl	8008cde <memcpy>
 80097ec:	2201      	movs	r2, #1
 80097ee:	4639      	mov	r1, r7
 80097f0:	4628      	mov	r0, r5
 80097f2:	f000 ffb9 	bl	800a768 <__lshift>
 80097f6:	46b0      	mov	r8, r6
 80097f8:	4606      	mov	r6, r0
 80097fa:	9b03      	ldr	r3, [sp, #12]
 80097fc:	9a03      	ldr	r2, [sp, #12]
 80097fe:	3301      	adds	r3, #1
 8009800:	9308      	str	r3, [sp, #32]
 8009802:	9b06      	ldr	r3, [sp, #24]
 8009804:	4413      	add	r3, r2
 8009806:	930b      	str	r3, [sp, #44]	; 0x2c
 8009808:	9b04      	ldr	r3, [sp, #16]
 800980a:	f003 0301 	and.w	r3, r3, #1
 800980e:	930a      	str	r3, [sp, #40]	; 0x28
 8009810:	9b08      	ldr	r3, [sp, #32]
 8009812:	4621      	mov	r1, r4
 8009814:	3b01      	subs	r3, #1
 8009816:	4650      	mov	r0, sl
 8009818:	9304      	str	r3, [sp, #16]
 800981a:	f7ff fa75 	bl	8008d08 <quorem>
 800981e:	4641      	mov	r1, r8
 8009820:	9006      	str	r0, [sp, #24]
 8009822:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009826:	4650      	mov	r0, sl
 8009828:	f001 f80a 	bl	800a840 <__mcmp>
 800982c:	4632      	mov	r2, r6
 800982e:	9009      	str	r0, [sp, #36]	; 0x24
 8009830:	4621      	mov	r1, r4
 8009832:	4628      	mov	r0, r5
 8009834:	f001 f820 	bl	800a878 <__mdiff>
 8009838:	68c2      	ldr	r2, [r0, #12]
 800983a:	4607      	mov	r7, r0
 800983c:	bb02      	cbnz	r2, 8009880 <_dtoa_r+0xa60>
 800983e:	4601      	mov	r1, r0
 8009840:	4650      	mov	r0, sl
 8009842:	f000 fffd 	bl	800a840 <__mcmp>
 8009846:	4602      	mov	r2, r0
 8009848:	4639      	mov	r1, r7
 800984a:	4628      	mov	r0, r5
 800984c:	920c      	str	r2, [sp, #48]	; 0x30
 800984e:	f000 fd73 	bl	800a338 <_Bfree>
 8009852:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009854:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009856:	9f08      	ldr	r7, [sp, #32]
 8009858:	ea43 0102 	orr.w	r1, r3, r2
 800985c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800985e:	4319      	orrs	r1, r3
 8009860:	d110      	bne.n	8009884 <_dtoa_r+0xa64>
 8009862:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009866:	d029      	beq.n	80098bc <_dtoa_r+0xa9c>
 8009868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800986a:	2b00      	cmp	r3, #0
 800986c:	dd02      	ble.n	8009874 <_dtoa_r+0xa54>
 800986e:	9b06      	ldr	r3, [sp, #24]
 8009870:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009874:	9b04      	ldr	r3, [sp, #16]
 8009876:	f883 9000 	strb.w	r9, [r3]
 800987a:	e777      	b.n	800976c <_dtoa_r+0x94c>
 800987c:	4630      	mov	r0, r6
 800987e:	e7ba      	b.n	80097f6 <_dtoa_r+0x9d6>
 8009880:	2201      	movs	r2, #1
 8009882:	e7e1      	b.n	8009848 <_dtoa_r+0xa28>
 8009884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009886:	2b00      	cmp	r3, #0
 8009888:	db04      	blt.n	8009894 <_dtoa_r+0xa74>
 800988a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800988c:	430b      	orrs	r3, r1
 800988e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009890:	430b      	orrs	r3, r1
 8009892:	d120      	bne.n	80098d6 <_dtoa_r+0xab6>
 8009894:	2a00      	cmp	r2, #0
 8009896:	dded      	ble.n	8009874 <_dtoa_r+0xa54>
 8009898:	4651      	mov	r1, sl
 800989a:	2201      	movs	r2, #1
 800989c:	4628      	mov	r0, r5
 800989e:	f000 ff63 	bl	800a768 <__lshift>
 80098a2:	4621      	mov	r1, r4
 80098a4:	4682      	mov	sl, r0
 80098a6:	f000 ffcb 	bl	800a840 <__mcmp>
 80098aa:	2800      	cmp	r0, #0
 80098ac:	dc03      	bgt.n	80098b6 <_dtoa_r+0xa96>
 80098ae:	d1e1      	bne.n	8009874 <_dtoa_r+0xa54>
 80098b0:	f019 0f01 	tst.w	r9, #1
 80098b4:	d0de      	beq.n	8009874 <_dtoa_r+0xa54>
 80098b6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80098ba:	d1d8      	bne.n	800986e <_dtoa_r+0xa4e>
 80098bc:	2339      	movs	r3, #57	; 0x39
 80098be:	9a04      	ldr	r2, [sp, #16]
 80098c0:	7013      	strb	r3, [r2, #0]
 80098c2:	463b      	mov	r3, r7
 80098c4:	461f      	mov	r7, r3
 80098c6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80098ca:	3b01      	subs	r3, #1
 80098cc:	2a39      	cmp	r2, #57	; 0x39
 80098ce:	d06b      	beq.n	80099a8 <_dtoa_r+0xb88>
 80098d0:	3201      	adds	r2, #1
 80098d2:	701a      	strb	r2, [r3, #0]
 80098d4:	e74a      	b.n	800976c <_dtoa_r+0x94c>
 80098d6:	2a00      	cmp	r2, #0
 80098d8:	dd07      	ble.n	80098ea <_dtoa_r+0xaca>
 80098da:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80098de:	d0ed      	beq.n	80098bc <_dtoa_r+0xa9c>
 80098e0:	9a04      	ldr	r2, [sp, #16]
 80098e2:	f109 0301 	add.w	r3, r9, #1
 80098e6:	7013      	strb	r3, [r2, #0]
 80098e8:	e740      	b.n	800976c <_dtoa_r+0x94c>
 80098ea:	9b08      	ldr	r3, [sp, #32]
 80098ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80098ee:	f803 9c01 	strb.w	r9, [r3, #-1]
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d042      	beq.n	800997c <_dtoa_r+0xb5c>
 80098f6:	4651      	mov	r1, sl
 80098f8:	2300      	movs	r3, #0
 80098fa:	220a      	movs	r2, #10
 80098fc:	4628      	mov	r0, r5
 80098fe:	f000 fd3d 	bl	800a37c <__multadd>
 8009902:	45b0      	cmp	r8, r6
 8009904:	4682      	mov	sl, r0
 8009906:	f04f 0300 	mov.w	r3, #0
 800990a:	f04f 020a 	mov.w	r2, #10
 800990e:	4641      	mov	r1, r8
 8009910:	4628      	mov	r0, r5
 8009912:	d107      	bne.n	8009924 <_dtoa_r+0xb04>
 8009914:	f000 fd32 	bl	800a37c <__multadd>
 8009918:	4680      	mov	r8, r0
 800991a:	4606      	mov	r6, r0
 800991c:	9b08      	ldr	r3, [sp, #32]
 800991e:	3301      	adds	r3, #1
 8009920:	9308      	str	r3, [sp, #32]
 8009922:	e775      	b.n	8009810 <_dtoa_r+0x9f0>
 8009924:	f000 fd2a 	bl	800a37c <__multadd>
 8009928:	4631      	mov	r1, r6
 800992a:	4680      	mov	r8, r0
 800992c:	2300      	movs	r3, #0
 800992e:	220a      	movs	r2, #10
 8009930:	4628      	mov	r0, r5
 8009932:	f000 fd23 	bl	800a37c <__multadd>
 8009936:	4606      	mov	r6, r0
 8009938:	e7f0      	b.n	800991c <_dtoa_r+0xafc>
 800993a:	9b08      	ldr	r3, [sp, #32]
 800993c:	9306      	str	r3, [sp, #24]
 800993e:	9f03      	ldr	r7, [sp, #12]
 8009940:	4621      	mov	r1, r4
 8009942:	4650      	mov	r0, sl
 8009944:	f7ff f9e0 	bl	8008d08 <quorem>
 8009948:	9b03      	ldr	r3, [sp, #12]
 800994a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800994e:	f807 9b01 	strb.w	r9, [r7], #1
 8009952:	1afa      	subs	r2, r7, r3
 8009954:	9b06      	ldr	r3, [sp, #24]
 8009956:	4293      	cmp	r3, r2
 8009958:	dd07      	ble.n	800996a <_dtoa_r+0xb4a>
 800995a:	4651      	mov	r1, sl
 800995c:	2300      	movs	r3, #0
 800995e:	220a      	movs	r2, #10
 8009960:	4628      	mov	r0, r5
 8009962:	f000 fd0b 	bl	800a37c <__multadd>
 8009966:	4682      	mov	sl, r0
 8009968:	e7ea      	b.n	8009940 <_dtoa_r+0xb20>
 800996a:	9b06      	ldr	r3, [sp, #24]
 800996c:	f04f 0800 	mov.w	r8, #0
 8009970:	2b00      	cmp	r3, #0
 8009972:	bfcc      	ite	gt
 8009974:	461f      	movgt	r7, r3
 8009976:	2701      	movle	r7, #1
 8009978:	9b03      	ldr	r3, [sp, #12]
 800997a:	441f      	add	r7, r3
 800997c:	4651      	mov	r1, sl
 800997e:	2201      	movs	r2, #1
 8009980:	4628      	mov	r0, r5
 8009982:	f000 fef1 	bl	800a768 <__lshift>
 8009986:	4621      	mov	r1, r4
 8009988:	4682      	mov	sl, r0
 800998a:	f000 ff59 	bl	800a840 <__mcmp>
 800998e:	2800      	cmp	r0, #0
 8009990:	dc97      	bgt.n	80098c2 <_dtoa_r+0xaa2>
 8009992:	d102      	bne.n	800999a <_dtoa_r+0xb7a>
 8009994:	f019 0f01 	tst.w	r9, #1
 8009998:	d193      	bne.n	80098c2 <_dtoa_r+0xaa2>
 800999a:	463b      	mov	r3, r7
 800999c:	461f      	mov	r7, r3
 800999e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099a2:	2a30      	cmp	r2, #48	; 0x30
 80099a4:	d0fa      	beq.n	800999c <_dtoa_r+0xb7c>
 80099a6:	e6e1      	b.n	800976c <_dtoa_r+0x94c>
 80099a8:	9a03      	ldr	r2, [sp, #12]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d18a      	bne.n	80098c4 <_dtoa_r+0xaa4>
 80099ae:	2331      	movs	r3, #49	; 0x31
 80099b0:	f10b 0b01 	add.w	fp, fp, #1
 80099b4:	e797      	b.n	80098e6 <_dtoa_r+0xac6>
 80099b6:	4b0a      	ldr	r3, [pc, #40]	; (80099e0 <_dtoa_r+0xbc0>)
 80099b8:	f7ff ba9f 	b.w	8008efa <_dtoa_r+0xda>
 80099bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80099be:	2b00      	cmp	r3, #0
 80099c0:	f47f aa77 	bne.w	8008eb2 <_dtoa_r+0x92>
 80099c4:	4b07      	ldr	r3, [pc, #28]	; (80099e4 <_dtoa_r+0xbc4>)
 80099c6:	f7ff ba98 	b.w	8008efa <_dtoa_r+0xda>
 80099ca:	9b06      	ldr	r3, [sp, #24]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	dcb6      	bgt.n	800993e <_dtoa_r+0xb1e>
 80099d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	f73f aeb5 	bgt.w	8009742 <_dtoa_r+0x922>
 80099d8:	e7b1      	b.n	800993e <_dtoa_r+0xb1e>
 80099da:	bf00      	nop
 80099dc:	0800e5d1 	.word	0x0800e5d1
 80099e0:	0800e529 	.word	0x0800e529
 80099e4:	0800e555 	.word	0x0800e555

080099e8 <_free_r>:
 80099e8:	b538      	push	{r3, r4, r5, lr}
 80099ea:	4605      	mov	r5, r0
 80099ec:	2900      	cmp	r1, #0
 80099ee:	d040      	beq.n	8009a72 <_free_r+0x8a>
 80099f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099f4:	1f0c      	subs	r4, r1, #4
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	bfb8      	it	lt
 80099fa:	18e4      	addlt	r4, r4, r3
 80099fc:	f000 fc50 	bl	800a2a0 <__malloc_lock>
 8009a00:	4a1c      	ldr	r2, [pc, #112]	; (8009a74 <_free_r+0x8c>)
 8009a02:	6813      	ldr	r3, [r2, #0]
 8009a04:	b933      	cbnz	r3, 8009a14 <_free_r+0x2c>
 8009a06:	6063      	str	r3, [r4, #4]
 8009a08:	6014      	str	r4, [r2, #0]
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a10:	f000 bc4c 	b.w	800a2ac <__malloc_unlock>
 8009a14:	42a3      	cmp	r3, r4
 8009a16:	d908      	bls.n	8009a2a <_free_r+0x42>
 8009a18:	6820      	ldr	r0, [r4, #0]
 8009a1a:	1821      	adds	r1, r4, r0
 8009a1c:	428b      	cmp	r3, r1
 8009a1e:	bf01      	itttt	eq
 8009a20:	6819      	ldreq	r1, [r3, #0]
 8009a22:	685b      	ldreq	r3, [r3, #4]
 8009a24:	1809      	addeq	r1, r1, r0
 8009a26:	6021      	streq	r1, [r4, #0]
 8009a28:	e7ed      	b.n	8009a06 <_free_r+0x1e>
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	b10b      	cbz	r3, 8009a34 <_free_r+0x4c>
 8009a30:	42a3      	cmp	r3, r4
 8009a32:	d9fa      	bls.n	8009a2a <_free_r+0x42>
 8009a34:	6811      	ldr	r1, [r2, #0]
 8009a36:	1850      	adds	r0, r2, r1
 8009a38:	42a0      	cmp	r0, r4
 8009a3a:	d10b      	bne.n	8009a54 <_free_r+0x6c>
 8009a3c:	6820      	ldr	r0, [r4, #0]
 8009a3e:	4401      	add	r1, r0
 8009a40:	1850      	adds	r0, r2, r1
 8009a42:	4283      	cmp	r3, r0
 8009a44:	6011      	str	r1, [r2, #0]
 8009a46:	d1e0      	bne.n	8009a0a <_free_r+0x22>
 8009a48:	6818      	ldr	r0, [r3, #0]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	4408      	add	r0, r1
 8009a4e:	6010      	str	r0, [r2, #0]
 8009a50:	6053      	str	r3, [r2, #4]
 8009a52:	e7da      	b.n	8009a0a <_free_r+0x22>
 8009a54:	d902      	bls.n	8009a5c <_free_r+0x74>
 8009a56:	230c      	movs	r3, #12
 8009a58:	602b      	str	r3, [r5, #0]
 8009a5a:	e7d6      	b.n	8009a0a <_free_r+0x22>
 8009a5c:	6820      	ldr	r0, [r4, #0]
 8009a5e:	1821      	adds	r1, r4, r0
 8009a60:	428b      	cmp	r3, r1
 8009a62:	bf01      	itttt	eq
 8009a64:	6819      	ldreq	r1, [r3, #0]
 8009a66:	685b      	ldreq	r3, [r3, #4]
 8009a68:	1809      	addeq	r1, r1, r0
 8009a6a:	6021      	streq	r1, [r4, #0]
 8009a6c:	6063      	str	r3, [r4, #4]
 8009a6e:	6054      	str	r4, [r2, #4]
 8009a70:	e7cb      	b.n	8009a0a <_free_r+0x22>
 8009a72:	bd38      	pop	{r3, r4, r5, pc}
 8009a74:	20000be0 	.word	0x20000be0

08009a78 <rshift>:
 8009a78:	6903      	ldr	r3, [r0, #16]
 8009a7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009a82:	f100 0414 	add.w	r4, r0, #20
 8009a86:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009a8a:	dd46      	ble.n	8009b1a <rshift+0xa2>
 8009a8c:	f011 011f 	ands.w	r1, r1, #31
 8009a90:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009a94:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009a98:	d10c      	bne.n	8009ab4 <rshift+0x3c>
 8009a9a:	4629      	mov	r1, r5
 8009a9c:	f100 0710 	add.w	r7, r0, #16
 8009aa0:	42b1      	cmp	r1, r6
 8009aa2:	d335      	bcc.n	8009b10 <rshift+0x98>
 8009aa4:	1a9b      	subs	r3, r3, r2
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	1eea      	subs	r2, r5, #3
 8009aaa:	4296      	cmp	r6, r2
 8009aac:	bf38      	it	cc
 8009aae:	2300      	movcc	r3, #0
 8009ab0:	4423      	add	r3, r4
 8009ab2:	e015      	b.n	8009ae0 <rshift+0x68>
 8009ab4:	46a1      	mov	r9, r4
 8009ab6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009aba:	f1c1 0820 	rsb	r8, r1, #32
 8009abe:	40cf      	lsrs	r7, r1
 8009ac0:	f105 0e04 	add.w	lr, r5, #4
 8009ac4:	4576      	cmp	r6, lr
 8009ac6:	46f4      	mov	ip, lr
 8009ac8:	d816      	bhi.n	8009af8 <rshift+0x80>
 8009aca:	1a9a      	subs	r2, r3, r2
 8009acc:	0092      	lsls	r2, r2, #2
 8009ace:	3a04      	subs	r2, #4
 8009ad0:	3501      	adds	r5, #1
 8009ad2:	42ae      	cmp	r6, r5
 8009ad4:	bf38      	it	cc
 8009ad6:	2200      	movcc	r2, #0
 8009ad8:	18a3      	adds	r3, r4, r2
 8009ada:	50a7      	str	r7, [r4, r2]
 8009adc:	b107      	cbz	r7, 8009ae0 <rshift+0x68>
 8009ade:	3304      	adds	r3, #4
 8009ae0:	42a3      	cmp	r3, r4
 8009ae2:	eba3 0204 	sub.w	r2, r3, r4
 8009ae6:	bf08      	it	eq
 8009ae8:	2300      	moveq	r3, #0
 8009aea:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009aee:	6102      	str	r2, [r0, #16]
 8009af0:	bf08      	it	eq
 8009af2:	6143      	streq	r3, [r0, #20]
 8009af4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009af8:	f8dc c000 	ldr.w	ip, [ip]
 8009afc:	fa0c fc08 	lsl.w	ip, ip, r8
 8009b00:	ea4c 0707 	orr.w	r7, ip, r7
 8009b04:	f849 7b04 	str.w	r7, [r9], #4
 8009b08:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009b0c:	40cf      	lsrs	r7, r1
 8009b0e:	e7d9      	b.n	8009ac4 <rshift+0x4c>
 8009b10:	f851 cb04 	ldr.w	ip, [r1], #4
 8009b14:	f847 cf04 	str.w	ip, [r7, #4]!
 8009b18:	e7c2      	b.n	8009aa0 <rshift+0x28>
 8009b1a:	4623      	mov	r3, r4
 8009b1c:	e7e0      	b.n	8009ae0 <rshift+0x68>

08009b1e <__hexdig_fun>:
 8009b1e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009b22:	2b09      	cmp	r3, #9
 8009b24:	d802      	bhi.n	8009b2c <__hexdig_fun+0xe>
 8009b26:	3820      	subs	r0, #32
 8009b28:	b2c0      	uxtb	r0, r0
 8009b2a:	4770      	bx	lr
 8009b2c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009b30:	2b05      	cmp	r3, #5
 8009b32:	d801      	bhi.n	8009b38 <__hexdig_fun+0x1a>
 8009b34:	3847      	subs	r0, #71	; 0x47
 8009b36:	e7f7      	b.n	8009b28 <__hexdig_fun+0xa>
 8009b38:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009b3c:	2b05      	cmp	r3, #5
 8009b3e:	d801      	bhi.n	8009b44 <__hexdig_fun+0x26>
 8009b40:	3827      	subs	r0, #39	; 0x27
 8009b42:	e7f1      	b.n	8009b28 <__hexdig_fun+0xa>
 8009b44:	2000      	movs	r0, #0
 8009b46:	4770      	bx	lr

08009b48 <__gethex>:
 8009b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b4c:	4681      	mov	r9, r0
 8009b4e:	468a      	mov	sl, r1
 8009b50:	4617      	mov	r7, r2
 8009b52:	680a      	ldr	r2, [r1, #0]
 8009b54:	b085      	sub	sp, #20
 8009b56:	f102 0b02 	add.w	fp, r2, #2
 8009b5a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009b5e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009b62:	9302      	str	r3, [sp, #8]
 8009b64:	32fe      	adds	r2, #254	; 0xfe
 8009b66:	eb02 030b 	add.w	r3, r2, fp
 8009b6a:	46d8      	mov	r8, fp
 8009b6c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009b70:	9301      	str	r3, [sp, #4]
 8009b72:	2830      	cmp	r0, #48	; 0x30
 8009b74:	d0f7      	beq.n	8009b66 <__gethex+0x1e>
 8009b76:	f7ff ffd2 	bl	8009b1e <__hexdig_fun>
 8009b7a:	4604      	mov	r4, r0
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	d138      	bne.n	8009bf2 <__gethex+0xaa>
 8009b80:	2201      	movs	r2, #1
 8009b82:	4640      	mov	r0, r8
 8009b84:	49a7      	ldr	r1, [pc, #668]	; (8009e24 <__gethex+0x2dc>)
 8009b86:	f7fe fffa 	bl	8008b7e <strncmp>
 8009b8a:	4606      	mov	r6, r0
 8009b8c:	2800      	cmp	r0, #0
 8009b8e:	d169      	bne.n	8009c64 <__gethex+0x11c>
 8009b90:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009b94:	465d      	mov	r5, fp
 8009b96:	f7ff ffc2 	bl	8009b1e <__hexdig_fun>
 8009b9a:	2800      	cmp	r0, #0
 8009b9c:	d064      	beq.n	8009c68 <__gethex+0x120>
 8009b9e:	465a      	mov	r2, fp
 8009ba0:	7810      	ldrb	r0, [r2, #0]
 8009ba2:	4690      	mov	r8, r2
 8009ba4:	2830      	cmp	r0, #48	; 0x30
 8009ba6:	f102 0201 	add.w	r2, r2, #1
 8009baa:	d0f9      	beq.n	8009ba0 <__gethex+0x58>
 8009bac:	f7ff ffb7 	bl	8009b1e <__hexdig_fun>
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	fab0 f480 	clz	r4, r0
 8009bb6:	465e      	mov	r6, fp
 8009bb8:	0964      	lsrs	r4, r4, #5
 8009bba:	9301      	str	r3, [sp, #4]
 8009bbc:	4642      	mov	r2, r8
 8009bbe:	4615      	mov	r5, r2
 8009bc0:	7828      	ldrb	r0, [r5, #0]
 8009bc2:	3201      	adds	r2, #1
 8009bc4:	f7ff ffab 	bl	8009b1e <__hexdig_fun>
 8009bc8:	2800      	cmp	r0, #0
 8009bca:	d1f8      	bne.n	8009bbe <__gethex+0x76>
 8009bcc:	2201      	movs	r2, #1
 8009bce:	4628      	mov	r0, r5
 8009bd0:	4994      	ldr	r1, [pc, #592]	; (8009e24 <__gethex+0x2dc>)
 8009bd2:	f7fe ffd4 	bl	8008b7e <strncmp>
 8009bd6:	b978      	cbnz	r0, 8009bf8 <__gethex+0xb0>
 8009bd8:	b946      	cbnz	r6, 8009bec <__gethex+0xa4>
 8009bda:	1c6e      	adds	r6, r5, #1
 8009bdc:	4632      	mov	r2, r6
 8009bde:	4615      	mov	r5, r2
 8009be0:	7828      	ldrb	r0, [r5, #0]
 8009be2:	3201      	adds	r2, #1
 8009be4:	f7ff ff9b 	bl	8009b1e <__hexdig_fun>
 8009be8:	2800      	cmp	r0, #0
 8009bea:	d1f8      	bne.n	8009bde <__gethex+0x96>
 8009bec:	1b73      	subs	r3, r6, r5
 8009bee:	009e      	lsls	r6, r3, #2
 8009bf0:	e004      	b.n	8009bfc <__gethex+0xb4>
 8009bf2:	2400      	movs	r4, #0
 8009bf4:	4626      	mov	r6, r4
 8009bf6:	e7e1      	b.n	8009bbc <__gethex+0x74>
 8009bf8:	2e00      	cmp	r6, #0
 8009bfa:	d1f7      	bne.n	8009bec <__gethex+0xa4>
 8009bfc:	782b      	ldrb	r3, [r5, #0]
 8009bfe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009c02:	2b50      	cmp	r3, #80	; 0x50
 8009c04:	d13d      	bne.n	8009c82 <__gethex+0x13a>
 8009c06:	786b      	ldrb	r3, [r5, #1]
 8009c08:	2b2b      	cmp	r3, #43	; 0x2b
 8009c0a:	d02f      	beq.n	8009c6c <__gethex+0x124>
 8009c0c:	2b2d      	cmp	r3, #45	; 0x2d
 8009c0e:	d031      	beq.n	8009c74 <__gethex+0x12c>
 8009c10:	f04f 0b00 	mov.w	fp, #0
 8009c14:	1c69      	adds	r1, r5, #1
 8009c16:	7808      	ldrb	r0, [r1, #0]
 8009c18:	f7ff ff81 	bl	8009b1e <__hexdig_fun>
 8009c1c:	1e42      	subs	r2, r0, #1
 8009c1e:	b2d2      	uxtb	r2, r2
 8009c20:	2a18      	cmp	r2, #24
 8009c22:	d82e      	bhi.n	8009c82 <__gethex+0x13a>
 8009c24:	f1a0 0210 	sub.w	r2, r0, #16
 8009c28:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009c2c:	f7ff ff77 	bl	8009b1e <__hexdig_fun>
 8009c30:	f100 3cff 	add.w	ip, r0, #4294967295
 8009c34:	fa5f fc8c 	uxtb.w	ip, ip
 8009c38:	f1bc 0f18 	cmp.w	ip, #24
 8009c3c:	d91d      	bls.n	8009c7a <__gethex+0x132>
 8009c3e:	f1bb 0f00 	cmp.w	fp, #0
 8009c42:	d000      	beq.n	8009c46 <__gethex+0xfe>
 8009c44:	4252      	negs	r2, r2
 8009c46:	4416      	add	r6, r2
 8009c48:	f8ca 1000 	str.w	r1, [sl]
 8009c4c:	b1dc      	cbz	r4, 8009c86 <__gethex+0x13e>
 8009c4e:	9b01      	ldr	r3, [sp, #4]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	bf14      	ite	ne
 8009c54:	f04f 0800 	movne.w	r8, #0
 8009c58:	f04f 0806 	moveq.w	r8, #6
 8009c5c:	4640      	mov	r0, r8
 8009c5e:	b005      	add	sp, #20
 8009c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c64:	4645      	mov	r5, r8
 8009c66:	4626      	mov	r6, r4
 8009c68:	2401      	movs	r4, #1
 8009c6a:	e7c7      	b.n	8009bfc <__gethex+0xb4>
 8009c6c:	f04f 0b00 	mov.w	fp, #0
 8009c70:	1ca9      	adds	r1, r5, #2
 8009c72:	e7d0      	b.n	8009c16 <__gethex+0xce>
 8009c74:	f04f 0b01 	mov.w	fp, #1
 8009c78:	e7fa      	b.n	8009c70 <__gethex+0x128>
 8009c7a:	230a      	movs	r3, #10
 8009c7c:	fb03 0002 	mla	r0, r3, r2, r0
 8009c80:	e7d0      	b.n	8009c24 <__gethex+0xdc>
 8009c82:	4629      	mov	r1, r5
 8009c84:	e7e0      	b.n	8009c48 <__gethex+0x100>
 8009c86:	4621      	mov	r1, r4
 8009c88:	eba5 0308 	sub.w	r3, r5, r8
 8009c8c:	3b01      	subs	r3, #1
 8009c8e:	2b07      	cmp	r3, #7
 8009c90:	dc0a      	bgt.n	8009ca8 <__gethex+0x160>
 8009c92:	4648      	mov	r0, r9
 8009c94:	f000 fb10 	bl	800a2b8 <_Balloc>
 8009c98:	4604      	mov	r4, r0
 8009c9a:	b940      	cbnz	r0, 8009cae <__gethex+0x166>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	21e4      	movs	r1, #228	; 0xe4
 8009ca0:	4b61      	ldr	r3, [pc, #388]	; (8009e28 <__gethex+0x2e0>)
 8009ca2:	4862      	ldr	r0, [pc, #392]	; (8009e2c <__gethex+0x2e4>)
 8009ca4:	f001 f9de 	bl	800b064 <__assert_func>
 8009ca8:	3101      	adds	r1, #1
 8009caa:	105b      	asrs	r3, r3, #1
 8009cac:	e7ef      	b.n	8009c8e <__gethex+0x146>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	469b      	mov	fp, r3
 8009cb2:	f100 0a14 	add.w	sl, r0, #20
 8009cb6:	f8cd a004 	str.w	sl, [sp, #4]
 8009cba:	45a8      	cmp	r8, r5
 8009cbc:	d344      	bcc.n	8009d48 <__gethex+0x200>
 8009cbe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009cc2:	4658      	mov	r0, fp
 8009cc4:	f848 bb04 	str.w	fp, [r8], #4
 8009cc8:	eba8 080a 	sub.w	r8, r8, sl
 8009ccc:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8009cd0:	6122      	str	r2, [r4, #16]
 8009cd2:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8009cd6:	f000 fbe1 	bl	800a49c <__hi0bits>
 8009cda:	683d      	ldr	r5, [r7, #0]
 8009cdc:	eba8 0800 	sub.w	r8, r8, r0
 8009ce0:	45a8      	cmp	r8, r5
 8009ce2:	dd59      	ble.n	8009d98 <__gethex+0x250>
 8009ce4:	eba8 0805 	sub.w	r8, r8, r5
 8009ce8:	4641      	mov	r1, r8
 8009cea:	4620      	mov	r0, r4
 8009cec:	f000 ff5f 	bl	800abae <__any_on>
 8009cf0:	4683      	mov	fp, r0
 8009cf2:	b1b8      	cbz	r0, 8009d24 <__gethex+0x1dc>
 8009cf4:	f04f 0b01 	mov.w	fp, #1
 8009cf8:	f108 33ff 	add.w	r3, r8, #4294967295
 8009cfc:	1159      	asrs	r1, r3, #5
 8009cfe:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009d02:	f003 021f 	and.w	r2, r3, #31
 8009d06:	fa0b f202 	lsl.w	r2, fp, r2
 8009d0a:	420a      	tst	r2, r1
 8009d0c:	d00a      	beq.n	8009d24 <__gethex+0x1dc>
 8009d0e:	455b      	cmp	r3, fp
 8009d10:	dd06      	ble.n	8009d20 <__gethex+0x1d8>
 8009d12:	4620      	mov	r0, r4
 8009d14:	f1a8 0102 	sub.w	r1, r8, #2
 8009d18:	f000 ff49 	bl	800abae <__any_on>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	d138      	bne.n	8009d92 <__gethex+0x24a>
 8009d20:	f04f 0b02 	mov.w	fp, #2
 8009d24:	4641      	mov	r1, r8
 8009d26:	4620      	mov	r0, r4
 8009d28:	f7ff fea6 	bl	8009a78 <rshift>
 8009d2c:	4446      	add	r6, r8
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	42b3      	cmp	r3, r6
 8009d32:	da41      	bge.n	8009db8 <__gethex+0x270>
 8009d34:	4621      	mov	r1, r4
 8009d36:	4648      	mov	r0, r9
 8009d38:	f000 fafe 	bl	800a338 <_Bfree>
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d40:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009d44:	6013      	str	r3, [r2, #0]
 8009d46:	e789      	b.n	8009c5c <__gethex+0x114>
 8009d48:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009d4c:	2a2e      	cmp	r2, #46	; 0x2e
 8009d4e:	d014      	beq.n	8009d7a <__gethex+0x232>
 8009d50:	2b20      	cmp	r3, #32
 8009d52:	d106      	bne.n	8009d62 <__gethex+0x21a>
 8009d54:	9b01      	ldr	r3, [sp, #4]
 8009d56:	f843 bb04 	str.w	fp, [r3], #4
 8009d5a:	f04f 0b00 	mov.w	fp, #0
 8009d5e:	9301      	str	r3, [sp, #4]
 8009d60:	465b      	mov	r3, fp
 8009d62:	7828      	ldrb	r0, [r5, #0]
 8009d64:	9303      	str	r3, [sp, #12]
 8009d66:	f7ff feda 	bl	8009b1e <__hexdig_fun>
 8009d6a:	9b03      	ldr	r3, [sp, #12]
 8009d6c:	f000 000f 	and.w	r0, r0, #15
 8009d70:	4098      	lsls	r0, r3
 8009d72:	ea4b 0b00 	orr.w	fp, fp, r0
 8009d76:	3304      	adds	r3, #4
 8009d78:	e79f      	b.n	8009cba <__gethex+0x172>
 8009d7a:	45a8      	cmp	r8, r5
 8009d7c:	d8e8      	bhi.n	8009d50 <__gethex+0x208>
 8009d7e:	2201      	movs	r2, #1
 8009d80:	4628      	mov	r0, r5
 8009d82:	4928      	ldr	r1, [pc, #160]	; (8009e24 <__gethex+0x2dc>)
 8009d84:	9303      	str	r3, [sp, #12]
 8009d86:	f7fe fefa 	bl	8008b7e <strncmp>
 8009d8a:	9b03      	ldr	r3, [sp, #12]
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	d1df      	bne.n	8009d50 <__gethex+0x208>
 8009d90:	e793      	b.n	8009cba <__gethex+0x172>
 8009d92:	f04f 0b03 	mov.w	fp, #3
 8009d96:	e7c5      	b.n	8009d24 <__gethex+0x1dc>
 8009d98:	da0b      	bge.n	8009db2 <__gethex+0x26a>
 8009d9a:	eba5 0808 	sub.w	r8, r5, r8
 8009d9e:	4621      	mov	r1, r4
 8009da0:	4642      	mov	r2, r8
 8009da2:	4648      	mov	r0, r9
 8009da4:	f000 fce0 	bl	800a768 <__lshift>
 8009da8:	4604      	mov	r4, r0
 8009daa:	eba6 0608 	sub.w	r6, r6, r8
 8009dae:	f100 0a14 	add.w	sl, r0, #20
 8009db2:	f04f 0b00 	mov.w	fp, #0
 8009db6:	e7ba      	b.n	8009d2e <__gethex+0x1e6>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	42b3      	cmp	r3, r6
 8009dbc:	dd74      	ble.n	8009ea8 <__gethex+0x360>
 8009dbe:	1b9e      	subs	r6, r3, r6
 8009dc0:	42b5      	cmp	r5, r6
 8009dc2:	dc35      	bgt.n	8009e30 <__gethex+0x2e8>
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2b02      	cmp	r3, #2
 8009dc8:	d023      	beq.n	8009e12 <__gethex+0x2ca>
 8009dca:	2b03      	cmp	r3, #3
 8009dcc:	d025      	beq.n	8009e1a <__gethex+0x2d2>
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d115      	bne.n	8009dfe <__gethex+0x2b6>
 8009dd2:	42b5      	cmp	r5, r6
 8009dd4:	d113      	bne.n	8009dfe <__gethex+0x2b6>
 8009dd6:	2d01      	cmp	r5, #1
 8009dd8:	d10b      	bne.n	8009df2 <__gethex+0x2aa>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	9a02      	ldr	r2, [sp, #8]
 8009dde:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009de2:	6013      	str	r3, [r2, #0]
 8009de4:	2301      	movs	r3, #1
 8009de6:	6123      	str	r3, [r4, #16]
 8009de8:	f8ca 3000 	str.w	r3, [sl]
 8009dec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dee:	601c      	str	r4, [r3, #0]
 8009df0:	e734      	b.n	8009c5c <__gethex+0x114>
 8009df2:	4620      	mov	r0, r4
 8009df4:	1e69      	subs	r1, r5, #1
 8009df6:	f000 feda 	bl	800abae <__any_on>
 8009dfa:	2800      	cmp	r0, #0
 8009dfc:	d1ed      	bne.n	8009dda <__gethex+0x292>
 8009dfe:	4621      	mov	r1, r4
 8009e00:	4648      	mov	r0, r9
 8009e02:	f000 fa99 	bl	800a338 <_Bfree>
 8009e06:	2300      	movs	r3, #0
 8009e08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e0a:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009e0e:	6013      	str	r3, [r2, #0]
 8009e10:	e724      	b.n	8009c5c <__gethex+0x114>
 8009e12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d1f2      	bne.n	8009dfe <__gethex+0x2b6>
 8009e18:	e7df      	b.n	8009dda <__gethex+0x292>
 8009e1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d1dc      	bne.n	8009dda <__gethex+0x292>
 8009e20:	e7ed      	b.n	8009dfe <__gethex+0x2b6>
 8009e22:	bf00      	nop
 8009e24:	0800e3c2 	.word	0x0800e3c2
 8009e28:	0800e5d1 	.word	0x0800e5d1
 8009e2c:	0800e5e2 	.word	0x0800e5e2
 8009e30:	f106 38ff 	add.w	r8, r6, #4294967295
 8009e34:	f1bb 0f00 	cmp.w	fp, #0
 8009e38:	d133      	bne.n	8009ea2 <__gethex+0x35a>
 8009e3a:	f1b8 0f00 	cmp.w	r8, #0
 8009e3e:	d004      	beq.n	8009e4a <__gethex+0x302>
 8009e40:	4641      	mov	r1, r8
 8009e42:	4620      	mov	r0, r4
 8009e44:	f000 feb3 	bl	800abae <__any_on>
 8009e48:	4683      	mov	fp, r0
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009e50:	f008 081f 	and.w	r8, r8, #31
 8009e54:	fa03 f308 	lsl.w	r3, r3, r8
 8009e58:	f04f 0802 	mov.w	r8, #2
 8009e5c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009e60:	4631      	mov	r1, r6
 8009e62:	4213      	tst	r3, r2
 8009e64:	4620      	mov	r0, r4
 8009e66:	bf18      	it	ne
 8009e68:	f04b 0b02 	orrne.w	fp, fp, #2
 8009e6c:	1bad      	subs	r5, r5, r6
 8009e6e:	f7ff fe03 	bl	8009a78 <rshift>
 8009e72:	687e      	ldr	r6, [r7, #4]
 8009e74:	f1bb 0f00 	cmp.w	fp, #0
 8009e78:	d04a      	beq.n	8009f10 <__gethex+0x3c8>
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2b02      	cmp	r3, #2
 8009e7e:	d016      	beq.n	8009eae <__gethex+0x366>
 8009e80:	2b03      	cmp	r3, #3
 8009e82:	d018      	beq.n	8009eb6 <__gethex+0x36e>
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d109      	bne.n	8009e9c <__gethex+0x354>
 8009e88:	f01b 0f02 	tst.w	fp, #2
 8009e8c:	d006      	beq.n	8009e9c <__gethex+0x354>
 8009e8e:	f8da 3000 	ldr.w	r3, [sl]
 8009e92:	ea4b 0b03 	orr.w	fp, fp, r3
 8009e96:	f01b 0f01 	tst.w	fp, #1
 8009e9a:	d10f      	bne.n	8009ebc <__gethex+0x374>
 8009e9c:	f048 0810 	orr.w	r8, r8, #16
 8009ea0:	e036      	b.n	8009f10 <__gethex+0x3c8>
 8009ea2:	f04f 0b01 	mov.w	fp, #1
 8009ea6:	e7d0      	b.n	8009e4a <__gethex+0x302>
 8009ea8:	f04f 0801 	mov.w	r8, #1
 8009eac:	e7e2      	b.n	8009e74 <__gethex+0x32c>
 8009eae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009eb0:	f1c3 0301 	rsb	r3, r3, #1
 8009eb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8009eb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d0ef      	beq.n	8009e9c <__gethex+0x354>
 8009ebc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009ec0:	f104 0214 	add.w	r2, r4, #20
 8009ec4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009ec8:	9301      	str	r3, [sp, #4]
 8009eca:	2300      	movs	r3, #0
 8009ecc:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009ed0:	4694      	mov	ip, r2
 8009ed2:	f852 1b04 	ldr.w	r1, [r2], #4
 8009ed6:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009eda:	d01e      	beq.n	8009f1a <__gethex+0x3d2>
 8009edc:	3101      	adds	r1, #1
 8009ede:	f8cc 1000 	str.w	r1, [ip]
 8009ee2:	f1b8 0f02 	cmp.w	r8, #2
 8009ee6:	f104 0214 	add.w	r2, r4, #20
 8009eea:	d13d      	bne.n	8009f68 <__gethex+0x420>
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	3b01      	subs	r3, #1
 8009ef0:	42ab      	cmp	r3, r5
 8009ef2:	d10b      	bne.n	8009f0c <__gethex+0x3c4>
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	1169      	asrs	r1, r5, #5
 8009ef8:	f005 051f 	and.w	r5, r5, #31
 8009efc:	fa03 f505 	lsl.w	r5, r3, r5
 8009f00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f04:	421d      	tst	r5, r3
 8009f06:	bf18      	it	ne
 8009f08:	f04f 0801 	movne.w	r8, #1
 8009f0c:	f048 0820 	orr.w	r8, r8, #32
 8009f10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f12:	601c      	str	r4, [r3, #0]
 8009f14:	9b02      	ldr	r3, [sp, #8]
 8009f16:	601e      	str	r6, [r3, #0]
 8009f18:	e6a0      	b.n	8009c5c <__gethex+0x114>
 8009f1a:	4290      	cmp	r0, r2
 8009f1c:	f842 3c04 	str.w	r3, [r2, #-4]
 8009f20:	d8d6      	bhi.n	8009ed0 <__gethex+0x388>
 8009f22:	68a2      	ldr	r2, [r4, #8]
 8009f24:	4593      	cmp	fp, r2
 8009f26:	db17      	blt.n	8009f58 <__gethex+0x410>
 8009f28:	6861      	ldr	r1, [r4, #4]
 8009f2a:	4648      	mov	r0, r9
 8009f2c:	3101      	adds	r1, #1
 8009f2e:	f000 f9c3 	bl	800a2b8 <_Balloc>
 8009f32:	4682      	mov	sl, r0
 8009f34:	b918      	cbnz	r0, 8009f3e <__gethex+0x3f6>
 8009f36:	4602      	mov	r2, r0
 8009f38:	2184      	movs	r1, #132	; 0x84
 8009f3a:	4b1a      	ldr	r3, [pc, #104]	; (8009fa4 <__gethex+0x45c>)
 8009f3c:	e6b1      	b.n	8009ca2 <__gethex+0x15a>
 8009f3e:	6922      	ldr	r2, [r4, #16]
 8009f40:	f104 010c 	add.w	r1, r4, #12
 8009f44:	3202      	adds	r2, #2
 8009f46:	0092      	lsls	r2, r2, #2
 8009f48:	300c      	adds	r0, #12
 8009f4a:	f7fe fec8 	bl	8008cde <memcpy>
 8009f4e:	4621      	mov	r1, r4
 8009f50:	4648      	mov	r0, r9
 8009f52:	f000 f9f1 	bl	800a338 <_Bfree>
 8009f56:	4654      	mov	r4, sl
 8009f58:	6922      	ldr	r2, [r4, #16]
 8009f5a:	1c51      	adds	r1, r2, #1
 8009f5c:	6121      	str	r1, [r4, #16]
 8009f5e:	2101      	movs	r1, #1
 8009f60:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009f64:	6151      	str	r1, [r2, #20]
 8009f66:	e7bc      	b.n	8009ee2 <__gethex+0x39a>
 8009f68:	6921      	ldr	r1, [r4, #16]
 8009f6a:	4559      	cmp	r1, fp
 8009f6c:	dd0b      	ble.n	8009f86 <__gethex+0x43e>
 8009f6e:	2101      	movs	r1, #1
 8009f70:	4620      	mov	r0, r4
 8009f72:	f7ff fd81 	bl	8009a78 <rshift>
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	3601      	adds	r6, #1
 8009f7a:	42b3      	cmp	r3, r6
 8009f7c:	f6ff aeda 	blt.w	8009d34 <__gethex+0x1ec>
 8009f80:	f04f 0801 	mov.w	r8, #1
 8009f84:	e7c2      	b.n	8009f0c <__gethex+0x3c4>
 8009f86:	f015 051f 	ands.w	r5, r5, #31
 8009f8a:	d0f9      	beq.n	8009f80 <__gethex+0x438>
 8009f8c:	9b01      	ldr	r3, [sp, #4]
 8009f8e:	f1c5 0520 	rsb	r5, r5, #32
 8009f92:	441a      	add	r2, r3
 8009f94:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009f98:	f000 fa80 	bl	800a49c <__hi0bits>
 8009f9c:	42a8      	cmp	r0, r5
 8009f9e:	dbe6      	blt.n	8009f6e <__gethex+0x426>
 8009fa0:	e7ee      	b.n	8009f80 <__gethex+0x438>
 8009fa2:	bf00      	nop
 8009fa4:	0800e5d1 	.word	0x0800e5d1

08009fa8 <L_shift>:
 8009fa8:	f1c2 0208 	rsb	r2, r2, #8
 8009fac:	0092      	lsls	r2, r2, #2
 8009fae:	b570      	push	{r4, r5, r6, lr}
 8009fb0:	f1c2 0620 	rsb	r6, r2, #32
 8009fb4:	6843      	ldr	r3, [r0, #4]
 8009fb6:	6804      	ldr	r4, [r0, #0]
 8009fb8:	fa03 f506 	lsl.w	r5, r3, r6
 8009fbc:	432c      	orrs	r4, r5
 8009fbe:	40d3      	lsrs	r3, r2
 8009fc0:	6004      	str	r4, [r0, #0]
 8009fc2:	f840 3f04 	str.w	r3, [r0, #4]!
 8009fc6:	4288      	cmp	r0, r1
 8009fc8:	d3f4      	bcc.n	8009fb4 <L_shift+0xc>
 8009fca:	bd70      	pop	{r4, r5, r6, pc}

08009fcc <__match>:
 8009fcc:	b530      	push	{r4, r5, lr}
 8009fce:	6803      	ldr	r3, [r0, #0]
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fd6:	b914      	cbnz	r4, 8009fde <__match+0x12>
 8009fd8:	6003      	str	r3, [r0, #0]
 8009fda:	2001      	movs	r0, #1
 8009fdc:	bd30      	pop	{r4, r5, pc}
 8009fde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fe2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009fe6:	2d19      	cmp	r5, #25
 8009fe8:	bf98      	it	ls
 8009fea:	3220      	addls	r2, #32
 8009fec:	42a2      	cmp	r2, r4
 8009fee:	d0f0      	beq.n	8009fd2 <__match+0x6>
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	e7f3      	b.n	8009fdc <__match+0x10>

08009ff4 <__hexnan>:
 8009ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff8:	2500      	movs	r5, #0
 8009ffa:	680b      	ldr	r3, [r1, #0]
 8009ffc:	4682      	mov	sl, r0
 8009ffe:	115e      	asrs	r6, r3, #5
 800a000:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a004:	f013 031f 	ands.w	r3, r3, #31
 800a008:	bf18      	it	ne
 800a00a:	3604      	addne	r6, #4
 800a00c:	1f37      	subs	r7, r6, #4
 800a00e:	4690      	mov	r8, r2
 800a010:	46b9      	mov	r9, r7
 800a012:	463c      	mov	r4, r7
 800a014:	46ab      	mov	fp, r5
 800a016:	b087      	sub	sp, #28
 800a018:	6801      	ldr	r1, [r0, #0]
 800a01a:	9301      	str	r3, [sp, #4]
 800a01c:	f846 5c04 	str.w	r5, [r6, #-4]
 800a020:	9502      	str	r5, [sp, #8]
 800a022:	784a      	ldrb	r2, [r1, #1]
 800a024:	1c4b      	adds	r3, r1, #1
 800a026:	9303      	str	r3, [sp, #12]
 800a028:	b342      	cbz	r2, 800a07c <__hexnan+0x88>
 800a02a:	4610      	mov	r0, r2
 800a02c:	9105      	str	r1, [sp, #20]
 800a02e:	9204      	str	r2, [sp, #16]
 800a030:	f7ff fd75 	bl	8009b1e <__hexdig_fun>
 800a034:	2800      	cmp	r0, #0
 800a036:	d14f      	bne.n	800a0d8 <__hexnan+0xe4>
 800a038:	9a04      	ldr	r2, [sp, #16]
 800a03a:	9905      	ldr	r1, [sp, #20]
 800a03c:	2a20      	cmp	r2, #32
 800a03e:	d818      	bhi.n	800a072 <__hexnan+0x7e>
 800a040:	9b02      	ldr	r3, [sp, #8]
 800a042:	459b      	cmp	fp, r3
 800a044:	dd13      	ble.n	800a06e <__hexnan+0x7a>
 800a046:	454c      	cmp	r4, r9
 800a048:	d206      	bcs.n	800a058 <__hexnan+0x64>
 800a04a:	2d07      	cmp	r5, #7
 800a04c:	dc04      	bgt.n	800a058 <__hexnan+0x64>
 800a04e:	462a      	mov	r2, r5
 800a050:	4649      	mov	r1, r9
 800a052:	4620      	mov	r0, r4
 800a054:	f7ff ffa8 	bl	8009fa8 <L_shift>
 800a058:	4544      	cmp	r4, r8
 800a05a:	d950      	bls.n	800a0fe <__hexnan+0x10a>
 800a05c:	2300      	movs	r3, #0
 800a05e:	f1a4 0904 	sub.w	r9, r4, #4
 800a062:	f844 3c04 	str.w	r3, [r4, #-4]
 800a066:	461d      	mov	r5, r3
 800a068:	464c      	mov	r4, r9
 800a06a:	f8cd b008 	str.w	fp, [sp, #8]
 800a06e:	9903      	ldr	r1, [sp, #12]
 800a070:	e7d7      	b.n	800a022 <__hexnan+0x2e>
 800a072:	2a29      	cmp	r2, #41	; 0x29
 800a074:	d155      	bne.n	800a122 <__hexnan+0x12e>
 800a076:	3102      	adds	r1, #2
 800a078:	f8ca 1000 	str.w	r1, [sl]
 800a07c:	f1bb 0f00 	cmp.w	fp, #0
 800a080:	d04f      	beq.n	800a122 <__hexnan+0x12e>
 800a082:	454c      	cmp	r4, r9
 800a084:	d206      	bcs.n	800a094 <__hexnan+0xa0>
 800a086:	2d07      	cmp	r5, #7
 800a088:	dc04      	bgt.n	800a094 <__hexnan+0xa0>
 800a08a:	462a      	mov	r2, r5
 800a08c:	4649      	mov	r1, r9
 800a08e:	4620      	mov	r0, r4
 800a090:	f7ff ff8a 	bl	8009fa8 <L_shift>
 800a094:	4544      	cmp	r4, r8
 800a096:	d934      	bls.n	800a102 <__hexnan+0x10e>
 800a098:	4623      	mov	r3, r4
 800a09a:	f1a8 0204 	sub.w	r2, r8, #4
 800a09e:	f853 1b04 	ldr.w	r1, [r3], #4
 800a0a2:	429f      	cmp	r7, r3
 800a0a4:	f842 1f04 	str.w	r1, [r2, #4]!
 800a0a8:	d2f9      	bcs.n	800a09e <__hexnan+0xaa>
 800a0aa:	1b3b      	subs	r3, r7, r4
 800a0ac:	f023 0303 	bic.w	r3, r3, #3
 800a0b0:	3304      	adds	r3, #4
 800a0b2:	3e03      	subs	r6, #3
 800a0b4:	3401      	adds	r4, #1
 800a0b6:	42a6      	cmp	r6, r4
 800a0b8:	bf38      	it	cc
 800a0ba:	2304      	movcc	r3, #4
 800a0bc:	2200      	movs	r2, #0
 800a0be:	4443      	add	r3, r8
 800a0c0:	f843 2b04 	str.w	r2, [r3], #4
 800a0c4:	429f      	cmp	r7, r3
 800a0c6:	d2fb      	bcs.n	800a0c0 <__hexnan+0xcc>
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	b91b      	cbnz	r3, 800a0d4 <__hexnan+0xe0>
 800a0cc:	4547      	cmp	r7, r8
 800a0ce:	d126      	bne.n	800a11e <__hexnan+0x12a>
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	603b      	str	r3, [r7, #0]
 800a0d4:	2005      	movs	r0, #5
 800a0d6:	e025      	b.n	800a124 <__hexnan+0x130>
 800a0d8:	3501      	adds	r5, #1
 800a0da:	2d08      	cmp	r5, #8
 800a0dc:	f10b 0b01 	add.w	fp, fp, #1
 800a0e0:	dd06      	ble.n	800a0f0 <__hexnan+0xfc>
 800a0e2:	4544      	cmp	r4, r8
 800a0e4:	d9c3      	bls.n	800a06e <__hexnan+0x7a>
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	2501      	movs	r5, #1
 800a0ea:	f844 3c04 	str.w	r3, [r4, #-4]
 800a0ee:	3c04      	subs	r4, #4
 800a0f0:	6822      	ldr	r2, [r4, #0]
 800a0f2:	f000 000f 	and.w	r0, r0, #15
 800a0f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a0fa:	6020      	str	r0, [r4, #0]
 800a0fc:	e7b7      	b.n	800a06e <__hexnan+0x7a>
 800a0fe:	2508      	movs	r5, #8
 800a100:	e7b5      	b.n	800a06e <__hexnan+0x7a>
 800a102:	9b01      	ldr	r3, [sp, #4]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d0df      	beq.n	800a0c8 <__hexnan+0xd4>
 800a108:	f04f 32ff 	mov.w	r2, #4294967295
 800a10c:	f1c3 0320 	rsb	r3, r3, #32
 800a110:	40da      	lsrs	r2, r3
 800a112:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a116:	4013      	ands	r3, r2
 800a118:	f846 3c04 	str.w	r3, [r6, #-4]
 800a11c:	e7d4      	b.n	800a0c8 <__hexnan+0xd4>
 800a11e:	3f04      	subs	r7, #4
 800a120:	e7d2      	b.n	800a0c8 <__hexnan+0xd4>
 800a122:	2004      	movs	r0, #4
 800a124:	b007      	add	sp, #28
 800a126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800a12c <malloc>:
 800a12c:	4b02      	ldr	r3, [pc, #8]	; (800a138 <malloc+0xc>)
 800a12e:	4601      	mov	r1, r0
 800a130:	6818      	ldr	r0, [r3, #0]
 800a132:	f000 b823 	b.w	800a17c <_malloc_r>
 800a136:	bf00      	nop
 800a138:	200001e4 	.word	0x200001e4

0800a13c <sbrk_aligned>:
 800a13c:	b570      	push	{r4, r5, r6, lr}
 800a13e:	4e0e      	ldr	r6, [pc, #56]	; (800a178 <sbrk_aligned+0x3c>)
 800a140:	460c      	mov	r4, r1
 800a142:	6831      	ldr	r1, [r6, #0]
 800a144:	4605      	mov	r5, r0
 800a146:	b911      	cbnz	r1, 800a14e <sbrk_aligned+0x12>
 800a148:	f000 ff7c 	bl	800b044 <_sbrk_r>
 800a14c:	6030      	str	r0, [r6, #0]
 800a14e:	4621      	mov	r1, r4
 800a150:	4628      	mov	r0, r5
 800a152:	f000 ff77 	bl	800b044 <_sbrk_r>
 800a156:	1c43      	adds	r3, r0, #1
 800a158:	d00a      	beq.n	800a170 <sbrk_aligned+0x34>
 800a15a:	1cc4      	adds	r4, r0, #3
 800a15c:	f024 0403 	bic.w	r4, r4, #3
 800a160:	42a0      	cmp	r0, r4
 800a162:	d007      	beq.n	800a174 <sbrk_aligned+0x38>
 800a164:	1a21      	subs	r1, r4, r0
 800a166:	4628      	mov	r0, r5
 800a168:	f000 ff6c 	bl	800b044 <_sbrk_r>
 800a16c:	3001      	adds	r0, #1
 800a16e:	d101      	bne.n	800a174 <sbrk_aligned+0x38>
 800a170:	f04f 34ff 	mov.w	r4, #4294967295
 800a174:	4620      	mov	r0, r4
 800a176:	bd70      	pop	{r4, r5, r6, pc}
 800a178:	20000be4 	.word	0x20000be4

0800a17c <_malloc_r>:
 800a17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a180:	1ccd      	adds	r5, r1, #3
 800a182:	f025 0503 	bic.w	r5, r5, #3
 800a186:	3508      	adds	r5, #8
 800a188:	2d0c      	cmp	r5, #12
 800a18a:	bf38      	it	cc
 800a18c:	250c      	movcc	r5, #12
 800a18e:	2d00      	cmp	r5, #0
 800a190:	4607      	mov	r7, r0
 800a192:	db01      	blt.n	800a198 <_malloc_r+0x1c>
 800a194:	42a9      	cmp	r1, r5
 800a196:	d905      	bls.n	800a1a4 <_malloc_r+0x28>
 800a198:	230c      	movs	r3, #12
 800a19a:	2600      	movs	r6, #0
 800a19c:	603b      	str	r3, [r7, #0]
 800a19e:	4630      	mov	r0, r6
 800a1a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a278 <_malloc_r+0xfc>
 800a1a8:	f000 f87a 	bl	800a2a0 <__malloc_lock>
 800a1ac:	f8d8 3000 	ldr.w	r3, [r8]
 800a1b0:	461c      	mov	r4, r3
 800a1b2:	bb5c      	cbnz	r4, 800a20c <_malloc_r+0x90>
 800a1b4:	4629      	mov	r1, r5
 800a1b6:	4638      	mov	r0, r7
 800a1b8:	f7ff ffc0 	bl	800a13c <sbrk_aligned>
 800a1bc:	1c43      	adds	r3, r0, #1
 800a1be:	4604      	mov	r4, r0
 800a1c0:	d155      	bne.n	800a26e <_malloc_r+0xf2>
 800a1c2:	f8d8 4000 	ldr.w	r4, [r8]
 800a1c6:	4626      	mov	r6, r4
 800a1c8:	2e00      	cmp	r6, #0
 800a1ca:	d145      	bne.n	800a258 <_malloc_r+0xdc>
 800a1cc:	2c00      	cmp	r4, #0
 800a1ce:	d048      	beq.n	800a262 <_malloc_r+0xe6>
 800a1d0:	6823      	ldr	r3, [r4, #0]
 800a1d2:	4631      	mov	r1, r6
 800a1d4:	4638      	mov	r0, r7
 800a1d6:	eb04 0903 	add.w	r9, r4, r3
 800a1da:	f000 ff33 	bl	800b044 <_sbrk_r>
 800a1de:	4581      	cmp	r9, r0
 800a1e0:	d13f      	bne.n	800a262 <_malloc_r+0xe6>
 800a1e2:	6821      	ldr	r1, [r4, #0]
 800a1e4:	4638      	mov	r0, r7
 800a1e6:	1a6d      	subs	r5, r5, r1
 800a1e8:	4629      	mov	r1, r5
 800a1ea:	f7ff ffa7 	bl	800a13c <sbrk_aligned>
 800a1ee:	3001      	adds	r0, #1
 800a1f0:	d037      	beq.n	800a262 <_malloc_r+0xe6>
 800a1f2:	6823      	ldr	r3, [r4, #0]
 800a1f4:	442b      	add	r3, r5
 800a1f6:	6023      	str	r3, [r4, #0]
 800a1f8:	f8d8 3000 	ldr.w	r3, [r8]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d038      	beq.n	800a272 <_malloc_r+0xf6>
 800a200:	685a      	ldr	r2, [r3, #4]
 800a202:	42a2      	cmp	r2, r4
 800a204:	d12b      	bne.n	800a25e <_malloc_r+0xe2>
 800a206:	2200      	movs	r2, #0
 800a208:	605a      	str	r2, [r3, #4]
 800a20a:	e00f      	b.n	800a22c <_malloc_r+0xb0>
 800a20c:	6822      	ldr	r2, [r4, #0]
 800a20e:	1b52      	subs	r2, r2, r5
 800a210:	d41f      	bmi.n	800a252 <_malloc_r+0xd6>
 800a212:	2a0b      	cmp	r2, #11
 800a214:	d917      	bls.n	800a246 <_malloc_r+0xca>
 800a216:	1961      	adds	r1, r4, r5
 800a218:	42a3      	cmp	r3, r4
 800a21a:	6025      	str	r5, [r4, #0]
 800a21c:	bf18      	it	ne
 800a21e:	6059      	strne	r1, [r3, #4]
 800a220:	6863      	ldr	r3, [r4, #4]
 800a222:	bf08      	it	eq
 800a224:	f8c8 1000 	streq.w	r1, [r8]
 800a228:	5162      	str	r2, [r4, r5]
 800a22a:	604b      	str	r3, [r1, #4]
 800a22c:	4638      	mov	r0, r7
 800a22e:	f104 060b 	add.w	r6, r4, #11
 800a232:	f000 f83b 	bl	800a2ac <__malloc_unlock>
 800a236:	f026 0607 	bic.w	r6, r6, #7
 800a23a:	1d23      	adds	r3, r4, #4
 800a23c:	1af2      	subs	r2, r6, r3
 800a23e:	d0ae      	beq.n	800a19e <_malloc_r+0x22>
 800a240:	1b9b      	subs	r3, r3, r6
 800a242:	50a3      	str	r3, [r4, r2]
 800a244:	e7ab      	b.n	800a19e <_malloc_r+0x22>
 800a246:	42a3      	cmp	r3, r4
 800a248:	6862      	ldr	r2, [r4, #4]
 800a24a:	d1dd      	bne.n	800a208 <_malloc_r+0x8c>
 800a24c:	f8c8 2000 	str.w	r2, [r8]
 800a250:	e7ec      	b.n	800a22c <_malloc_r+0xb0>
 800a252:	4623      	mov	r3, r4
 800a254:	6864      	ldr	r4, [r4, #4]
 800a256:	e7ac      	b.n	800a1b2 <_malloc_r+0x36>
 800a258:	4634      	mov	r4, r6
 800a25a:	6876      	ldr	r6, [r6, #4]
 800a25c:	e7b4      	b.n	800a1c8 <_malloc_r+0x4c>
 800a25e:	4613      	mov	r3, r2
 800a260:	e7cc      	b.n	800a1fc <_malloc_r+0x80>
 800a262:	230c      	movs	r3, #12
 800a264:	4638      	mov	r0, r7
 800a266:	603b      	str	r3, [r7, #0]
 800a268:	f000 f820 	bl	800a2ac <__malloc_unlock>
 800a26c:	e797      	b.n	800a19e <_malloc_r+0x22>
 800a26e:	6025      	str	r5, [r4, #0]
 800a270:	e7dc      	b.n	800a22c <_malloc_r+0xb0>
 800a272:	605b      	str	r3, [r3, #4]
 800a274:	deff      	udf	#255	; 0xff
 800a276:	bf00      	nop
 800a278:	20000be0 	.word	0x20000be0

0800a27c <__ascii_mbtowc>:
 800a27c:	b082      	sub	sp, #8
 800a27e:	b901      	cbnz	r1, 800a282 <__ascii_mbtowc+0x6>
 800a280:	a901      	add	r1, sp, #4
 800a282:	b142      	cbz	r2, 800a296 <__ascii_mbtowc+0x1a>
 800a284:	b14b      	cbz	r3, 800a29a <__ascii_mbtowc+0x1e>
 800a286:	7813      	ldrb	r3, [r2, #0]
 800a288:	600b      	str	r3, [r1, #0]
 800a28a:	7812      	ldrb	r2, [r2, #0]
 800a28c:	1e10      	subs	r0, r2, #0
 800a28e:	bf18      	it	ne
 800a290:	2001      	movne	r0, #1
 800a292:	b002      	add	sp, #8
 800a294:	4770      	bx	lr
 800a296:	4610      	mov	r0, r2
 800a298:	e7fb      	b.n	800a292 <__ascii_mbtowc+0x16>
 800a29a:	f06f 0001 	mvn.w	r0, #1
 800a29e:	e7f8      	b.n	800a292 <__ascii_mbtowc+0x16>

0800a2a0 <__malloc_lock>:
 800a2a0:	4801      	ldr	r0, [pc, #4]	; (800a2a8 <__malloc_lock+0x8>)
 800a2a2:	f7fe bd0c 	b.w	8008cbe <__retarget_lock_acquire_recursive>
 800a2a6:	bf00      	nop
 800a2a8:	20000bdc 	.word	0x20000bdc

0800a2ac <__malloc_unlock>:
 800a2ac:	4801      	ldr	r0, [pc, #4]	; (800a2b4 <__malloc_unlock+0x8>)
 800a2ae:	f7fe bd07 	b.w	8008cc0 <__retarget_lock_release_recursive>
 800a2b2:	bf00      	nop
 800a2b4:	20000bdc 	.word	0x20000bdc

0800a2b8 <_Balloc>:
 800a2b8:	b570      	push	{r4, r5, r6, lr}
 800a2ba:	69c6      	ldr	r6, [r0, #28]
 800a2bc:	4604      	mov	r4, r0
 800a2be:	460d      	mov	r5, r1
 800a2c0:	b976      	cbnz	r6, 800a2e0 <_Balloc+0x28>
 800a2c2:	2010      	movs	r0, #16
 800a2c4:	f7ff ff32 	bl	800a12c <malloc>
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	61e0      	str	r0, [r4, #28]
 800a2cc:	b920      	cbnz	r0, 800a2d8 <_Balloc+0x20>
 800a2ce:	216b      	movs	r1, #107	; 0x6b
 800a2d0:	4b17      	ldr	r3, [pc, #92]	; (800a330 <_Balloc+0x78>)
 800a2d2:	4818      	ldr	r0, [pc, #96]	; (800a334 <_Balloc+0x7c>)
 800a2d4:	f000 fec6 	bl	800b064 <__assert_func>
 800a2d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2dc:	6006      	str	r6, [r0, #0]
 800a2de:	60c6      	str	r6, [r0, #12]
 800a2e0:	69e6      	ldr	r6, [r4, #28]
 800a2e2:	68f3      	ldr	r3, [r6, #12]
 800a2e4:	b183      	cbz	r3, 800a308 <_Balloc+0x50>
 800a2e6:	69e3      	ldr	r3, [r4, #28]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a2ee:	b9b8      	cbnz	r0, 800a320 <_Balloc+0x68>
 800a2f0:	2101      	movs	r1, #1
 800a2f2:	fa01 f605 	lsl.w	r6, r1, r5
 800a2f6:	1d72      	adds	r2, r6, #5
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	0092      	lsls	r2, r2, #2
 800a2fc:	f000 fed0 	bl	800b0a0 <_calloc_r>
 800a300:	b160      	cbz	r0, 800a31c <_Balloc+0x64>
 800a302:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a306:	e00e      	b.n	800a326 <_Balloc+0x6e>
 800a308:	2221      	movs	r2, #33	; 0x21
 800a30a:	2104      	movs	r1, #4
 800a30c:	4620      	mov	r0, r4
 800a30e:	f000 fec7 	bl	800b0a0 <_calloc_r>
 800a312:	69e3      	ldr	r3, [r4, #28]
 800a314:	60f0      	str	r0, [r6, #12]
 800a316:	68db      	ldr	r3, [r3, #12]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d1e4      	bne.n	800a2e6 <_Balloc+0x2e>
 800a31c:	2000      	movs	r0, #0
 800a31e:	bd70      	pop	{r4, r5, r6, pc}
 800a320:	6802      	ldr	r2, [r0, #0]
 800a322:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a326:	2300      	movs	r3, #0
 800a328:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a32c:	e7f7      	b.n	800a31e <_Balloc+0x66>
 800a32e:	bf00      	nop
 800a330:	0800e562 	.word	0x0800e562
 800a334:	0800e642 	.word	0x0800e642

0800a338 <_Bfree>:
 800a338:	b570      	push	{r4, r5, r6, lr}
 800a33a:	69c6      	ldr	r6, [r0, #28]
 800a33c:	4605      	mov	r5, r0
 800a33e:	460c      	mov	r4, r1
 800a340:	b976      	cbnz	r6, 800a360 <_Bfree+0x28>
 800a342:	2010      	movs	r0, #16
 800a344:	f7ff fef2 	bl	800a12c <malloc>
 800a348:	4602      	mov	r2, r0
 800a34a:	61e8      	str	r0, [r5, #28]
 800a34c:	b920      	cbnz	r0, 800a358 <_Bfree+0x20>
 800a34e:	218f      	movs	r1, #143	; 0x8f
 800a350:	4b08      	ldr	r3, [pc, #32]	; (800a374 <_Bfree+0x3c>)
 800a352:	4809      	ldr	r0, [pc, #36]	; (800a378 <_Bfree+0x40>)
 800a354:	f000 fe86 	bl	800b064 <__assert_func>
 800a358:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a35c:	6006      	str	r6, [r0, #0]
 800a35e:	60c6      	str	r6, [r0, #12]
 800a360:	b13c      	cbz	r4, 800a372 <_Bfree+0x3a>
 800a362:	69eb      	ldr	r3, [r5, #28]
 800a364:	6862      	ldr	r2, [r4, #4]
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a36c:	6021      	str	r1, [r4, #0]
 800a36e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a372:	bd70      	pop	{r4, r5, r6, pc}
 800a374:	0800e562 	.word	0x0800e562
 800a378:	0800e642 	.word	0x0800e642

0800a37c <__multadd>:
 800a37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a380:	4607      	mov	r7, r0
 800a382:	460c      	mov	r4, r1
 800a384:	461e      	mov	r6, r3
 800a386:	2000      	movs	r0, #0
 800a388:	690d      	ldr	r5, [r1, #16]
 800a38a:	f101 0c14 	add.w	ip, r1, #20
 800a38e:	f8dc 3000 	ldr.w	r3, [ip]
 800a392:	3001      	adds	r0, #1
 800a394:	b299      	uxth	r1, r3
 800a396:	fb02 6101 	mla	r1, r2, r1, r6
 800a39a:	0c1e      	lsrs	r6, r3, #16
 800a39c:	0c0b      	lsrs	r3, r1, #16
 800a39e:	fb02 3306 	mla	r3, r2, r6, r3
 800a3a2:	b289      	uxth	r1, r1
 800a3a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a3a8:	4285      	cmp	r5, r0
 800a3aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a3ae:	f84c 1b04 	str.w	r1, [ip], #4
 800a3b2:	dcec      	bgt.n	800a38e <__multadd+0x12>
 800a3b4:	b30e      	cbz	r6, 800a3fa <__multadd+0x7e>
 800a3b6:	68a3      	ldr	r3, [r4, #8]
 800a3b8:	42ab      	cmp	r3, r5
 800a3ba:	dc19      	bgt.n	800a3f0 <__multadd+0x74>
 800a3bc:	6861      	ldr	r1, [r4, #4]
 800a3be:	4638      	mov	r0, r7
 800a3c0:	3101      	adds	r1, #1
 800a3c2:	f7ff ff79 	bl	800a2b8 <_Balloc>
 800a3c6:	4680      	mov	r8, r0
 800a3c8:	b928      	cbnz	r0, 800a3d6 <__multadd+0x5a>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	21ba      	movs	r1, #186	; 0xba
 800a3ce:	4b0c      	ldr	r3, [pc, #48]	; (800a400 <__multadd+0x84>)
 800a3d0:	480c      	ldr	r0, [pc, #48]	; (800a404 <__multadd+0x88>)
 800a3d2:	f000 fe47 	bl	800b064 <__assert_func>
 800a3d6:	6922      	ldr	r2, [r4, #16]
 800a3d8:	f104 010c 	add.w	r1, r4, #12
 800a3dc:	3202      	adds	r2, #2
 800a3de:	0092      	lsls	r2, r2, #2
 800a3e0:	300c      	adds	r0, #12
 800a3e2:	f7fe fc7c 	bl	8008cde <memcpy>
 800a3e6:	4621      	mov	r1, r4
 800a3e8:	4638      	mov	r0, r7
 800a3ea:	f7ff ffa5 	bl	800a338 <_Bfree>
 800a3ee:	4644      	mov	r4, r8
 800a3f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a3f4:	3501      	adds	r5, #1
 800a3f6:	615e      	str	r6, [r3, #20]
 800a3f8:	6125      	str	r5, [r4, #16]
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a400:	0800e5d1 	.word	0x0800e5d1
 800a404:	0800e642 	.word	0x0800e642

0800a408 <__s2b>:
 800a408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a40c:	4615      	mov	r5, r2
 800a40e:	2209      	movs	r2, #9
 800a410:	461f      	mov	r7, r3
 800a412:	3308      	adds	r3, #8
 800a414:	460c      	mov	r4, r1
 800a416:	fb93 f3f2 	sdiv	r3, r3, r2
 800a41a:	4606      	mov	r6, r0
 800a41c:	2201      	movs	r2, #1
 800a41e:	2100      	movs	r1, #0
 800a420:	429a      	cmp	r2, r3
 800a422:	db09      	blt.n	800a438 <__s2b+0x30>
 800a424:	4630      	mov	r0, r6
 800a426:	f7ff ff47 	bl	800a2b8 <_Balloc>
 800a42a:	b940      	cbnz	r0, 800a43e <__s2b+0x36>
 800a42c:	4602      	mov	r2, r0
 800a42e:	21d3      	movs	r1, #211	; 0xd3
 800a430:	4b18      	ldr	r3, [pc, #96]	; (800a494 <__s2b+0x8c>)
 800a432:	4819      	ldr	r0, [pc, #100]	; (800a498 <__s2b+0x90>)
 800a434:	f000 fe16 	bl	800b064 <__assert_func>
 800a438:	0052      	lsls	r2, r2, #1
 800a43a:	3101      	adds	r1, #1
 800a43c:	e7f0      	b.n	800a420 <__s2b+0x18>
 800a43e:	9b08      	ldr	r3, [sp, #32]
 800a440:	2d09      	cmp	r5, #9
 800a442:	6143      	str	r3, [r0, #20]
 800a444:	f04f 0301 	mov.w	r3, #1
 800a448:	6103      	str	r3, [r0, #16]
 800a44a:	dd16      	ble.n	800a47a <__s2b+0x72>
 800a44c:	f104 0909 	add.w	r9, r4, #9
 800a450:	46c8      	mov	r8, r9
 800a452:	442c      	add	r4, r5
 800a454:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a458:	4601      	mov	r1, r0
 800a45a:	220a      	movs	r2, #10
 800a45c:	4630      	mov	r0, r6
 800a45e:	3b30      	subs	r3, #48	; 0x30
 800a460:	f7ff ff8c 	bl	800a37c <__multadd>
 800a464:	45a0      	cmp	r8, r4
 800a466:	d1f5      	bne.n	800a454 <__s2b+0x4c>
 800a468:	f1a5 0408 	sub.w	r4, r5, #8
 800a46c:	444c      	add	r4, r9
 800a46e:	1b2d      	subs	r5, r5, r4
 800a470:	1963      	adds	r3, r4, r5
 800a472:	42bb      	cmp	r3, r7
 800a474:	db04      	blt.n	800a480 <__s2b+0x78>
 800a476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a47a:	2509      	movs	r5, #9
 800a47c:	340a      	adds	r4, #10
 800a47e:	e7f6      	b.n	800a46e <__s2b+0x66>
 800a480:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a484:	4601      	mov	r1, r0
 800a486:	220a      	movs	r2, #10
 800a488:	4630      	mov	r0, r6
 800a48a:	3b30      	subs	r3, #48	; 0x30
 800a48c:	f7ff ff76 	bl	800a37c <__multadd>
 800a490:	e7ee      	b.n	800a470 <__s2b+0x68>
 800a492:	bf00      	nop
 800a494:	0800e5d1 	.word	0x0800e5d1
 800a498:	0800e642 	.word	0x0800e642

0800a49c <__hi0bits>:
 800a49c:	0c02      	lsrs	r2, r0, #16
 800a49e:	0412      	lsls	r2, r2, #16
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	b9ca      	cbnz	r2, 800a4d8 <__hi0bits+0x3c>
 800a4a4:	0403      	lsls	r3, r0, #16
 800a4a6:	2010      	movs	r0, #16
 800a4a8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a4ac:	bf04      	itt	eq
 800a4ae:	021b      	lsleq	r3, r3, #8
 800a4b0:	3008      	addeq	r0, #8
 800a4b2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a4b6:	bf04      	itt	eq
 800a4b8:	011b      	lsleq	r3, r3, #4
 800a4ba:	3004      	addeq	r0, #4
 800a4bc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a4c0:	bf04      	itt	eq
 800a4c2:	009b      	lsleq	r3, r3, #2
 800a4c4:	3002      	addeq	r0, #2
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	db05      	blt.n	800a4d6 <__hi0bits+0x3a>
 800a4ca:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a4ce:	f100 0001 	add.w	r0, r0, #1
 800a4d2:	bf08      	it	eq
 800a4d4:	2020      	moveq	r0, #32
 800a4d6:	4770      	bx	lr
 800a4d8:	2000      	movs	r0, #0
 800a4da:	e7e5      	b.n	800a4a8 <__hi0bits+0xc>

0800a4dc <__lo0bits>:
 800a4dc:	6803      	ldr	r3, [r0, #0]
 800a4de:	4602      	mov	r2, r0
 800a4e0:	f013 0007 	ands.w	r0, r3, #7
 800a4e4:	d00b      	beq.n	800a4fe <__lo0bits+0x22>
 800a4e6:	07d9      	lsls	r1, r3, #31
 800a4e8:	d421      	bmi.n	800a52e <__lo0bits+0x52>
 800a4ea:	0798      	lsls	r0, r3, #30
 800a4ec:	bf49      	itett	mi
 800a4ee:	085b      	lsrmi	r3, r3, #1
 800a4f0:	089b      	lsrpl	r3, r3, #2
 800a4f2:	2001      	movmi	r0, #1
 800a4f4:	6013      	strmi	r3, [r2, #0]
 800a4f6:	bf5c      	itt	pl
 800a4f8:	2002      	movpl	r0, #2
 800a4fa:	6013      	strpl	r3, [r2, #0]
 800a4fc:	4770      	bx	lr
 800a4fe:	b299      	uxth	r1, r3
 800a500:	b909      	cbnz	r1, 800a506 <__lo0bits+0x2a>
 800a502:	2010      	movs	r0, #16
 800a504:	0c1b      	lsrs	r3, r3, #16
 800a506:	b2d9      	uxtb	r1, r3
 800a508:	b909      	cbnz	r1, 800a50e <__lo0bits+0x32>
 800a50a:	3008      	adds	r0, #8
 800a50c:	0a1b      	lsrs	r3, r3, #8
 800a50e:	0719      	lsls	r1, r3, #28
 800a510:	bf04      	itt	eq
 800a512:	091b      	lsreq	r3, r3, #4
 800a514:	3004      	addeq	r0, #4
 800a516:	0799      	lsls	r1, r3, #30
 800a518:	bf04      	itt	eq
 800a51a:	089b      	lsreq	r3, r3, #2
 800a51c:	3002      	addeq	r0, #2
 800a51e:	07d9      	lsls	r1, r3, #31
 800a520:	d403      	bmi.n	800a52a <__lo0bits+0x4e>
 800a522:	085b      	lsrs	r3, r3, #1
 800a524:	f100 0001 	add.w	r0, r0, #1
 800a528:	d003      	beq.n	800a532 <__lo0bits+0x56>
 800a52a:	6013      	str	r3, [r2, #0]
 800a52c:	4770      	bx	lr
 800a52e:	2000      	movs	r0, #0
 800a530:	4770      	bx	lr
 800a532:	2020      	movs	r0, #32
 800a534:	4770      	bx	lr
	...

0800a538 <__i2b>:
 800a538:	b510      	push	{r4, lr}
 800a53a:	460c      	mov	r4, r1
 800a53c:	2101      	movs	r1, #1
 800a53e:	f7ff febb 	bl	800a2b8 <_Balloc>
 800a542:	4602      	mov	r2, r0
 800a544:	b928      	cbnz	r0, 800a552 <__i2b+0x1a>
 800a546:	f240 1145 	movw	r1, #325	; 0x145
 800a54a:	4b04      	ldr	r3, [pc, #16]	; (800a55c <__i2b+0x24>)
 800a54c:	4804      	ldr	r0, [pc, #16]	; (800a560 <__i2b+0x28>)
 800a54e:	f000 fd89 	bl	800b064 <__assert_func>
 800a552:	2301      	movs	r3, #1
 800a554:	6144      	str	r4, [r0, #20]
 800a556:	6103      	str	r3, [r0, #16]
 800a558:	bd10      	pop	{r4, pc}
 800a55a:	bf00      	nop
 800a55c:	0800e5d1 	.word	0x0800e5d1
 800a560:	0800e642 	.word	0x0800e642

0800a564 <__multiply>:
 800a564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a568:	4691      	mov	r9, r2
 800a56a:	690a      	ldr	r2, [r1, #16]
 800a56c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a570:	460c      	mov	r4, r1
 800a572:	429a      	cmp	r2, r3
 800a574:	bfbe      	ittt	lt
 800a576:	460b      	movlt	r3, r1
 800a578:	464c      	movlt	r4, r9
 800a57a:	4699      	movlt	r9, r3
 800a57c:	6927      	ldr	r7, [r4, #16]
 800a57e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a582:	68a3      	ldr	r3, [r4, #8]
 800a584:	6861      	ldr	r1, [r4, #4]
 800a586:	eb07 060a 	add.w	r6, r7, sl
 800a58a:	42b3      	cmp	r3, r6
 800a58c:	b085      	sub	sp, #20
 800a58e:	bfb8      	it	lt
 800a590:	3101      	addlt	r1, #1
 800a592:	f7ff fe91 	bl	800a2b8 <_Balloc>
 800a596:	b930      	cbnz	r0, 800a5a6 <__multiply+0x42>
 800a598:	4602      	mov	r2, r0
 800a59a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a59e:	4b43      	ldr	r3, [pc, #268]	; (800a6ac <__multiply+0x148>)
 800a5a0:	4843      	ldr	r0, [pc, #268]	; (800a6b0 <__multiply+0x14c>)
 800a5a2:	f000 fd5f 	bl	800b064 <__assert_func>
 800a5a6:	f100 0514 	add.w	r5, r0, #20
 800a5aa:	462b      	mov	r3, r5
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a5b2:	4543      	cmp	r3, r8
 800a5b4:	d321      	bcc.n	800a5fa <__multiply+0x96>
 800a5b6:	f104 0314 	add.w	r3, r4, #20
 800a5ba:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a5be:	f109 0314 	add.w	r3, r9, #20
 800a5c2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a5c6:	9202      	str	r2, [sp, #8]
 800a5c8:	1b3a      	subs	r2, r7, r4
 800a5ca:	3a15      	subs	r2, #21
 800a5cc:	f022 0203 	bic.w	r2, r2, #3
 800a5d0:	3204      	adds	r2, #4
 800a5d2:	f104 0115 	add.w	r1, r4, #21
 800a5d6:	428f      	cmp	r7, r1
 800a5d8:	bf38      	it	cc
 800a5da:	2204      	movcc	r2, #4
 800a5dc:	9201      	str	r2, [sp, #4]
 800a5de:	9a02      	ldr	r2, [sp, #8]
 800a5e0:	9303      	str	r3, [sp, #12]
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d80c      	bhi.n	800a600 <__multiply+0x9c>
 800a5e6:	2e00      	cmp	r6, #0
 800a5e8:	dd03      	ble.n	800a5f2 <__multiply+0x8e>
 800a5ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d05a      	beq.n	800a6a8 <__multiply+0x144>
 800a5f2:	6106      	str	r6, [r0, #16]
 800a5f4:	b005      	add	sp, #20
 800a5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5fa:	f843 2b04 	str.w	r2, [r3], #4
 800a5fe:	e7d8      	b.n	800a5b2 <__multiply+0x4e>
 800a600:	f8b3 a000 	ldrh.w	sl, [r3]
 800a604:	f1ba 0f00 	cmp.w	sl, #0
 800a608:	d023      	beq.n	800a652 <__multiply+0xee>
 800a60a:	46a9      	mov	r9, r5
 800a60c:	f04f 0c00 	mov.w	ip, #0
 800a610:	f104 0e14 	add.w	lr, r4, #20
 800a614:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a618:	f8d9 1000 	ldr.w	r1, [r9]
 800a61c:	fa1f fb82 	uxth.w	fp, r2
 800a620:	b289      	uxth	r1, r1
 800a622:	fb0a 110b 	mla	r1, sl, fp, r1
 800a626:	4461      	add	r1, ip
 800a628:	f8d9 c000 	ldr.w	ip, [r9]
 800a62c:	0c12      	lsrs	r2, r2, #16
 800a62e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a632:	fb0a c202 	mla	r2, sl, r2, ip
 800a636:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a63a:	b289      	uxth	r1, r1
 800a63c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a640:	4577      	cmp	r7, lr
 800a642:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a646:	f849 1b04 	str.w	r1, [r9], #4
 800a64a:	d8e3      	bhi.n	800a614 <__multiply+0xb0>
 800a64c:	9a01      	ldr	r2, [sp, #4]
 800a64e:	f845 c002 	str.w	ip, [r5, r2]
 800a652:	9a03      	ldr	r2, [sp, #12]
 800a654:	3304      	adds	r3, #4
 800a656:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a65a:	f1b9 0f00 	cmp.w	r9, #0
 800a65e:	d021      	beq.n	800a6a4 <__multiply+0x140>
 800a660:	46ae      	mov	lr, r5
 800a662:	f04f 0a00 	mov.w	sl, #0
 800a666:	6829      	ldr	r1, [r5, #0]
 800a668:	f104 0c14 	add.w	ip, r4, #20
 800a66c:	f8bc b000 	ldrh.w	fp, [ip]
 800a670:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a674:	b289      	uxth	r1, r1
 800a676:	fb09 220b 	mla	r2, r9, fp, r2
 800a67a:	4452      	add	r2, sl
 800a67c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a680:	f84e 1b04 	str.w	r1, [lr], #4
 800a684:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a688:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a68c:	f8be 1000 	ldrh.w	r1, [lr]
 800a690:	4567      	cmp	r7, ip
 800a692:	fb09 110a 	mla	r1, r9, sl, r1
 800a696:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a69a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a69e:	d8e5      	bhi.n	800a66c <__multiply+0x108>
 800a6a0:	9a01      	ldr	r2, [sp, #4]
 800a6a2:	50a9      	str	r1, [r5, r2]
 800a6a4:	3504      	adds	r5, #4
 800a6a6:	e79a      	b.n	800a5de <__multiply+0x7a>
 800a6a8:	3e01      	subs	r6, #1
 800a6aa:	e79c      	b.n	800a5e6 <__multiply+0x82>
 800a6ac:	0800e5d1 	.word	0x0800e5d1
 800a6b0:	0800e642 	.word	0x0800e642

0800a6b4 <__pow5mult>:
 800a6b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6b8:	4615      	mov	r5, r2
 800a6ba:	f012 0203 	ands.w	r2, r2, #3
 800a6be:	4606      	mov	r6, r0
 800a6c0:	460f      	mov	r7, r1
 800a6c2:	d007      	beq.n	800a6d4 <__pow5mult+0x20>
 800a6c4:	4c25      	ldr	r4, [pc, #148]	; (800a75c <__pow5mult+0xa8>)
 800a6c6:	3a01      	subs	r2, #1
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a6ce:	f7ff fe55 	bl	800a37c <__multadd>
 800a6d2:	4607      	mov	r7, r0
 800a6d4:	10ad      	asrs	r5, r5, #2
 800a6d6:	d03d      	beq.n	800a754 <__pow5mult+0xa0>
 800a6d8:	69f4      	ldr	r4, [r6, #28]
 800a6da:	b97c      	cbnz	r4, 800a6fc <__pow5mult+0x48>
 800a6dc:	2010      	movs	r0, #16
 800a6de:	f7ff fd25 	bl	800a12c <malloc>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	61f0      	str	r0, [r6, #28]
 800a6e6:	b928      	cbnz	r0, 800a6f4 <__pow5mult+0x40>
 800a6e8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a6ec:	4b1c      	ldr	r3, [pc, #112]	; (800a760 <__pow5mult+0xac>)
 800a6ee:	481d      	ldr	r0, [pc, #116]	; (800a764 <__pow5mult+0xb0>)
 800a6f0:	f000 fcb8 	bl	800b064 <__assert_func>
 800a6f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a6f8:	6004      	str	r4, [r0, #0]
 800a6fa:	60c4      	str	r4, [r0, #12]
 800a6fc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a700:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a704:	b94c      	cbnz	r4, 800a71a <__pow5mult+0x66>
 800a706:	f240 2171 	movw	r1, #625	; 0x271
 800a70a:	4630      	mov	r0, r6
 800a70c:	f7ff ff14 	bl	800a538 <__i2b>
 800a710:	2300      	movs	r3, #0
 800a712:	4604      	mov	r4, r0
 800a714:	f8c8 0008 	str.w	r0, [r8, #8]
 800a718:	6003      	str	r3, [r0, #0]
 800a71a:	f04f 0900 	mov.w	r9, #0
 800a71e:	07eb      	lsls	r3, r5, #31
 800a720:	d50a      	bpl.n	800a738 <__pow5mult+0x84>
 800a722:	4639      	mov	r1, r7
 800a724:	4622      	mov	r2, r4
 800a726:	4630      	mov	r0, r6
 800a728:	f7ff ff1c 	bl	800a564 <__multiply>
 800a72c:	4680      	mov	r8, r0
 800a72e:	4639      	mov	r1, r7
 800a730:	4630      	mov	r0, r6
 800a732:	f7ff fe01 	bl	800a338 <_Bfree>
 800a736:	4647      	mov	r7, r8
 800a738:	106d      	asrs	r5, r5, #1
 800a73a:	d00b      	beq.n	800a754 <__pow5mult+0xa0>
 800a73c:	6820      	ldr	r0, [r4, #0]
 800a73e:	b938      	cbnz	r0, 800a750 <__pow5mult+0x9c>
 800a740:	4622      	mov	r2, r4
 800a742:	4621      	mov	r1, r4
 800a744:	4630      	mov	r0, r6
 800a746:	f7ff ff0d 	bl	800a564 <__multiply>
 800a74a:	6020      	str	r0, [r4, #0]
 800a74c:	f8c0 9000 	str.w	r9, [r0]
 800a750:	4604      	mov	r4, r0
 800a752:	e7e4      	b.n	800a71e <__pow5mult+0x6a>
 800a754:	4638      	mov	r0, r7
 800a756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a75a:	bf00      	nop
 800a75c:	0800e790 	.word	0x0800e790
 800a760:	0800e562 	.word	0x0800e562
 800a764:	0800e642 	.word	0x0800e642

0800a768 <__lshift>:
 800a768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a76c:	460c      	mov	r4, r1
 800a76e:	4607      	mov	r7, r0
 800a770:	4691      	mov	r9, r2
 800a772:	6923      	ldr	r3, [r4, #16]
 800a774:	6849      	ldr	r1, [r1, #4]
 800a776:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a77a:	68a3      	ldr	r3, [r4, #8]
 800a77c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a780:	f108 0601 	add.w	r6, r8, #1
 800a784:	42b3      	cmp	r3, r6
 800a786:	db0b      	blt.n	800a7a0 <__lshift+0x38>
 800a788:	4638      	mov	r0, r7
 800a78a:	f7ff fd95 	bl	800a2b8 <_Balloc>
 800a78e:	4605      	mov	r5, r0
 800a790:	b948      	cbnz	r0, 800a7a6 <__lshift+0x3e>
 800a792:	4602      	mov	r2, r0
 800a794:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a798:	4b27      	ldr	r3, [pc, #156]	; (800a838 <__lshift+0xd0>)
 800a79a:	4828      	ldr	r0, [pc, #160]	; (800a83c <__lshift+0xd4>)
 800a79c:	f000 fc62 	bl	800b064 <__assert_func>
 800a7a0:	3101      	adds	r1, #1
 800a7a2:	005b      	lsls	r3, r3, #1
 800a7a4:	e7ee      	b.n	800a784 <__lshift+0x1c>
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	f100 0114 	add.w	r1, r0, #20
 800a7ac:	f100 0210 	add.w	r2, r0, #16
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	4553      	cmp	r3, sl
 800a7b4:	db33      	blt.n	800a81e <__lshift+0xb6>
 800a7b6:	6920      	ldr	r0, [r4, #16]
 800a7b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a7bc:	f104 0314 	add.w	r3, r4, #20
 800a7c0:	f019 091f 	ands.w	r9, r9, #31
 800a7c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a7c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a7cc:	d02b      	beq.n	800a826 <__lshift+0xbe>
 800a7ce:	468a      	mov	sl, r1
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	f1c9 0e20 	rsb	lr, r9, #32
 800a7d6:	6818      	ldr	r0, [r3, #0]
 800a7d8:	fa00 f009 	lsl.w	r0, r0, r9
 800a7dc:	4310      	orrs	r0, r2
 800a7de:	f84a 0b04 	str.w	r0, [sl], #4
 800a7e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7e6:	459c      	cmp	ip, r3
 800a7e8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a7ec:	d8f3      	bhi.n	800a7d6 <__lshift+0x6e>
 800a7ee:	ebac 0304 	sub.w	r3, ip, r4
 800a7f2:	3b15      	subs	r3, #21
 800a7f4:	f023 0303 	bic.w	r3, r3, #3
 800a7f8:	3304      	adds	r3, #4
 800a7fa:	f104 0015 	add.w	r0, r4, #21
 800a7fe:	4584      	cmp	ip, r0
 800a800:	bf38      	it	cc
 800a802:	2304      	movcc	r3, #4
 800a804:	50ca      	str	r2, [r1, r3]
 800a806:	b10a      	cbz	r2, 800a80c <__lshift+0xa4>
 800a808:	f108 0602 	add.w	r6, r8, #2
 800a80c:	3e01      	subs	r6, #1
 800a80e:	4638      	mov	r0, r7
 800a810:	4621      	mov	r1, r4
 800a812:	612e      	str	r6, [r5, #16]
 800a814:	f7ff fd90 	bl	800a338 <_Bfree>
 800a818:	4628      	mov	r0, r5
 800a81a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a81e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a822:	3301      	adds	r3, #1
 800a824:	e7c5      	b.n	800a7b2 <__lshift+0x4a>
 800a826:	3904      	subs	r1, #4
 800a828:	f853 2b04 	ldr.w	r2, [r3], #4
 800a82c:	459c      	cmp	ip, r3
 800a82e:	f841 2f04 	str.w	r2, [r1, #4]!
 800a832:	d8f9      	bhi.n	800a828 <__lshift+0xc0>
 800a834:	e7ea      	b.n	800a80c <__lshift+0xa4>
 800a836:	bf00      	nop
 800a838:	0800e5d1 	.word	0x0800e5d1
 800a83c:	0800e642 	.word	0x0800e642

0800a840 <__mcmp>:
 800a840:	4603      	mov	r3, r0
 800a842:	690a      	ldr	r2, [r1, #16]
 800a844:	6900      	ldr	r0, [r0, #16]
 800a846:	b530      	push	{r4, r5, lr}
 800a848:	1a80      	subs	r0, r0, r2
 800a84a:	d10d      	bne.n	800a868 <__mcmp+0x28>
 800a84c:	3314      	adds	r3, #20
 800a84e:	3114      	adds	r1, #20
 800a850:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a854:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a858:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a85c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a860:	4295      	cmp	r5, r2
 800a862:	d002      	beq.n	800a86a <__mcmp+0x2a>
 800a864:	d304      	bcc.n	800a870 <__mcmp+0x30>
 800a866:	2001      	movs	r0, #1
 800a868:	bd30      	pop	{r4, r5, pc}
 800a86a:	42a3      	cmp	r3, r4
 800a86c:	d3f4      	bcc.n	800a858 <__mcmp+0x18>
 800a86e:	e7fb      	b.n	800a868 <__mcmp+0x28>
 800a870:	f04f 30ff 	mov.w	r0, #4294967295
 800a874:	e7f8      	b.n	800a868 <__mcmp+0x28>
	...

0800a878 <__mdiff>:
 800a878:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a87c:	460d      	mov	r5, r1
 800a87e:	4607      	mov	r7, r0
 800a880:	4611      	mov	r1, r2
 800a882:	4628      	mov	r0, r5
 800a884:	4614      	mov	r4, r2
 800a886:	f7ff ffdb 	bl	800a840 <__mcmp>
 800a88a:	1e06      	subs	r6, r0, #0
 800a88c:	d111      	bne.n	800a8b2 <__mdiff+0x3a>
 800a88e:	4631      	mov	r1, r6
 800a890:	4638      	mov	r0, r7
 800a892:	f7ff fd11 	bl	800a2b8 <_Balloc>
 800a896:	4602      	mov	r2, r0
 800a898:	b928      	cbnz	r0, 800a8a6 <__mdiff+0x2e>
 800a89a:	f240 2137 	movw	r1, #567	; 0x237
 800a89e:	4b3a      	ldr	r3, [pc, #232]	; (800a988 <__mdiff+0x110>)
 800a8a0:	483a      	ldr	r0, [pc, #232]	; (800a98c <__mdiff+0x114>)
 800a8a2:	f000 fbdf 	bl	800b064 <__assert_func>
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a8ac:	4610      	mov	r0, r2
 800a8ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8b2:	bfa4      	itt	ge
 800a8b4:	4623      	movge	r3, r4
 800a8b6:	462c      	movge	r4, r5
 800a8b8:	4638      	mov	r0, r7
 800a8ba:	6861      	ldr	r1, [r4, #4]
 800a8bc:	bfa6      	itte	ge
 800a8be:	461d      	movge	r5, r3
 800a8c0:	2600      	movge	r6, #0
 800a8c2:	2601      	movlt	r6, #1
 800a8c4:	f7ff fcf8 	bl	800a2b8 <_Balloc>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	b918      	cbnz	r0, 800a8d4 <__mdiff+0x5c>
 800a8cc:	f240 2145 	movw	r1, #581	; 0x245
 800a8d0:	4b2d      	ldr	r3, [pc, #180]	; (800a988 <__mdiff+0x110>)
 800a8d2:	e7e5      	b.n	800a8a0 <__mdiff+0x28>
 800a8d4:	f102 0814 	add.w	r8, r2, #20
 800a8d8:	46c2      	mov	sl, r8
 800a8da:	f04f 0c00 	mov.w	ip, #0
 800a8de:	6927      	ldr	r7, [r4, #16]
 800a8e0:	60c6      	str	r6, [r0, #12]
 800a8e2:	692e      	ldr	r6, [r5, #16]
 800a8e4:	f104 0014 	add.w	r0, r4, #20
 800a8e8:	f105 0914 	add.w	r9, r5, #20
 800a8ec:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a8f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a8f4:	3410      	adds	r4, #16
 800a8f6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a8fa:	f859 3b04 	ldr.w	r3, [r9], #4
 800a8fe:	fa1f f18b 	uxth.w	r1, fp
 800a902:	4461      	add	r1, ip
 800a904:	fa1f fc83 	uxth.w	ip, r3
 800a908:	0c1b      	lsrs	r3, r3, #16
 800a90a:	eba1 010c 	sub.w	r1, r1, ip
 800a90e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a912:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a916:	b289      	uxth	r1, r1
 800a918:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800a91c:	454e      	cmp	r6, r9
 800a91e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a922:	f84a 1b04 	str.w	r1, [sl], #4
 800a926:	d8e6      	bhi.n	800a8f6 <__mdiff+0x7e>
 800a928:	1b73      	subs	r3, r6, r5
 800a92a:	3b15      	subs	r3, #21
 800a92c:	f023 0303 	bic.w	r3, r3, #3
 800a930:	3515      	adds	r5, #21
 800a932:	3304      	adds	r3, #4
 800a934:	42ae      	cmp	r6, r5
 800a936:	bf38      	it	cc
 800a938:	2304      	movcc	r3, #4
 800a93a:	4418      	add	r0, r3
 800a93c:	4443      	add	r3, r8
 800a93e:	461e      	mov	r6, r3
 800a940:	4605      	mov	r5, r0
 800a942:	4575      	cmp	r5, lr
 800a944:	d30e      	bcc.n	800a964 <__mdiff+0xec>
 800a946:	f10e 0103 	add.w	r1, lr, #3
 800a94a:	1a09      	subs	r1, r1, r0
 800a94c:	f021 0103 	bic.w	r1, r1, #3
 800a950:	3803      	subs	r0, #3
 800a952:	4586      	cmp	lr, r0
 800a954:	bf38      	it	cc
 800a956:	2100      	movcc	r1, #0
 800a958:	440b      	add	r3, r1
 800a95a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a95e:	b189      	cbz	r1, 800a984 <__mdiff+0x10c>
 800a960:	6117      	str	r7, [r2, #16]
 800a962:	e7a3      	b.n	800a8ac <__mdiff+0x34>
 800a964:	f855 8b04 	ldr.w	r8, [r5], #4
 800a968:	fa1f f188 	uxth.w	r1, r8
 800a96c:	4461      	add	r1, ip
 800a96e:	140c      	asrs	r4, r1, #16
 800a970:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a974:	b289      	uxth	r1, r1
 800a976:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a97a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a97e:	f846 1b04 	str.w	r1, [r6], #4
 800a982:	e7de      	b.n	800a942 <__mdiff+0xca>
 800a984:	3f01      	subs	r7, #1
 800a986:	e7e8      	b.n	800a95a <__mdiff+0xe2>
 800a988:	0800e5d1 	.word	0x0800e5d1
 800a98c:	0800e642 	.word	0x0800e642

0800a990 <__ulp>:
 800a990:	4b0e      	ldr	r3, [pc, #56]	; (800a9cc <__ulp+0x3c>)
 800a992:	400b      	ands	r3, r1
 800a994:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a998:	2b00      	cmp	r3, #0
 800a99a:	dc08      	bgt.n	800a9ae <__ulp+0x1e>
 800a99c:	425b      	negs	r3, r3
 800a99e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a9a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a9a6:	da04      	bge.n	800a9b2 <__ulp+0x22>
 800a9a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a9ac:	4113      	asrs	r3, r2
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	e008      	b.n	800a9c4 <__ulp+0x34>
 800a9b2:	f1a2 0314 	sub.w	r3, r2, #20
 800a9b6:	2b1e      	cmp	r3, #30
 800a9b8:	bfd6      	itet	le
 800a9ba:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a9be:	2201      	movgt	r2, #1
 800a9c0:	40da      	lsrle	r2, r3
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	4610      	mov	r0, r2
 800a9c8:	4770      	bx	lr
 800a9ca:	bf00      	nop
 800a9cc:	7ff00000 	.word	0x7ff00000

0800a9d0 <__b2d>:
 800a9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9d2:	6905      	ldr	r5, [r0, #16]
 800a9d4:	f100 0714 	add.w	r7, r0, #20
 800a9d8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a9dc:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a9e0:	1f2e      	subs	r6, r5, #4
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	f7ff fd5a 	bl	800a49c <__hi0bits>
 800a9e8:	f1c0 0220 	rsb	r2, r0, #32
 800a9ec:	280a      	cmp	r0, #10
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	f8df c068 	ldr.w	ip, [pc, #104]	; 800aa5c <__b2d+0x8c>
 800a9f4:	600a      	str	r2, [r1, #0]
 800a9f6:	dc12      	bgt.n	800aa1e <__b2d+0x4e>
 800a9f8:	f1c0 0e0b 	rsb	lr, r0, #11
 800a9fc:	fa24 f20e 	lsr.w	r2, r4, lr
 800aa00:	42b7      	cmp	r7, r6
 800aa02:	ea42 010c 	orr.w	r1, r2, ip
 800aa06:	bf2c      	ite	cs
 800aa08:	2200      	movcs	r2, #0
 800aa0a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800aa0e:	3315      	adds	r3, #21
 800aa10:	fa04 f303 	lsl.w	r3, r4, r3
 800aa14:	fa22 f20e 	lsr.w	r2, r2, lr
 800aa18:	431a      	orrs	r2, r3
 800aa1a:	4610      	mov	r0, r2
 800aa1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa1e:	42b7      	cmp	r7, r6
 800aa20:	bf2e      	itee	cs
 800aa22:	2200      	movcs	r2, #0
 800aa24:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800aa28:	f1a5 0608 	subcc.w	r6, r5, #8
 800aa2c:	3b0b      	subs	r3, #11
 800aa2e:	d012      	beq.n	800aa56 <__b2d+0x86>
 800aa30:	f1c3 0520 	rsb	r5, r3, #32
 800aa34:	fa22 f105 	lsr.w	r1, r2, r5
 800aa38:	409c      	lsls	r4, r3
 800aa3a:	430c      	orrs	r4, r1
 800aa3c:	42be      	cmp	r6, r7
 800aa3e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800aa42:	bf94      	ite	ls
 800aa44:	2400      	movls	r4, #0
 800aa46:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800aa4a:	409a      	lsls	r2, r3
 800aa4c:	40ec      	lsrs	r4, r5
 800aa4e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800aa52:	4322      	orrs	r2, r4
 800aa54:	e7e1      	b.n	800aa1a <__b2d+0x4a>
 800aa56:	ea44 010c 	orr.w	r1, r4, ip
 800aa5a:	e7de      	b.n	800aa1a <__b2d+0x4a>
 800aa5c:	3ff00000 	.word	0x3ff00000

0800aa60 <__d2b>:
 800aa60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa62:	2101      	movs	r1, #1
 800aa64:	4617      	mov	r7, r2
 800aa66:	461c      	mov	r4, r3
 800aa68:	9e08      	ldr	r6, [sp, #32]
 800aa6a:	f7ff fc25 	bl	800a2b8 <_Balloc>
 800aa6e:	4605      	mov	r5, r0
 800aa70:	b930      	cbnz	r0, 800aa80 <__d2b+0x20>
 800aa72:	4602      	mov	r2, r0
 800aa74:	f240 310f 	movw	r1, #783	; 0x30f
 800aa78:	4b22      	ldr	r3, [pc, #136]	; (800ab04 <__d2b+0xa4>)
 800aa7a:	4823      	ldr	r0, [pc, #140]	; (800ab08 <__d2b+0xa8>)
 800aa7c:	f000 faf2 	bl	800b064 <__assert_func>
 800aa80:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800aa84:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800aa88:	bb24      	cbnz	r4, 800aad4 <__d2b+0x74>
 800aa8a:	2f00      	cmp	r7, #0
 800aa8c:	9301      	str	r3, [sp, #4]
 800aa8e:	d026      	beq.n	800aade <__d2b+0x7e>
 800aa90:	4668      	mov	r0, sp
 800aa92:	9700      	str	r7, [sp, #0]
 800aa94:	f7ff fd22 	bl	800a4dc <__lo0bits>
 800aa98:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aa9c:	b1e8      	cbz	r0, 800aada <__d2b+0x7a>
 800aa9e:	f1c0 0320 	rsb	r3, r0, #32
 800aaa2:	fa02 f303 	lsl.w	r3, r2, r3
 800aaa6:	430b      	orrs	r3, r1
 800aaa8:	40c2      	lsrs	r2, r0
 800aaaa:	616b      	str	r3, [r5, #20]
 800aaac:	9201      	str	r2, [sp, #4]
 800aaae:	9b01      	ldr	r3, [sp, #4]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	bf14      	ite	ne
 800aab4:	2102      	movne	r1, #2
 800aab6:	2101      	moveq	r1, #1
 800aab8:	61ab      	str	r3, [r5, #24]
 800aaba:	6129      	str	r1, [r5, #16]
 800aabc:	b1bc      	cbz	r4, 800aaee <__d2b+0x8e>
 800aabe:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800aac2:	4404      	add	r4, r0
 800aac4:	6034      	str	r4, [r6, #0]
 800aac6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aaca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aacc:	6018      	str	r0, [r3, #0]
 800aace:	4628      	mov	r0, r5
 800aad0:	b003      	add	sp, #12
 800aad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aad4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aad8:	e7d7      	b.n	800aa8a <__d2b+0x2a>
 800aada:	6169      	str	r1, [r5, #20]
 800aadc:	e7e7      	b.n	800aaae <__d2b+0x4e>
 800aade:	a801      	add	r0, sp, #4
 800aae0:	f7ff fcfc 	bl	800a4dc <__lo0bits>
 800aae4:	9b01      	ldr	r3, [sp, #4]
 800aae6:	2101      	movs	r1, #1
 800aae8:	616b      	str	r3, [r5, #20]
 800aaea:	3020      	adds	r0, #32
 800aaec:	e7e5      	b.n	800aaba <__d2b+0x5a>
 800aaee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aaf2:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800aaf6:	6030      	str	r0, [r6, #0]
 800aaf8:	6918      	ldr	r0, [r3, #16]
 800aafa:	f7ff fccf 	bl	800a49c <__hi0bits>
 800aafe:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ab02:	e7e2      	b.n	800aaca <__d2b+0x6a>
 800ab04:	0800e5d1 	.word	0x0800e5d1
 800ab08:	0800e642 	.word	0x0800e642

0800ab0c <__ratio>:
 800ab0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab10:	4688      	mov	r8, r1
 800ab12:	4669      	mov	r1, sp
 800ab14:	4681      	mov	r9, r0
 800ab16:	f7ff ff5b 	bl	800a9d0 <__b2d>
 800ab1a:	460f      	mov	r7, r1
 800ab1c:	4604      	mov	r4, r0
 800ab1e:	460d      	mov	r5, r1
 800ab20:	4640      	mov	r0, r8
 800ab22:	a901      	add	r1, sp, #4
 800ab24:	f7ff ff54 	bl	800a9d0 <__b2d>
 800ab28:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ab2c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ab30:	468b      	mov	fp, r1
 800ab32:	eba3 0c02 	sub.w	ip, r3, r2
 800ab36:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ab3a:	1a9b      	subs	r3, r3, r2
 800ab3c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	bfd5      	itete	le
 800ab44:	460a      	movle	r2, r1
 800ab46:	462a      	movgt	r2, r5
 800ab48:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ab4c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ab50:	bfd8      	it	le
 800ab52:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ab56:	465b      	mov	r3, fp
 800ab58:	4602      	mov	r2, r0
 800ab5a:	4639      	mov	r1, r7
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	f7f5 fdef 	bl	8000740 <__aeabi_ddiv>
 800ab62:	b003      	add	sp, #12
 800ab64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab68 <__copybits>:
 800ab68:	3901      	subs	r1, #1
 800ab6a:	b570      	push	{r4, r5, r6, lr}
 800ab6c:	1149      	asrs	r1, r1, #5
 800ab6e:	6914      	ldr	r4, [r2, #16]
 800ab70:	3101      	adds	r1, #1
 800ab72:	f102 0314 	add.w	r3, r2, #20
 800ab76:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ab7a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ab7e:	1f05      	subs	r5, r0, #4
 800ab80:	42a3      	cmp	r3, r4
 800ab82:	d30c      	bcc.n	800ab9e <__copybits+0x36>
 800ab84:	1aa3      	subs	r3, r4, r2
 800ab86:	3b11      	subs	r3, #17
 800ab88:	f023 0303 	bic.w	r3, r3, #3
 800ab8c:	3211      	adds	r2, #17
 800ab8e:	42a2      	cmp	r2, r4
 800ab90:	bf88      	it	hi
 800ab92:	2300      	movhi	r3, #0
 800ab94:	4418      	add	r0, r3
 800ab96:	2300      	movs	r3, #0
 800ab98:	4288      	cmp	r0, r1
 800ab9a:	d305      	bcc.n	800aba8 <__copybits+0x40>
 800ab9c:	bd70      	pop	{r4, r5, r6, pc}
 800ab9e:	f853 6b04 	ldr.w	r6, [r3], #4
 800aba2:	f845 6f04 	str.w	r6, [r5, #4]!
 800aba6:	e7eb      	b.n	800ab80 <__copybits+0x18>
 800aba8:	f840 3b04 	str.w	r3, [r0], #4
 800abac:	e7f4      	b.n	800ab98 <__copybits+0x30>

0800abae <__any_on>:
 800abae:	f100 0214 	add.w	r2, r0, #20
 800abb2:	6900      	ldr	r0, [r0, #16]
 800abb4:	114b      	asrs	r3, r1, #5
 800abb6:	4298      	cmp	r0, r3
 800abb8:	b510      	push	{r4, lr}
 800abba:	db11      	blt.n	800abe0 <__any_on+0x32>
 800abbc:	dd0a      	ble.n	800abd4 <__any_on+0x26>
 800abbe:	f011 011f 	ands.w	r1, r1, #31
 800abc2:	d007      	beq.n	800abd4 <__any_on+0x26>
 800abc4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800abc8:	fa24 f001 	lsr.w	r0, r4, r1
 800abcc:	fa00 f101 	lsl.w	r1, r0, r1
 800abd0:	428c      	cmp	r4, r1
 800abd2:	d10b      	bne.n	800abec <__any_on+0x3e>
 800abd4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800abd8:	4293      	cmp	r3, r2
 800abda:	d803      	bhi.n	800abe4 <__any_on+0x36>
 800abdc:	2000      	movs	r0, #0
 800abde:	bd10      	pop	{r4, pc}
 800abe0:	4603      	mov	r3, r0
 800abe2:	e7f7      	b.n	800abd4 <__any_on+0x26>
 800abe4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800abe8:	2900      	cmp	r1, #0
 800abea:	d0f5      	beq.n	800abd8 <__any_on+0x2a>
 800abec:	2001      	movs	r0, #1
 800abee:	e7f6      	b.n	800abde <__any_on+0x30>

0800abf0 <__ascii_wctomb>:
 800abf0:	4603      	mov	r3, r0
 800abf2:	4608      	mov	r0, r1
 800abf4:	b141      	cbz	r1, 800ac08 <__ascii_wctomb+0x18>
 800abf6:	2aff      	cmp	r2, #255	; 0xff
 800abf8:	d904      	bls.n	800ac04 <__ascii_wctomb+0x14>
 800abfa:	228a      	movs	r2, #138	; 0x8a
 800abfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ac00:	601a      	str	r2, [r3, #0]
 800ac02:	4770      	bx	lr
 800ac04:	2001      	movs	r0, #1
 800ac06:	700a      	strb	r2, [r1, #0]
 800ac08:	4770      	bx	lr

0800ac0a <__ssputs_r>:
 800ac0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac0e:	461f      	mov	r7, r3
 800ac10:	688e      	ldr	r6, [r1, #8]
 800ac12:	4682      	mov	sl, r0
 800ac14:	42be      	cmp	r6, r7
 800ac16:	460c      	mov	r4, r1
 800ac18:	4690      	mov	r8, r2
 800ac1a:	680b      	ldr	r3, [r1, #0]
 800ac1c:	d82c      	bhi.n	800ac78 <__ssputs_r+0x6e>
 800ac1e:	898a      	ldrh	r2, [r1, #12]
 800ac20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac24:	d026      	beq.n	800ac74 <__ssputs_r+0x6a>
 800ac26:	6965      	ldr	r5, [r4, #20]
 800ac28:	6909      	ldr	r1, [r1, #16]
 800ac2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac2e:	eba3 0901 	sub.w	r9, r3, r1
 800ac32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac36:	1c7b      	adds	r3, r7, #1
 800ac38:	444b      	add	r3, r9
 800ac3a:	106d      	asrs	r5, r5, #1
 800ac3c:	429d      	cmp	r5, r3
 800ac3e:	bf38      	it	cc
 800ac40:	461d      	movcc	r5, r3
 800ac42:	0553      	lsls	r3, r2, #21
 800ac44:	d527      	bpl.n	800ac96 <__ssputs_r+0x8c>
 800ac46:	4629      	mov	r1, r5
 800ac48:	f7ff fa98 	bl	800a17c <_malloc_r>
 800ac4c:	4606      	mov	r6, r0
 800ac4e:	b360      	cbz	r0, 800acaa <__ssputs_r+0xa0>
 800ac50:	464a      	mov	r2, r9
 800ac52:	6921      	ldr	r1, [r4, #16]
 800ac54:	f7fe f843 	bl	8008cde <memcpy>
 800ac58:	89a3      	ldrh	r3, [r4, #12]
 800ac5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ac5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac62:	81a3      	strh	r3, [r4, #12]
 800ac64:	6126      	str	r6, [r4, #16]
 800ac66:	444e      	add	r6, r9
 800ac68:	6026      	str	r6, [r4, #0]
 800ac6a:	463e      	mov	r6, r7
 800ac6c:	6165      	str	r5, [r4, #20]
 800ac6e:	eba5 0509 	sub.w	r5, r5, r9
 800ac72:	60a5      	str	r5, [r4, #8]
 800ac74:	42be      	cmp	r6, r7
 800ac76:	d900      	bls.n	800ac7a <__ssputs_r+0x70>
 800ac78:	463e      	mov	r6, r7
 800ac7a:	4632      	mov	r2, r6
 800ac7c:	4641      	mov	r1, r8
 800ac7e:	6820      	ldr	r0, [r4, #0]
 800ac80:	f000 f9c6 	bl	800b010 <memmove>
 800ac84:	2000      	movs	r0, #0
 800ac86:	68a3      	ldr	r3, [r4, #8]
 800ac88:	1b9b      	subs	r3, r3, r6
 800ac8a:	60a3      	str	r3, [r4, #8]
 800ac8c:	6823      	ldr	r3, [r4, #0]
 800ac8e:	4433      	add	r3, r6
 800ac90:	6023      	str	r3, [r4, #0]
 800ac92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac96:	462a      	mov	r2, r5
 800ac98:	f000 fa16 	bl	800b0c8 <_realloc_r>
 800ac9c:	4606      	mov	r6, r0
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	d1e0      	bne.n	800ac64 <__ssputs_r+0x5a>
 800aca2:	4650      	mov	r0, sl
 800aca4:	6921      	ldr	r1, [r4, #16]
 800aca6:	f7fe fe9f 	bl	80099e8 <_free_r>
 800acaa:	230c      	movs	r3, #12
 800acac:	f8ca 3000 	str.w	r3, [sl]
 800acb0:	89a3      	ldrh	r3, [r4, #12]
 800acb2:	f04f 30ff 	mov.w	r0, #4294967295
 800acb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acba:	81a3      	strh	r3, [r4, #12]
 800acbc:	e7e9      	b.n	800ac92 <__ssputs_r+0x88>
	...

0800acc0 <_svfiprintf_r>:
 800acc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc4:	4698      	mov	r8, r3
 800acc6:	898b      	ldrh	r3, [r1, #12]
 800acc8:	4607      	mov	r7, r0
 800acca:	061b      	lsls	r3, r3, #24
 800accc:	460d      	mov	r5, r1
 800acce:	4614      	mov	r4, r2
 800acd0:	b09d      	sub	sp, #116	; 0x74
 800acd2:	d50e      	bpl.n	800acf2 <_svfiprintf_r+0x32>
 800acd4:	690b      	ldr	r3, [r1, #16]
 800acd6:	b963      	cbnz	r3, 800acf2 <_svfiprintf_r+0x32>
 800acd8:	2140      	movs	r1, #64	; 0x40
 800acda:	f7ff fa4f 	bl	800a17c <_malloc_r>
 800acde:	6028      	str	r0, [r5, #0]
 800ace0:	6128      	str	r0, [r5, #16]
 800ace2:	b920      	cbnz	r0, 800acee <_svfiprintf_r+0x2e>
 800ace4:	230c      	movs	r3, #12
 800ace6:	603b      	str	r3, [r7, #0]
 800ace8:	f04f 30ff 	mov.w	r0, #4294967295
 800acec:	e0d0      	b.n	800ae90 <_svfiprintf_r+0x1d0>
 800acee:	2340      	movs	r3, #64	; 0x40
 800acf0:	616b      	str	r3, [r5, #20]
 800acf2:	2300      	movs	r3, #0
 800acf4:	9309      	str	r3, [sp, #36]	; 0x24
 800acf6:	2320      	movs	r3, #32
 800acf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800acfc:	2330      	movs	r3, #48	; 0x30
 800acfe:	f04f 0901 	mov.w	r9, #1
 800ad02:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad06:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800aea8 <_svfiprintf_r+0x1e8>
 800ad0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad0e:	4623      	mov	r3, r4
 800ad10:	469a      	mov	sl, r3
 800ad12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad16:	b10a      	cbz	r2, 800ad1c <_svfiprintf_r+0x5c>
 800ad18:	2a25      	cmp	r2, #37	; 0x25
 800ad1a:	d1f9      	bne.n	800ad10 <_svfiprintf_r+0x50>
 800ad1c:	ebba 0b04 	subs.w	fp, sl, r4
 800ad20:	d00b      	beq.n	800ad3a <_svfiprintf_r+0x7a>
 800ad22:	465b      	mov	r3, fp
 800ad24:	4622      	mov	r2, r4
 800ad26:	4629      	mov	r1, r5
 800ad28:	4638      	mov	r0, r7
 800ad2a:	f7ff ff6e 	bl	800ac0a <__ssputs_r>
 800ad2e:	3001      	adds	r0, #1
 800ad30:	f000 80a9 	beq.w	800ae86 <_svfiprintf_r+0x1c6>
 800ad34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad36:	445a      	add	r2, fp
 800ad38:	9209      	str	r2, [sp, #36]	; 0x24
 800ad3a:	f89a 3000 	ldrb.w	r3, [sl]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	f000 80a1 	beq.w	800ae86 <_svfiprintf_r+0x1c6>
 800ad44:	2300      	movs	r3, #0
 800ad46:	f04f 32ff 	mov.w	r2, #4294967295
 800ad4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad4e:	f10a 0a01 	add.w	sl, sl, #1
 800ad52:	9304      	str	r3, [sp, #16]
 800ad54:	9307      	str	r3, [sp, #28]
 800ad56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad5a:	931a      	str	r3, [sp, #104]	; 0x68
 800ad5c:	4654      	mov	r4, sl
 800ad5e:	2205      	movs	r2, #5
 800ad60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad64:	4850      	ldr	r0, [pc, #320]	; (800aea8 <_svfiprintf_r+0x1e8>)
 800ad66:	f7fd ffac 	bl	8008cc2 <memchr>
 800ad6a:	9a04      	ldr	r2, [sp, #16]
 800ad6c:	b9d8      	cbnz	r0, 800ada6 <_svfiprintf_r+0xe6>
 800ad6e:	06d0      	lsls	r0, r2, #27
 800ad70:	bf44      	itt	mi
 800ad72:	2320      	movmi	r3, #32
 800ad74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad78:	0711      	lsls	r1, r2, #28
 800ad7a:	bf44      	itt	mi
 800ad7c:	232b      	movmi	r3, #43	; 0x2b
 800ad7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad82:	f89a 3000 	ldrb.w	r3, [sl]
 800ad86:	2b2a      	cmp	r3, #42	; 0x2a
 800ad88:	d015      	beq.n	800adb6 <_svfiprintf_r+0xf6>
 800ad8a:	4654      	mov	r4, sl
 800ad8c:	2000      	movs	r0, #0
 800ad8e:	f04f 0c0a 	mov.w	ip, #10
 800ad92:	9a07      	ldr	r2, [sp, #28]
 800ad94:	4621      	mov	r1, r4
 800ad96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad9a:	3b30      	subs	r3, #48	; 0x30
 800ad9c:	2b09      	cmp	r3, #9
 800ad9e:	d94d      	bls.n	800ae3c <_svfiprintf_r+0x17c>
 800ada0:	b1b0      	cbz	r0, 800add0 <_svfiprintf_r+0x110>
 800ada2:	9207      	str	r2, [sp, #28]
 800ada4:	e014      	b.n	800add0 <_svfiprintf_r+0x110>
 800ada6:	eba0 0308 	sub.w	r3, r0, r8
 800adaa:	fa09 f303 	lsl.w	r3, r9, r3
 800adae:	4313      	orrs	r3, r2
 800adb0:	46a2      	mov	sl, r4
 800adb2:	9304      	str	r3, [sp, #16]
 800adb4:	e7d2      	b.n	800ad5c <_svfiprintf_r+0x9c>
 800adb6:	9b03      	ldr	r3, [sp, #12]
 800adb8:	1d19      	adds	r1, r3, #4
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	9103      	str	r1, [sp, #12]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	bfbb      	ittet	lt
 800adc2:	425b      	neglt	r3, r3
 800adc4:	f042 0202 	orrlt.w	r2, r2, #2
 800adc8:	9307      	strge	r3, [sp, #28]
 800adca:	9307      	strlt	r3, [sp, #28]
 800adcc:	bfb8      	it	lt
 800adce:	9204      	strlt	r2, [sp, #16]
 800add0:	7823      	ldrb	r3, [r4, #0]
 800add2:	2b2e      	cmp	r3, #46	; 0x2e
 800add4:	d10c      	bne.n	800adf0 <_svfiprintf_r+0x130>
 800add6:	7863      	ldrb	r3, [r4, #1]
 800add8:	2b2a      	cmp	r3, #42	; 0x2a
 800adda:	d134      	bne.n	800ae46 <_svfiprintf_r+0x186>
 800addc:	9b03      	ldr	r3, [sp, #12]
 800adde:	3402      	adds	r4, #2
 800ade0:	1d1a      	adds	r2, r3, #4
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	9203      	str	r2, [sp, #12]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	bfb8      	it	lt
 800adea:	f04f 33ff 	movlt.w	r3, #4294967295
 800adee:	9305      	str	r3, [sp, #20]
 800adf0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800aeac <_svfiprintf_r+0x1ec>
 800adf4:	2203      	movs	r2, #3
 800adf6:	4650      	mov	r0, sl
 800adf8:	7821      	ldrb	r1, [r4, #0]
 800adfa:	f7fd ff62 	bl	8008cc2 <memchr>
 800adfe:	b138      	cbz	r0, 800ae10 <_svfiprintf_r+0x150>
 800ae00:	2240      	movs	r2, #64	; 0x40
 800ae02:	9b04      	ldr	r3, [sp, #16]
 800ae04:	eba0 000a 	sub.w	r0, r0, sl
 800ae08:	4082      	lsls	r2, r0
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	3401      	adds	r4, #1
 800ae0e:	9304      	str	r3, [sp, #16]
 800ae10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae14:	2206      	movs	r2, #6
 800ae16:	4826      	ldr	r0, [pc, #152]	; (800aeb0 <_svfiprintf_r+0x1f0>)
 800ae18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae1c:	f7fd ff51 	bl	8008cc2 <memchr>
 800ae20:	2800      	cmp	r0, #0
 800ae22:	d038      	beq.n	800ae96 <_svfiprintf_r+0x1d6>
 800ae24:	4b23      	ldr	r3, [pc, #140]	; (800aeb4 <_svfiprintf_r+0x1f4>)
 800ae26:	bb1b      	cbnz	r3, 800ae70 <_svfiprintf_r+0x1b0>
 800ae28:	9b03      	ldr	r3, [sp, #12]
 800ae2a:	3307      	adds	r3, #7
 800ae2c:	f023 0307 	bic.w	r3, r3, #7
 800ae30:	3308      	adds	r3, #8
 800ae32:	9303      	str	r3, [sp, #12]
 800ae34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae36:	4433      	add	r3, r6
 800ae38:	9309      	str	r3, [sp, #36]	; 0x24
 800ae3a:	e768      	b.n	800ad0e <_svfiprintf_r+0x4e>
 800ae3c:	460c      	mov	r4, r1
 800ae3e:	2001      	movs	r0, #1
 800ae40:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae44:	e7a6      	b.n	800ad94 <_svfiprintf_r+0xd4>
 800ae46:	2300      	movs	r3, #0
 800ae48:	f04f 0c0a 	mov.w	ip, #10
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	3401      	adds	r4, #1
 800ae50:	9305      	str	r3, [sp, #20]
 800ae52:	4620      	mov	r0, r4
 800ae54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae58:	3a30      	subs	r2, #48	; 0x30
 800ae5a:	2a09      	cmp	r2, #9
 800ae5c:	d903      	bls.n	800ae66 <_svfiprintf_r+0x1a6>
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d0c6      	beq.n	800adf0 <_svfiprintf_r+0x130>
 800ae62:	9105      	str	r1, [sp, #20]
 800ae64:	e7c4      	b.n	800adf0 <_svfiprintf_r+0x130>
 800ae66:	4604      	mov	r4, r0
 800ae68:	2301      	movs	r3, #1
 800ae6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae6e:	e7f0      	b.n	800ae52 <_svfiprintf_r+0x192>
 800ae70:	ab03      	add	r3, sp, #12
 800ae72:	9300      	str	r3, [sp, #0]
 800ae74:	462a      	mov	r2, r5
 800ae76:	4638      	mov	r0, r7
 800ae78:	4b0f      	ldr	r3, [pc, #60]	; (800aeb8 <_svfiprintf_r+0x1f8>)
 800ae7a:	a904      	add	r1, sp, #16
 800ae7c:	f7fd f990 	bl	80081a0 <_printf_float>
 800ae80:	1c42      	adds	r2, r0, #1
 800ae82:	4606      	mov	r6, r0
 800ae84:	d1d6      	bne.n	800ae34 <_svfiprintf_r+0x174>
 800ae86:	89ab      	ldrh	r3, [r5, #12]
 800ae88:	065b      	lsls	r3, r3, #25
 800ae8a:	f53f af2d 	bmi.w	800ace8 <_svfiprintf_r+0x28>
 800ae8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae90:	b01d      	add	sp, #116	; 0x74
 800ae92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae96:	ab03      	add	r3, sp, #12
 800ae98:	9300      	str	r3, [sp, #0]
 800ae9a:	462a      	mov	r2, r5
 800ae9c:	4638      	mov	r0, r7
 800ae9e:	4b06      	ldr	r3, [pc, #24]	; (800aeb8 <_svfiprintf_r+0x1f8>)
 800aea0:	a904      	add	r1, sp, #16
 800aea2:	f7fd fc1d 	bl	80086e0 <_printf_i>
 800aea6:	e7eb      	b.n	800ae80 <_svfiprintf_r+0x1c0>
 800aea8:	0800e79c 	.word	0x0800e79c
 800aeac:	0800e7a2 	.word	0x0800e7a2
 800aeb0:	0800e7a6 	.word	0x0800e7a6
 800aeb4:	080081a1 	.word	0x080081a1
 800aeb8:	0800ac0b 	.word	0x0800ac0b

0800aebc <__sflush_r>:
 800aebc:	898a      	ldrh	r2, [r1, #12]
 800aebe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aec0:	4605      	mov	r5, r0
 800aec2:	0710      	lsls	r0, r2, #28
 800aec4:	460c      	mov	r4, r1
 800aec6:	d457      	bmi.n	800af78 <__sflush_r+0xbc>
 800aec8:	684b      	ldr	r3, [r1, #4]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	dc04      	bgt.n	800aed8 <__sflush_r+0x1c>
 800aece:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	dc01      	bgt.n	800aed8 <__sflush_r+0x1c>
 800aed4:	2000      	movs	r0, #0
 800aed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aed8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aeda:	2e00      	cmp	r6, #0
 800aedc:	d0fa      	beq.n	800aed4 <__sflush_r+0x18>
 800aede:	2300      	movs	r3, #0
 800aee0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aee4:	682f      	ldr	r7, [r5, #0]
 800aee6:	6a21      	ldr	r1, [r4, #32]
 800aee8:	602b      	str	r3, [r5, #0]
 800aeea:	d032      	beq.n	800af52 <__sflush_r+0x96>
 800aeec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aeee:	89a3      	ldrh	r3, [r4, #12]
 800aef0:	075a      	lsls	r2, r3, #29
 800aef2:	d505      	bpl.n	800af00 <__sflush_r+0x44>
 800aef4:	6863      	ldr	r3, [r4, #4]
 800aef6:	1ac0      	subs	r0, r0, r3
 800aef8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aefa:	b10b      	cbz	r3, 800af00 <__sflush_r+0x44>
 800aefc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aefe:	1ac0      	subs	r0, r0, r3
 800af00:	2300      	movs	r3, #0
 800af02:	4602      	mov	r2, r0
 800af04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af06:	4628      	mov	r0, r5
 800af08:	6a21      	ldr	r1, [r4, #32]
 800af0a:	47b0      	blx	r6
 800af0c:	1c43      	adds	r3, r0, #1
 800af0e:	89a3      	ldrh	r3, [r4, #12]
 800af10:	d106      	bne.n	800af20 <__sflush_r+0x64>
 800af12:	6829      	ldr	r1, [r5, #0]
 800af14:	291d      	cmp	r1, #29
 800af16:	d82b      	bhi.n	800af70 <__sflush_r+0xb4>
 800af18:	4a28      	ldr	r2, [pc, #160]	; (800afbc <__sflush_r+0x100>)
 800af1a:	410a      	asrs	r2, r1
 800af1c:	07d6      	lsls	r6, r2, #31
 800af1e:	d427      	bmi.n	800af70 <__sflush_r+0xb4>
 800af20:	2200      	movs	r2, #0
 800af22:	6062      	str	r2, [r4, #4]
 800af24:	6922      	ldr	r2, [r4, #16]
 800af26:	04d9      	lsls	r1, r3, #19
 800af28:	6022      	str	r2, [r4, #0]
 800af2a:	d504      	bpl.n	800af36 <__sflush_r+0x7a>
 800af2c:	1c42      	adds	r2, r0, #1
 800af2e:	d101      	bne.n	800af34 <__sflush_r+0x78>
 800af30:	682b      	ldr	r3, [r5, #0]
 800af32:	b903      	cbnz	r3, 800af36 <__sflush_r+0x7a>
 800af34:	6560      	str	r0, [r4, #84]	; 0x54
 800af36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af38:	602f      	str	r7, [r5, #0]
 800af3a:	2900      	cmp	r1, #0
 800af3c:	d0ca      	beq.n	800aed4 <__sflush_r+0x18>
 800af3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af42:	4299      	cmp	r1, r3
 800af44:	d002      	beq.n	800af4c <__sflush_r+0x90>
 800af46:	4628      	mov	r0, r5
 800af48:	f7fe fd4e 	bl	80099e8 <_free_r>
 800af4c:	2000      	movs	r0, #0
 800af4e:	6360      	str	r0, [r4, #52]	; 0x34
 800af50:	e7c1      	b.n	800aed6 <__sflush_r+0x1a>
 800af52:	2301      	movs	r3, #1
 800af54:	4628      	mov	r0, r5
 800af56:	47b0      	blx	r6
 800af58:	1c41      	adds	r1, r0, #1
 800af5a:	d1c8      	bne.n	800aeee <__sflush_r+0x32>
 800af5c:	682b      	ldr	r3, [r5, #0]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d0c5      	beq.n	800aeee <__sflush_r+0x32>
 800af62:	2b1d      	cmp	r3, #29
 800af64:	d001      	beq.n	800af6a <__sflush_r+0xae>
 800af66:	2b16      	cmp	r3, #22
 800af68:	d101      	bne.n	800af6e <__sflush_r+0xb2>
 800af6a:	602f      	str	r7, [r5, #0]
 800af6c:	e7b2      	b.n	800aed4 <__sflush_r+0x18>
 800af6e:	89a3      	ldrh	r3, [r4, #12]
 800af70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af74:	81a3      	strh	r3, [r4, #12]
 800af76:	e7ae      	b.n	800aed6 <__sflush_r+0x1a>
 800af78:	690f      	ldr	r7, [r1, #16]
 800af7a:	2f00      	cmp	r7, #0
 800af7c:	d0aa      	beq.n	800aed4 <__sflush_r+0x18>
 800af7e:	0793      	lsls	r3, r2, #30
 800af80:	bf18      	it	ne
 800af82:	2300      	movne	r3, #0
 800af84:	680e      	ldr	r6, [r1, #0]
 800af86:	bf08      	it	eq
 800af88:	694b      	ldreq	r3, [r1, #20]
 800af8a:	1bf6      	subs	r6, r6, r7
 800af8c:	600f      	str	r7, [r1, #0]
 800af8e:	608b      	str	r3, [r1, #8]
 800af90:	2e00      	cmp	r6, #0
 800af92:	dd9f      	ble.n	800aed4 <__sflush_r+0x18>
 800af94:	4633      	mov	r3, r6
 800af96:	463a      	mov	r2, r7
 800af98:	4628      	mov	r0, r5
 800af9a:	6a21      	ldr	r1, [r4, #32]
 800af9c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800afa0:	47e0      	blx	ip
 800afa2:	2800      	cmp	r0, #0
 800afa4:	dc06      	bgt.n	800afb4 <__sflush_r+0xf8>
 800afa6:	89a3      	ldrh	r3, [r4, #12]
 800afa8:	f04f 30ff 	mov.w	r0, #4294967295
 800afac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afb0:	81a3      	strh	r3, [r4, #12]
 800afb2:	e790      	b.n	800aed6 <__sflush_r+0x1a>
 800afb4:	4407      	add	r7, r0
 800afb6:	1a36      	subs	r6, r6, r0
 800afb8:	e7ea      	b.n	800af90 <__sflush_r+0xd4>
 800afba:	bf00      	nop
 800afbc:	dfbffffe 	.word	0xdfbffffe

0800afc0 <_fflush_r>:
 800afc0:	b538      	push	{r3, r4, r5, lr}
 800afc2:	690b      	ldr	r3, [r1, #16]
 800afc4:	4605      	mov	r5, r0
 800afc6:	460c      	mov	r4, r1
 800afc8:	b913      	cbnz	r3, 800afd0 <_fflush_r+0x10>
 800afca:	2500      	movs	r5, #0
 800afcc:	4628      	mov	r0, r5
 800afce:	bd38      	pop	{r3, r4, r5, pc}
 800afd0:	b118      	cbz	r0, 800afda <_fflush_r+0x1a>
 800afd2:	6a03      	ldr	r3, [r0, #32]
 800afd4:	b90b      	cbnz	r3, 800afda <_fflush_r+0x1a>
 800afd6:	f7fd fd31 	bl	8008a3c <__sinit>
 800afda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d0f3      	beq.n	800afca <_fflush_r+0xa>
 800afe2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800afe4:	07d0      	lsls	r0, r2, #31
 800afe6:	d404      	bmi.n	800aff2 <_fflush_r+0x32>
 800afe8:	0599      	lsls	r1, r3, #22
 800afea:	d402      	bmi.n	800aff2 <_fflush_r+0x32>
 800afec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afee:	f7fd fe66 	bl	8008cbe <__retarget_lock_acquire_recursive>
 800aff2:	4628      	mov	r0, r5
 800aff4:	4621      	mov	r1, r4
 800aff6:	f7ff ff61 	bl	800aebc <__sflush_r>
 800affa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800affc:	4605      	mov	r5, r0
 800affe:	07da      	lsls	r2, r3, #31
 800b000:	d4e4      	bmi.n	800afcc <_fflush_r+0xc>
 800b002:	89a3      	ldrh	r3, [r4, #12]
 800b004:	059b      	lsls	r3, r3, #22
 800b006:	d4e1      	bmi.n	800afcc <_fflush_r+0xc>
 800b008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b00a:	f7fd fe59 	bl	8008cc0 <__retarget_lock_release_recursive>
 800b00e:	e7dd      	b.n	800afcc <_fflush_r+0xc>

0800b010 <memmove>:
 800b010:	4288      	cmp	r0, r1
 800b012:	b510      	push	{r4, lr}
 800b014:	eb01 0402 	add.w	r4, r1, r2
 800b018:	d902      	bls.n	800b020 <memmove+0x10>
 800b01a:	4284      	cmp	r4, r0
 800b01c:	4623      	mov	r3, r4
 800b01e:	d807      	bhi.n	800b030 <memmove+0x20>
 800b020:	1e43      	subs	r3, r0, #1
 800b022:	42a1      	cmp	r1, r4
 800b024:	d008      	beq.n	800b038 <memmove+0x28>
 800b026:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b02a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b02e:	e7f8      	b.n	800b022 <memmove+0x12>
 800b030:	4601      	mov	r1, r0
 800b032:	4402      	add	r2, r0
 800b034:	428a      	cmp	r2, r1
 800b036:	d100      	bne.n	800b03a <memmove+0x2a>
 800b038:	bd10      	pop	{r4, pc}
 800b03a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b03e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b042:	e7f7      	b.n	800b034 <memmove+0x24>

0800b044 <_sbrk_r>:
 800b044:	b538      	push	{r3, r4, r5, lr}
 800b046:	2300      	movs	r3, #0
 800b048:	4d05      	ldr	r5, [pc, #20]	; (800b060 <_sbrk_r+0x1c>)
 800b04a:	4604      	mov	r4, r0
 800b04c:	4608      	mov	r0, r1
 800b04e:	602b      	str	r3, [r5, #0]
 800b050:	f7f8 fc2e 	bl	80038b0 <_sbrk>
 800b054:	1c43      	adds	r3, r0, #1
 800b056:	d102      	bne.n	800b05e <_sbrk_r+0x1a>
 800b058:	682b      	ldr	r3, [r5, #0]
 800b05a:	b103      	cbz	r3, 800b05e <_sbrk_r+0x1a>
 800b05c:	6023      	str	r3, [r4, #0]
 800b05e:	bd38      	pop	{r3, r4, r5, pc}
 800b060:	20000bd8 	.word	0x20000bd8

0800b064 <__assert_func>:
 800b064:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b066:	4614      	mov	r4, r2
 800b068:	461a      	mov	r2, r3
 800b06a:	4b09      	ldr	r3, [pc, #36]	; (800b090 <__assert_func+0x2c>)
 800b06c:	4605      	mov	r5, r0
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	68d8      	ldr	r0, [r3, #12]
 800b072:	b14c      	cbz	r4, 800b088 <__assert_func+0x24>
 800b074:	4b07      	ldr	r3, [pc, #28]	; (800b094 <__assert_func+0x30>)
 800b076:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b07a:	9100      	str	r1, [sp, #0]
 800b07c:	462b      	mov	r3, r5
 800b07e:	4906      	ldr	r1, [pc, #24]	; (800b098 <__assert_func+0x34>)
 800b080:	f000 f852 	bl	800b128 <fiprintf>
 800b084:	f000 f862 	bl	800b14c <abort>
 800b088:	4b04      	ldr	r3, [pc, #16]	; (800b09c <__assert_func+0x38>)
 800b08a:	461c      	mov	r4, r3
 800b08c:	e7f3      	b.n	800b076 <__assert_func+0x12>
 800b08e:	bf00      	nop
 800b090:	200001e4 	.word	0x200001e4
 800b094:	0800e7ad 	.word	0x0800e7ad
 800b098:	0800e7ba 	.word	0x0800e7ba
 800b09c:	0800e7e8 	.word	0x0800e7e8

0800b0a0 <_calloc_r>:
 800b0a0:	b570      	push	{r4, r5, r6, lr}
 800b0a2:	fba1 5402 	umull	r5, r4, r1, r2
 800b0a6:	b934      	cbnz	r4, 800b0b6 <_calloc_r+0x16>
 800b0a8:	4629      	mov	r1, r5
 800b0aa:	f7ff f867 	bl	800a17c <_malloc_r>
 800b0ae:	4606      	mov	r6, r0
 800b0b0:	b928      	cbnz	r0, 800b0be <_calloc_r+0x1e>
 800b0b2:	4630      	mov	r0, r6
 800b0b4:	bd70      	pop	{r4, r5, r6, pc}
 800b0b6:	220c      	movs	r2, #12
 800b0b8:	2600      	movs	r6, #0
 800b0ba:	6002      	str	r2, [r0, #0]
 800b0bc:	e7f9      	b.n	800b0b2 <_calloc_r+0x12>
 800b0be:	462a      	mov	r2, r5
 800b0c0:	4621      	mov	r1, r4
 800b0c2:	f7fd fd54 	bl	8008b6e <memset>
 800b0c6:	e7f4      	b.n	800b0b2 <_calloc_r+0x12>

0800b0c8 <_realloc_r>:
 800b0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0cc:	4680      	mov	r8, r0
 800b0ce:	4614      	mov	r4, r2
 800b0d0:	460e      	mov	r6, r1
 800b0d2:	b921      	cbnz	r1, 800b0de <_realloc_r+0x16>
 800b0d4:	4611      	mov	r1, r2
 800b0d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0da:	f7ff b84f 	b.w	800a17c <_malloc_r>
 800b0de:	b92a      	cbnz	r2, 800b0ec <_realloc_r+0x24>
 800b0e0:	f7fe fc82 	bl	80099e8 <_free_r>
 800b0e4:	4625      	mov	r5, r4
 800b0e6:	4628      	mov	r0, r5
 800b0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0ec:	f000 f835 	bl	800b15a <_malloc_usable_size_r>
 800b0f0:	4284      	cmp	r4, r0
 800b0f2:	4607      	mov	r7, r0
 800b0f4:	d802      	bhi.n	800b0fc <_realloc_r+0x34>
 800b0f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b0fa:	d812      	bhi.n	800b122 <_realloc_r+0x5a>
 800b0fc:	4621      	mov	r1, r4
 800b0fe:	4640      	mov	r0, r8
 800b100:	f7ff f83c 	bl	800a17c <_malloc_r>
 800b104:	4605      	mov	r5, r0
 800b106:	2800      	cmp	r0, #0
 800b108:	d0ed      	beq.n	800b0e6 <_realloc_r+0x1e>
 800b10a:	42bc      	cmp	r4, r7
 800b10c:	4622      	mov	r2, r4
 800b10e:	4631      	mov	r1, r6
 800b110:	bf28      	it	cs
 800b112:	463a      	movcs	r2, r7
 800b114:	f7fd fde3 	bl	8008cde <memcpy>
 800b118:	4631      	mov	r1, r6
 800b11a:	4640      	mov	r0, r8
 800b11c:	f7fe fc64 	bl	80099e8 <_free_r>
 800b120:	e7e1      	b.n	800b0e6 <_realloc_r+0x1e>
 800b122:	4635      	mov	r5, r6
 800b124:	e7df      	b.n	800b0e6 <_realloc_r+0x1e>
	...

0800b128 <fiprintf>:
 800b128:	b40e      	push	{r1, r2, r3}
 800b12a:	b503      	push	{r0, r1, lr}
 800b12c:	4601      	mov	r1, r0
 800b12e:	ab03      	add	r3, sp, #12
 800b130:	4805      	ldr	r0, [pc, #20]	; (800b148 <fiprintf+0x20>)
 800b132:	f853 2b04 	ldr.w	r2, [r3], #4
 800b136:	6800      	ldr	r0, [r0, #0]
 800b138:	9301      	str	r3, [sp, #4]
 800b13a:	f000 f83d 	bl	800b1b8 <_vfiprintf_r>
 800b13e:	b002      	add	sp, #8
 800b140:	f85d eb04 	ldr.w	lr, [sp], #4
 800b144:	b003      	add	sp, #12
 800b146:	4770      	bx	lr
 800b148:	200001e4 	.word	0x200001e4

0800b14c <abort>:
 800b14c:	2006      	movs	r0, #6
 800b14e:	b508      	push	{r3, lr}
 800b150:	f000 fa0a 	bl	800b568 <raise>
 800b154:	2001      	movs	r0, #1
 800b156:	f7f8 fb38 	bl	80037ca <_exit>

0800b15a <_malloc_usable_size_r>:
 800b15a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b15e:	1f18      	subs	r0, r3, #4
 800b160:	2b00      	cmp	r3, #0
 800b162:	bfbc      	itt	lt
 800b164:	580b      	ldrlt	r3, [r1, r0]
 800b166:	18c0      	addlt	r0, r0, r3
 800b168:	4770      	bx	lr

0800b16a <__sfputc_r>:
 800b16a:	6893      	ldr	r3, [r2, #8]
 800b16c:	b410      	push	{r4}
 800b16e:	3b01      	subs	r3, #1
 800b170:	2b00      	cmp	r3, #0
 800b172:	6093      	str	r3, [r2, #8]
 800b174:	da07      	bge.n	800b186 <__sfputc_r+0x1c>
 800b176:	6994      	ldr	r4, [r2, #24]
 800b178:	42a3      	cmp	r3, r4
 800b17a:	db01      	blt.n	800b180 <__sfputc_r+0x16>
 800b17c:	290a      	cmp	r1, #10
 800b17e:	d102      	bne.n	800b186 <__sfputc_r+0x1c>
 800b180:	bc10      	pop	{r4}
 800b182:	f000 b933 	b.w	800b3ec <__swbuf_r>
 800b186:	6813      	ldr	r3, [r2, #0]
 800b188:	1c58      	adds	r0, r3, #1
 800b18a:	6010      	str	r0, [r2, #0]
 800b18c:	7019      	strb	r1, [r3, #0]
 800b18e:	4608      	mov	r0, r1
 800b190:	bc10      	pop	{r4}
 800b192:	4770      	bx	lr

0800b194 <__sfputs_r>:
 800b194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b196:	4606      	mov	r6, r0
 800b198:	460f      	mov	r7, r1
 800b19a:	4614      	mov	r4, r2
 800b19c:	18d5      	adds	r5, r2, r3
 800b19e:	42ac      	cmp	r4, r5
 800b1a0:	d101      	bne.n	800b1a6 <__sfputs_r+0x12>
 800b1a2:	2000      	movs	r0, #0
 800b1a4:	e007      	b.n	800b1b6 <__sfputs_r+0x22>
 800b1a6:	463a      	mov	r2, r7
 800b1a8:	4630      	mov	r0, r6
 800b1aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1ae:	f7ff ffdc 	bl	800b16a <__sfputc_r>
 800b1b2:	1c43      	adds	r3, r0, #1
 800b1b4:	d1f3      	bne.n	800b19e <__sfputs_r+0xa>
 800b1b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b1b8 <_vfiprintf_r>:
 800b1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1bc:	460d      	mov	r5, r1
 800b1be:	4614      	mov	r4, r2
 800b1c0:	4698      	mov	r8, r3
 800b1c2:	4606      	mov	r6, r0
 800b1c4:	b09d      	sub	sp, #116	; 0x74
 800b1c6:	b118      	cbz	r0, 800b1d0 <_vfiprintf_r+0x18>
 800b1c8:	6a03      	ldr	r3, [r0, #32]
 800b1ca:	b90b      	cbnz	r3, 800b1d0 <_vfiprintf_r+0x18>
 800b1cc:	f7fd fc36 	bl	8008a3c <__sinit>
 800b1d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1d2:	07d9      	lsls	r1, r3, #31
 800b1d4:	d405      	bmi.n	800b1e2 <_vfiprintf_r+0x2a>
 800b1d6:	89ab      	ldrh	r3, [r5, #12]
 800b1d8:	059a      	lsls	r2, r3, #22
 800b1da:	d402      	bmi.n	800b1e2 <_vfiprintf_r+0x2a>
 800b1dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1de:	f7fd fd6e 	bl	8008cbe <__retarget_lock_acquire_recursive>
 800b1e2:	89ab      	ldrh	r3, [r5, #12]
 800b1e4:	071b      	lsls	r3, r3, #28
 800b1e6:	d501      	bpl.n	800b1ec <_vfiprintf_r+0x34>
 800b1e8:	692b      	ldr	r3, [r5, #16]
 800b1ea:	b99b      	cbnz	r3, 800b214 <_vfiprintf_r+0x5c>
 800b1ec:	4629      	mov	r1, r5
 800b1ee:	4630      	mov	r0, r6
 800b1f0:	f000 f93a 	bl	800b468 <__swsetup_r>
 800b1f4:	b170      	cbz	r0, 800b214 <_vfiprintf_r+0x5c>
 800b1f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1f8:	07dc      	lsls	r4, r3, #31
 800b1fa:	d504      	bpl.n	800b206 <_vfiprintf_r+0x4e>
 800b1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b200:	b01d      	add	sp, #116	; 0x74
 800b202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b206:	89ab      	ldrh	r3, [r5, #12]
 800b208:	0598      	lsls	r0, r3, #22
 800b20a:	d4f7      	bmi.n	800b1fc <_vfiprintf_r+0x44>
 800b20c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b20e:	f7fd fd57 	bl	8008cc0 <__retarget_lock_release_recursive>
 800b212:	e7f3      	b.n	800b1fc <_vfiprintf_r+0x44>
 800b214:	2300      	movs	r3, #0
 800b216:	9309      	str	r3, [sp, #36]	; 0x24
 800b218:	2320      	movs	r3, #32
 800b21a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b21e:	2330      	movs	r3, #48	; 0x30
 800b220:	f04f 0901 	mov.w	r9, #1
 800b224:	f8cd 800c 	str.w	r8, [sp, #12]
 800b228:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800b3d8 <_vfiprintf_r+0x220>
 800b22c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b230:	4623      	mov	r3, r4
 800b232:	469a      	mov	sl, r3
 800b234:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b238:	b10a      	cbz	r2, 800b23e <_vfiprintf_r+0x86>
 800b23a:	2a25      	cmp	r2, #37	; 0x25
 800b23c:	d1f9      	bne.n	800b232 <_vfiprintf_r+0x7a>
 800b23e:	ebba 0b04 	subs.w	fp, sl, r4
 800b242:	d00b      	beq.n	800b25c <_vfiprintf_r+0xa4>
 800b244:	465b      	mov	r3, fp
 800b246:	4622      	mov	r2, r4
 800b248:	4629      	mov	r1, r5
 800b24a:	4630      	mov	r0, r6
 800b24c:	f7ff ffa2 	bl	800b194 <__sfputs_r>
 800b250:	3001      	adds	r0, #1
 800b252:	f000 80a9 	beq.w	800b3a8 <_vfiprintf_r+0x1f0>
 800b256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b258:	445a      	add	r2, fp
 800b25a:	9209      	str	r2, [sp, #36]	; 0x24
 800b25c:	f89a 3000 	ldrb.w	r3, [sl]
 800b260:	2b00      	cmp	r3, #0
 800b262:	f000 80a1 	beq.w	800b3a8 <_vfiprintf_r+0x1f0>
 800b266:	2300      	movs	r3, #0
 800b268:	f04f 32ff 	mov.w	r2, #4294967295
 800b26c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b270:	f10a 0a01 	add.w	sl, sl, #1
 800b274:	9304      	str	r3, [sp, #16]
 800b276:	9307      	str	r3, [sp, #28]
 800b278:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b27c:	931a      	str	r3, [sp, #104]	; 0x68
 800b27e:	4654      	mov	r4, sl
 800b280:	2205      	movs	r2, #5
 800b282:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b286:	4854      	ldr	r0, [pc, #336]	; (800b3d8 <_vfiprintf_r+0x220>)
 800b288:	f7fd fd1b 	bl	8008cc2 <memchr>
 800b28c:	9a04      	ldr	r2, [sp, #16]
 800b28e:	b9d8      	cbnz	r0, 800b2c8 <_vfiprintf_r+0x110>
 800b290:	06d1      	lsls	r1, r2, #27
 800b292:	bf44      	itt	mi
 800b294:	2320      	movmi	r3, #32
 800b296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b29a:	0713      	lsls	r3, r2, #28
 800b29c:	bf44      	itt	mi
 800b29e:	232b      	movmi	r3, #43	; 0x2b
 800b2a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2a4:	f89a 3000 	ldrb.w	r3, [sl]
 800b2a8:	2b2a      	cmp	r3, #42	; 0x2a
 800b2aa:	d015      	beq.n	800b2d8 <_vfiprintf_r+0x120>
 800b2ac:	4654      	mov	r4, sl
 800b2ae:	2000      	movs	r0, #0
 800b2b0:	f04f 0c0a 	mov.w	ip, #10
 800b2b4:	9a07      	ldr	r2, [sp, #28]
 800b2b6:	4621      	mov	r1, r4
 800b2b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2bc:	3b30      	subs	r3, #48	; 0x30
 800b2be:	2b09      	cmp	r3, #9
 800b2c0:	d94d      	bls.n	800b35e <_vfiprintf_r+0x1a6>
 800b2c2:	b1b0      	cbz	r0, 800b2f2 <_vfiprintf_r+0x13a>
 800b2c4:	9207      	str	r2, [sp, #28]
 800b2c6:	e014      	b.n	800b2f2 <_vfiprintf_r+0x13a>
 800b2c8:	eba0 0308 	sub.w	r3, r0, r8
 800b2cc:	fa09 f303 	lsl.w	r3, r9, r3
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	46a2      	mov	sl, r4
 800b2d4:	9304      	str	r3, [sp, #16]
 800b2d6:	e7d2      	b.n	800b27e <_vfiprintf_r+0xc6>
 800b2d8:	9b03      	ldr	r3, [sp, #12]
 800b2da:	1d19      	adds	r1, r3, #4
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	9103      	str	r1, [sp, #12]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	bfbb      	ittet	lt
 800b2e4:	425b      	neglt	r3, r3
 800b2e6:	f042 0202 	orrlt.w	r2, r2, #2
 800b2ea:	9307      	strge	r3, [sp, #28]
 800b2ec:	9307      	strlt	r3, [sp, #28]
 800b2ee:	bfb8      	it	lt
 800b2f0:	9204      	strlt	r2, [sp, #16]
 800b2f2:	7823      	ldrb	r3, [r4, #0]
 800b2f4:	2b2e      	cmp	r3, #46	; 0x2e
 800b2f6:	d10c      	bne.n	800b312 <_vfiprintf_r+0x15a>
 800b2f8:	7863      	ldrb	r3, [r4, #1]
 800b2fa:	2b2a      	cmp	r3, #42	; 0x2a
 800b2fc:	d134      	bne.n	800b368 <_vfiprintf_r+0x1b0>
 800b2fe:	9b03      	ldr	r3, [sp, #12]
 800b300:	3402      	adds	r4, #2
 800b302:	1d1a      	adds	r2, r3, #4
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	9203      	str	r2, [sp, #12]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	bfb8      	it	lt
 800b30c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b310:	9305      	str	r3, [sp, #20]
 800b312:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b3dc <_vfiprintf_r+0x224>
 800b316:	2203      	movs	r2, #3
 800b318:	4650      	mov	r0, sl
 800b31a:	7821      	ldrb	r1, [r4, #0]
 800b31c:	f7fd fcd1 	bl	8008cc2 <memchr>
 800b320:	b138      	cbz	r0, 800b332 <_vfiprintf_r+0x17a>
 800b322:	2240      	movs	r2, #64	; 0x40
 800b324:	9b04      	ldr	r3, [sp, #16]
 800b326:	eba0 000a 	sub.w	r0, r0, sl
 800b32a:	4082      	lsls	r2, r0
 800b32c:	4313      	orrs	r3, r2
 800b32e:	3401      	adds	r4, #1
 800b330:	9304      	str	r3, [sp, #16]
 800b332:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b336:	2206      	movs	r2, #6
 800b338:	4829      	ldr	r0, [pc, #164]	; (800b3e0 <_vfiprintf_r+0x228>)
 800b33a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b33e:	f7fd fcc0 	bl	8008cc2 <memchr>
 800b342:	2800      	cmp	r0, #0
 800b344:	d03f      	beq.n	800b3c6 <_vfiprintf_r+0x20e>
 800b346:	4b27      	ldr	r3, [pc, #156]	; (800b3e4 <_vfiprintf_r+0x22c>)
 800b348:	bb1b      	cbnz	r3, 800b392 <_vfiprintf_r+0x1da>
 800b34a:	9b03      	ldr	r3, [sp, #12]
 800b34c:	3307      	adds	r3, #7
 800b34e:	f023 0307 	bic.w	r3, r3, #7
 800b352:	3308      	adds	r3, #8
 800b354:	9303      	str	r3, [sp, #12]
 800b356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b358:	443b      	add	r3, r7
 800b35a:	9309      	str	r3, [sp, #36]	; 0x24
 800b35c:	e768      	b.n	800b230 <_vfiprintf_r+0x78>
 800b35e:	460c      	mov	r4, r1
 800b360:	2001      	movs	r0, #1
 800b362:	fb0c 3202 	mla	r2, ip, r2, r3
 800b366:	e7a6      	b.n	800b2b6 <_vfiprintf_r+0xfe>
 800b368:	2300      	movs	r3, #0
 800b36a:	f04f 0c0a 	mov.w	ip, #10
 800b36e:	4619      	mov	r1, r3
 800b370:	3401      	adds	r4, #1
 800b372:	9305      	str	r3, [sp, #20]
 800b374:	4620      	mov	r0, r4
 800b376:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b37a:	3a30      	subs	r2, #48	; 0x30
 800b37c:	2a09      	cmp	r2, #9
 800b37e:	d903      	bls.n	800b388 <_vfiprintf_r+0x1d0>
 800b380:	2b00      	cmp	r3, #0
 800b382:	d0c6      	beq.n	800b312 <_vfiprintf_r+0x15a>
 800b384:	9105      	str	r1, [sp, #20]
 800b386:	e7c4      	b.n	800b312 <_vfiprintf_r+0x15a>
 800b388:	4604      	mov	r4, r0
 800b38a:	2301      	movs	r3, #1
 800b38c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b390:	e7f0      	b.n	800b374 <_vfiprintf_r+0x1bc>
 800b392:	ab03      	add	r3, sp, #12
 800b394:	9300      	str	r3, [sp, #0]
 800b396:	462a      	mov	r2, r5
 800b398:	4630      	mov	r0, r6
 800b39a:	4b13      	ldr	r3, [pc, #76]	; (800b3e8 <_vfiprintf_r+0x230>)
 800b39c:	a904      	add	r1, sp, #16
 800b39e:	f7fc feff 	bl	80081a0 <_printf_float>
 800b3a2:	4607      	mov	r7, r0
 800b3a4:	1c78      	adds	r0, r7, #1
 800b3a6:	d1d6      	bne.n	800b356 <_vfiprintf_r+0x19e>
 800b3a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3aa:	07d9      	lsls	r1, r3, #31
 800b3ac:	d405      	bmi.n	800b3ba <_vfiprintf_r+0x202>
 800b3ae:	89ab      	ldrh	r3, [r5, #12]
 800b3b0:	059a      	lsls	r2, r3, #22
 800b3b2:	d402      	bmi.n	800b3ba <_vfiprintf_r+0x202>
 800b3b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3b6:	f7fd fc83 	bl	8008cc0 <__retarget_lock_release_recursive>
 800b3ba:	89ab      	ldrh	r3, [r5, #12]
 800b3bc:	065b      	lsls	r3, r3, #25
 800b3be:	f53f af1d 	bmi.w	800b1fc <_vfiprintf_r+0x44>
 800b3c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3c4:	e71c      	b.n	800b200 <_vfiprintf_r+0x48>
 800b3c6:	ab03      	add	r3, sp, #12
 800b3c8:	9300      	str	r3, [sp, #0]
 800b3ca:	462a      	mov	r2, r5
 800b3cc:	4630      	mov	r0, r6
 800b3ce:	4b06      	ldr	r3, [pc, #24]	; (800b3e8 <_vfiprintf_r+0x230>)
 800b3d0:	a904      	add	r1, sp, #16
 800b3d2:	f7fd f985 	bl	80086e0 <_printf_i>
 800b3d6:	e7e4      	b.n	800b3a2 <_vfiprintf_r+0x1ea>
 800b3d8:	0800e79c 	.word	0x0800e79c
 800b3dc:	0800e7a2 	.word	0x0800e7a2
 800b3e0:	0800e7a6 	.word	0x0800e7a6
 800b3e4:	080081a1 	.word	0x080081a1
 800b3e8:	0800b195 	.word	0x0800b195

0800b3ec <__swbuf_r>:
 800b3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ee:	460e      	mov	r6, r1
 800b3f0:	4614      	mov	r4, r2
 800b3f2:	4605      	mov	r5, r0
 800b3f4:	b118      	cbz	r0, 800b3fe <__swbuf_r+0x12>
 800b3f6:	6a03      	ldr	r3, [r0, #32]
 800b3f8:	b90b      	cbnz	r3, 800b3fe <__swbuf_r+0x12>
 800b3fa:	f7fd fb1f 	bl	8008a3c <__sinit>
 800b3fe:	69a3      	ldr	r3, [r4, #24]
 800b400:	60a3      	str	r3, [r4, #8]
 800b402:	89a3      	ldrh	r3, [r4, #12]
 800b404:	071a      	lsls	r2, r3, #28
 800b406:	d525      	bpl.n	800b454 <__swbuf_r+0x68>
 800b408:	6923      	ldr	r3, [r4, #16]
 800b40a:	b31b      	cbz	r3, 800b454 <__swbuf_r+0x68>
 800b40c:	6823      	ldr	r3, [r4, #0]
 800b40e:	6922      	ldr	r2, [r4, #16]
 800b410:	b2f6      	uxtb	r6, r6
 800b412:	1a98      	subs	r0, r3, r2
 800b414:	6963      	ldr	r3, [r4, #20]
 800b416:	4637      	mov	r7, r6
 800b418:	4283      	cmp	r3, r0
 800b41a:	dc04      	bgt.n	800b426 <__swbuf_r+0x3a>
 800b41c:	4621      	mov	r1, r4
 800b41e:	4628      	mov	r0, r5
 800b420:	f7ff fdce 	bl	800afc0 <_fflush_r>
 800b424:	b9e0      	cbnz	r0, 800b460 <__swbuf_r+0x74>
 800b426:	68a3      	ldr	r3, [r4, #8]
 800b428:	3b01      	subs	r3, #1
 800b42a:	60a3      	str	r3, [r4, #8]
 800b42c:	6823      	ldr	r3, [r4, #0]
 800b42e:	1c5a      	adds	r2, r3, #1
 800b430:	6022      	str	r2, [r4, #0]
 800b432:	701e      	strb	r6, [r3, #0]
 800b434:	6962      	ldr	r2, [r4, #20]
 800b436:	1c43      	adds	r3, r0, #1
 800b438:	429a      	cmp	r2, r3
 800b43a:	d004      	beq.n	800b446 <__swbuf_r+0x5a>
 800b43c:	89a3      	ldrh	r3, [r4, #12]
 800b43e:	07db      	lsls	r3, r3, #31
 800b440:	d506      	bpl.n	800b450 <__swbuf_r+0x64>
 800b442:	2e0a      	cmp	r6, #10
 800b444:	d104      	bne.n	800b450 <__swbuf_r+0x64>
 800b446:	4621      	mov	r1, r4
 800b448:	4628      	mov	r0, r5
 800b44a:	f7ff fdb9 	bl	800afc0 <_fflush_r>
 800b44e:	b938      	cbnz	r0, 800b460 <__swbuf_r+0x74>
 800b450:	4638      	mov	r0, r7
 800b452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b454:	4621      	mov	r1, r4
 800b456:	4628      	mov	r0, r5
 800b458:	f000 f806 	bl	800b468 <__swsetup_r>
 800b45c:	2800      	cmp	r0, #0
 800b45e:	d0d5      	beq.n	800b40c <__swbuf_r+0x20>
 800b460:	f04f 37ff 	mov.w	r7, #4294967295
 800b464:	e7f4      	b.n	800b450 <__swbuf_r+0x64>
	...

0800b468 <__swsetup_r>:
 800b468:	b538      	push	{r3, r4, r5, lr}
 800b46a:	4b2a      	ldr	r3, [pc, #168]	; (800b514 <__swsetup_r+0xac>)
 800b46c:	4605      	mov	r5, r0
 800b46e:	6818      	ldr	r0, [r3, #0]
 800b470:	460c      	mov	r4, r1
 800b472:	b118      	cbz	r0, 800b47c <__swsetup_r+0x14>
 800b474:	6a03      	ldr	r3, [r0, #32]
 800b476:	b90b      	cbnz	r3, 800b47c <__swsetup_r+0x14>
 800b478:	f7fd fae0 	bl	8008a3c <__sinit>
 800b47c:	89a3      	ldrh	r3, [r4, #12]
 800b47e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b482:	0718      	lsls	r0, r3, #28
 800b484:	d422      	bmi.n	800b4cc <__swsetup_r+0x64>
 800b486:	06d9      	lsls	r1, r3, #27
 800b488:	d407      	bmi.n	800b49a <__swsetup_r+0x32>
 800b48a:	2309      	movs	r3, #9
 800b48c:	602b      	str	r3, [r5, #0]
 800b48e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b492:	f04f 30ff 	mov.w	r0, #4294967295
 800b496:	81a3      	strh	r3, [r4, #12]
 800b498:	e034      	b.n	800b504 <__swsetup_r+0x9c>
 800b49a:	0758      	lsls	r0, r3, #29
 800b49c:	d512      	bpl.n	800b4c4 <__swsetup_r+0x5c>
 800b49e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4a0:	b141      	cbz	r1, 800b4b4 <__swsetup_r+0x4c>
 800b4a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4a6:	4299      	cmp	r1, r3
 800b4a8:	d002      	beq.n	800b4b0 <__swsetup_r+0x48>
 800b4aa:	4628      	mov	r0, r5
 800b4ac:	f7fe fa9c 	bl	80099e8 <_free_r>
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	6363      	str	r3, [r4, #52]	; 0x34
 800b4b4:	89a3      	ldrh	r3, [r4, #12]
 800b4b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b4ba:	81a3      	strh	r3, [r4, #12]
 800b4bc:	2300      	movs	r3, #0
 800b4be:	6063      	str	r3, [r4, #4]
 800b4c0:	6923      	ldr	r3, [r4, #16]
 800b4c2:	6023      	str	r3, [r4, #0]
 800b4c4:	89a3      	ldrh	r3, [r4, #12]
 800b4c6:	f043 0308 	orr.w	r3, r3, #8
 800b4ca:	81a3      	strh	r3, [r4, #12]
 800b4cc:	6923      	ldr	r3, [r4, #16]
 800b4ce:	b94b      	cbnz	r3, 800b4e4 <__swsetup_r+0x7c>
 800b4d0:	89a3      	ldrh	r3, [r4, #12]
 800b4d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b4d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4da:	d003      	beq.n	800b4e4 <__swsetup_r+0x7c>
 800b4dc:	4621      	mov	r1, r4
 800b4de:	4628      	mov	r0, r5
 800b4e0:	f000 f883 	bl	800b5ea <__smakebuf_r>
 800b4e4:	89a0      	ldrh	r0, [r4, #12]
 800b4e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4ea:	f010 0301 	ands.w	r3, r0, #1
 800b4ee:	d00a      	beq.n	800b506 <__swsetup_r+0x9e>
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	60a3      	str	r3, [r4, #8]
 800b4f4:	6963      	ldr	r3, [r4, #20]
 800b4f6:	425b      	negs	r3, r3
 800b4f8:	61a3      	str	r3, [r4, #24]
 800b4fa:	6923      	ldr	r3, [r4, #16]
 800b4fc:	b943      	cbnz	r3, 800b510 <__swsetup_r+0xa8>
 800b4fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b502:	d1c4      	bne.n	800b48e <__swsetup_r+0x26>
 800b504:	bd38      	pop	{r3, r4, r5, pc}
 800b506:	0781      	lsls	r1, r0, #30
 800b508:	bf58      	it	pl
 800b50a:	6963      	ldrpl	r3, [r4, #20]
 800b50c:	60a3      	str	r3, [r4, #8]
 800b50e:	e7f4      	b.n	800b4fa <__swsetup_r+0x92>
 800b510:	2000      	movs	r0, #0
 800b512:	e7f7      	b.n	800b504 <__swsetup_r+0x9c>
 800b514:	200001e4 	.word	0x200001e4

0800b518 <_raise_r>:
 800b518:	291f      	cmp	r1, #31
 800b51a:	b538      	push	{r3, r4, r5, lr}
 800b51c:	4604      	mov	r4, r0
 800b51e:	460d      	mov	r5, r1
 800b520:	d904      	bls.n	800b52c <_raise_r+0x14>
 800b522:	2316      	movs	r3, #22
 800b524:	6003      	str	r3, [r0, #0]
 800b526:	f04f 30ff 	mov.w	r0, #4294967295
 800b52a:	bd38      	pop	{r3, r4, r5, pc}
 800b52c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b52e:	b112      	cbz	r2, 800b536 <_raise_r+0x1e>
 800b530:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b534:	b94b      	cbnz	r3, 800b54a <_raise_r+0x32>
 800b536:	4620      	mov	r0, r4
 800b538:	f000 f830 	bl	800b59c <_getpid_r>
 800b53c:	462a      	mov	r2, r5
 800b53e:	4601      	mov	r1, r0
 800b540:	4620      	mov	r0, r4
 800b542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b546:	f000 b817 	b.w	800b578 <_kill_r>
 800b54a:	2b01      	cmp	r3, #1
 800b54c:	d00a      	beq.n	800b564 <_raise_r+0x4c>
 800b54e:	1c59      	adds	r1, r3, #1
 800b550:	d103      	bne.n	800b55a <_raise_r+0x42>
 800b552:	2316      	movs	r3, #22
 800b554:	6003      	str	r3, [r0, #0]
 800b556:	2001      	movs	r0, #1
 800b558:	e7e7      	b.n	800b52a <_raise_r+0x12>
 800b55a:	2400      	movs	r4, #0
 800b55c:	4628      	mov	r0, r5
 800b55e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b562:	4798      	blx	r3
 800b564:	2000      	movs	r0, #0
 800b566:	e7e0      	b.n	800b52a <_raise_r+0x12>

0800b568 <raise>:
 800b568:	4b02      	ldr	r3, [pc, #8]	; (800b574 <raise+0xc>)
 800b56a:	4601      	mov	r1, r0
 800b56c:	6818      	ldr	r0, [r3, #0]
 800b56e:	f7ff bfd3 	b.w	800b518 <_raise_r>
 800b572:	bf00      	nop
 800b574:	200001e4 	.word	0x200001e4

0800b578 <_kill_r>:
 800b578:	b538      	push	{r3, r4, r5, lr}
 800b57a:	2300      	movs	r3, #0
 800b57c:	4d06      	ldr	r5, [pc, #24]	; (800b598 <_kill_r+0x20>)
 800b57e:	4604      	mov	r4, r0
 800b580:	4608      	mov	r0, r1
 800b582:	4611      	mov	r1, r2
 800b584:	602b      	str	r3, [r5, #0]
 800b586:	f7f8 f910 	bl	80037aa <_kill>
 800b58a:	1c43      	adds	r3, r0, #1
 800b58c:	d102      	bne.n	800b594 <_kill_r+0x1c>
 800b58e:	682b      	ldr	r3, [r5, #0]
 800b590:	b103      	cbz	r3, 800b594 <_kill_r+0x1c>
 800b592:	6023      	str	r3, [r4, #0]
 800b594:	bd38      	pop	{r3, r4, r5, pc}
 800b596:	bf00      	nop
 800b598:	20000bd8 	.word	0x20000bd8

0800b59c <_getpid_r>:
 800b59c:	f7f8 b8fe 	b.w	800379c <_getpid>

0800b5a0 <__swhatbuf_r>:
 800b5a0:	b570      	push	{r4, r5, r6, lr}
 800b5a2:	460c      	mov	r4, r1
 800b5a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5a8:	4615      	mov	r5, r2
 800b5aa:	2900      	cmp	r1, #0
 800b5ac:	461e      	mov	r6, r3
 800b5ae:	b096      	sub	sp, #88	; 0x58
 800b5b0:	da0c      	bge.n	800b5cc <__swhatbuf_r+0x2c>
 800b5b2:	89a3      	ldrh	r3, [r4, #12]
 800b5b4:	2100      	movs	r1, #0
 800b5b6:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b5ba:	bf0c      	ite	eq
 800b5bc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b5c0:	2340      	movne	r3, #64	; 0x40
 800b5c2:	2000      	movs	r0, #0
 800b5c4:	6031      	str	r1, [r6, #0]
 800b5c6:	602b      	str	r3, [r5, #0]
 800b5c8:	b016      	add	sp, #88	; 0x58
 800b5ca:	bd70      	pop	{r4, r5, r6, pc}
 800b5cc:	466a      	mov	r2, sp
 800b5ce:	f000 f849 	bl	800b664 <_fstat_r>
 800b5d2:	2800      	cmp	r0, #0
 800b5d4:	dbed      	blt.n	800b5b2 <__swhatbuf_r+0x12>
 800b5d6:	9901      	ldr	r1, [sp, #4]
 800b5d8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b5dc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b5e0:	4259      	negs	r1, r3
 800b5e2:	4159      	adcs	r1, r3
 800b5e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5e8:	e7eb      	b.n	800b5c2 <__swhatbuf_r+0x22>

0800b5ea <__smakebuf_r>:
 800b5ea:	898b      	ldrh	r3, [r1, #12]
 800b5ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b5ee:	079d      	lsls	r5, r3, #30
 800b5f0:	4606      	mov	r6, r0
 800b5f2:	460c      	mov	r4, r1
 800b5f4:	d507      	bpl.n	800b606 <__smakebuf_r+0x1c>
 800b5f6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b5fa:	6023      	str	r3, [r4, #0]
 800b5fc:	6123      	str	r3, [r4, #16]
 800b5fe:	2301      	movs	r3, #1
 800b600:	6163      	str	r3, [r4, #20]
 800b602:	b002      	add	sp, #8
 800b604:	bd70      	pop	{r4, r5, r6, pc}
 800b606:	466a      	mov	r2, sp
 800b608:	ab01      	add	r3, sp, #4
 800b60a:	f7ff ffc9 	bl	800b5a0 <__swhatbuf_r>
 800b60e:	9900      	ldr	r1, [sp, #0]
 800b610:	4605      	mov	r5, r0
 800b612:	4630      	mov	r0, r6
 800b614:	f7fe fdb2 	bl	800a17c <_malloc_r>
 800b618:	b948      	cbnz	r0, 800b62e <__smakebuf_r+0x44>
 800b61a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b61e:	059a      	lsls	r2, r3, #22
 800b620:	d4ef      	bmi.n	800b602 <__smakebuf_r+0x18>
 800b622:	f023 0303 	bic.w	r3, r3, #3
 800b626:	f043 0302 	orr.w	r3, r3, #2
 800b62a:	81a3      	strh	r3, [r4, #12]
 800b62c:	e7e3      	b.n	800b5f6 <__smakebuf_r+0xc>
 800b62e:	89a3      	ldrh	r3, [r4, #12]
 800b630:	6020      	str	r0, [r4, #0]
 800b632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b636:	81a3      	strh	r3, [r4, #12]
 800b638:	9b00      	ldr	r3, [sp, #0]
 800b63a:	6120      	str	r0, [r4, #16]
 800b63c:	6163      	str	r3, [r4, #20]
 800b63e:	9b01      	ldr	r3, [sp, #4]
 800b640:	b15b      	cbz	r3, 800b65a <__smakebuf_r+0x70>
 800b642:	4630      	mov	r0, r6
 800b644:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b648:	f000 f81e 	bl	800b688 <_isatty_r>
 800b64c:	b128      	cbz	r0, 800b65a <__smakebuf_r+0x70>
 800b64e:	89a3      	ldrh	r3, [r4, #12]
 800b650:	f023 0303 	bic.w	r3, r3, #3
 800b654:	f043 0301 	orr.w	r3, r3, #1
 800b658:	81a3      	strh	r3, [r4, #12]
 800b65a:	89a3      	ldrh	r3, [r4, #12]
 800b65c:	431d      	orrs	r5, r3
 800b65e:	81a5      	strh	r5, [r4, #12]
 800b660:	e7cf      	b.n	800b602 <__smakebuf_r+0x18>
	...

0800b664 <_fstat_r>:
 800b664:	b538      	push	{r3, r4, r5, lr}
 800b666:	2300      	movs	r3, #0
 800b668:	4d06      	ldr	r5, [pc, #24]	; (800b684 <_fstat_r+0x20>)
 800b66a:	4604      	mov	r4, r0
 800b66c:	4608      	mov	r0, r1
 800b66e:	4611      	mov	r1, r2
 800b670:	602b      	str	r3, [r5, #0]
 800b672:	f7f8 f8f8 	bl	8003866 <_fstat>
 800b676:	1c43      	adds	r3, r0, #1
 800b678:	d102      	bne.n	800b680 <_fstat_r+0x1c>
 800b67a:	682b      	ldr	r3, [r5, #0]
 800b67c:	b103      	cbz	r3, 800b680 <_fstat_r+0x1c>
 800b67e:	6023      	str	r3, [r4, #0]
 800b680:	bd38      	pop	{r3, r4, r5, pc}
 800b682:	bf00      	nop
 800b684:	20000bd8 	.word	0x20000bd8

0800b688 <_isatty_r>:
 800b688:	b538      	push	{r3, r4, r5, lr}
 800b68a:	2300      	movs	r3, #0
 800b68c:	4d05      	ldr	r5, [pc, #20]	; (800b6a4 <_isatty_r+0x1c>)
 800b68e:	4604      	mov	r4, r0
 800b690:	4608      	mov	r0, r1
 800b692:	602b      	str	r3, [r5, #0]
 800b694:	f7f8 f8f6 	bl	8003884 <_isatty>
 800b698:	1c43      	adds	r3, r0, #1
 800b69a:	d102      	bne.n	800b6a2 <_isatty_r+0x1a>
 800b69c:	682b      	ldr	r3, [r5, #0]
 800b69e:	b103      	cbz	r3, 800b6a2 <_isatty_r+0x1a>
 800b6a0:	6023      	str	r3, [r4, #0]
 800b6a2:	bd38      	pop	{r3, r4, r5, pc}
 800b6a4:	20000bd8 	.word	0x20000bd8

0800b6a8 <atan2>:
 800b6a8:	f000 bb02 	b.w	800bcb0 <__ieee754_atan2>

0800b6ac <sqrt>:
 800b6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ae:	4606      	mov	r6, r0
 800b6b0:	460f      	mov	r7, r1
 800b6b2:	f000 f8ab 	bl	800b80c <__ieee754_sqrt>
 800b6b6:	4632      	mov	r2, r6
 800b6b8:	4604      	mov	r4, r0
 800b6ba:	460d      	mov	r5, r1
 800b6bc:	463b      	mov	r3, r7
 800b6be:	4630      	mov	r0, r6
 800b6c0:	4639      	mov	r1, r7
 800b6c2:	f7f5 f9ad 	bl	8000a20 <__aeabi_dcmpun>
 800b6c6:	b990      	cbnz	r0, 800b6ee <sqrt+0x42>
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	4639      	mov	r1, r7
 800b6d0:	f7f5 f97e 	bl	80009d0 <__aeabi_dcmplt>
 800b6d4:	b158      	cbz	r0, 800b6ee <sqrt+0x42>
 800b6d6:	f7fd fac7 	bl	8008c68 <__errno>
 800b6da:	2321      	movs	r3, #33	; 0x21
 800b6dc:	2200      	movs	r2, #0
 800b6de:	6003      	str	r3, [r0, #0]
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	4610      	mov	r0, r2
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	f7f5 f82b 	bl	8000740 <__aeabi_ddiv>
 800b6ea:	4604      	mov	r4, r0
 800b6ec:	460d      	mov	r5, r1
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	4629      	mov	r1, r5
 800b6f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b6f4 <cos>:
 800b6f4:	b530      	push	{r4, r5, lr}
 800b6f6:	4a20      	ldr	r2, [pc, #128]	; (800b778 <cos+0x84>)
 800b6f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	b087      	sub	sp, #28
 800b700:	dc06      	bgt.n	800b710 <cos+0x1c>
 800b702:	2200      	movs	r2, #0
 800b704:	2300      	movs	r3, #0
 800b706:	b007      	add	sp, #28
 800b708:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b70c:	f000 b958 	b.w	800b9c0 <__kernel_cos>
 800b710:	4a1a      	ldr	r2, [pc, #104]	; (800b77c <cos+0x88>)
 800b712:	4293      	cmp	r3, r2
 800b714:	dd05      	ble.n	800b722 <cos+0x2e>
 800b716:	4602      	mov	r2, r0
 800b718:	460b      	mov	r3, r1
 800b71a:	f7f4 fd2f 	bl	800017c <__aeabi_dsub>
 800b71e:	b007      	add	sp, #28
 800b720:	bd30      	pop	{r4, r5, pc}
 800b722:	aa02      	add	r2, sp, #8
 800b724:	f000 fb94 	bl	800be50 <__ieee754_rem_pio2>
 800b728:	f000 0003 	and.w	r0, r0, #3
 800b72c:	2801      	cmp	r0, #1
 800b72e:	d009      	beq.n	800b744 <cos+0x50>
 800b730:	2802      	cmp	r0, #2
 800b732:	d011      	beq.n	800b758 <cos+0x64>
 800b734:	b9b8      	cbnz	r0, 800b766 <cos+0x72>
 800b736:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b73a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b73e:	f000 f93f 	bl	800b9c0 <__kernel_cos>
 800b742:	e7ec      	b.n	800b71e <cos+0x2a>
 800b744:	9000      	str	r0, [sp, #0]
 800b746:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b74a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b74e:	f000 f9f7 	bl	800bb40 <__kernel_sin>
 800b752:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b756:	e7e2      	b.n	800b71e <cos+0x2a>
 800b758:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b75c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b760:	f000 f92e 	bl	800b9c0 <__kernel_cos>
 800b764:	e7f5      	b.n	800b752 <cos+0x5e>
 800b766:	2301      	movs	r3, #1
 800b768:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b76c:	9300      	str	r3, [sp, #0]
 800b76e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b772:	f000 f9e5 	bl	800bb40 <__kernel_sin>
 800b776:	e7d2      	b.n	800b71e <cos+0x2a>
 800b778:	3fe921fb 	.word	0x3fe921fb
 800b77c:	7fefffff 	.word	0x7fefffff

0800b780 <sin>:
 800b780:	b530      	push	{r4, r5, lr}
 800b782:	4a20      	ldr	r2, [pc, #128]	; (800b804 <sin+0x84>)
 800b784:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b788:	4293      	cmp	r3, r2
 800b78a:	b087      	sub	sp, #28
 800b78c:	dc06      	bgt.n	800b79c <sin+0x1c>
 800b78e:	2300      	movs	r3, #0
 800b790:	2200      	movs	r2, #0
 800b792:	9300      	str	r3, [sp, #0]
 800b794:	2300      	movs	r3, #0
 800b796:	f000 f9d3 	bl	800bb40 <__kernel_sin>
 800b79a:	e006      	b.n	800b7aa <sin+0x2a>
 800b79c:	4a1a      	ldr	r2, [pc, #104]	; (800b808 <sin+0x88>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	dd05      	ble.n	800b7ae <sin+0x2e>
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	460b      	mov	r3, r1
 800b7a6:	f7f4 fce9 	bl	800017c <__aeabi_dsub>
 800b7aa:	b007      	add	sp, #28
 800b7ac:	bd30      	pop	{r4, r5, pc}
 800b7ae:	aa02      	add	r2, sp, #8
 800b7b0:	f000 fb4e 	bl	800be50 <__ieee754_rem_pio2>
 800b7b4:	f000 0003 	and.w	r0, r0, #3
 800b7b8:	2801      	cmp	r0, #1
 800b7ba:	d009      	beq.n	800b7d0 <sin+0x50>
 800b7bc:	2802      	cmp	r0, #2
 800b7be:	d00e      	beq.n	800b7de <sin+0x5e>
 800b7c0:	b9c0      	cbnz	r0, 800b7f4 <sin+0x74>
 800b7c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	9300      	str	r3, [sp, #0]
 800b7ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7ce:	e7e2      	b.n	800b796 <sin+0x16>
 800b7d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7d8:	f000 f8f2 	bl	800b9c0 <__kernel_cos>
 800b7dc:	e7e5      	b.n	800b7aa <sin+0x2a>
 800b7de:	2301      	movs	r3, #1
 800b7e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7e4:	9300      	str	r3, [sp, #0]
 800b7e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7ea:	f000 f9a9 	bl	800bb40 <__kernel_sin>
 800b7ee:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b7f2:	e7da      	b.n	800b7aa <sin+0x2a>
 800b7f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7fc:	f000 f8e0 	bl	800b9c0 <__kernel_cos>
 800b800:	e7f5      	b.n	800b7ee <sin+0x6e>
 800b802:	bf00      	nop
 800b804:	3fe921fb 	.word	0x3fe921fb
 800b808:	7fefffff 	.word	0x7fefffff

0800b80c <__ieee754_sqrt>:
 800b80c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800b9b0 <__ieee754_sqrt+0x1a4>
 800b810:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b814:	ea3c 0c01 	bics.w	ip, ip, r1
 800b818:	460b      	mov	r3, r1
 800b81a:	4606      	mov	r6, r0
 800b81c:	460d      	mov	r5, r1
 800b81e:	460a      	mov	r2, r1
 800b820:	4604      	mov	r4, r0
 800b822:	d10e      	bne.n	800b842 <__ieee754_sqrt+0x36>
 800b824:	4602      	mov	r2, r0
 800b826:	f7f4 fe61 	bl	80004ec <__aeabi_dmul>
 800b82a:	4602      	mov	r2, r0
 800b82c:	460b      	mov	r3, r1
 800b82e:	4630      	mov	r0, r6
 800b830:	4629      	mov	r1, r5
 800b832:	f7f4 fca5 	bl	8000180 <__adddf3>
 800b836:	4606      	mov	r6, r0
 800b838:	460d      	mov	r5, r1
 800b83a:	4630      	mov	r0, r6
 800b83c:	4629      	mov	r1, r5
 800b83e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b842:	2900      	cmp	r1, #0
 800b844:	dc0d      	bgt.n	800b862 <__ieee754_sqrt+0x56>
 800b846:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b84a:	ea5c 0c00 	orrs.w	ip, ip, r0
 800b84e:	d0f4      	beq.n	800b83a <__ieee754_sqrt+0x2e>
 800b850:	b139      	cbz	r1, 800b862 <__ieee754_sqrt+0x56>
 800b852:	4602      	mov	r2, r0
 800b854:	f7f4 fc92 	bl	800017c <__aeabi_dsub>
 800b858:	4602      	mov	r2, r0
 800b85a:	460b      	mov	r3, r1
 800b85c:	f7f4 ff70 	bl	8000740 <__aeabi_ddiv>
 800b860:	e7e9      	b.n	800b836 <__ieee754_sqrt+0x2a>
 800b862:	1512      	asrs	r2, r2, #20
 800b864:	f000 8089 	beq.w	800b97a <__ieee754_sqrt+0x16e>
 800b868:	2500      	movs	r5, #0
 800b86a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b86e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800b872:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b876:	07d2      	lsls	r2, r2, #31
 800b878:	bf5c      	itt	pl
 800b87a:	005b      	lslpl	r3, r3, #1
 800b87c:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800b880:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b884:	bf58      	it	pl
 800b886:	0064      	lslpl	r4, r4, #1
 800b888:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800b88c:	0062      	lsls	r2, r4, #1
 800b88e:	2016      	movs	r0, #22
 800b890:	4629      	mov	r1, r5
 800b892:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800b896:	1076      	asrs	r6, r6, #1
 800b898:	190f      	adds	r7, r1, r4
 800b89a:	429f      	cmp	r7, r3
 800b89c:	bfde      	ittt	le
 800b89e:	1bdb      	suble	r3, r3, r7
 800b8a0:	1939      	addle	r1, r7, r4
 800b8a2:	192d      	addle	r5, r5, r4
 800b8a4:	005b      	lsls	r3, r3, #1
 800b8a6:	3801      	subs	r0, #1
 800b8a8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b8ac:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b8b0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b8b4:	d1f0      	bne.n	800b898 <__ieee754_sqrt+0x8c>
 800b8b6:	4604      	mov	r4, r0
 800b8b8:	2720      	movs	r7, #32
 800b8ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800b8be:	428b      	cmp	r3, r1
 800b8c0:	eb0c 0e00 	add.w	lr, ip, r0
 800b8c4:	dc02      	bgt.n	800b8cc <__ieee754_sqrt+0xc0>
 800b8c6:	d113      	bne.n	800b8f0 <__ieee754_sqrt+0xe4>
 800b8c8:	4596      	cmp	lr, r2
 800b8ca:	d811      	bhi.n	800b8f0 <__ieee754_sqrt+0xe4>
 800b8cc:	f1be 0f00 	cmp.w	lr, #0
 800b8d0:	eb0e 000c 	add.w	r0, lr, ip
 800b8d4:	da56      	bge.n	800b984 <__ieee754_sqrt+0x178>
 800b8d6:	2800      	cmp	r0, #0
 800b8d8:	db54      	blt.n	800b984 <__ieee754_sqrt+0x178>
 800b8da:	f101 0801 	add.w	r8, r1, #1
 800b8de:	1a5b      	subs	r3, r3, r1
 800b8e0:	4641      	mov	r1, r8
 800b8e2:	4596      	cmp	lr, r2
 800b8e4:	bf88      	it	hi
 800b8e6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b8ea:	eba2 020e 	sub.w	r2, r2, lr
 800b8ee:	4464      	add	r4, ip
 800b8f0:	005b      	lsls	r3, r3, #1
 800b8f2:	3f01      	subs	r7, #1
 800b8f4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b8f8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b8fc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b900:	d1dd      	bne.n	800b8be <__ieee754_sqrt+0xb2>
 800b902:	4313      	orrs	r3, r2
 800b904:	d01b      	beq.n	800b93e <__ieee754_sqrt+0x132>
 800b906:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800b9b4 <__ieee754_sqrt+0x1a8>
 800b90a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800b9b8 <__ieee754_sqrt+0x1ac>
 800b90e:	e9da 0100 	ldrd	r0, r1, [sl]
 800b912:	e9db 2300 	ldrd	r2, r3, [fp]
 800b916:	f7f4 fc31 	bl	800017c <__aeabi_dsub>
 800b91a:	e9da 8900 	ldrd	r8, r9, [sl]
 800b91e:	4602      	mov	r2, r0
 800b920:	460b      	mov	r3, r1
 800b922:	4640      	mov	r0, r8
 800b924:	4649      	mov	r1, r9
 800b926:	f7f5 f85d 	bl	80009e4 <__aeabi_dcmple>
 800b92a:	b140      	cbz	r0, 800b93e <__ieee754_sqrt+0x132>
 800b92c:	e9da 0100 	ldrd	r0, r1, [sl]
 800b930:	e9db 2300 	ldrd	r2, r3, [fp]
 800b934:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b938:	d126      	bne.n	800b988 <__ieee754_sqrt+0x17c>
 800b93a:	463c      	mov	r4, r7
 800b93c:	3501      	adds	r5, #1
 800b93e:	106b      	asrs	r3, r5, #1
 800b940:	0864      	lsrs	r4, r4, #1
 800b942:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b946:	07ea      	lsls	r2, r5, #31
 800b948:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b94c:	bf48      	it	mi
 800b94e:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800b952:	4620      	mov	r0, r4
 800b954:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800b958:	e76d      	b.n	800b836 <__ieee754_sqrt+0x2a>
 800b95a:	0ae3      	lsrs	r3, r4, #11
 800b95c:	3915      	subs	r1, #21
 800b95e:	0564      	lsls	r4, r4, #21
 800b960:	2b00      	cmp	r3, #0
 800b962:	d0fa      	beq.n	800b95a <__ieee754_sqrt+0x14e>
 800b964:	02d8      	lsls	r0, r3, #11
 800b966:	d50a      	bpl.n	800b97e <__ieee754_sqrt+0x172>
 800b968:	f1c2 0020 	rsb	r0, r2, #32
 800b96c:	fa24 f000 	lsr.w	r0, r4, r0
 800b970:	1e55      	subs	r5, r2, #1
 800b972:	4094      	lsls	r4, r2
 800b974:	4303      	orrs	r3, r0
 800b976:	1b4a      	subs	r2, r1, r5
 800b978:	e776      	b.n	800b868 <__ieee754_sqrt+0x5c>
 800b97a:	4611      	mov	r1, r2
 800b97c:	e7f0      	b.n	800b960 <__ieee754_sqrt+0x154>
 800b97e:	005b      	lsls	r3, r3, #1
 800b980:	3201      	adds	r2, #1
 800b982:	e7ef      	b.n	800b964 <__ieee754_sqrt+0x158>
 800b984:	4688      	mov	r8, r1
 800b986:	e7aa      	b.n	800b8de <__ieee754_sqrt+0xd2>
 800b988:	f7f4 fbfa 	bl	8000180 <__adddf3>
 800b98c:	e9da 8900 	ldrd	r8, r9, [sl]
 800b990:	4602      	mov	r2, r0
 800b992:	460b      	mov	r3, r1
 800b994:	4640      	mov	r0, r8
 800b996:	4649      	mov	r1, r9
 800b998:	f7f5 f81a 	bl	80009d0 <__aeabi_dcmplt>
 800b99c:	b120      	cbz	r0, 800b9a8 <__ieee754_sqrt+0x19c>
 800b99e:	1ca1      	adds	r1, r4, #2
 800b9a0:	bf08      	it	eq
 800b9a2:	3501      	addeq	r5, #1
 800b9a4:	3402      	adds	r4, #2
 800b9a6:	e7ca      	b.n	800b93e <__ieee754_sqrt+0x132>
 800b9a8:	3401      	adds	r4, #1
 800b9aa:	f024 0401 	bic.w	r4, r4, #1
 800b9ae:	e7c6      	b.n	800b93e <__ieee754_sqrt+0x132>
 800b9b0:	7ff00000 	.word	0x7ff00000
 800b9b4:	200001e8 	.word	0x200001e8
 800b9b8:	200001f0 	.word	0x200001f0
 800b9bc:	00000000 	.word	0x00000000

0800b9c0 <__kernel_cos>:
 800b9c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b9c8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800b9cc:	4680      	mov	r8, r0
 800b9ce:	460f      	mov	r7, r1
 800b9d0:	e9cd 2300 	strd	r2, r3, [sp]
 800b9d4:	da04      	bge.n	800b9e0 <__kernel_cos+0x20>
 800b9d6:	f7f5 f839 	bl	8000a4c <__aeabi_d2iz>
 800b9da:	2800      	cmp	r0, #0
 800b9dc:	f000 8086 	beq.w	800baec <__kernel_cos+0x12c>
 800b9e0:	4642      	mov	r2, r8
 800b9e2:	463b      	mov	r3, r7
 800b9e4:	4640      	mov	r0, r8
 800b9e6:	4639      	mov	r1, r7
 800b9e8:	f7f4 fd80 	bl	80004ec <__aeabi_dmul>
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	4b4e      	ldr	r3, [pc, #312]	; (800bb28 <__kernel_cos+0x168>)
 800b9f0:	4604      	mov	r4, r0
 800b9f2:	460d      	mov	r5, r1
 800b9f4:	f7f4 fd7a 	bl	80004ec <__aeabi_dmul>
 800b9f8:	a33f      	add	r3, pc, #252	; (adr r3, 800baf8 <__kernel_cos+0x138>)
 800b9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fe:	4682      	mov	sl, r0
 800ba00:	468b      	mov	fp, r1
 800ba02:	4620      	mov	r0, r4
 800ba04:	4629      	mov	r1, r5
 800ba06:	f7f4 fd71 	bl	80004ec <__aeabi_dmul>
 800ba0a:	a33d      	add	r3, pc, #244	; (adr r3, 800bb00 <__kernel_cos+0x140>)
 800ba0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba10:	f7f4 fbb6 	bl	8000180 <__adddf3>
 800ba14:	4622      	mov	r2, r4
 800ba16:	462b      	mov	r3, r5
 800ba18:	f7f4 fd68 	bl	80004ec <__aeabi_dmul>
 800ba1c:	a33a      	add	r3, pc, #232	; (adr r3, 800bb08 <__kernel_cos+0x148>)
 800ba1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba22:	f7f4 fbab 	bl	800017c <__aeabi_dsub>
 800ba26:	4622      	mov	r2, r4
 800ba28:	462b      	mov	r3, r5
 800ba2a:	f7f4 fd5f 	bl	80004ec <__aeabi_dmul>
 800ba2e:	a338      	add	r3, pc, #224	; (adr r3, 800bb10 <__kernel_cos+0x150>)
 800ba30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba34:	f7f4 fba4 	bl	8000180 <__adddf3>
 800ba38:	4622      	mov	r2, r4
 800ba3a:	462b      	mov	r3, r5
 800ba3c:	f7f4 fd56 	bl	80004ec <__aeabi_dmul>
 800ba40:	a335      	add	r3, pc, #212	; (adr r3, 800bb18 <__kernel_cos+0x158>)
 800ba42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba46:	f7f4 fb99 	bl	800017c <__aeabi_dsub>
 800ba4a:	4622      	mov	r2, r4
 800ba4c:	462b      	mov	r3, r5
 800ba4e:	f7f4 fd4d 	bl	80004ec <__aeabi_dmul>
 800ba52:	a333      	add	r3, pc, #204	; (adr r3, 800bb20 <__kernel_cos+0x160>)
 800ba54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba58:	f7f4 fb92 	bl	8000180 <__adddf3>
 800ba5c:	4622      	mov	r2, r4
 800ba5e:	462b      	mov	r3, r5
 800ba60:	f7f4 fd44 	bl	80004ec <__aeabi_dmul>
 800ba64:	4622      	mov	r2, r4
 800ba66:	462b      	mov	r3, r5
 800ba68:	f7f4 fd40 	bl	80004ec <__aeabi_dmul>
 800ba6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba70:	4604      	mov	r4, r0
 800ba72:	460d      	mov	r5, r1
 800ba74:	4640      	mov	r0, r8
 800ba76:	4639      	mov	r1, r7
 800ba78:	f7f4 fd38 	bl	80004ec <__aeabi_dmul>
 800ba7c:	460b      	mov	r3, r1
 800ba7e:	4602      	mov	r2, r0
 800ba80:	4629      	mov	r1, r5
 800ba82:	4620      	mov	r0, r4
 800ba84:	f7f4 fb7a 	bl	800017c <__aeabi_dsub>
 800ba88:	4b28      	ldr	r3, [pc, #160]	; (800bb2c <__kernel_cos+0x16c>)
 800ba8a:	4680      	mov	r8, r0
 800ba8c:	429e      	cmp	r6, r3
 800ba8e:	4689      	mov	r9, r1
 800ba90:	dc0e      	bgt.n	800bab0 <__kernel_cos+0xf0>
 800ba92:	4602      	mov	r2, r0
 800ba94:	460b      	mov	r3, r1
 800ba96:	4650      	mov	r0, sl
 800ba98:	4659      	mov	r1, fp
 800ba9a:	f7f4 fb6f 	bl	800017c <__aeabi_dsub>
 800ba9e:	4602      	mov	r2, r0
 800baa0:	2000      	movs	r0, #0
 800baa2:	460b      	mov	r3, r1
 800baa4:	4922      	ldr	r1, [pc, #136]	; (800bb30 <__kernel_cos+0x170>)
 800baa6:	f7f4 fb69 	bl	800017c <__aeabi_dsub>
 800baaa:	b003      	add	sp, #12
 800baac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bab0:	2400      	movs	r4, #0
 800bab2:	4b20      	ldr	r3, [pc, #128]	; (800bb34 <__kernel_cos+0x174>)
 800bab4:	4622      	mov	r2, r4
 800bab6:	429e      	cmp	r6, r3
 800bab8:	bfcc      	ite	gt
 800baba:	4d1f      	ldrgt	r5, [pc, #124]	; (800bb38 <__kernel_cos+0x178>)
 800babc:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800bac0:	462b      	mov	r3, r5
 800bac2:	2000      	movs	r0, #0
 800bac4:	491a      	ldr	r1, [pc, #104]	; (800bb30 <__kernel_cos+0x170>)
 800bac6:	f7f4 fb59 	bl	800017c <__aeabi_dsub>
 800baca:	4622      	mov	r2, r4
 800bacc:	4606      	mov	r6, r0
 800bace:	460f      	mov	r7, r1
 800bad0:	462b      	mov	r3, r5
 800bad2:	4650      	mov	r0, sl
 800bad4:	4659      	mov	r1, fp
 800bad6:	f7f4 fb51 	bl	800017c <__aeabi_dsub>
 800bada:	4642      	mov	r2, r8
 800badc:	464b      	mov	r3, r9
 800bade:	f7f4 fb4d 	bl	800017c <__aeabi_dsub>
 800bae2:	4602      	mov	r2, r0
 800bae4:	460b      	mov	r3, r1
 800bae6:	4630      	mov	r0, r6
 800bae8:	4639      	mov	r1, r7
 800baea:	e7dc      	b.n	800baa6 <__kernel_cos+0xe6>
 800baec:	2000      	movs	r0, #0
 800baee:	4910      	ldr	r1, [pc, #64]	; (800bb30 <__kernel_cos+0x170>)
 800baf0:	e7db      	b.n	800baaa <__kernel_cos+0xea>
 800baf2:	bf00      	nop
 800baf4:	f3af 8000 	nop.w
 800baf8:	be8838d4 	.word	0xbe8838d4
 800bafc:	bda8fae9 	.word	0xbda8fae9
 800bb00:	bdb4b1c4 	.word	0xbdb4b1c4
 800bb04:	3e21ee9e 	.word	0x3e21ee9e
 800bb08:	809c52ad 	.word	0x809c52ad
 800bb0c:	3e927e4f 	.word	0x3e927e4f
 800bb10:	19cb1590 	.word	0x19cb1590
 800bb14:	3efa01a0 	.word	0x3efa01a0
 800bb18:	16c15177 	.word	0x16c15177
 800bb1c:	3f56c16c 	.word	0x3f56c16c
 800bb20:	5555554c 	.word	0x5555554c
 800bb24:	3fa55555 	.word	0x3fa55555
 800bb28:	3fe00000 	.word	0x3fe00000
 800bb2c:	3fd33332 	.word	0x3fd33332
 800bb30:	3ff00000 	.word	0x3ff00000
 800bb34:	3fe90000 	.word	0x3fe90000
 800bb38:	3fd20000 	.word	0x3fd20000
 800bb3c:	00000000 	.word	0x00000000

0800bb40 <__kernel_sin>:
 800bb40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb44:	b086      	sub	sp, #24
 800bb46:	e9cd 2300 	strd	r2, r3, [sp]
 800bb4a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bb4e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800bb52:	4682      	mov	sl, r0
 800bb54:	460c      	mov	r4, r1
 800bb56:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800bb58:	da03      	bge.n	800bb62 <__kernel_sin+0x22>
 800bb5a:	f7f4 ff77 	bl	8000a4c <__aeabi_d2iz>
 800bb5e:	2800      	cmp	r0, #0
 800bb60:	d050      	beq.n	800bc04 <__kernel_sin+0xc4>
 800bb62:	4652      	mov	r2, sl
 800bb64:	4623      	mov	r3, r4
 800bb66:	4650      	mov	r0, sl
 800bb68:	4621      	mov	r1, r4
 800bb6a:	f7f4 fcbf 	bl	80004ec <__aeabi_dmul>
 800bb6e:	4606      	mov	r6, r0
 800bb70:	460f      	mov	r7, r1
 800bb72:	4602      	mov	r2, r0
 800bb74:	460b      	mov	r3, r1
 800bb76:	4650      	mov	r0, sl
 800bb78:	4621      	mov	r1, r4
 800bb7a:	f7f4 fcb7 	bl	80004ec <__aeabi_dmul>
 800bb7e:	a33e      	add	r3, pc, #248	; (adr r3, 800bc78 <__kernel_sin+0x138>)
 800bb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb84:	4680      	mov	r8, r0
 800bb86:	4689      	mov	r9, r1
 800bb88:	4630      	mov	r0, r6
 800bb8a:	4639      	mov	r1, r7
 800bb8c:	f7f4 fcae 	bl	80004ec <__aeabi_dmul>
 800bb90:	a33b      	add	r3, pc, #236	; (adr r3, 800bc80 <__kernel_sin+0x140>)
 800bb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb96:	f7f4 faf1 	bl	800017c <__aeabi_dsub>
 800bb9a:	4632      	mov	r2, r6
 800bb9c:	463b      	mov	r3, r7
 800bb9e:	f7f4 fca5 	bl	80004ec <__aeabi_dmul>
 800bba2:	a339      	add	r3, pc, #228	; (adr r3, 800bc88 <__kernel_sin+0x148>)
 800bba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba8:	f7f4 faea 	bl	8000180 <__adddf3>
 800bbac:	4632      	mov	r2, r6
 800bbae:	463b      	mov	r3, r7
 800bbb0:	f7f4 fc9c 	bl	80004ec <__aeabi_dmul>
 800bbb4:	a336      	add	r3, pc, #216	; (adr r3, 800bc90 <__kernel_sin+0x150>)
 800bbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbba:	f7f4 fadf 	bl	800017c <__aeabi_dsub>
 800bbbe:	4632      	mov	r2, r6
 800bbc0:	463b      	mov	r3, r7
 800bbc2:	f7f4 fc93 	bl	80004ec <__aeabi_dmul>
 800bbc6:	a334      	add	r3, pc, #208	; (adr r3, 800bc98 <__kernel_sin+0x158>)
 800bbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbcc:	f7f4 fad8 	bl	8000180 <__adddf3>
 800bbd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbd4:	b9dd      	cbnz	r5, 800bc0e <__kernel_sin+0xce>
 800bbd6:	4602      	mov	r2, r0
 800bbd8:	460b      	mov	r3, r1
 800bbda:	4630      	mov	r0, r6
 800bbdc:	4639      	mov	r1, r7
 800bbde:	f7f4 fc85 	bl	80004ec <__aeabi_dmul>
 800bbe2:	a32f      	add	r3, pc, #188	; (adr r3, 800bca0 <__kernel_sin+0x160>)
 800bbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe8:	f7f4 fac8 	bl	800017c <__aeabi_dsub>
 800bbec:	4642      	mov	r2, r8
 800bbee:	464b      	mov	r3, r9
 800bbf0:	f7f4 fc7c 	bl	80004ec <__aeabi_dmul>
 800bbf4:	4602      	mov	r2, r0
 800bbf6:	460b      	mov	r3, r1
 800bbf8:	4650      	mov	r0, sl
 800bbfa:	4621      	mov	r1, r4
 800bbfc:	f7f4 fac0 	bl	8000180 <__adddf3>
 800bc00:	4682      	mov	sl, r0
 800bc02:	460c      	mov	r4, r1
 800bc04:	4650      	mov	r0, sl
 800bc06:	4621      	mov	r1, r4
 800bc08:	b006      	add	sp, #24
 800bc0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc0e:	2200      	movs	r2, #0
 800bc10:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc14:	4b24      	ldr	r3, [pc, #144]	; (800bca8 <__kernel_sin+0x168>)
 800bc16:	f7f4 fc69 	bl	80004ec <__aeabi_dmul>
 800bc1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc22:	4640      	mov	r0, r8
 800bc24:	4649      	mov	r1, r9
 800bc26:	f7f4 fc61 	bl	80004ec <__aeabi_dmul>
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc32:	f7f4 faa3 	bl	800017c <__aeabi_dsub>
 800bc36:	4632      	mov	r2, r6
 800bc38:	463b      	mov	r3, r7
 800bc3a:	f7f4 fc57 	bl	80004ec <__aeabi_dmul>
 800bc3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc42:	f7f4 fa9b 	bl	800017c <__aeabi_dsub>
 800bc46:	a316      	add	r3, pc, #88	; (adr r3, 800bca0 <__kernel_sin+0x160>)
 800bc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc4c:	4606      	mov	r6, r0
 800bc4e:	460f      	mov	r7, r1
 800bc50:	4640      	mov	r0, r8
 800bc52:	4649      	mov	r1, r9
 800bc54:	f7f4 fc4a 	bl	80004ec <__aeabi_dmul>
 800bc58:	4602      	mov	r2, r0
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	4630      	mov	r0, r6
 800bc5e:	4639      	mov	r1, r7
 800bc60:	f7f4 fa8e 	bl	8000180 <__adddf3>
 800bc64:	4602      	mov	r2, r0
 800bc66:	460b      	mov	r3, r1
 800bc68:	4650      	mov	r0, sl
 800bc6a:	4621      	mov	r1, r4
 800bc6c:	f7f4 fa86 	bl	800017c <__aeabi_dsub>
 800bc70:	e7c6      	b.n	800bc00 <__kernel_sin+0xc0>
 800bc72:	bf00      	nop
 800bc74:	f3af 8000 	nop.w
 800bc78:	5acfd57c 	.word	0x5acfd57c
 800bc7c:	3de5d93a 	.word	0x3de5d93a
 800bc80:	8a2b9ceb 	.word	0x8a2b9ceb
 800bc84:	3e5ae5e6 	.word	0x3e5ae5e6
 800bc88:	57b1fe7d 	.word	0x57b1fe7d
 800bc8c:	3ec71de3 	.word	0x3ec71de3
 800bc90:	19c161d5 	.word	0x19c161d5
 800bc94:	3f2a01a0 	.word	0x3f2a01a0
 800bc98:	1110f8a6 	.word	0x1110f8a6
 800bc9c:	3f811111 	.word	0x3f811111
 800bca0:	55555549 	.word	0x55555549
 800bca4:	3fc55555 	.word	0x3fc55555
 800bca8:	3fe00000 	.word	0x3fe00000
 800bcac:	00000000 	.word	0x00000000

0800bcb0 <__ieee754_atan2>:
 800bcb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcb4:	4617      	mov	r7, r2
 800bcb6:	4692      	mov	sl, r2
 800bcb8:	4699      	mov	r9, r3
 800bcba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bcbe:	427b      	negs	r3, r7
 800bcc0:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800be40 <__ieee754_atan2+0x190>
 800bcc4:	433b      	orrs	r3, r7
 800bcc6:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800bcca:	4543      	cmp	r3, r8
 800bccc:	4604      	mov	r4, r0
 800bcce:	460d      	mov	r5, r1
 800bcd0:	d809      	bhi.n	800bce6 <__ieee754_atan2+0x36>
 800bcd2:	4246      	negs	r6, r0
 800bcd4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bcd8:	4306      	orrs	r6, r0
 800bcda:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800bcde:	4546      	cmp	r6, r8
 800bce0:	468e      	mov	lr, r1
 800bce2:	4683      	mov	fp, r0
 800bce4:	d908      	bls.n	800bcf8 <__ieee754_atan2+0x48>
 800bce6:	4652      	mov	r2, sl
 800bce8:	464b      	mov	r3, r9
 800bcea:	4620      	mov	r0, r4
 800bcec:	4629      	mov	r1, r5
 800bcee:	f7f4 fa47 	bl	8000180 <__adddf3>
 800bcf2:	4604      	mov	r4, r0
 800bcf4:	460d      	mov	r5, r1
 800bcf6:	e019      	b.n	800bd2c <__ieee754_atan2+0x7c>
 800bcf8:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800bcfc:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800bd00:	433e      	orrs	r6, r7
 800bd02:	d103      	bne.n	800bd0c <__ieee754_atan2+0x5c>
 800bd04:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd08:	f000 ba96 	b.w	800c238 <atan>
 800bd0c:	ea4f 76a9 	mov.w	r6, r9, asr #30
 800bd10:	f006 0602 	and.w	r6, r6, #2
 800bd14:	ea53 0b0b 	orrs.w	fp, r3, fp
 800bd18:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800bd1c:	d10a      	bne.n	800bd34 <__ieee754_atan2+0x84>
 800bd1e:	2e02      	cmp	r6, #2
 800bd20:	d067      	beq.n	800bdf2 <__ieee754_atan2+0x142>
 800bd22:	2e03      	cmp	r6, #3
 800bd24:	d102      	bne.n	800bd2c <__ieee754_atan2+0x7c>
 800bd26:	a53a      	add	r5, pc, #232	; (adr r5, 800be10 <__ieee754_atan2+0x160>)
 800bd28:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bd2c:	4620      	mov	r0, r4
 800bd2e:	4629      	mov	r1, r5
 800bd30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd34:	4317      	orrs	r7, r2
 800bd36:	d106      	bne.n	800bd46 <__ieee754_atan2+0x96>
 800bd38:	f1be 0f00 	cmp.w	lr, #0
 800bd3c:	da64      	bge.n	800be08 <__ieee754_atan2+0x158>
 800bd3e:	a536      	add	r5, pc, #216	; (adr r5, 800be18 <__ieee754_atan2+0x168>)
 800bd40:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bd44:	e7f2      	b.n	800bd2c <__ieee754_atan2+0x7c>
 800bd46:	4542      	cmp	r2, r8
 800bd48:	d10f      	bne.n	800bd6a <__ieee754_atan2+0xba>
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	f106 36ff 	add.w	r6, r6, #4294967295
 800bd50:	d107      	bne.n	800bd62 <__ieee754_atan2+0xb2>
 800bd52:	2e02      	cmp	r6, #2
 800bd54:	d851      	bhi.n	800bdfa <__ieee754_atan2+0x14a>
 800bd56:	4b3b      	ldr	r3, [pc, #236]	; (800be44 <__ieee754_atan2+0x194>)
 800bd58:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bd5c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800bd60:	e7e4      	b.n	800bd2c <__ieee754_atan2+0x7c>
 800bd62:	2e02      	cmp	r6, #2
 800bd64:	d84d      	bhi.n	800be02 <__ieee754_atan2+0x152>
 800bd66:	4b38      	ldr	r3, [pc, #224]	; (800be48 <__ieee754_atan2+0x198>)
 800bd68:	e7f6      	b.n	800bd58 <__ieee754_atan2+0xa8>
 800bd6a:	4543      	cmp	r3, r8
 800bd6c:	d0e4      	beq.n	800bd38 <__ieee754_atan2+0x88>
 800bd6e:	1a9b      	subs	r3, r3, r2
 800bd70:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800bd74:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bd78:	da21      	bge.n	800bdbe <__ieee754_atan2+0x10e>
 800bd7a:	f1b9 0f00 	cmp.w	r9, #0
 800bd7e:	da01      	bge.n	800bd84 <__ieee754_atan2+0xd4>
 800bd80:	323c      	adds	r2, #60	; 0x3c
 800bd82:	db20      	blt.n	800bdc6 <__ieee754_atan2+0x116>
 800bd84:	4652      	mov	r2, sl
 800bd86:	464b      	mov	r3, r9
 800bd88:	4620      	mov	r0, r4
 800bd8a:	4629      	mov	r1, r5
 800bd8c:	f7f4 fcd8 	bl	8000740 <__aeabi_ddiv>
 800bd90:	f000 fbdc 	bl	800c54c <fabs>
 800bd94:	f000 fa50 	bl	800c238 <atan>
 800bd98:	4604      	mov	r4, r0
 800bd9a:	460d      	mov	r5, r1
 800bd9c:	2e01      	cmp	r6, #1
 800bd9e:	d015      	beq.n	800bdcc <__ieee754_atan2+0x11c>
 800bda0:	2e02      	cmp	r6, #2
 800bda2:	d017      	beq.n	800bdd4 <__ieee754_atan2+0x124>
 800bda4:	2e00      	cmp	r6, #0
 800bda6:	d0c1      	beq.n	800bd2c <__ieee754_atan2+0x7c>
 800bda8:	a31d      	add	r3, pc, #116	; (adr r3, 800be20 <__ieee754_atan2+0x170>)
 800bdaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdae:	4620      	mov	r0, r4
 800bdb0:	4629      	mov	r1, r5
 800bdb2:	f7f4 f9e3 	bl	800017c <__aeabi_dsub>
 800bdb6:	a31c      	add	r3, pc, #112	; (adr r3, 800be28 <__ieee754_atan2+0x178>)
 800bdb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdbc:	e016      	b.n	800bdec <__ieee754_atan2+0x13c>
 800bdbe:	a51c      	add	r5, pc, #112	; (adr r5, 800be30 <__ieee754_atan2+0x180>)
 800bdc0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bdc4:	e7ea      	b.n	800bd9c <__ieee754_atan2+0xec>
 800bdc6:	2400      	movs	r4, #0
 800bdc8:	2500      	movs	r5, #0
 800bdca:	e7e7      	b.n	800bd9c <__ieee754_atan2+0xec>
 800bdcc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800bdd0:	461d      	mov	r5, r3
 800bdd2:	e7ab      	b.n	800bd2c <__ieee754_atan2+0x7c>
 800bdd4:	a312      	add	r3, pc, #72	; (adr r3, 800be20 <__ieee754_atan2+0x170>)
 800bdd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdda:	4620      	mov	r0, r4
 800bddc:	4629      	mov	r1, r5
 800bdde:	f7f4 f9cd 	bl	800017c <__aeabi_dsub>
 800bde2:	4602      	mov	r2, r0
 800bde4:	460b      	mov	r3, r1
 800bde6:	a110      	add	r1, pc, #64	; (adr r1, 800be28 <__ieee754_atan2+0x178>)
 800bde8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdec:	f7f4 f9c6 	bl	800017c <__aeabi_dsub>
 800bdf0:	e77f      	b.n	800bcf2 <__ieee754_atan2+0x42>
 800bdf2:	a50d      	add	r5, pc, #52	; (adr r5, 800be28 <__ieee754_atan2+0x178>)
 800bdf4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bdf8:	e798      	b.n	800bd2c <__ieee754_atan2+0x7c>
 800bdfa:	a50f      	add	r5, pc, #60	; (adr r5, 800be38 <__ieee754_atan2+0x188>)
 800bdfc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800be00:	e794      	b.n	800bd2c <__ieee754_atan2+0x7c>
 800be02:	2400      	movs	r4, #0
 800be04:	2500      	movs	r5, #0
 800be06:	e791      	b.n	800bd2c <__ieee754_atan2+0x7c>
 800be08:	a509      	add	r5, pc, #36	; (adr r5, 800be30 <__ieee754_atan2+0x180>)
 800be0a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800be0e:	e78d      	b.n	800bd2c <__ieee754_atan2+0x7c>
 800be10:	54442d18 	.word	0x54442d18
 800be14:	c00921fb 	.word	0xc00921fb
 800be18:	54442d18 	.word	0x54442d18
 800be1c:	bff921fb 	.word	0xbff921fb
 800be20:	33145c07 	.word	0x33145c07
 800be24:	3ca1a626 	.word	0x3ca1a626
 800be28:	54442d18 	.word	0x54442d18
 800be2c:	400921fb 	.word	0x400921fb
 800be30:	54442d18 	.word	0x54442d18
 800be34:	3ff921fb 	.word	0x3ff921fb
 800be38:	54442d18 	.word	0x54442d18
 800be3c:	3fe921fb 	.word	0x3fe921fb
 800be40:	7ff00000 	.word	0x7ff00000
 800be44:	0800e7f0 	.word	0x0800e7f0
 800be48:	0800e808 	.word	0x0800e808
 800be4c:	00000000 	.word	0x00000000

0800be50 <__ieee754_rem_pio2>:
 800be50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be54:	4614      	mov	r4, r2
 800be56:	4ac2      	ldr	r2, [pc, #776]	; (800c160 <__ieee754_rem_pio2+0x310>)
 800be58:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800be5c:	b08d      	sub	sp, #52	; 0x34
 800be5e:	4592      	cmp	sl, r2
 800be60:	9104      	str	r1, [sp, #16]
 800be62:	dc07      	bgt.n	800be74 <__ieee754_rem_pio2+0x24>
 800be64:	2200      	movs	r2, #0
 800be66:	2300      	movs	r3, #0
 800be68:	e9c4 0100 	strd	r0, r1, [r4]
 800be6c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800be70:	2500      	movs	r5, #0
 800be72:	e024      	b.n	800bebe <__ieee754_rem_pio2+0x6e>
 800be74:	4abb      	ldr	r2, [pc, #748]	; (800c164 <__ieee754_rem_pio2+0x314>)
 800be76:	4592      	cmp	sl, r2
 800be78:	dc72      	bgt.n	800bf60 <__ieee754_rem_pio2+0x110>
 800be7a:	9b04      	ldr	r3, [sp, #16]
 800be7c:	4dba      	ldr	r5, [pc, #744]	; (800c168 <__ieee754_rem_pio2+0x318>)
 800be7e:	2b00      	cmp	r3, #0
 800be80:	a3a9      	add	r3, pc, #676	; (adr r3, 800c128 <__ieee754_rem_pio2+0x2d8>)
 800be82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be86:	dd36      	ble.n	800bef6 <__ieee754_rem_pio2+0xa6>
 800be88:	f7f4 f978 	bl	800017c <__aeabi_dsub>
 800be8c:	45aa      	cmp	sl, r5
 800be8e:	4606      	mov	r6, r0
 800be90:	460f      	mov	r7, r1
 800be92:	d018      	beq.n	800bec6 <__ieee754_rem_pio2+0x76>
 800be94:	a3a6      	add	r3, pc, #664	; (adr r3, 800c130 <__ieee754_rem_pio2+0x2e0>)
 800be96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9a:	f7f4 f96f 	bl	800017c <__aeabi_dsub>
 800be9e:	4602      	mov	r2, r0
 800bea0:	460b      	mov	r3, r1
 800bea2:	4630      	mov	r0, r6
 800bea4:	e9c4 2300 	strd	r2, r3, [r4]
 800bea8:	4639      	mov	r1, r7
 800beaa:	f7f4 f967 	bl	800017c <__aeabi_dsub>
 800beae:	a3a0      	add	r3, pc, #640	; (adr r3, 800c130 <__ieee754_rem_pio2+0x2e0>)
 800beb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb4:	f7f4 f962 	bl	800017c <__aeabi_dsub>
 800beb8:	2501      	movs	r5, #1
 800beba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bebe:	4628      	mov	r0, r5
 800bec0:	b00d      	add	sp, #52	; 0x34
 800bec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bec6:	a39c      	add	r3, pc, #624	; (adr r3, 800c138 <__ieee754_rem_pio2+0x2e8>)
 800bec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800becc:	f7f4 f956 	bl	800017c <__aeabi_dsub>
 800bed0:	a39b      	add	r3, pc, #620	; (adr r3, 800c140 <__ieee754_rem_pio2+0x2f0>)
 800bed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed6:	4606      	mov	r6, r0
 800bed8:	460f      	mov	r7, r1
 800beda:	f7f4 f94f 	bl	800017c <__aeabi_dsub>
 800bede:	4602      	mov	r2, r0
 800bee0:	460b      	mov	r3, r1
 800bee2:	4630      	mov	r0, r6
 800bee4:	e9c4 2300 	strd	r2, r3, [r4]
 800bee8:	4639      	mov	r1, r7
 800beea:	f7f4 f947 	bl	800017c <__aeabi_dsub>
 800beee:	a394      	add	r3, pc, #592	; (adr r3, 800c140 <__ieee754_rem_pio2+0x2f0>)
 800bef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef4:	e7de      	b.n	800beb4 <__ieee754_rem_pio2+0x64>
 800bef6:	f7f4 f943 	bl	8000180 <__adddf3>
 800befa:	45aa      	cmp	sl, r5
 800befc:	4606      	mov	r6, r0
 800befe:	460f      	mov	r7, r1
 800bf00:	d016      	beq.n	800bf30 <__ieee754_rem_pio2+0xe0>
 800bf02:	a38b      	add	r3, pc, #556	; (adr r3, 800c130 <__ieee754_rem_pio2+0x2e0>)
 800bf04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf08:	f7f4 f93a 	bl	8000180 <__adddf3>
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	460b      	mov	r3, r1
 800bf10:	4630      	mov	r0, r6
 800bf12:	e9c4 2300 	strd	r2, r3, [r4]
 800bf16:	4639      	mov	r1, r7
 800bf18:	f7f4 f930 	bl	800017c <__aeabi_dsub>
 800bf1c:	a384      	add	r3, pc, #528	; (adr r3, 800c130 <__ieee754_rem_pio2+0x2e0>)
 800bf1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf22:	f7f4 f92d 	bl	8000180 <__adddf3>
 800bf26:	f04f 35ff 	mov.w	r5, #4294967295
 800bf2a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bf2e:	e7c6      	b.n	800bebe <__ieee754_rem_pio2+0x6e>
 800bf30:	a381      	add	r3, pc, #516	; (adr r3, 800c138 <__ieee754_rem_pio2+0x2e8>)
 800bf32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf36:	f7f4 f923 	bl	8000180 <__adddf3>
 800bf3a:	a381      	add	r3, pc, #516	; (adr r3, 800c140 <__ieee754_rem_pio2+0x2f0>)
 800bf3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf40:	4606      	mov	r6, r0
 800bf42:	460f      	mov	r7, r1
 800bf44:	f7f4 f91c 	bl	8000180 <__adddf3>
 800bf48:	4602      	mov	r2, r0
 800bf4a:	460b      	mov	r3, r1
 800bf4c:	4630      	mov	r0, r6
 800bf4e:	e9c4 2300 	strd	r2, r3, [r4]
 800bf52:	4639      	mov	r1, r7
 800bf54:	f7f4 f912 	bl	800017c <__aeabi_dsub>
 800bf58:	a379      	add	r3, pc, #484	; (adr r3, 800c140 <__ieee754_rem_pio2+0x2f0>)
 800bf5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf5e:	e7e0      	b.n	800bf22 <__ieee754_rem_pio2+0xd2>
 800bf60:	4a82      	ldr	r2, [pc, #520]	; (800c16c <__ieee754_rem_pio2+0x31c>)
 800bf62:	4592      	cmp	sl, r2
 800bf64:	f300 80d4 	bgt.w	800c110 <__ieee754_rem_pio2+0x2c0>
 800bf68:	f000 faf0 	bl	800c54c <fabs>
 800bf6c:	a376      	add	r3, pc, #472	; (adr r3, 800c148 <__ieee754_rem_pio2+0x2f8>)
 800bf6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf72:	4606      	mov	r6, r0
 800bf74:	460f      	mov	r7, r1
 800bf76:	f7f4 fab9 	bl	80004ec <__aeabi_dmul>
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	4b7c      	ldr	r3, [pc, #496]	; (800c170 <__ieee754_rem_pio2+0x320>)
 800bf7e:	f7f4 f8ff 	bl	8000180 <__adddf3>
 800bf82:	f7f4 fd63 	bl	8000a4c <__aeabi_d2iz>
 800bf86:	4605      	mov	r5, r0
 800bf88:	f7f4 fa46 	bl	8000418 <__aeabi_i2d>
 800bf8c:	4602      	mov	r2, r0
 800bf8e:	460b      	mov	r3, r1
 800bf90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bf94:	a364      	add	r3, pc, #400	; (adr r3, 800c128 <__ieee754_rem_pio2+0x2d8>)
 800bf96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9a:	f7f4 faa7 	bl	80004ec <__aeabi_dmul>
 800bf9e:	4602      	mov	r2, r0
 800bfa0:	460b      	mov	r3, r1
 800bfa2:	4630      	mov	r0, r6
 800bfa4:	4639      	mov	r1, r7
 800bfa6:	f7f4 f8e9 	bl	800017c <__aeabi_dsub>
 800bfaa:	a361      	add	r3, pc, #388	; (adr r3, 800c130 <__ieee754_rem_pio2+0x2e0>)
 800bfac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb0:	4680      	mov	r8, r0
 800bfb2:	4689      	mov	r9, r1
 800bfb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfb8:	f7f4 fa98 	bl	80004ec <__aeabi_dmul>
 800bfbc:	2d1f      	cmp	r5, #31
 800bfbe:	4606      	mov	r6, r0
 800bfc0:	460f      	mov	r7, r1
 800bfc2:	dc0e      	bgt.n	800bfe2 <__ieee754_rem_pio2+0x192>
 800bfc4:	4b6b      	ldr	r3, [pc, #428]	; (800c174 <__ieee754_rem_pio2+0x324>)
 800bfc6:	1e6a      	subs	r2, r5, #1
 800bfc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfcc:	4553      	cmp	r3, sl
 800bfce:	d008      	beq.n	800bfe2 <__ieee754_rem_pio2+0x192>
 800bfd0:	4632      	mov	r2, r6
 800bfd2:	463b      	mov	r3, r7
 800bfd4:	4640      	mov	r0, r8
 800bfd6:	4649      	mov	r1, r9
 800bfd8:	f7f4 f8d0 	bl	800017c <__aeabi_dsub>
 800bfdc:	e9c4 0100 	strd	r0, r1, [r4]
 800bfe0:	e012      	b.n	800c008 <__ieee754_rem_pio2+0x1b8>
 800bfe2:	463b      	mov	r3, r7
 800bfe4:	4632      	mov	r2, r6
 800bfe6:	4640      	mov	r0, r8
 800bfe8:	4649      	mov	r1, r9
 800bfea:	f7f4 f8c7 	bl	800017c <__aeabi_dsub>
 800bfee:	ea4f 532a 	mov.w	r3, sl, asr #20
 800bff2:	9305      	str	r3, [sp, #20]
 800bff4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bff8:	ebc3 531a 	rsb	r3, r3, sl, lsr #20
 800bffc:	2b10      	cmp	r3, #16
 800bffe:	dc1f      	bgt.n	800c040 <__ieee754_rem_pio2+0x1f0>
 800c000:	4602      	mov	r2, r0
 800c002:	460b      	mov	r3, r1
 800c004:	e9c4 2300 	strd	r2, r3, [r4]
 800c008:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800c00c:	4640      	mov	r0, r8
 800c00e:	4653      	mov	r3, sl
 800c010:	4649      	mov	r1, r9
 800c012:	f7f4 f8b3 	bl	800017c <__aeabi_dsub>
 800c016:	4632      	mov	r2, r6
 800c018:	463b      	mov	r3, r7
 800c01a:	f7f4 f8af 	bl	800017c <__aeabi_dsub>
 800c01e:	460b      	mov	r3, r1
 800c020:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c024:	9904      	ldr	r1, [sp, #16]
 800c026:	4602      	mov	r2, r0
 800c028:	2900      	cmp	r1, #0
 800c02a:	f6bf af48 	bge.w	800bebe <__ieee754_rem_pio2+0x6e>
 800c02e:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800c032:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800c036:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c03a:	60e3      	str	r3, [r4, #12]
 800c03c:	426d      	negs	r5, r5
 800c03e:	e73e      	b.n	800bebe <__ieee754_rem_pio2+0x6e>
 800c040:	a33d      	add	r3, pc, #244	; (adr r3, 800c138 <__ieee754_rem_pio2+0x2e8>)
 800c042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c04a:	f7f4 fa4f 	bl	80004ec <__aeabi_dmul>
 800c04e:	4606      	mov	r6, r0
 800c050:	460f      	mov	r7, r1
 800c052:	4602      	mov	r2, r0
 800c054:	460b      	mov	r3, r1
 800c056:	4640      	mov	r0, r8
 800c058:	4649      	mov	r1, r9
 800c05a:	f7f4 f88f 	bl	800017c <__aeabi_dsub>
 800c05e:	4602      	mov	r2, r0
 800c060:	460b      	mov	r3, r1
 800c062:	4682      	mov	sl, r0
 800c064:	468b      	mov	fp, r1
 800c066:	4640      	mov	r0, r8
 800c068:	4649      	mov	r1, r9
 800c06a:	f7f4 f887 	bl	800017c <__aeabi_dsub>
 800c06e:	4632      	mov	r2, r6
 800c070:	463b      	mov	r3, r7
 800c072:	f7f4 f883 	bl	800017c <__aeabi_dsub>
 800c076:	a332      	add	r3, pc, #200	; (adr r3, 800c140 <__ieee754_rem_pio2+0x2f0>)
 800c078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c07c:	4606      	mov	r6, r0
 800c07e:	460f      	mov	r7, r1
 800c080:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c084:	f7f4 fa32 	bl	80004ec <__aeabi_dmul>
 800c088:	4632      	mov	r2, r6
 800c08a:	463b      	mov	r3, r7
 800c08c:	f7f4 f876 	bl	800017c <__aeabi_dsub>
 800c090:	4602      	mov	r2, r0
 800c092:	460b      	mov	r3, r1
 800c094:	4606      	mov	r6, r0
 800c096:	460f      	mov	r7, r1
 800c098:	4650      	mov	r0, sl
 800c09a:	4659      	mov	r1, fp
 800c09c:	f7f4 f86e 	bl	800017c <__aeabi_dsub>
 800c0a0:	9a05      	ldr	r2, [sp, #20]
 800c0a2:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c0a6:	1ad3      	subs	r3, r2, r3
 800c0a8:	2b31      	cmp	r3, #49	; 0x31
 800c0aa:	dc06      	bgt.n	800c0ba <__ieee754_rem_pio2+0x26a>
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	460b      	mov	r3, r1
 800c0b0:	46d0      	mov	r8, sl
 800c0b2:	46d9      	mov	r9, fp
 800c0b4:	e9c4 2300 	strd	r2, r3, [r4]
 800c0b8:	e7a6      	b.n	800c008 <__ieee754_rem_pio2+0x1b8>
 800c0ba:	a325      	add	r3, pc, #148	; (adr r3, 800c150 <__ieee754_rem_pio2+0x300>)
 800c0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0c4:	f7f4 fa12 	bl	80004ec <__aeabi_dmul>
 800c0c8:	4606      	mov	r6, r0
 800c0ca:	460f      	mov	r7, r1
 800c0cc:	4602      	mov	r2, r0
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	4650      	mov	r0, sl
 800c0d2:	4659      	mov	r1, fp
 800c0d4:	f7f4 f852 	bl	800017c <__aeabi_dsub>
 800c0d8:	4602      	mov	r2, r0
 800c0da:	460b      	mov	r3, r1
 800c0dc:	4680      	mov	r8, r0
 800c0de:	4689      	mov	r9, r1
 800c0e0:	4650      	mov	r0, sl
 800c0e2:	4659      	mov	r1, fp
 800c0e4:	f7f4 f84a 	bl	800017c <__aeabi_dsub>
 800c0e8:	4632      	mov	r2, r6
 800c0ea:	463b      	mov	r3, r7
 800c0ec:	f7f4 f846 	bl	800017c <__aeabi_dsub>
 800c0f0:	a319      	add	r3, pc, #100	; (adr r3, 800c158 <__ieee754_rem_pio2+0x308>)
 800c0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f6:	4606      	mov	r6, r0
 800c0f8:	460f      	mov	r7, r1
 800c0fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0fe:	f7f4 f9f5 	bl	80004ec <__aeabi_dmul>
 800c102:	4632      	mov	r2, r6
 800c104:	463b      	mov	r3, r7
 800c106:	f7f4 f839 	bl	800017c <__aeabi_dsub>
 800c10a:	4606      	mov	r6, r0
 800c10c:	460f      	mov	r7, r1
 800c10e:	e75f      	b.n	800bfd0 <__ieee754_rem_pio2+0x180>
 800c110:	4a19      	ldr	r2, [pc, #100]	; (800c178 <__ieee754_rem_pio2+0x328>)
 800c112:	4592      	cmp	sl, r2
 800c114:	dd32      	ble.n	800c17c <__ieee754_rem_pio2+0x32c>
 800c116:	4602      	mov	r2, r0
 800c118:	460b      	mov	r3, r1
 800c11a:	f7f4 f82f 	bl	800017c <__aeabi_dsub>
 800c11e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c122:	e9c4 0100 	strd	r0, r1, [r4]
 800c126:	e6a3      	b.n	800be70 <__ieee754_rem_pio2+0x20>
 800c128:	54400000 	.word	0x54400000
 800c12c:	3ff921fb 	.word	0x3ff921fb
 800c130:	1a626331 	.word	0x1a626331
 800c134:	3dd0b461 	.word	0x3dd0b461
 800c138:	1a600000 	.word	0x1a600000
 800c13c:	3dd0b461 	.word	0x3dd0b461
 800c140:	2e037073 	.word	0x2e037073
 800c144:	3ba3198a 	.word	0x3ba3198a
 800c148:	6dc9c883 	.word	0x6dc9c883
 800c14c:	3fe45f30 	.word	0x3fe45f30
 800c150:	2e000000 	.word	0x2e000000
 800c154:	3ba3198a 	.word	0x3ba3198a
 800c158:	252049c1 	.word	0x252049c1
 800c15c:	397b839a 	.word	0x397b839a
 800c160:	3fe921fb 	.word	0x3fe921fb
 800c164:	4002d97b 	.word	0x4002d97b
 800c168:	3ff921fb 	.word	0x3ff921fb
 800c16c:	413921fb 	.word	0x413921fb
 800c170:	3fe00000 	.word	0x3fe00000
 800c174:	0800e820 	.word	0x0800e820
 800c178:	7fefffff 	.word	0x7fefffff
 800c17c:	ea4f 552a 	mov.w	r5, sl, asr #20
 800c180:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800c184:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800c188:	460f      	mov	r7, r1
 800c18a:	4606      	mov	r6, r0
 800c18c:	f7f4 fc5e 	bl	8000a4c <__aeabi_d2iz>
 800c190:	f7f4 f942 	bl	8000418 <__aeabi_i2d>
 800c194:	4602      	mov	r2, r0
 800c196:	460b      	mov	r3, r1
 800c198:	4630      	mov	r0, r6
 800c19a:	4639      	mov	r1, r7
 800c19c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c1a0:	f7f3 ffec 	bl	800017c <__aeabi_dsub>
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	4b22      	ldr	r3, [pc, #136]	; (800c230 <__ieee754_rem_pio2+0x3e0>)
 800c1a8:	f7f4 f9a0 	bl	80004ec <__aeabi_dmul>
 800c1ac:	460f      	mov	r7, r1
 800c1ae:	4606      	mov	r6, r0
 800c1b0:	f7f4 fc4c 	bl	8000a4c <__aeabi_d2iz>
 800c1b4:	f7f4 f930 	bl	8000418 <__aeabi_i2d>
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	460b      	mov	r3, r1
 800c1bc:	4630      	mov	r0, r6
 800c1be:	4639      	mov	r1, r7
 800c1c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c1c4:	f7f3 ffda 	bl	800017c <__aeabi_dsub>
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	4b19      	ldr	r3, [pc, #100]	; (800c230 <__ieee754_rem_pio2+0x3e0>)
 800c1cc:	f7f4 f98e 	bl	80004ec <__aeabi_dmul>
 800c1d0:	f04f 0803 	mov.w	r8, #3
 800c1d4:	2600      	movs	r6, #0
 800c1d6:	2700      	movs	r7, #0
 800c1d8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c1dc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800c1e0:	4632      	mov	r2, r6
 800c1e2:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800c1e6:	463b      	mov	r3, r7
 800c1e8:	46c2      	mov	sl, r8
 800c1ea:	f108 38ff 	add.w	r8, r8, #4294967295
 800c1ee:	f7f4 fbe5 	bl	80009bc <__aeabi_dcmpeq>
 800c1f2:	2800      	cmp	r0, #0
 800c1f4:	d1f4      	bne.n	800c1e0 <__ieee754_rem_pio2+0x390>
 800c1f6:	4b0f      	ldr	r3, [pc, #60]	; (800c234 <__ieee754_rem_pio2+0x3e4>)
 800c1f8:	462a      	mov	r2, r5
 800c1fa:	9301      	str	r3, [sp, #4]
 800c1fc:	2302      	movs	r3, #2
 800c1fe:	4621      	mov	r1, r4
 800c200:	9300      	str	r3, [sp, #0]
 800c202:	a806      	add	r0, sp, #24
 800c204:	4653      	mov	r3, sl
 800c206:	f000 f9a5 	bl	800c554 <__kernel_rem_pio2>
 800c20a:	9b04      	ldr	r3, [sp, #16]
 800c20c:	4605      	mov	r5, r0
 800c20e:	2b00      	cmp	r3, #0
 800c210:	f6bf ae55 	bge.w	800bebe <__ieee754_rem_pio2+0x6e>
 800c214:	e9d4 2100 	ldrd	r2, r1, [r4]
 800c218:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c21c:	e9c4 2300 	strd	r2, r3, [r4]
 800c220:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800c224:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c228:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c22c:	e706      	b.n	800c03c <__ieee754_rem_pio2+0x1ec>
 800c22e:	bf00      	nop
 800c230:	41700000 	.word	0x41700000
 800c234:	0800e8a0 	.word	0x0800e8a0

0800c238 <atan>:
 800c238:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c23c:	4bb6      	ldr	r3, [pc, #728]	; (800c518 <atan+0x2e0>)
 800c23e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c242:	429e      	cmp	r6, r3
 800c244:	4604      	mov	r4, r0
 800c246:	460d      	mov	r5, r1
 800c248:	468b      	mov	fp, r1
 800c24a:	dd17      	ble.n	800c27c <atan+0x44>
 800c24c:	4bb3      	ldr	r3, [pc, #716]	; (800c51c <atan+0x2e4>)
 800c24e:	429e      	cmp	r6, r3
 800c250:	dc01      	bgt.n	800c256 <atan+0x1e>
 800c252:	d109      	bne.n	800c268 <atan+0x30>
 800c254:	b140      	cbz	r0, 800c268 <atan+0x30>
 800c256:	4622      	mov	r2, r4
 800c258:	462b      	mov	r3, r5
 800c25a:	4620      	mov	r0, r4
 800c25c:	4629      	mov	r1, r5
 800c25e:	f7f3 ff8f 	bl	8000180 <__adddf3>
 800c262:	4604      	mov	r4, r0
 800c264:	460d      	mov	r5, r1
 800c266:	e005      	b.n	800c274 <atan+0x3c>
 800c268:	f1bb 0f00 	cmp.w	fp, #0
 800c26c:	4cac      	ldr	r4, [pc, #688]	; (800c520 <atan+0x2e8>)
 800c26e:	f300 8121 	bgt.w	800c4b4 <atan+0x27c>
 800c272:	4dac      	ldr	r5, [pc, #688]	; (800c524 <atan+0x2ec>)
 800c274:	4620      	mov	r0, r4
 800c276:	4629      	mov	r1, r5
 800c278:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c27c:	4baa      	ldr	r3, [pc, #680]	; (800c528 <atan+0x2f0>)
 800c27e:	429e      	cmp	r6, r3
 800c280:	dc11      	bgt.n	800c2a6 <atan+0x6e>
 800c282:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c286:	429e      	cmp	r6, r3
 800c288:	dc0a      	bgt.n	800c2a0 <atan+0x68>
 800c28a:	a38b      	add	r3, pc, #556	; (adr r3, 800c4b8 <atan+0x280>)
 800c28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c290:	f7f3 ff76 	bl	8000180 <__adddf3>
 800c294:	2200      	movs	r2, #0
 800c296:	4ba5      	ldr	r3, [pc, #660]	; (800c52c <atan+0x2f4>)
 800c298:	f7f4 fbb8 	bl	8000a0c <__aeabi_dcmpgt>
 800c29c:	2800      	cmp	r0, #0
 800c29e:	d1e9      	bne.n	800c274 <atan+0x3c>
 800c2a0:	f04f 3aff 	mov.w	sl, #4294967295
 800c2a4:	e027      	b.n	800c2f6 <atan+0xbe>
 800c2a6:	f000 f951 	bl	800c54c <fabs>
 800c2aa:	4ba1      	ldr	r3, [pc, #644]	; (800c530 <atan+0x2f8>)
 800c2ac:	4604      	mov	r4, r0
 800c2ae:	429e      	cmp	r6, r3
 800c2b0:	460d      	mov	r5, r1
 800c2b2:	f300 80b8 	bgt.w	800c426 <atan+0x1ee>
 800c2b6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c2ba:	429e      	cmp	r6, r3
 800c2bc:	f300 809c 	bgt.w	800c3f8 <atan+0x1c0>
 800c2c0:	4602      	mov	r2, r0
 800c2c2:	460b      	mov	r3, r1
 800c2c4:	f7f3 ff5c 	bl	8000180 <__adddf3>
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	4b98      	ldr	r3, [pc, #608]	; (800c52c <atan+0x2f4>)
 800c2cc:	f7f3 ff56 	bl	800017c <__aeabi_dsub>
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	4606      	mov	r6, r0
 800c2d4:	460f      	mov	r7, r1
 800c2d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c2da:	4620      	mov	r0, r4
 800c2dc:	4629      	mov	r1, r5
 800c2de:	f7f3 ff4f 	bl	8000180 <__adddf3>
 800c2e2:	4602      	mov	r2, r0
 800c2e4:	460b      	mov	r3, r1
 800c2e6:	4630      	mov	r0, r6
 800c2e8:	4639      	mov	r1, r7
 800c2ea:	f7f4 fa29 	bl	8000740 <__aeabi_ddiv>
 800c2ee:	f04f 0a00 	mov.w	sl, #0
 800c2f2:	4604      	mov	r4, r0
 800c2f4:	460d      	mov	r5, r1
 800c2f6:	4622      	mov	r2, r4
 800c2f8:	462b      	mov	r3, r5
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	4629      	mov	r1, r5
 800c2fe:	f7f4 f8f5 	bl	80004ec <__aeabi_dmul>
 800c302:	4602      	mov	r2, r0
 800c304:	460b      	mov	r3, r1
 800c306:	4680      	mov	r8, r0
 800c308:	4689      	mov	r9, r1
 800c30a:	f7f4 f8ef 	bl	80004ec <__aeabi_dmul>
 800c30e:	a36c      	add	r3, pc, #432	; (adr r3, 800c4c0 <atan+0x288>)
 800c310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c314:	4606      	mov	r6, r0
 800c316:	460f      	mov	r7, r1
 800c318:	f7f4 f8e8 	bl	80004ec <__aeabi_dmul>
 800c31c:	a36a      	add	r3, pc, #424	; (adr r3, 800c4c8 <atan+0x290>)
 800c31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c322:	f7f3 ff2d 	bl	8000180 <__adddf3>
 800c326:	4632      	mov	r2, r6
 800c328:	463b      	mov	r3, r7
 800c32a:	f7f4 f8df 	bl	80004ec <__aeabi_dmul>
 800c32e:	a368      	add	r3, pc, #416	; (adr r3, 800c4d0 <atan+0x298>)
 800c330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c334:	f7f3 ff24 	bl	8000180 <__adddf3>
 800c338:	4632      	mov	r2, r6
 800c33a:	463b      	mov	r3, r7
 800c33c:	f7f4 f8d6 	bl	80004ec <__aeabi_dmul>
 800c340:	a365      	add	r3, pc, #404	; (adr r3, 800c4d8 <atan+0x2a0>)
 800c342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c346:	f7f3 ff1b 	bl	8000180 <__adddf3>
 800c34a:	4632      	mov	r2, r6
 800c34c:	463b      	mov	r3, r7
 800c34e:	f7f4 f8cd 	bl	80004ec <__aeabi_dmul>
 800c352:	a363      	add	r3, pc, #396	; (adr r3, 800c4e0 <atan+0x2a8>)
 800c354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c358:	f7f3 ff12 	bl	8000180 <__adddf3>
 800c35c:	4632      	mov	r2, r6
 800c35e:	463b      	mov	r3, r7
 800c360:	f7f4 f8c4 	bl	80004ec <__aeabi_dmul>
 800c364:	a360      	add	r3, pc, #384	; (adr r3, 800c4e8 <atan+0x2b0>)
 800c366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36a:	f7f3 ff09 	bl	8000180 <__adddf3>
 800c36e:	4642      	mov	r2, r8
 800c370:	464b      	mov	r3, r9
 800c372:	f7f4 f8bb 	bl	80004ec <__aeabi_dmul>
 800c376:	a35e      	add	r3, pc, #376	; (adr r3, 800c4f0 <atan+0x2b8>)
 800c378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37c:	4680      	mov	r8, r0
 800c37e:	4689      	mov	r9, r1
 800c380:	4630      	mov	r0, r6
 800c382:	4639      	mov	r1, r7
 800c384:	f7f4 f8b2 	bl	80004ec <__aeabi_dmul>
 800c388:	a35b      	add	r3, pc, #364	; (adr r3, 800c4f8 <atan+0x2c0>)
 800c38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c38e:	f7f3 fef5 	bl	800017c <__aeabi_dsub>
 800c392:	4632      	mov	r2, r6
 800c394:	463b      	mov	r3, r7
 800c396:	f7f4 f8a9 	bl	80004ec <__aeabi_dmul>
 800c39a:	a359      	add	r3, pc, #356	; (adr r3, 800c500 <atan+0x2c8>)
 800c39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a0:	f7f3 feec 	bl	800017c <__aeabi_dsub>
 800c3a4:	4632      	mov	r2, r6
 800c3a6:	463b      	mov	r3, r7
 800c3a8:	f7f4 f8a0 	bl	80004ec <__aeabi_dmul>
 800c3ac:	a356      	add	r3, pc, #344	; (adr r3, 800c508 <atan+0x2d0>)
 800c3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b2:	f7f3 fee3 	bl	800017c <__aeabi_dsub>
 800c3b6:	4632      	mov	r2, r6
 800c3b8:	463b      	mov	r3, r7
 800c3ba:	f7f4 f897 	bl	80004ec <__aeabi_dmul>
 800c3be:	a354      	add	r3, pc, #336	; (adr r3, 800c510 <atan+0x2d8>)
 800c3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c4:	f7f3 feda 	bl	800017c <__aeabi_dsub>
 800c3c8:	4632      	mov	r2, r6
 800c3ca:	463b      	mov	r3, r7
 800c3cc:	f7f4 f88e 	bl	80004ec <__aeabi_dmul>
 800c3d0:	4602      	mov	r2, r0
 800c3d2:	460b      	mov	r3, r1
 800c3d4:	4640      	mov	r0, r8
 800c3d6:	4649      	mov	r1, r9
 800c3d8:	f7f3 fed2 	bl	8000180 <__adddf3>
 800c3dc:	4622      	mov	r2, r4
 800c3de:	462b      	mov	r3, r5
 800c3e0:	f7f4 f884 	bl	80004ec <__aeabi_dmul>
 800c3e4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	d144      	bne.n	800c478 <atan+0x240>
 800c3ee:	4620      	mov	r0, r4
 800c3f0:	4629      	mov	r1, r5
 800c3f2:	f7f3 fec3 	bl	800017c <__aeabi_dsub>
 800c3f6:	e734      	b.n	800c262 <atan+0x2a>
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	4b4c      	ldr	r3, [pc, #304]	; (800c52c <atan+0x2f4>)
 800c3fc:	f7f3 febe 	bl	800017c <__aeabi_dsub>
 800c400:	2200      	movs	r2, #0
 800c402:	4606      	mov	r6, r0
 800c404:	460f      	mov	r7, r1
 800c406:	4620      	mov	r0, r4
 800c408:	4629      	mov	r1, r5
 800c40a:	4b48      	ldr	r3, [pc, #288]	; (800c52c <atan+0x2f4>)
 800c40c:	f7f3 feb8 	bl	8000180 <__adddf3>
 800c410:	4602      	mov	r2, r0
 800c412:	460b      	mov	r3, r1
 800c414:	4630      	mov	r0, r6
 800c416:	4639      	mov	r1, r7
 800c418:	f7f4 f992 	bl	8000740 <__aeabi_ddiv>
 800c41c:	f04f 0a01 	mov.w	sl, #1
 800c420:	4604      	mov	r4, r0
 800c422:	460d      	mov	r5, r1
 800c424:	e767      	b.n	800c2f6 <atan+0xbe>
 800c426:	4b43      	ldr	r3, [pc, #268]	; (800c534 <atan+0x2fc>)
 800c428:	429e      	cmp	r6, r3
 800c42a:	da1a      	bge.n	800c462 <atan+0x22a>
 800c42c:	2200      	movs	r2, #0
 800c42e:	4b42      	ldr	r3, [pc, #264]	; (800c538 <atan+0x300>)
 800c430:	f7f3 fea4 	bl	800017c <__aeabi_dsub>
 800c434:	2200      	movs	r2, #0
 800c436:	4606      	mov	r6, r0
 800c438:	460f      	mov	r7, r1
 800c43a:	4620      	mov	r0, r4
 800c43c:	4629      	mov	r1, r5
 800c43e:	4b3e      	ldr	r3, [pc, #248]	; (800c538 <atan+0x300>)
 800c440:	f7f4 f854 	bl	80004ec <__aeabi_dmul>
 800c444:	2200      	movs	r2, #0
 800c446:	4b39      	ldr	r3, [pc, #228]	; (800c52c <atan+0x2f4>)
 800c448:	f7f3 fe9a 	bl	8000180 <__adddf3>
 800c44c:	4602      	mov	r2, r0
 800c44e:	460b      	mov	r3, r1
 800c450:	4630      	mov	r0, r6
 800c452:	4639      	mov	r1, r7
 800c454:	f7f4 f974 	bl	8000740 <__aeabi_ddiv>
 800c458:	f04f 0a02 	mov.w	sl, #2
 800c45c:	4604      	mov	r4, r0
 800c45e:	460d      	mov	r5, r1
 800c460:	e749      	b.n	800c2f6 <atan+0xbe>
 800c462:	4602      	mov	r2, r0
 800c464:	460b      	mov	r3, r1
 800c466:	2000      	movs	r0, #0
 800c468:	4934      	ldr	r1, [pc, #208]	; (800c53c <atan+0x304>)
 800c46a:	f7f4 f969 	bl	8000740 <__aeabi_ddiv>
 800c46e:	f04f 0a03 	mov.w	sl, #3
 800c472:	4604      	mov	r4, r0
 800c474:	460d      	mov	r5, r1
 800c476:	e73e      	b.n	800c2f6 <atan+0xbe>
 800c478:	4b31      	ldr	r3, [pc, #196]	; (800c540 <atan+0x308>)
 800c47a:	4e32      	ldr	r6, [pc, #200]	; (800c544 <atan+0x30c>)
 800c47c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c484:	f7f3 fe7a 	bl	800017c <__aeabi_dsub>
 800c488:	4622      	mov	r2, r4
 800c48a:	462b      	mov	r3, r5
 800c48c:	f7f3 fe76 	bl	800017c <__aeabi_dsub>
 800c490:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c494:	4602      	mov	r2, r0
 800c496:	460b      	mov	r3, r1
 800c498:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c49c:	f7f3 fe6e 	bl	800017c <__aeabi_dsub>
 800c4a0:	f1bb 0f00 	cmp.w	fp, #0
 800c4a4:	4604      	mov	r4, r0
 800c4a6:	460d      	mov	r5, r1
 800c4a8:	f6bf aee4 	bge.w	800c274 <atan+0x3c>
 800c4ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c4b0:	461d      	mov	r5, r3
 800c4b2:	e6df      	b.n	800c274 <atan+0x3c>
 800c4b4:	4d24      	ldr	r5, [pc, #144]	; (800c548 <atan+0x310>)
 800c4b6:	e6dd      	b.n	800c274 <atan+0x3c>
 800c4b8:	8800759c 	.word	0x8800759c
 800c4bc:	7e37e43c 	.word	0x7e37e43c
 800c4c0:	e322da11 	.word	0xe322da11
 800c4c4:	3f90ad3a 	.word	0x3f90ad3a
 800c4c8:	24760deb 	.word	0x24760deb
 800c4cc:	3fa97b4b 	.word	0x3fa97b4b
 800c4d0:	a0d03d51 	.word	0xa0d03d51
 800c4d4:	3fb10d66 	.word	0x3fb10d66
 800c4d8:	c54c206e 	.word	0xc54c206e
 800c4dc:	3fb745cd 	.word	0x3fb745cd
 800c4e0:	920083ff 	.word	0x920083ff
 800c4e4:	3fc24924 	.word	0x3fc24924
 800c4e8:	5555550d 	.word	0x5555550d
 800c4ec:	3fd55555 	.word	0x3fd55555
 800c4f0:	2c6a6c2f 	.word	0x2c6a6c2f
 800c4f4:	bfa2b444 	.word	0xbfa2b444
 800c4f8:	52defd9a 	.word	0x52defd9a
 800c4fc:	3fadde2d 	.word	0x3fadde2d
 800c500:	af749a6d 	.word	0xaf749a6d
 800c504:	3fb3b0f2 	.word	0x3fb3b0f2
 800c508:	fe231671 	.word	0xfe231671
 800c50c:	3fbc71c6 	.word	0x3fbc71c6
 800c510:	9998ebc4 	.word	0x9998ebc4
 800c514:	3fc99999 	.word	0x3fc99999
 800c518:	440fffff 	.word	0x440fffff
 800c51c:	7ff00000 	.word	0x7ff00000
 800c520:	54442d18 	.word	0x54442d18
 800c524:	bff921fb 	.word	0xbff921fb
 800c528:	3fdbffff 	.word	0x3fdbffff
 800c52c:	3ff00000 	.word	0x3ff00000
 800c530:	3ff2ffff 	.word	0x3ff2ffff
 800c534:	40038000 	.word	0x40038000
 800c538:	3ff80000 	.word	0x3ff80000
 800c53c:	bff00000 	.word	0xbff00000
 800c540:	0800e9c8 	.word	0x0800e9c8
 800c544:	0800e9a8 	.word	0x0800e9a8
 800c548:	3ff921fb 	.word	0x3ff921fb

0800c54c <fabs>:
 800c54c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c550:	4619      	mov	r1, r3
 800c552:	4770      	bx	lr

0800c554 <__kernel_rem_pio2>:
 800c554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c558:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c55c:	9308      	str	r3, [sp, #32]
 800c55e:	9106      	str	r1, [sp, #24]
 800c560:	4bb6      	ldr	r3, [pc, #728]	; (800c83c <__kernel_rem_pio2+0x2e8>)
 800c562:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800c564:	f112 0f14 	cmn.w	r2, #20
 800c568:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c56c:	bfa8      	it	ge
 800c56e:	1ed4      	subge	r4, r2, #3
 800c570:	9302      	str	r3, [sp, #8]
 800c572:	9b08      	ldr	r3, [sp, #32]
 800c574:	bfb8      	it	lt
 800c576:	2400      	movlt	r4, #0
 800c578:	f103 33ff 	add.w	r3, r3, #4294967295
 800c57c:	9307      	str	r3, [sp, #28]
 800c57e:	bfa4      	itt	ge
 800c580:	2318      	movge	r3, #24
 800c582:	fb94 f4f3 	sdivge	r4, r4, r3
 800c586:	f06f 0317 	mvn.w	r3, #23
 800c58a:	fb04 3303 	mla	r3, r4, r3, r3
 800c58e:	eb03 0b02 	add.w	fp, r3, r2
 800c592:	9a07      	ldr	r2, [sp, #28]
 800c594:	9b02      	ldr	r3, [sp, #8]
 800c596:	1aa7      	subs	r7, r4, r2
 800c598:	eb03 0802 	add.w	r8, r3, r2
 800c59c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c59e:	2500      	movs	r5, #0
 800c5a0:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	9009      	str	r0, [sp, #36]	; 0x24
 800c5aa:	ae20      	add	r6, sp, #128	; 0x80
 800c5ac:	4545      	cmp	r5, r8
 800c5ae:	dd14      	ble.n	800c5da <__kernel_rem_pio2+0x86>
 800c5b0:	f04f 0800 	mov.w	r8, #0
 800c5b4:	9a08      	ldr	r2, [sp, #32]
 800c5b6:	ab20      	add	r3, sp, #128	; 0x80
 800c5b8:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800c5bc:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800c5c0:	9b02      	ldr	r3, [sp, #8]
 800c5c2:	4598      	cmp	r8, r3
 800c5c4:	dc35      	bgt.n	800c632 <__kernel_rem_pio2+0xde>
 800c5c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	f1a3 0908 	sub.w	r9, r3, #8
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	462f      	mov	r7, r5
 800c5d2:	2600      	movs	r6, #0
 800c5d4:	e9cd 2300 	strd	r2, r3, [sp]
 800c5d8:	e01f      	b.n	800c61a <__kernel_rem_pio2+0xc6>
 800c5da:	42ef      	cmn	r7, r5
 800c5dc:	d40b      	bmi.n	800c5f6 <__kernel_rem_pio2+0xa2>
 800c5de:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c5e2:	e9cd 2300 	strd	r2, r3, [sp]
 800c5e6:	f7f3 ff17 	bl	8000418 <__aeabi_i2d>
 800c5ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5ee:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c5f2:	3501      	adds	r5, #1
 800c5f4:	e7da      	b.n	800c5ac <__kernel_rem_pio2+0x58>
 800c5f6:	4610      	mov	r0, r2
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	e7f8      	b.n	800c5ee <__kernel_rem_pio2+0x9a>
 800c5fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c600:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800c604:	f7f3 ff72 	bl	80004ec <__aeabi_dmul>
 800c608:	4602      	mov	r2, r0
 800c60a:	460b      	mov	r3, r1
 800c60c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c610:	f7f3 fdb6 	bl	8000180 <__adddf3>
 800c614:	e9cd 0100 	strd	r0, r1, [sp]
 800c618:	3601      	adds	r6, #1
 800c61a:	9b07      	ldr	r3, [sp, #28]
 800c61c:	3f08      	subs	r7, #8
 800c61e:	429e      	cmp	r6, r3
 800c620:	ddec      	ble.n	800c5fc <__kernel_rem_pio2+0xa8>
 800c622:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c626:	f108 0801 	add.w	r8, r8, #1
 800c62a:	e8ea 2302 	strd	r2, r3, [sl], #8
 800c62e:	3508      	adds	r5, #8
 800c630:	e7c6      	b.n	800c5c0 <__kernel_rem_pio2+0x6c>
 800c632:	9b02      	ldr	r3, [sp, #8]
 800c634:	aa0c      	add	r2, sp, #48	; 0x30
 800c636:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c63a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c63c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c63e:	9e02      	ldr	r6, [sp, #8]
 800c640:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c644:	930a      	str	r3, [sp, #40]	; 0x28
 800c646:	ab98      	add	r3, sp, #608	; 0x260
 800c648:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c64c:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800c650:	ab70      	add	r3, sp, #448	; 0x1c0
 800c652:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800c656:	46d0      	mov	r8, sl
 800c658:	46b1      	mov	r9, r6
 800c65a:	af0c      	add	r7, sp, #48	; 0x30
 800c65c:	9700      	str	r7, [sp, #0]
 800c65e:	f1b9 0f00 	cmp.w	r9, #0
 800c662:	f1a8 0808 	sub.w	r8, r8, #8
 800c666:	dc70      	bgt.n	800c74a <__kernel_rem_pio2+0x1f6>
 800c668:	465a      	mov	r2, fp
 800c66a:	4620      	mov	r0, r4
 800c66c:	4629      	mov	r1, r5
 800c66e:	f000 fab3 	bl	800cbd8 <scalbn>
 800c672:	2200      	movs	r2, #0
 800c674:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c678:	4604      	mov	r4, r0
 800c67a:	460d      	mov	r5, r1
 800c67c:	f7f3 ff36 	bl	80004ec <__aeabi_dmul>
 800c680:	f000 fb26 	bl	800ccd0 <floor>
 800c684:	2200      	movs	r2, #0
 800c686:	4b6e      	ldr	r3, [pc, #440]	; (800c840 <__kernel_rem_pio2+0x2ec>)
 800c688:	f7f3 ff30 	bl	80004ec <__aeabi_dmul>
 800c68c:	4602      	mov	r2, r0
 800c68e:	460b      	mov	r3, r1
 800c690:	4620      	mov	r0, r4
 800c692:	4629      	mov	r1, r5
 800c694:	f7f3 fd72 	bl	800017c <__aeabi_dsub>
 800c698:	460d      	mov	r5, r1
 800c69a:	4604      	mov	r4, r0
 800c69c:	f7f4 f9d6 	bl	8000a4c <__aeabi_d2iz>
 800c6a0:	9004      	str	r0, [sp, #16]
 800c6a2:	f7f3 feb9 	bl	8000418 <__aeabi_i2d>
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	460b      	mov	r3, r1
 800c6aa:	4620      	mov	r0, r4
 800c6ac:	4629      	mov	r1, r5
 800c6ae:	f7f3 fd65 	bl	800017c <__aeabi_dsub>
 800c6b2:	f1bb 0f00 	cmp.w	fp, #0
 800c6b6:	4680      	mov	r8, r0
 800c6b8:	4689      	mov	r9, r1
 800c6ba:	dd6f      	ble.n	800c79c <__kernel_rem_pio2+0x248>
 800c6bc:	1e71      	subs	r1, r6, #1
 800c6be:	ab0c      	add	r3, sp, #48	; 0x30
 800c6c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c6c4:	9c04      	ldr	r4, [sp, #16]
 800c6c6:	f1cb 0018 	rsb	r0, fp, #24
 800c6ca:	fa43 f200 	asr.w	r2, r3, r0
 800c6ce:	4414      	add	r4, r2
 800c6d0:	4082      	lsls	r2, r0
 800c6d2:	1a9b      	subs	r3, r3, r2
 800c6d4:	aa0c      	add	r2, sp, #48	; 0x30
 800c6d6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c6da:	f1cb 0217 	rsb	r2, fp, #23
 800c6de:	9404      	str	r4, [sp, #16]
 800c6e0:	4113      	asrs	r3, r2
 800c6e2:	9300      	str	r3, [sp, #0]
 800c6e4:	9b00      	ldr	r3, [sp, #0]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	dd66      	ble.n	800c7b8 <__kernel_rem_pio2+0x264>
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c6f0:	4614      	mov	r4, r2
 800c6f2:	9b04      	ldr	r3, [sp, #16]
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	9304      	str	r3, [sp, #16]
 800c6f8:	4296      	cmp	r6, r2
 800c6fa:	f300 80ad 	bgt.w	800c858 <__kernel_rem_pio2+0x304>
 800c6fe:	f1bb 0f00 	cmp.w	fp, #0
 800c702:	dd07      	ble.n	800c714 <__kernel_rem_pio2+0x1c0>
 800c704:	f1bb 0f01 	cmp.w	fp, #1
 800c708:	f000 80b5 	beq.w	800c876 <__kernel_rem_pio2+0x322>
 800c70c:	f1bb 0f02 	cmp.w	fp, #2
 800c710:	f000 80bb 	beq.w	800c88a <__kernel_rem_pio2+0x336>
 800c714:	9b00      	ldr	r3, [sp, #0]
 800c716:	2b02      	cmp	r3, #2
 800c718:	d14e      	bne.n	800c7b8 <__kernel_rem_pio2+0x264>
 800c71a:	4642      	mov	r2, r8
 800c71c:	464b      	mov	r3, r9
 800c71e:	2000      	movs	r0, #0
 800c720:	4948      	ldr	r1, [pc, #288]	; (800c844 <__kernel_rem_pio2+0x2f0>)
 800c722:	f7f3 fd2b 	bl	800017c <__aeabi_dsub>
 800c726:	4680      	mov	r8, r0
 800c728:	4689      	mov	r9, r1
 800c72a:	2c00      	cmp	r4, #0
 800c72c:	d044      	beq.n	800c7b8 <__kernel_rem_pio2+0x264>
 800c72e:	465a      	mov	r2, fp
 800c730:	2000      	movs	r0, #0
 800c732:	4944      	ldr	r1, [pc, #272]	; (800c844 <__kernel_rem_pio2+0x2f0>)
 800c734:	f000 fa50 	bl	800cbd8 <scalbn>
 800c738:	4602      	mov	r2, r0
 800c73a:	460b      	mov	r3, r1
 800c73c:	4640      	mov	r0, r8
 800c73e:	4649      	mov	r1, r9
 800c740:	f7f3 fd1c 	bl	800017c <__aeabi_dsub>
 800c744:	4680      	mov	r8, r0
 800c746:	4689      	mov	r9, r1
 800c748:	e036      	b.n	800c7b8 <__kernel_rem_pio2+0x264>
 800c74a:	2200      	movs	r2, #0
 800c74c:	4b3e      	ldr	r3, [pc, #248]	; (800c848 <__kernel_rem_pio2+0x2f4>)
 800c74e:	4620      	mov	r0, r4
 800c750:	4629      	mov	r1, r5
 800c752:	f7f3 fecb 	bl	80004ec <__aeabi_dmul>
 800c756:	f7f4 f979 	bl	8000a4c <__aeabi_d2iz>
 800c75a:	f7f3 fe5d 	bl	8000418 <__aeabi_i2d>
 800c75e:	4602      	mov	r2, r0
 800c760:	460b      	mov	r3, r1
 800c762:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c766:	2200      	movs	r2, #0
 800c768:	4b38      	ldr	r3, [pc, #224]	; (800c84c <__kernel_rem_pio2+0x2f8>)
 800c76a:	f7f3 febf 	bl	80004ec <__aeabi_dmul>
 800c76e:	4602      	mov	r2, r0
 800c770:	460b      	mov	r3, r1
 800c772:	4620      	mov	r0, r4
 800c774:	4629      	mov	r1, r5
 800c776:	f7f3 fd01 	bl	800017c <__aeabi_dsub>
 800c77a:	f7f4 f967 	bl	8000a4c <__aeabi_d2iz>
 800c77e:	9b00      	ldr	r3, [sp, #0]
 800c780:	f109 39ff 	add.w	r9, r9, #4294967295
 800c784:	f843 0b04 	str.w	r0, [r3], #4
 800c788:	9300      	str	r3, [sp, #0]
 800c78a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c78e:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c792:	f7f3 fcf5 	bl	8000180 <__adddf3>
 800c796:	4604      	mov	r4, r0
 800c798:	460d      	mov	r5, r1
 800c79a:	e760      	b.n	800c65e <__kernel_rem_pio2+0x10a>
 800c79c:	d105      	bne.n	800c7aa <__kernel_rem_pio2+0x256>
 800c79e:	1e73      	subs	r3, r6, #1
 800c7a0:	aa0c      	add	r2, sp, #48	; 0x30
 800c7a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7a6:	15db      	asrs	r3, r3, #23
 800c7a8:	e79b      	b.n	800c6e2 <__kernel_rem_pio2+0x18e>
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	4b28      	ldr	r3, [pc, #160]	; (800c850 <__kernel_rem_pio2+0x2fc>)
 800c7ae:	f7f4 f923 	bl	80009f8 <__aeabi_dcmpge>
 800c7b2:	2800      	cmp	r0, #0
 800c7b4:	d13e      	bne.n	800c834 <__kernel_rem_pio2+0x2e0>
 800c7b6:	9000      	str	r0, [sp, #0]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	4640      	mov	r0, r8
 800c7be:	4649      	mov	r1, r9
 800c7c0:	f7f4 f8fc 	bl	80009bc <__aeabi_dcmpeq>
 800c7c4:	2800      	cmp	r0, #0
 800c7c6:	f000 80b2 	beq.w	800c92e <__kernel_rem_pio2+0x3da>
 800c7ca:	1e74      	subs	r4, r6, #1
 800c7cc:	4623      	mov	r3, r4
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	9902      	ldr	r1, [sp, #8]
 800c7d2:	428b      	cmp	r3, r1
 800c7d4:	da60      	bge.n	800c898 <__kernel_rem_pio2+0x344>
 800c7d6:	2a00      	cmp	r2, #0
 800c7d8:	d075      	beq.n	800c8c6 <__kernel_rem_pio2+0x372>
 800c7da:	ab0c      	add	r3, sp, #48	; 0x30
 800c7dc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c7e0:	f1ab 0b18 	sub.w	fp, fp, #24
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	f000 80a0 	beq.w	800c92a <__kernel_rem_pio2+0x3d6>
 800c7ea:	465a      	mov	r2, fp
 800c7ec:	2000      	movs	r0, #0
 800c7ee:	4915      	ldr	r1, [pc, #84]	; (800c844 <__kernel_rem_pio2+0x2f0>)
 800c7f0:	f000 f9f2 	bl	800cbd8 <scalbn>
 800c7f4:	46a2      	mov	sl, r4
 800c7f6:	4606      	mov	r6, r0
 800c7f8:	460f      	mov	r7, r1
 800c7fa:	f04f 0800 	mov.w	r8, #0
 800c7fe:	ab70      	add	r3, sp, #448	; 0x1c0
 800c800:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800c848 <__kernel_rem_pio2+0x2f4>
 800c804:	00e5      	lsls	r5, r4, #3
 800c806:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800c80a:	f1ba 0f00 	cmp.w	sl, #0
 800c80e:	f280 80c4 	bge.w	800c99a <__kernel_rem_pio2+0x446>
 800c812:	4626      	mov	r6, r4
 800c814:	2e00      	cmp	r6, #0
 800c816:	f2c0 80f6 	blt.w	800ca06 <__kernel_rem_pio2+0x4b2>
 800c81a:	4b0e      	ldr	r3, [pc, #56]	; (800c854 <__kernel_rem_pio2+0x300>)
 800c81c:	f04f 0a00 	mov.w	sl, #0
 800c820:	9307      	str	r3, [sp, #28]
 800c822:	ab70      	add	r3, sp, #448	; 0x1c0
 800c824:	f04f 0b00 	mov.w	fp, #0
 800c828:	f04f 0800 	mov.w	r8, #0
 800c82c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800c830:	1ba7      	subs	r7, r4, r6
 800c832:	e0dc      	b.n	800c9ee <__kernel_rem_pio2+0x49a>
 800c834:	2302      	movs	r3, #2
 800c836:	9300      	str	r3, [sp, #0]
 800c838:	e757      	b.n	800c6ea <__kernel_rem_pio2+0x196>
 800c83a:	bf00      	nop
 800c83c:	0800ea28 	.word	0x0800ea28
 800c840:	40200000 	.word	0x40200000
 800c844:	3ff00000 	.word	0x3ff00000
 800c848:	3e700000 	.word	0x3e700000
 800c84c:	41700000 	.word	0x41700000
 800c850:	3fe00000 	.word	0x3fe00000
 800c854:	0800e9e8 	.word	0x0800e9e8
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	b944      	cbnz	r4, 800c86e <__kernel_rem_pio2+0x31a>
 800c85c:	b11b      	cbz	r3, 800c866 <__kernel_rem_pio2+0x312>
 800c85e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c862:	603b      	str	r3, [r7, #0]
 800c864:	2301      	movs	r3, #1
 800c866:	461c      	mov	r4, r3
 800c868:	3201      	adds	r2, #1
 800c86a:	3704      	adds	r7, #4
 800c86c:	e744      	b.n	800c6f8 <__kernel_rem_pio2+0x1a4>
 800c86e:	1acb      	subs	r3, r1, r3
 800c870:	603b      	str	r3, [r7, #0]
 800c872:	4623      	mov	r3, r4
 800c874:	e7f7      	b.n	800c866 <__kernel_rem_pio2+0x312>
 800c876:	1e72      	subs	r2, r6, #1
 800c878:	ab0c      	add	r3, sp, #48	; 0x30
 800c87a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c87e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c882:	a90c      	add	r1, sp, #48	; 0x30
 800c884:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c888:	e744      	b.n	800c714 <__kernel_rem_pio2+0x1c0>
 800c88a:	1e72      	subs	r2, r6, #1
 800c88c:	ab0c      	add	r3, sp, #48	; 0x30
 800c88e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c892:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c896:	e7f4      	b.n	800c882 <__kernel_rem_pio2+0x32e>
 800c898:	a90c      	add	r1, sp, #48	; 0x30
 800c89a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c89e:	3b01      	subs	r3, #1
 800c8a0:	430a      	orrs	r2, r1
 800c8a2:	e795      	b.n	800c7d0 <__kernel_rem_pio2+0x27c>
 800c8a4:	3301      	adds	r3, #1
 800c8a6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c8aa:	2900      	cmp	r1, #0
 800c8ac:	d0fa      	beq.n	800c8a4 <__kernel_rem_pio2+0x350>
 800c8ae:	9a08      	ldr	r2, [sp, #32]
 800c8b0:	a920      	add	r1, sp, #128	; 0x80
 800c8b2:	18b2      	adds	r2, r6, r2
 800c8b4:	f106 0801 	add.w	r8, r6, #1
 800c8b8:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800c8bc:	18f4      	adds	r4, r6, r3
 800c8be:	4544      	cmp	r4, r8
 800c8c0:	da04      	bge.n	800c8cc <__kernel_rem_pio2+0x378>
 800c8c2:	4626      	mov	r6, r4
 800c8c4:	e6bf      	b.n	800c646 <__kernel_rem_pio2+0xf2>
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c8ca:	e7ec      	b.n	800c8a6 <__kernel_rem_pio2+0x352>
 800c8cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8ce:	f04f 0900 	mov.w	r9, #0
 800c8d2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c8d6:	f7f3 fd9f 	bl	8000418 <__aeabi_i2d>
 800c8da:	2600      	movs	r6, #0
 800c8dc:	2700      	movs	r7, #0
 800c8de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8e0:	e9c5 0100 	strd	r0, r1, [r5]
 800c8e4:	3b08      	subs	r3, #8
 800c8e6:	9300      	str	r3, [sp, #0]
 800c8e8:	9504      	str	r5, [sp, #16]
 800c8ea:	9b07      	ldr	r3, [sp, #28]
 800c8ec:	4599      	cmp	r9, r3
 800c8ee:	dd05      	ble.n	800c8fc <__kernel_rem_pio2+0x3a8>
 800c8f0:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800c8f4:	f108 0801 	add.w	r8, r8, #1
 800c8f8:	3508      	adds	r5, #8
 800c8fa:	e7e0      	b.n	800c8be <__kernel_rem_pio2+0x36a>
 800c8fc:	f8dd c010 	ldr.w	ip, [sp, #16]
 800c900:	9900      	ldr	r1, [sp, #0]
 800c902:	f109 0901 	add.w	r9, r9, #1
 800c906:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800c90a:	9100      	str	r1, [sp, #0]
 800c90c:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800c910:	f8cd c010 	str.w	ip, [sp, #16]
 800c914:	f7f3 fdea 	bl	80004ec <__aeabi_dmul>
 800c918:	4602      	mov	r2, r0
 800c91a:	460b      	mov	r3, r1
 800c91c:	4630      	mov	r0, r6
 800c91e:	4639      	mov	r1, r7
 800c920:	f7f3 fc2e 	bl	8000180 <__adddf3>
 800c924:	4606      	mov	r6, r0
 800c926:	460f      	mov	r7, r1
 800c928:	e7df      	b.n	800c8ea <__kernel_rem_pio2+0x396>
 800c92a:	3c01      	subs	r4, #1
 800c92c:	e755      	b.n	800c7da <__kernel_rem_pio2+0x286>
 800c92e:	f1cb 0200 	rsb	r2, fp, #0
 800c932:	4640      	mov	r0, r8
 800c934:	4649      	mov	r1, r9
 800c936:	f000 f94f 	bl	800cbd8 <scalbn>
 800c93a:	2200      	movs	r2, #0
 800c93c:	4ba3      	ldr	r3, [pc, #652]	; (800cbcc <__kernel_rem_pio2+0x678>)
 800c93e:	4604      	mov	r4, r0
 800c940:	460d      	mov	r5, r1
 800c942:	f7f4 f859 	bl	80009f8 <__aeabi_dcmpge>
 800c946:	b1f8      	cbz	r0, 800c988 <__kernel_rem_pio2+0x434>
 800c948:	2200      	movs	r2, #0
 800c94a:	4ba1      	ldr	r3, [pc, #644]	; (800cbd0 <__kernel_rem_pio2+0x67c>)
 800c94c:	4620      	mov	r0, r4
 800c94e:	4629      	mov	r1, r5
 800c950:	f7f3 fdcc 	bl	80004ec <__aeabi_dmul>
 800c954:	f7f4 f87a 	bl	8000a4c <__aeabi_d2iz>
 800c958:	4607      	mov	r7, r0
 800c95a:	f7f3 fd5d 	bl	8000418 <__aeabi_i2d>
 800c95e:	2200      	movs	r2, #0
 800c960:	4b9a      	ldr	r3, [pc, #616]	; (800cbcc <__kernel_rem_pio2+0x678>)
 800c962:	f7f3 fdc3 	bl	80004ec <__aeabi_dmul>
 800c966:	460b      	mov	r3, r1
 800c968:	4602      	mov	r2, r0
 800c96a:	4629      	mov	r1, r5
 800c96c:	4620      	mov	r0, r4
 800c96e:	f7f3 fc05 	bl	800017c <__aeabi_dsub>
 800c972:	f7f4 f86b 	bl	8000a4c <__aeabi_d2iz>
 800c976:	1c74      	adds	r4, r6, #1
 800c978:	ab0c      	add	r3, sp, #48	; 0x30
 800c97a:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800c97e:	f10b 0b18 	add.w	fp, fp, #24
 800c982:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800c986:	e730      	b.n	800c7ea <__kernel_rem_pio2+0x296>
 800c988:	4620      	mov	r0, r4
 800c98a:	4629      	mov	r1, r5
 800c98c:	f7f4 f85e 	bl	8000a4c <__aeabi_d2iz>
 800c990:	ab0c      	add	r3, sp, #48	; 0x30
 800c992:	4634      	mov	r4, r6
 800c994:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800c998:	e727      	b.n	800c7ea <__kernel_rem_pio2+0x296>
 800c99a:	ab0c      	add	r3, sp, #48	; 0x30
 800c99c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800c9a0:	f7f3 fd3a 	bl	8000418 <__aeabi_i2d>
 800c9a4:	4632      	mov	r2, r6
 800c9a6:	463b      	mov	r3, r7
 800c9a8:	f7f3 fda0 	bl	80004ec <__aeabi_dmul>
 800c9ac:	4642      	mov	r2, r8
 800c9ae:	e86b 0102 	strd	r0, r1, [fp], #-8
 800c9b2:	464b      	mov	r3, r9
 800c9b4:	4630      	mov	r0, r6
 800c9b6:	4639      	mov	r1, r7
 800c9b8:	f7f3 fd98 	bl	80004ec <__aeabi_dmul>
 800c9bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c9c0:	4606      	mov	r6, r0
 800c9c2:	460f      	mov	r7, r1
 800c9c4:	e721      	b.n	800c80a <__kernel_rem_pio2+0x2b6>
 800c9c6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800c9ca:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c9ce:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800c9d2:	f8cd c01c 	str.w	ip, [sp, #28]
 800c9d6:	f7f3 fd89 	bl	80004ec <__aeabi_dmul>
 800c9da:	4602      	mov	r2, r0
 800c9dc:	460b      	mov	r3, r1
 800c9de:	4650      	mov	r0, sl
 800c9e0:	4659      	mov	r1, fp
 800c9e2:	f7f3 fbcd 	bl	8000180 <__adddf3>
 800c9e6:	4682      	mov	sl, r0
 800c9e8:	468b      	mov	fp, r1
 800c9ea:	f108 0801 	add.w	r8, r8, #1
 800c9ee:	9b02      	ldr	r3, [sp, #8]
 800c9f0:	4598      	cmp	r8, r3
 800c9f2:	dc01      	bgt.n	800c9f8 <__kernel_rem_pio2+0x4a4>
 800c9f4:	45b8      	cmp	r8, r7
 800c9f6:	dde6      	ble.n	800c9c6 <__kernel_rem_pio2+0x472>
 800c9f8:	ab48      	add	r3, sp, #288	; 0x120
 800c9fa:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c9fe:	e9c7 ab00 	strd	sl, fp, [r7]
 800ca02:	3e01      	subs	r6, #1
 800ca04:	e706      	b.n	800c814 <__kernel_rem_pio2+0x2c0>
 800ca06:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800ca08:	2b02      	cmp	r3, #2
 800ca0a:	dc09      	bgt.n	800ca20 <__kernel_rem_pio2+0x4cc>
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	dc32      	bgt.n	800ca76 <__kernel_rem_pio2+0x522>
 800ca10:	d058      	beq.n	800cac4 <__kernel_rem_pio2+0x570>
 800ca12:	9b04      	ldr	r3, [sp, #16]
 800ca14:	f003 0007 	and.w	r0, r3, #7
 800ca18:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800ca1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca20:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800ca22:	2b03      	cmp	r3, #3
 800ca24:	d1f5      	bne.n	800ca12 <__kernel_rem_pio2+0x4be>
 800ca26:	ab48      	add	r3, sp, #288	; 0x120
 800ca28:	441d      	add	r5, r3
 800ca2a:	46aa      	mov	sl, r5
 800ca2c:	46a3      	mov	fp, r4
 800ca2e:	f1bb 0f00 	cmp.w	fp, #0
 800ca32:	dc74      	bgt.n	800cb1e <__kernel_rem_pio2+0x5ca>
 800ca34:	46aa      	mov	sl, r5
 800ca36:	46a3      	mov	fp, r4
 800ca38:	f1bb 0f01 	cmp.w	fp, #1
 800ca3c:	f300 808e 	bgt.w	800cb5c <__kernel_rem_pio2+0x608>
 800ca40:	2700      	movs	r7, #0
 800ca42:	463e      	mov	r6, r7
 800ca44:	2c01      	cmp	r4, #1
 800ca46:	f300 80a8 	bgt.w	800cb9a <__kernel_rem_pio2+0x646>
 800ca4a:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800ca4e:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800ca52:	9b00      	ldr	r3, [sp, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	f040 80aa 	bne.w	800cbae <__kernel_rem_pio2+0x65a>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	462a      	mov	r2, r5
 800ca5e:	9806      	ldr	r0, [sp, #24]
 800ca60:	e9c0 2300 	strd	r2, r3, [r0]
 800ca64:	4622      	mov	r2, r4
 800ca66:	460b      	mov	r3, r1
 800ca68:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ca6c:	463a      	mov	r2, r7
 800ca6e:	4633      	mov	r3, r6
 800ca70:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ca74:	e7cd      	b.n	800ca12 <__kernel_rem_pio2+0x4be>
 800ca76:	2000      	movs	r0, #0
 800ca78:	46a0      	mov	r8, r4
 800ca7a:	4601      	mov	r1, r0
 800ca7c:	ab48      	add	r3, sp, #288	; 0x120
 800ca7e:	441d      	add	r5, r3
 800ca80:	f1b8 0f00 	cmp.w	r8, #0
 800ca84:	da38      	bge.n	800caf8 <__kernel_rem_pio2+0x5a4>
 800ca86:	9b00      	ldr	r3, [sp, #0]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d03c      	beq.n	800cb06 <__kernel_rem_pio2+0x5b2>
 800ca8c:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800ca90:	4602      	mov	r2, r0
 800ca92:	462b      	mov	r3, r5
 800ca94:	9d06      	ldr	r5, [sp, #24]
 800ca96:	2601      	movs	r6, #1
 800ca98:	e9c5 2300 	strd	r2, r3, [r5]
 800ca9c:	460b      	mov	r3, r1
 800ca9e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800caa2:	f7f3 fb6b 	bl	800017c <__aeabi_dsub>
 800caa6:	4684      	mov	ip, r0
 800caa8:	460f      	mov	r7, r1
 800caaa:	ad48      	add	r5, sp, #288	; 0x120
 800caac:	42b4      	cmp	r4, r6
 800caae:	da2c      	bge.n	800cb0a <__kernel_rem_pio2+0x5b6>
 800cab0:	9b00      	ldr	r3, [sp, #0]
 800cab2:	b10b      	cbz	r3, 800cab8 <__kernel_rem_pio2+0x564>
 800cab4:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800cab8:	4662      	mov	r2, ip
 800caba:	463b      	mov	r3, r7
 800cabc:	9906      	ldr	r1, [sp, #24]
 800cabe:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800cac2:	e7a6      	b.n	800ca12 <__kernel_rem_pio2+0x4be>
 800cac4:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800cac6:	ab48      	add	r3, sp, #288	; 0x120
 800cac8:	4637      	mov	r7, r6
 800caca:	441d      	add	r5, r3
 800cacc:	2c00      	cmp	r4, #0
 800cace:	da09      	bge.n	800cae4 <__kernel_rem_pio2+0x590>
 800cad0:	9b00      	ldr	r3, [sp, #0]
 800cad2:	b10b      	cbz	r3, 800cad8 <__kernel_rem_pio2+0x584>
 800cad4:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800cad8:	4632      	mov	r2, r6
 800cada:	463b      	mov	r3, r7
 800cadc:	9906      	ldr	r1, [sp, #24]
 800cade:	e9c1 2300 	strd	r2, r3, [r1]
 800cae2:	e796      	b.n	800ca12 <__kernel_rem_pio2+0x4be>
 800cae4:	4630      	mov	r0, r6
 800cae6:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800caea:	4639      	mov	r1, r7
 800caec:	f7f3 fb48 	bl	8000180 <__adddf3>
 800caf0:	3c01      	subs	r4, #1
 800caf2:	4606      	mov	r6, r0
 800caf4:	460f      	mov	r7, r1
 800caf6:	e7e9      	b.n	800cacc <__kernel_rem_pio2+0x578>
 800caf8:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800cafc:	f7f3 fb40 	bl	8000180 <__adddf3>
 800cb00:	f108 38ff 	add.w	r8, r8, #4294967295
 800cb04:	e7bc      	b.n	800ca80 <__kernel_rem_pio2+0x52c>
 800cb06:	460d      	mov	r5, r1
 800cb08:	e7c2      	b.n	800ca90 <__kernel_rem_pio2+0x53c>
 800cb0a:	4660      	mov	r0, ip
 800cb0c:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800cb10:	4639      	mov	r1, r7
 800cb12:	f7f3 fb35 	bl	8000180 <__adddf3>
 800cb16:	3601      	adds	r6, #1
 800cb18:	4684      	mov	ip, r0
 800cb1a:	460f      	mov	r7, r1
 800cb1c:	e7c6      	b.n	800caac <__kernel_rem_pio2+0x558>
 800cb1e:	e9da 6700 	ldrd	r6, r7, [sl]
 800cb22:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800cb26:	4632      	mov	r2, r6
 800cb28:	463b      	mov	r3, r7
 800cb2a:	4640      	mov	r0, r8
 800cb2c:	4649      	mov	r1, r9
 800cb2e:	f7f3 fb27 	bl	8000180 <__adddf3>
 800cb32:	4602      	mov	r2, r0
 800cb34:	460b      	mov	r3, r1
 800cb36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb3a:	4640      	mov	r0, r8
 800cb3c:	4649      	mov	r1, r9
 800cb3e:	f7f3 fb1d 	bl	800017c <__aeabi_dsub>
 800cb42:	4632      	mov	r2, r6
 800cb44:	463b      	mov	r3, r7
 800cb46:	f7f3 fb1b 	bl	8000180 <__adddf3>
 800cb4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb4e:	e86a 0102 	strd	r0, r1, [sl], #-8
 800cb52:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cb56:	e9ca 2300 	strd	r2, r3, [sl]
 800cb5a:	e768      	b.n	800ca2e <__kernel_rem_pio2+0x4da>
 800cb5c:	e9da 8900 	ldrd	r8, r9, [sl]
 800cb60:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800cb64:	4642      	mov	r2, r8
 800cb66:	464b      	mov	r3, r9
 800cb68:	4630      	mov	r0, r6
 800cb6a:	4639      	mov	r1, r7
 800cb6c:	f7f3 fb08 	bl	8000180 <__adddf3>
 800cb70:	4602      	mov	r2, r0
 800cb72:	460b      	mov	r3, r1
 800cb74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb78:	4630      	mov	r0, r6
 800cb7a:	4639      	mov	r1, r7
 800cb7c:	f7f3 fafe 	bl	800017c <__aeabi_dsub>
 800cb80:	4642      	mov	r2, r8
 800cb82:	464b      	mov	r3, r9
 800cb84:	f7f3 fafc 	bl	8000180 <__adddf3>
 800cb88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb8c:	e86a 0102 	strd	r0, r1, [sl], #-8
 800cb90:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cb94:	e9ca 2300 	strd	r2, r3, [sl]
 800cb98:	e74e      	b.n	800ca38 <__kernel_rem_pio2+0x4e4>
 800cb9a:	4638      	mov	r0, r7
 800cb9c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800cba0:	4631      	mov	r1, r6
 800cba2:	f7f3 faed 	bl	8000180 <__adddf3>
 800cba6:	3c01      	subs	r4, #1
 800cba8:	4607      	mov	r7, r0
 800cbaa:	460e      	mov	r6, r1
 800cbac:	e74a      	b.n	800ca44 <__kernel_rem_pio2+0x4f0>
 800cbae:	9b06      	ldr	r3, [sp, #24]
 800cbb0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800cbb4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800cbb8:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800cbbc:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800cbc0:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800cbc4:	601d      	str	r5, [r3, #0]
 800cbc6:	615e      	str	r6, [r3, #20]
 800cbc8:	e723      	b.n	800ca12 <__kernel_rem_pio2+0x4be>
 800cbca:	bf00      	nop
 800cbcc:	41700000 	.word	0x41700000
 800cbd0:	3e700000 	.word	0x3e700000
 800cbd4:	00000000 	.word	0x00000000

0800cbd8 <scalbn>:
 800cbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbda:	4616      	mov	r6, r2
 800cbdc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cbe0:	4604      	mov	r4, r0
 800cbe2:	460d      	mov	r5, r1
 800cbe4:	460b      	mov	r3, r1
 800cbe6:	b992      	cbnz	r2, 800cc0e <scalbn+0x36>
 800cbe8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cbec:	4303      	orrs	r3, r0
 800cbee:	d03c      	beq.n	800cc6a <scalbn+0x92>
 800cbf0:	4b31      	ldr	r3, [pc, #196]	; (800ccb8 <scalbn+0xe0>)
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	f7f3 fc7a 	bl	80004ec <__aeabi_dmul>
 800cbf8:	4b30      	ldr	r3, [pc, #192]	; (800ccbc <scalbn+0xe4>)
 800cbfa:	4604      	mov	r4, r0
 800cbfc:	429e      	cmp	r6, r3
 800cbfe:	460d      	mov	r5, r1
 800cc00:	da0f      	bge.n	800cc22 <scalbn+0x4a>
 800cc02:	a329      	add	r3, pc, #164	; (adr r3, 800cca8 <scalbn+0xd0>)
 800cc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc08:	f7f3 fc70 	bl	80004ec <__aeabi_dmul>
 800cc0c:	e006      	b.n	800cc1c <scalbn+0x44>
 800cc0e:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800cc12:	42ba      	cmp	r2, r7
 800cc14:	d109      	bne.n	800cc2a <scalbn+0x52>
 800cc16:	4602      	mov	r2, r0
 800cc18:	f7f3 fab2 	bl	8000180 <__adddf3>
 800cc1c:	4604      	mov	r4, r0
 800cc1e:	460d      	mov	r5, r1
 800cc20:	e023      	b.n	800cc6a <scalbn+0x92>
 800cc22:	460b      	mov	r3, r1
 800cc24:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cc28:	3a36      	subs	r2, #54	; 0x36
 800cc2a:	f24c 3150 	movw	r1, #50000	; 0xc350
 800cc2e:	428e      	cmp	r6, r1
 800cc30:	dd0e      	ble.n	800cc50 <scalbn+0x78>
 800cc32:	a31f      	add	r3, pc, #124	; (adr r3, 800ccb0 <scalbn+0xd8>)
 800cc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc38:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800cc3c:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800cc40:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800cc44:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800cc48:	481d      	ldr	r0, [pc, #116]	; (800ccc0 <scalbn+0xe8>)
 800cc4a:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800cc4e:	e7db      	b.n	800cc08 <scalbn+0x30>
 800cc50:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cc54:	4432      	add	r2, r6
 800cc56:	428a      	cmp	r2, r1
 800cc58:	dceb      	bgt.n	800cc32 <scalbn+0x5a>
 800cc5a:	2a00      	cmp	r2, #0
 800cc5c:	dd08      	ble.n	800cc70 <scalbn+0x98>
 800cc5e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cc62:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cc66:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cc6a:	4620      	mov	r0, r4
 800cc6c:	4629      	mov	r1, r5
 800cc6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc70:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cc74:	da0c      	bge.n	800cc90 <scalbn+0xb8>
 800cc76:	a30c      	add	r3, pc, #48	; (adr r3, 800cca8 <scalbn+0xd0>)
 800cc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc7c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800cc80:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800cc84:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800cc88:	480e      	ldr	r0, [pc, #56]	; (800ccc4 <scalbn+0xec>)
 800cc8a:	f041 011f 	orr.w	r1, r1, #31
 800cc8e:	e7bb      	b.n	800cc08 <scalbn+0x30>
 800cc90:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cc94:	3236      	adds	r2, #54	; 0x36
 800cc96:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cc9a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cc9e:	4620      	mov	r0, r4
 800cca0:	4629      	mov	r1, r5
 800cca2:	2200      	movs	r2, #0
 800cca4:	4b08      	ldr	r3, [pc, #32]	; (800ccc8 <scalbn+0xf0>)
 800cca6:	e7af      	b.n	800cc08 <scalbn+0x30>
 800cca8:	c2f8f359 	.word	0xc2f8f359
 800ccac:	01a56e1f 	.word	0x01a56e1f
 800ccb0:	8800759c 	.word	0x8800759c
 800ccb4:	7e37e43c 	.word	0x7e37e43c
 800ccb8:	43500000 	.word	0x43500000
 800ccbc:	ffff3cb0 	.word	0xffff3cb0
 800ccc0:	8800759c 	.word	0x8800759c
 800ccc4:	c2f8f359 	.word	0xc2f8f359
 800ccc8:	3c900000 	.word	0x3c900000
 800cccc:	00000000 	.word	0x00000000

0800ccd0 <floor>:
 800ccd0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ccd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccd8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ccdc:	2e13      	cmp	r6, #19
 800ccde:	460b      	mov	r3, r1
 800cce0:	4607      	mov	r7, r0
 800cce2:	460c      	mov	r4, r1
 800cce4:	4605      	mov	r5, r0
 800cce6:	dc32      	bgt.n	800cd4e <floor+0x7e>
 800cce8:	2e00      	cmp	r6, #0
 800ccea:	da14      	bge.n	800cd16 <floor+0x46>
 800ccec:	a334      	add	r3, pc, #208	; (adr r3, 800cdc0 <floor+0xf0>)
 800ccee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf2:	f7f3 fa45 	bl	8000180 <__adddf3>
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	f7f3 fe87 	bl	8000a0c <__aeabi_dcmpgt>
 800ccfe:	b138      	cbz	r0, 800cd10 <floor+0x40>
 800cd00:	2c00      	cmp	r4, #0
 800cd02:	da56      	bge.n	800cdb2 <floor+0xe2>
 800cd04:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800cd08:	4325      	orrs	r5, r4
 800cd0a:	d055      	beq.n	800cdb8 <floor+0xe8>
 800cd0c:	2500      	movs	r5, #0
 800cd0e:	4c2e      	ldr	r4, [pc, #184]	; (800cdc8 <floor+0xf8>)
 800cd10:	4623      	mov	r3, r4
 800cd12:	462f      	mov	r7, r5
 800cd14:	e025      	b.n	800cd62 <floor+0x92>
 800cd16:	4a2d      	ldr	r2, [pc, #180]	; (800cdcc <floor+0xfc>)
 800cd18:	fa42 f806 	asr.w	r8, r2, r6
 800cd1c:	ea01 0208 	and.w	r2, r1, r8
 800cd20:	4302      	orrs	r2, r0
 800cd22:	d01e      	beq.n	800cd62 <floor+0x92>
 800cd24:	a326      	add	r3, pc, #152	; (adr r3, 800cdc0 <floor+0xf0>)
 800cd26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd2a:	f7f3 fa29 	bl	8000180 <__adddf3>
 800cd2e:	2200      	movs	r2, #0
 800cd30:	2300      	movs	r3, #0
 800cd32:	f7f3 fe6b 	bl	8000a0c <__aeabi_dcmpgt>
 800cd36:	2800      	cmp	r0, #0
 800cd38:	d0ea      	beq.n	800cd10 <floor+0x40>
 800cd3a:	2c00      	cmp	r4, #0
 800cd3c:	bfbe      	ittt	lt
 800cd3e:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800cd42:	4133      	asrlt	r3, r6
 800cd44:	18e4      	addlt	r4, r4, r3
 800cd46:	2500      	movs	r5, #0
 800cd48:	ea24 0408 	bic.w	r4, r4, r8
 800cd4c:	e7e0      	b.n	800cd10 <floor+0x40>
 800cd4e:	2e33      	cmp	r6, #51	; 0x33
 800cd50:	dd0b      	ble.n	800cd6a <floor+0x9a>
 800cd52:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cd56:	d104      	bne.n	800cd62 <floor+0x92>
 800cd58:	4602      	mov	r2, r0
 800cd5a:	f7f3 fa11 	bl	8000180 <__adddf3>
 800cd5e:	4607      	mov	r7, r0
 800cd60:	460b      	mov	r3, r1
 800cd62:	4638      	mov	r0, r7
 800cd64:	4619      	mov	r1, r3
 800cd66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd6a:	f04f 38ff 	mov.w	r8, #4294967295
 800cd6e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800cd72:	fa28 f802 	lsr.w	r8, r8, r2
 800cd76:	ea10 0f08 	tst.w	r0, r8
 800cd7a:	d0f2      	beq.n	800cd62 <floor+0x92>
 800cd7c:	a310      	add	r3, pc, #64	; (adr r3, 800cdc0 <floor+0xf0>)
 800cd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd82:	f7f3 f9fd 	bl	8000180 <__adddf3>
 800cd86:	2200      	movs	r2, #0
 800cd88:	2300      	movs	r3, #0
 800cd8a:	f7f3 fe3f 	bl	8000a0c <__aeabi_dcmpgt>
 800cd8e:	2800      	cmp	r0, #0
 800cd90:	d0be      	beq.n	800cd10 <floor+0x40>
 800cd92:	2c00      	cmp	r4, #0
 800cd94:	da0a      	bge.n	800cdac <floor+0xdc>
 800cd96:	2e14      	cmp	r6, #20
 800cd98:	d101      	bne.n	800cd9e <floor+0xce>
 800cd9a:	3401      	adds	r4, #1
 800cd9c:	e006      	b.n	800cdac <floor+0xdc>
 800cd9e:	2301      	movs	r3, #1
 800cda0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cda4:	40b3      	lsls	r3, r6
 800cda6:	441d      	add	r5, r3
 800cda8:	42af      	cmp	r7, r5
 800cdaa:	d8f6      	bhi.n	800cd9a <floor+0xca>
 800cdac:	ea25 0508 	bic.w	r5, r5, r8
 800cdb0:	e7ae      	b.n	800cd10 <floor+0x40>
 800cdb2:	2500      	movs	r5, #0
 800cdb4:	462c      	mov	r4, r5
 800cdb6:	e7ab      	b.n	800cd10 <floor+0x40>
 800cdb8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800cdbc:	e7a8      	b.n	800cd10 <floor+0x40>
 800cdbe:	bf00      	nop
 800cdc0:	8800759c 	.word	0x8800759c
 800cdc4:	7e37e43c 	.word	0x7e37e43c
 800cdc8:	bff00000 	.word	0xbff00000
 800cdcc:	000fffff 	.word	0x000fffff

0800cdd0 <_init>:
 800cdd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdd2:	bf00      	nop
 800cdd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdd6:	bc08      	pop	{r3}
 800cdd8:	469e      	mov	lr, r3
 800cdda:	4770      	bx	lr

0800cddc <_fini>:
 800cddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdde:	bf00      	nop
 800cde0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cde2:	bc08      	pop	{r3}
 800cde4:	469e      	mov	lr, r3
 800cde6:	4770      	bx	lr
