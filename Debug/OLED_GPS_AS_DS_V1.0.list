
OLED_GPS_AS_DS_V1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca18  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ea0  0800cb28  0800cb28  0001cb28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9c8  0800d9c8  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800d9c8  0800d9c8  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d9c8  0800d9c8  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9c8  0800d9c8  0001d9c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d9cc  0800d9cc  0001d9cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800d9d0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ad8  200001f0  0800dbc0  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000cc8  0800dbc0  00020cc8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY
 13 .debug_info   000140ea  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038cd  00000000  00000000  00034346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e8  00000000  00000000  00037c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f80  00000000  00000000  00039000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af80  00000000  00000000  00039f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019cb0  00000000  00000000  00054f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000950b8  00000000  00000000  0006ebb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006b0c  00000000  00000000  00103c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0010a774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cb10 	.word	0x0800cb10

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800cb10 	.word	0x0800cb10

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__aeabi_f2iz>:
 8001038:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800103c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001040:	d30f      	bcc.n	8001062 <__aeabi_f2iz+0x2a>
 8001042:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001046:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800104a:	d90d      	bls.n	8001068 <__aeabi_f2iz+0x30>
 800104c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001050:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001054:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001058:	fa23 f002 	lsr.w	r0, r3, r2
 800105c:	bf18      	it	ne
 800105e:	4240      	negne	r0, r0
 8001060:	4770      	bx	lr
 8001062:	f04f 0000 	mov.w	r0, #0
 8001066:	4770      	bx	lr
 8001068:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800106c:	d101      	bne.n	8001072 <__aeabi_f2iz+0x3a>
 800106e:	0242      	lsls	r2, r0, #9
 8001070:	d105      	bne.n	800107e <__aeabi_f2iz+0x46>
 8001072:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001076:	bf08      	it	eq
 8001078:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800107c:	4770      	bx	lr
 800107e:	f04f 0000 	mov.w	r0, #0
 8001082:	4770      	bx	lr

08001084 <__aeabi_d2lz>:
 8001084:	b538      	push	{r3, r4, r5, lr}
 8001086:	4605      	mov	r5, r0
 8001088:	460c      	mov	r4, r1
 800108a:	2200      	movs	r2, #0
 800108c:	2300      	movs	r3, #0
 800108e:	4628      	mov	r0, r5
 8001090:	4621      	mov	r1, r4
 8001092:	f7ff fc9d 	bl	80009d0 <__aeabi_dcmplt>
 8001096:	b928      	cbnz	r0, 80010a4 <__aeabi_d2lz+0x20>
 8001098:	4628      	mov	r0, r5
 800109a:	4621      	mov	r1, r4
 800109c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010a0:	f000 b80a 	b.w	80010b8 <__aeabi_d2ulz>
 80010a4:	4628      	mov	r0, r5
 80010a6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80010aa:	f000 f805 	bl	80010b8 <__aeabi_d2ulz>
 80010ae:	4240      	negs	r0, r0
 80010b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010b4:	bd38      	pop	{r3, r4, r5, pc}
 80010b6:	bf00      	nop

080010b8 <__aeabi_d2ulz>:
 80010b8:	b5d0      	push	{r4, r6, r7, lr}
 80010ba:	2200      	movs	r2, #0
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <__aeabi_d2ulz+0x34>)
 80010be:	4606      	mov	r6, r0
 80010c0:	460f      	mov	r7, r1
 80010c2:	f7ff fa13 	bl	80004ec <__aeabi_dmul>
 80010c6:	f7ff fce9 	bl	8000a9c <__aeabi_d2uiz>
 80010ca:	4604      	mov	r4, r0
 80010cc:	f7ff f994 	bl	80003f8 <__aeabi_ui2d>
 80010d0:	2200      	movs	r2, #0
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <__aeabi_d2ulz+0x38>)
 80010d4:	f7ff fa0a 	bl	80004ec <__aeabi_dmul>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4630      	mov	r0, r6
 80010de:	4639      	mov	r1, r7
 80010e0:	f7ff f84c 	bl	800017c <__aeabi_dsub>
 80010e4:	f7ff fcda 	bl	8000a9c <__aeabi_d2uiz>
 80010e8:	4621      	mov	r1, r4
 80010ea:	bdd0      	pop	{r4, r6, r7, pc}
 80010ec:	3df00000 	.word	0x3df00000
 80010f0:	41f00000 	.word	0x41f00000

080010f4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001104:	4b18      	ldr	r3, [pc, #96]	; (8001168 <MX_ADC1_Init+0x74>)
 8001106:	4a19      	ldr	r2, [pc, #100]	; (800116c <MX_ADC1_Init+0x78>)
 8001108:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800110a:	4b17      	ldr	r3, [pc, #92]	; (8001168 <MX_ADC1_Init+0x74>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001110:	4b15      	ldr	r3, [pc, #84]	; (8001168 <MX_ADC1_Init+0x74>)
 8001112:	2201      	movs	r2, #1
 8001114:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_ADC1_Init+0x74>)
 8001118:	2200      	movs	r2, #0
 800111a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <MX_ADC1_Init+0x74>)
 800111e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001122:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001124:	4b10      	ldr	r3, [pc, #64]	; (8001168 <MX_ADC1_Init+0x74>)
 8001126:	2200      	movs	r2, #0
 8001128:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_ADC1_Init+0x74>)
 800112c:	2201      	movs	r2, #1
 800112e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001130:	480d      	ldr	r0, [pc, #52]	; (8001168 <MX_ADC1_Init+0x74>)
 8001132:	f002 fc4b 	bl	80039cc <HAL_ADC_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800113c:	f001 fc42 	bl	80029c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001140:	2309      	movs	r3, #9
 8001142:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001144:	2301      	movs	r3, #1
 8001146:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	4619      	mov	r1, r3
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_ADC1_Init+0x74>)
 8001152:	f002 fed3 	bl	8003efc <HAL_ADC_ConfigChannel>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800115c:	f001 fc32 	bl	80029c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	2000020c 	.word	0x2000020c
 800116c:	40012400 	.word	0x40012400

08001170 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a14      	ldr	r2, [pc, #80]	; (80011dc <HAL_ADC_MspInit+0x6c>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d121      	bne.n	80011d4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001190:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <HAL_ADC_MspInit+0x70>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <HAL_ADC_MspInit+0x70>)
 8001196:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <HAL_ADC_MspInit+0x70>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a8:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <HAL_ADC_MspInit+0x70>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a0c      	ldr	r2, [pc, #48]	; (80011e0 <HAL_ADC_MspInit+0x70>)
 80011ae:	f043 0308 	orr.w	r3, r3, #8
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <HAL_ADC_MspInit+0x70>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0308 	and.w	r3, r3, #8
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011c0:	2302      	movs	r3, #2
 80011c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c4:	2303      	movs	r3, #3
 80011c6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	4619      	mov	r1, r3
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <HAL_ADC_MspInit+0x74>)
 80011d0:	f003 f9e8 	bl	80045a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011d4:	bf00      	nop
 80011d6:	3720      	adds	r7, #32
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40012400 	.word	0x40012400
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40010c00 	.word	0x40010c00

080011e8 <DS18B20_StartAll>:

//
//	Start conversion on all sensors
//
void DS18B20_StartAll()
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	OneWire_Reset(&OneWire); // Reset the bus
 80011ec:	4806      	ldr	r0, [pc, #24]	; (8001208 <DS18B20_StartAll+0x20>)
 80011ee:	f001 fc56 	bl	8002a9e <OneWire_Reset>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_SKIPROM); // Skip ROM command
 80011f2:	21cc      	movs	r1, #204	; 0xcc
 80011f4:	4804      	ldr	r0, [pc, #16]	; (8001208 <DS18B20_StartAll+0x20>)
 80011f6:	f001 fccf 	bl	8002b98 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, DS18B20_CMD_CONVERTTEMP); // Start conversion on all sensors
 80011fa:	2144      	movs	r1, #68	; 0x44
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <DS18B20_StartAll+0x20>)
 80011fe:	f001 fccb 	bl	8002b98 <OneWire_WriteByte>
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000027c 	.word	0x2000027c

0800120c <DS18B20_Read>:

//
//	Read one sensor
//
uint8_t DS18B20_Read(uint8_t number, float *destination)
{
 800120c:	b590      	push	{r4, r7, lr}
 800120e:	b087      	sub	sp, #28
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	71fb      	strb	r3, [r7, #7]
	if( number >= TempSensorCount) // If read sensor is not availible
 8001218:	4b52      	ldr	r3, [pc, #328]	; (8001364 <DS18B20_Read+0x158>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	79fa      	ldrb	r2, [r7, #7]
 800121e:	429a      	cmp	r2, r3
 8001220:	d301      	bcc.n	8001226 <DS18B20_Read+0x1a>
		return 0;
 8001222:	2300      	movs	r3, #0
 8001224:	e09a      	b.n	800135c <DS18B20_Read+0x150>

	int16_t temperature;
	int8_t resolution;
	float result;
	uint8_t i = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	74fb      	strb	r3, [r7, #19]
	uint8_t crc;

#endif


	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address)) // Check if sensor is DS18B20 family
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	011b      	lsls	r3, r3, #4
 800122e:	4a4e      	ldr	r2, [pc, #312]	; (8001368 <DS18B20_Read+0x15c>)
 8001230:	4413      	add	r3, r2
 8001232:	4618      	mov	r0, r3
 8001234:	f000 f944 	bl	80014c0 <DS18B20_Is>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <DS18B20_Read+0x36>
		return 0;
 800123e:	2300      	movs	r3, #0
 8001240:	e08c      	b.n	800135c <DS18B20_Read+0x150>

	if (!OneWire_ReadBit(&OneWire)) // Check if the bus is released
 8001242:	484a      	ldr	r0, [pc, #296]	; (800136c <DS18B20_Read+0x160>)
 8001244:	f001 fc7e 	bl	8002b44 <OneWire_ReadBit>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <DS18B20_Read+0x46>
		return 0; // Busy bus - conversion is not finished
 800124e:	2300      	movs	r3, #0
 8001250:	e084      	b.n	800135c <DS18B20_Read+0x150>

	OneWire_Reset(&OneWire); // Reset the bus
 8001252:	4846      	ldr	r0, [pc, #280]	; (800136c <DS18B20_Read+0x160>)
 8001254:	f001 fc23 	bl	8002a9e <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	011b      	lsls	r3, r3, #4
 800125c:	4a42      	ldr	r2, [pc, #264]	; (8001368 <DS18B20_Read+0x15c>)
 800125e:	4413      	add	r3, r2
 8001260:	4619      	mov	r1, r3
 8001262:	4842      	ldr	r0, [pc, #264]	; (800136c <DS18B20_Read+0x160>)
 8001264:	f001 fdcc 	bl	8002e00 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8001268:	21be      	movs	r1, #190	; 0xbe
 800126a:	4840      	ldr	r0, [pc, #256]	; (800136c <DS18B20_Read+0x160>)
 800126c:	f001 fc94 	bl	8002b98 <OneWire_WriteByte>

	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 8001270:	2300      	movs	r3, #0
 8001272:	74fb      	strb	r3, [r7, #19]
 8001274:	e00d      	b.n	8001292 <DS18B20_Read+0x86>
		data[i] = OneWire_ReadByte(&OneWire);
 8001276:	7cfc      	ldrb	r4, [r7, #19]
 8001278:	483c      	ldr	r0, [pc, #240]	; (800136c <DS18B20_Read+0x160>)
 800127a:	f001 fcab 	bl	8002bd4 <OneWire_ReadByte>
 800127e:	4603      	mov	r3, r0
 8001280:	461a      	mov	r2, r3
 8001282:	f104 0318 	add.w	r3, r4, #24
 8001286:	443b      	add	r3, r7
 8001288:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 800128c:	7cfb      	ldrb	r3, [r7, #19]
 800128e:	3301      	adds	r3, #1
 8001290:	74fb      	strb	r3, [r7, #19]
 8001292:	7cfb      	ldrb	r3, [r7, #19]
 8001294:	2b04      	cmp	r3, #4
 8001296:	d9ee      	bls.n	8001276 <DS18B20_Read+0x6a>
	crc = OneWire_CRC8(data, 8); // CRC calculation

	if (crc != data[8])
		return 0; // CRC invalid
#endif
	temperature = data[0] | (data[1] << 8); // Temperature is 16-bit length
 8001298:	7a3b      	ldrb	r3, [r7, #8]
 800129a:	b21a      	sxth	r2, r3
 800129c:	7a7b      	ldrb	r3, [r7, #9]
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	4313      	orrs	r3, r2
 80012a4:	823b      	strh	r3, [r7, #16]

	OneWire_Reset(&OneWire); // Reset the bus
 80012a6:	4831      	ldr	r0, [pc, #196]	; (800136c <DS18B20_Read+0x160>)
 80012a8:	f001 fbf9 	bl	8002a9e <OneWire_Reset>

	resolution = ((data[4] & 0x60) >> 5) + 9; // Sensor's resolution from scratchpad's byte 4
 80012ac:	7b3b      	ldrb	r3, [r7, #12]
 80012ae:	115b      	asrs	r3, r3, #5
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	3309      	adds	r3, #9
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	73fb      	strb	r3, [r7, #15]

	switch (resolution) // Chceck the correct value dur to resolution
 80012be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c2:	3b09      	subs	r3, #9
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	d843      	bhi.n	8001350 <DS18B20_Read+0x144>
 80012c8:	a201      	add	r2, pc, #4	; (adr r2, 80012d0 <DS18B20_Read+0xc4>)
 80012ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ce:	bf00      	nop
 80012d0:	080012e1 	.word	0x080012e1
 80012d4:	080012fd 	.word	0x080012fd
 80012d8:	08001319 	.word	0x08001319
 80012dc:	08001335 	.word	0x08001335
	{
		case DS18B20_Resolution_9bits:
			result = temperature*(float)DS18B20_STEP_9BIT;
 80012e0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fd03 	bl	8000cf0 <__aeabi_i2f>
 80012ea:	4603      	mov	r3, r0
 80012ec:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fd51 	bl	8000d98 <__aeabi_fmul>
 80012f6:	4603      	mov	r3, r0
 80012f8:	617b      	str	r3, [r7, #20]
		break;
 80012fa:	e02b      	b.n	8001354 <DS18B20_Read+0x148>
		case DS18B20_Resolution_10bits:
			result = temperature*(float)DS18B20_STEP_10BIT;
 80012fc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fcf5 	bl	8000cf0 <__aeabi_i2f>
 8001306:	4603      	mov	r3, r0
 8001308:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fd43 	bl	8000d98 <__aeabi_fmul>
 8001312:	4603      	mov	r3, r0
 8001314:	617b      	str	r3, [r7, #20]
		 break;
 8001316:	e01d      	b.n	8001354 <DS18B20_Read+0x148>
		case DS18B20_Resolution_11bits:
			result = temperature*(float)DS18B20_STEP_11BIT;
 8001318:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fce7 	bl	8000cf0 <__aeabi_i2f>
 8001322:	4603      	mov	r3, r0
 8001324:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fd35 	bl	8000d98 <__aeabi_fmul>
 800132e:	4603      	mov	r3, r0
 8001330:	617b      	str	r3, [r7, #20]
		break;
 8001332:	e00f      	b.n	8001354 <DS18B20_Read+0x148>
		case DS18B20_Resolution_12bits:
			result = temperature*(float)DS18B20_STEP_12BIT;
 8001334:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fcd9 	bl	8000cf0 <__aeabi_i2f>
 800133e:	4603      	mov	r3, r0
 8001340:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fd27 	bl	8000d98 <__aeabi_fmul>
 800134a:	4603      	mov	r3, r0
 800134c:	617b      	str	r3, [r7, #20]
		 break;
 800134e:	e001      	b.n	8001354 <DS18B20_Read+0x148>
		default:
			result = 0xFF;
 8001350:	4b07      	ldr	r3, [pc, #28]	; (8001370 <DS18B20_Read+0x164>)
 8001352:	617b      	str	r3, [r7, #20]
	}

	*destination = result;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	601a      	str	r2, [r3, #0]

	return 1; //temperature valid
 800135a:	2301      	movs	r3, #1
}
 800135c:	4618      	mov	r0, r3
 800135e:	371c      	adds	r7, #28
 8001360:	46bd      	mov	sp, r7
 8001362:	bd90      	pop	{r4, r7, pc}
 8001364:	20000290 	.word	0x20000290
 8001368:	2000023c 	.word	0x2000023c
 800136c:	2000027c 	.word	0x2000027c
 8001370:	437f0000 	.word	0x437f0000

08001374 <DS18B20_SetResolution>:

	return conf;
}

uint8_t DS18B20_SetResolution(uint8_t number, DS18B20_Resolution_t resolution)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	460a      	mov	r2, r1
 800137e:	71fb      	strb	r3, [r7, #7]
 8001380:	4613      	mov	r3, r2
 8001382:	71bb      	strb	r3, [r7, #6]
	if( number >= TempSensorCount)
 8001384:	4b4b      	ldr	r3, [pc, #300]	; (80014b4 <DS18B20_SetResolution+0x140>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	79fa      	ldrb	r2, [r7, #7]
 800138a:	429a      	cmp	r2, r3
 800138c:	d301      	bcc.n	8001392 <DS18B20_SetResolution+0x1e>
		return 0;
 800138e:	2300      	movs	r3, #0
 8001390:	e08c      	b.n	80014ac <DS18B20_SetResolution+0x138>

	uint8_t th, tl, conf;
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address))
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	4a48      	ldr	r2, [pc, #288]	; (80014b8 <DS18B20_SetResolution+0x144>)
 8001398:	4413      	add	r3, r2
 800139a:	4618      	mov	r0, r3
 800139c:	f000 f890 	bl	80014c0 <DS18B20_Is>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <DS18B20_SetResolution+0x36>
		return 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	e080      	b.n	80014ac <DS18B20_SetResolution+0x138>

	OneWire_Reset(&OneWire); // Reset the bus
 80013aa:	4844      	ldr	r0, [pc, #272]	; (80014bc <DS18B20_SetResolution+0x148>)
 80013ac:	f001 fb77 	bl	8002a9e <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	011b      	lsls	r3, r3, #4
 80013b4:	4a40      	ldr	r2, [pc, #256]	; (80014b8 <DS18B20_SetResolution+0x144>)
 80013b6:	4413      	add	r3, r2
 80013b8:	4619      	mov	r1, r3
 80013ba:	4840      	ldr	r0, [pc, #256]	; (80014bc <DS18B20_SetResolution+0x148>)
 80013bc:	f001 fd20 	bl	8002e00 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 80013c0:	21be      	movs	r1, #190	; 0xbe
 80013c2:	483e      	ldr	r0, [pc, #248]	; (80014bc <DS18B20_SetResolution+0x148>)
 80013c4:	f001 fbe8 	bl	8002b98 <OneWire_WriteByte>

	OneWire_ReadByte(&OneWire);
 80013c8:	483c      	ldr	r0, [pc, #240]	; (80014bc <DS18B20_SetResolution+0x148>)
 80013ca:	f001 fc03 	bl	8002bd4 <OneWire_ReadByte>
	OneWire_ReadByte(&OneWire);
 80013ce:	483b      	ldr	r0, [pc, #236]	; (80014bc <DS18B20_SetResolution+0x148>)
 80013d0:	f001 fc00 	bl	8002bd4 <OneWire_ReadByte>

	th = OneWire_ReadByte(&OneWire); 	// Writing to scratchpad begins from the temperature alarms bytes
 80013d4:	4839      	ldr	r0, [pc, #228]	; (80014bc <DS18B20_SetResolution+0x148>)
 80013d6:	f001 fbfd 	bl	8002bd4 <OneWire_ReadByte>
 80013da:	4603      	mov	r3, r0
 80013dc:	73bb      	strb	r3, [r7, #14]
	tl = OneWire_ReadByte(&OneWire); 	// 	so i have to store them.
 80013de:	4837      	ldr	r0, [pc, #220]	; (80014bc <DS18B20_SetResolution+0x148>)
 80013e0:	f001 fbf8 	bl	8002bd4 <OneWire_ReadByte>
 80013e4:	4603      	mov	r3, r0
 80013e6:	737b      	strb	r3, [r7, #13]
	conf = OneWire_ReadByte(&OneWire);	// Config byte
 80013e8:	4834      	ldr	r0, [pc, #208]	; (80014bc <DS18B20_SetResolution+0x148>)
 80013ea:	f001 fbf3 	bl	8002bd4 <OneWire_ReadByte>
 80013ee:	4603      	mov	r3, r0
 80013f0:	73fb      	strb	r3, [r7, #15]

	if (resolution == DS18B20_Resolution_9bits) // Bits setting
 80013f2:	79bb      	ldrb	r3, [r7, #6]
 80013f4:	2b09      	cmp	r3, #9
 80013f6:	d108      	bne.n	800140a <DS18B20_SetResolution+0x96>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013fe:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	f023 0320 	bic.w	r3, r3, #32
 8001406:	73fb      	strb	r3, [r7, #15]
 8001408:	e022      	b.n	8001450 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 800140a:	79bb      	ldrb	r3, [r7, #6]
 800140c:	2b0a      	cmp	r3, #10
 800140e:	d108      	bne.n	8001422 <DS18B20_SetResolution+0xae>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001416:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	f043 0320 	orr.w	r3, r3, #32
 800141e:	73fb      	strb	r3, [r7, #15]
 8001420:	e016      	b.n	8001450 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8001422:	79bb      	ldrb	r3, [r7, #6]
 8001424:	2b0b      	cmp	r3, #11
 8001426:	d108      	bne.n	800143a <DS18B20_SetResolution+0xc6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800142e:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	f023 0320 	bic.w	r3, r3, #32
 8001436:	73fb      	strb	r3, [r7, #15]
 8001438:	e00a      	b.n	8001450 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 800143a:	79bb      	ldrb	r3, [r7, #6]
 800143c:	2b0c      	cmp	r3, #12
 800143e:	d107      	bne.n	8001450 <DS18B20_SetResolution+0xdc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001446:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	f043 0320 	orr.w	r3, r3, #32
 800144e:	73fb      	strb	r3, [r7, #15]
	}

	OneWire_Reset(&OneWire); // Reset the bus
 8001450:	481a      	ldr	r0, [pc, #104]	; (80014bc <DS18B20_SetResolution+0x148>)
 8001452:	f001 fb24 	bl	8002a9e <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	011b      	lsls	r3, r3, #4
 800145a:	4a17      	ldr	r2, [pc, #92]	; (80014b8 <DS18B20_SetResolution+0x144>)
 800145c:	4413      	add	r3, r2
 800145e:	4619      	mov	r1, r3
 8001460:	4816      	ldr	r0, [pc, #88]	; (80014bc <DS18B20_SetResolution+0x148>)
 8001462:	f001 fccd 	bl	8002e00 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_WSCRATCHPAD); // Write scratchpad command
 8001466:	214e      	movs	r1, #78	; 0x4e
 8001468:	4814      	ldr	r0, [pc, #80]	; (80014bc <DS18B20_SetResolution+0x148>)
 800146a:	f001 fb95 	bl	8002b98 <OneWire_WriteByte>

	OneWire_WriteByte(&OneWire, th); // Write 3 bytes to scratchpad
 800146e:	7bbb      	ldrb	r3, [r7, #14]
 8001470:	4619      	mov	r1, r3
 8001472:	4812      	ldr	r0, [pc, #72]	; (80014bc <DS18B20_SetResolution+0x148>)
 8001474:	f001 fb90 	bl	8002b98 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, tl);
 8001478:	7b7b      	ldrb	r3, [r7, #13]
 800147a:	4619      	mov	r1, r3
 800147c:	480f      	ldr	r0, [pc, #60]	; (80014bc <DS18B20_SetResolution+0x148>)
 800147e:	f001 fb8b 	bl	8002b98 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, conf);
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	4619      	mov	r1, r3
 8001486:	480d      	ldr	r0, [pc, #52]	; (80014bc <DS18B20_SetResolution+0x148>)
 8001488:	f001 fb86 	bl	8002b98 <OneWire_WriteByte>

	OneWire_Reset(&OneWire); // Reset the bus
 800148c:	480b      	ldr	r0, [pc, #44]	; (80014bc <DS18B20_SetResolution+0x148>)
 800148e:	f001 fb06 	bl	8002a9e <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	011b      	lsls	r3, r3, #4
 8001496:	4a08      	ldr	r2, [pc, #32]	; (80014b8 <DS18B20_SetResolution+0x144>)
 8001498:	4413      	add	r3, r2
 800149a:	4619      	mov	r1, r3
 800149c:	4807      	ldr	r0, [pc, #28]	; (80014bc <DS18B20_SetResolution+0x148>)
 800149e:	f001 fcaf 	bl	8002e00 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_CPYSCRATCHPAD); // Copy scratchpad to EEPROM
 80014a2:	2148      	movs	r1, #72	; 0x48
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <DS18B20_SetResolution+0x148>)
 80014a6:	f001 fb77 	bl	8002b98 <OneWire_WriteByte>

	return 1;
 80014aa:	2301      	movs	r3, #1
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000290 	.word	0x20000290
 80014b8:	2000023c 	.word	0x2000023c
 80014bc:	2000027c 	.word	0x2000027c

080014c0 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t* ROM)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b28      	cmp	r3, #40	; 0x28
 80014ce:	d101      	bne.n	80014d4 <DS18B20_Is+0x14>
		return 1;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e000      	b.n	80014d6 <DS18B20_Is+0x16>
	return 0;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <DS18B20_AllDone>:

uint8_t DS18B20_AllDone(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
	return OneWire_ReadBit(&OneWire); // Bus is down - busy
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <DS18B20_AllDone+0x10>)
 80014e6:	f001 fb2d 	bl	8002b44 <OneWire_ReadBit>
 80014ea:	4603      	mov	r3, r0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	2000027c 	.word	0x2000027c

080014f4 <DS18B20_ReadAll>:

void DS18B20_ReadAll(void)
{
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
	uint8_t i;

	if (DS18B20_AllDone())
 80014fa:	f7ff fff1 	bl	80014e0 <DS18B20_AllDone>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d02e      	beq.n	8001562 <DS18B20_ReadAll+0x6e>
	{
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 8001504:	2300      	movs	r3, #0
 8001506:	71fb      	strb	r3, [r7, #7]
 8001508:	e026      	b.n	8001558 <DS18B20_ReadAll+0x64>
		{
			ds18b20[i].ValidDataFlag = 0;
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	4a17      	ldr	r2, [pc, #92]	; (800156c <DS18B20_ReadAll+0x78>)
 800150e:	011b      	lsls	r3, r3, #4
 8001510:	4413      	add	r3, r2
 8001512:	330c      	adds	r3, #12
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]

			if (DS18B20_Is((uint8_t*)&ds18b20[i].Address))
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	011b      	lsls	r3, r3, #4
 800151c:	4a13      	ldr	r2, [pc, #76]	; (800156c <DS18B20_ReadAll+0x78>)
 800151e:	4413      	add	r3, r2
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ffcd 	bl	80014c0 <DS18B20_Is>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d012      	beq.n	8001552 <DS18B20_ReadAll+0x5e>
			{
				ds18b20[i].ValidDataFlag = DS18B20_Read(i, &ds18b20[i].Temperature); // Read single sensor
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	011b      	lsls	r3, r3, #4
 8001530:	3308      	adds	r3, #8
 8001532:	4a0e      	ldr	r2, [pc, #56]	; (800156c <DS18B20_ReadAll+0x78>)
 8001534:	441a      	add	r2, r3
 8001536:	79fc      	ldrb	r4, [r7, #7]
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fe65 	bl	800120c <DS18B20_Read>
 8001542:	4603      	mov	r3, r0
 8001544:	4619      	mov	r1, r3
 8001546:	4a09      	ldr	r2, [pc, #36]	; (800156c <DS18B20_ReadAll+0x78>)
 8001548:	0123      	lsls	r3, r4, #4
 800154a:	4413      	add	r3, r2
 800154c:	330c      	adds	r3, #12
 800154e:	460a      	mov	r2, r1
 8001550:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	3301      	adds	r3, #1
 8001556:	71fb      	strb	r3, [r7, #7]
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <DS18B20_ReadAll+0x7c>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	79fa      	ldrb	r2, [r7, #7]
 800155e:	429a      	cmp	r2, r3
 8001560:	d3d3      	bcc.n	800150a <DS18B20_ReadAll+0x16>
			}
		}
	}
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	bd90      	pop	{r4, r7, pc}
 800156a:	bf00      	nop
 800156c:	2000023c 	.word	0x2000023c
 8001570:	20000290 	.word	0x20000290

08001574 <DS18B20_GetROM>:

void DS18B20_GetROM(uint8_t number, uint8_t* ROM)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	6039      	str	r1, [r7, #0]
 800157e:	71fb      	strb	r3, [r7, #7]
	if( number >= TempSensorCount)
 8001580:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <DS18B20_GetROM+0x50>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	79fa      	ldrb	r2, [r7, #7]
 8001586:	429a      	cmp	r2, r3
 8001588:	d302      	bcc.n	8001590 <DS18B20_GetROM+0x1c>
		number = TempSensorCount;
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <DS18B20_GetROM+0x50>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	71fb      	strb	r3, [r7, #7]

	uint8_t i;

	for(i = 0; i < 8; i++)
 8001590:	2300      	movs	r3, #0
 8001592:	73fb      	strb	r3, [r7, #15]
 8001594:	e00d      	b.n	80015b2 <DS18B20_GetROM+0x3e>
		ROM[i] = ds18b20[number].Address[i];
 8001596:	79f9      	ldrb	r1, [r7, #7]
 8001598:	7bfa      	ldrb	r2, [r7, #15]
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	6838      	ldr	r0, [r7, #0]
 800159e:	4403      	add	r3, r0
 80015a0:	4809      	ldr	r0, [pc, #36]	; (80015c8 <DS18B20_GetROM+0x54>)
 80015a2:	0109      	lsls	r1, r1, #4
 80015a4:	4401      	add	r1, r0
 80015a6:	440a      	add	r2, r1
 80015a8:	7812      	ldrb	r2, [r2, #0]
 80015aa:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 8; i++)
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	3301      	adds	r3, #1
 80015b0:	73fb      	strb	r3, [r7, #15]
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	2b07      	cmp	r3, #7
 80015b6:	d9ee      	bls.n	8001596 <DS18B20_GetROM+0x22>
}
 80015b8:	bf00      	nop
 80015ba:	bf00      	nop
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr
 80015c4:	20000290 	.word	0x20000290
 80015c8:	2000023c 	.word	0x2000023c

080015cc <DS18B20_Quantity>:
	for(i = 0; i < 8; i++)
		ds18b20[number].Address[i] = ROM[i]; // Write ROM into sensor's structure
}

uint8_t DS18B20_Quantity(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
	return TempSensorCount;
 80015d0:	4b02      	ldr	r3, [pc, #8]	; (80015dc <DS18B20_Quantity+0x10>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	20000290 	.word	0x20000290

080015e0 <DS18B20_GetTemperature>:

uint8_t DS18B20_GetTemperature(uint8_t number, float* destination)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	6039      	str	r1, [r7, #0]
 80015ea:	71fb      	strb	r3, [r7, #7]
	if(!ds18b20[number].ValidDataFlag)
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	4a0b      	ldr	r2, [pc, #44]	; (800161c <DS18B20_GetTemperature+0x3c>)
 80015f0:	011b      	lsls	r3, r3, #4
 80015f2:	4413      	add	r3, r2
 80015f4:	330c      	adds	r3, #12
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <DS18B20_GetTemperature+0x20>
		return 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	e008      	b.n	8001612 <DS18B20_GetTemperature+0x32>

	*destination = ds18b20[number].Temperature;
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	4a06      	ldr	r2, [pc, #24]	; (800161c <DS18B20_GetTemperature+0x3c>)
 8001604:	011b      	lsls	r3, r3, #4
 8001606:	4413      	add	r3, r2
 8001608:	3308      	adds	r3, #8
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	601a      	str	r2, [r3, #0]
	return 1;
 8001610:	2301      	movs	r3, #1

}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	2000023c 	.word	0x2000023c

08001620 <DS18B20_Init>:

void DS18B20_Init(DS18B20_Resolution_t resolution)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
	uint8_t next = 0, i = 0, j;
 800162a:	2300      	movs	r3, #0
 800162c:	73fb      	strb	r3, [r7, #15]
 800162e:	2300      	movs	r3, #0
 8001630:	73bb      	strb	r3, [r7, #14]
	OneWire_Init(&OneWire, DS18B20_Pin_GPIO_Port, DS18B20_Pin_Pin); // Init OneWire bus
 8001632:	2202      	movs	r2, #2
 8001634:	491f      	ldr	r1, [pc, #124]	; (80016b4 <DS18B20_Init+0x94>)
 8001636:	4820      	ldr	r0, [pc, #128]	; (80016b8 <DS18B20_Init+0x98>)
 8001638:	f001 fc1e 	bl	8002e78 <OneWire_Init>

	next = OneWire_First(&OneWire); // Search first OneWire device
 800163c:	481e      	ldr	r0, [pc, #120]	; (80016b8 <DS18B20_Init+0x98>)
 800163e:	f001 fbc2 	bl	8002dc6 <OneWire_First>
 8001642:	4603      	mov	r3, r0
 8001644:	73fb      	strb	r3, [r7, #15]
	while(next)
 8001646:	e018      	b.n	800167a <DS18B20_Init+0x5a>
	{
		TempSensorCount++;
 8001648:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <DS18B20_Init+0x9c>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	3301      	adds	r3, #1
 800164e:	b2da      	uxtb	r2, r3
 8001650:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <DS18B20_Init+0x9c>)
 8001652:	701a      	strb	r2, [r3, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 8001654:	7bbb      	ldrb	r3, [r7, #14]
 8001656:	1c5a      	adds	r2, r3, #1
 8001658:	73ba      	strb	r2, [r7, #14]
 800165a:	011b      	lsls	r3, r3, #4
 800165c:	4a18      	ldr	r2, [pc, #96]	; (80016c0 <DS18B20_Init+0xa0>)
 800165e:	4413      	add	r3, r2
 8001660:	4619      	mov	r1, r3
 8001662:	4815      	ldr	r0, [pc, #84]	; (80016b8 <DS18B20_Init+0x98>)
 8001664:	f001 fbeb 	bl	8002e3e <OneWire_GetFullROM>
		next = OneWire_Next(&OneWire);
 8001668:	4813      	ldr	r0, [pc, #76]	; (80016b8 <DS18B20_Init+0x98>)
 800166a:	f001 fbbc 	bl	8002de6 <OneWire_Next>
 800166e:	4603      	mov	r3, r0
 8001670:	73fb      	strb	r3, [r7, #15]
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
 8001672:	4b12      	ldr	r3, [pc, #72]	; (80016bc <DS18B20_Init+0x9c>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b03      	cmp	r3, #3
 8001678:	d803      	bhi.n	8001682 <DS18B20_Init+0x62>
	while(next)
 800167a:	7bfb      	ldrb	r3, [r7, #15]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1e3      	bne.n	8001648 <DS18B20_Init+0x28>
 8001680:	e000      	b.n	8001684 <DS18B20_Init+0x64>
			break;
 8001682:	bf00      	nop
	}

	for(j = 0; j < i; j++)
 8001684:	2300      	movs	r3, #0
 8001686:	737b      	strb	r3, [r7, #13]
 8001688:	e00a      	b.n	80016a0 <DS18B20_Init+0x80>
	{
		DS18B20_SetResolution(j, resolution); // Set the initial resolution to sensor
 800168a:	79fa      	ldrb	r2, [r7, #7]
 800168c:	7b7b      	ldrb	r3, [r7, #13]
 800168e:	4611      	mov	r1, r2
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fe6f 	bl	8001374 <DS18B20_SetResolution>

		DS18B20_StartAll(); // Start conversion on all sensors
 8001696:	f7ff fda7 	bl	80011e8 <DS18B20_StartAll>
	for(j = 0; j < i; j++)
 800169a:	7b7b      	ldrb	r3, [r7, #13]
 800169c:	3301      	adds	r3, #1
 800169e:	737b      	strb	r3, [r7, #13]
 80016a0:	7b7a      	ldrb	r2, [r7, #13]
 80016a2:	7bbb      	ldrb	r3, [r7, #14]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d3f0      	bcc.n	800168a <DS18B20_Init+0x6a>
	}
}
 80016a8:	bf00      	nop
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40010800 	.word	0x40010800
 80016b8:	2000027c 	.word	0x2000027c
 80016bc:	20000290 	.word	0x20000290
 80016c0:	2000023c 	.word	0x2000023c

080016c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ca:	f107 0310 	add.w	r3, r7, #16
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d8:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <MX_GPIO_Init+0xcc>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	4a2c      	ldr	r2, [pc, #176]	; (8001790 <MX_GPIO_Init+0xcc>)
 80016de:	f043 0310 	orr.w	r3, r3, #16
 80016e2:	6193      	str	r3, [r2, #24]
 80016e4:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <MX_GPIO_Init+0xcc>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f003 0310 	and.w	r3, r3, #16
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016f0:	4b27      	ldr	r3, [pc, #156]	; (8001790 <MX_GPIO_Init+0xcc>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	4a26      	ldr	r2, [pc, #152]	; (8001790 <MX_GPIO_Init+0xcc>)
 80016f6:	f043 0320 	orr.w	r3, r3, #32
 80016fa:	6193      	str	r3, [r2, #24]
 80016fc:	4b24      	ldr	r3, [pc, #144]	; (8001790 <MX_GPIO_Init+0xcc>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 0320 	and.w	r3, r3, #32
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001708:	4b21      	ldr	r3, [pc, #132]	; (8001790 <MX_GPIO_Init+0xcc>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	4a20      	ldr	r2, [pc, #128]	; (8001790 <MX_GPIO_Init+0xcc>)
 800170e:	f043 0304 	orr.w	r3, r3, #4
 8001712:	6193      	str	r3, [r2, #24]
 8001714:	4b1e      	ldr	r3, [pc, #120]	; (8001790 <MX_GPIO_Init+0xcc>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <MX_GPIO_Init+0xcc>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	4a1a      	ldr	r2, [pc, #104]	; (8001790 <MX_GPIO_Init+0xcc>)
 8001726:	f043 0308 	orr.w	r3, r3, #8
 800172a:	6193      	str	r3, [r2, #24]
 800172c:	4b18      	ldr	r3, [pc, #96]	; (8001790 <MX_GPIO_Init+0xcc>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	f003 0308 	and.w	r3, r3, #8
 8001734:	603b      	str	r3, [r7, #0]
 8001736:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Pin_GPIO_Port, LED_Pin_Pin, GPIO_PIN_RESET);
 8001738:	2200      	movs	r2, #0
 800173a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800173e:	4815      	ldr	r0, [pc, #84]	; (8001794 <MX_GPIO_Init+0xd0>)
 8001740:	f003 f8cb 	bl	80048da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TEST_Pin_Pin|DS18B20_Pin_Pin, GPIO_PIN_RESET);
 8001744:	2200      	movs	r2, #0
 8001746:	2103      	movs	r1, #3
 8001748:	4813      	ldr	r0, [pc, #76]	; (8001798 <MX_GPIO_Init+0xd4>)
 800174a:	f003 f8c6 	bl	80048da <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin_Pin;
 800174e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001754:	2301      	movs	r3, #1
 8001756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	2302      	movs	r3, #2
 800175e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_Pin_GPIO_Port, &GPIO_InitStruct);
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	4619      	mov	r1, r3
 8001766:	480b      	ldr	r0, [pc, #44]	; (8001794 <MX_GPIO_Init+0xd0>)
 8001768:	f002 ff1c 	bl	80045a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TEST_Pin_Pin|DS18B20_Pin_Pin;
 800176c:	2303      	movs	r3, #3
 800176e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001770:	2301      	movs	r3, #1
 8001772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2302      	movs	r3, #2
 800177a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177c:	f107 0310 	add.w	r3, r7, #16
 8001780:	4619      	mov	r1, r3
 8001782:	4805      	ldr	r0, [pc, #20]	; (8001798 <MX_GPIO_Init+0xd4>)
 8001784:	f002 ff0e 	bl	80045a4 <HAL_GPIO_Init>

}
 8001788:	bf00      	nop
 800178a:	3720      	adds	r7, #32
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40021000 	.word	0x40021000
 8001794:	40011000 	.word	0x40011000
 8001798:	40010800 	.word	0x40010800

0800179c <strtoke>:
/*
 * Behaves like strtok() except that it returns empty tokens also.
 * Found on https://stackoverflow.com/questions/42315585/split-string-into-tokens-in-c-when-there-are-2-delimiters-in-a-row
 */
char* strtoke(char *str, const char *delim)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  static char *start = NULL; /* stores string str for consecutive calls */
  char *token = NULL; /* found token */
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
  /* assign new start in case */
  if (str) start = str;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d002      	beq.n	80017b6 <strtoke+0x1a>
 80017b0:	4a12      	ldr	r2, [pc, #72]	; (80017fc <strtoke+0x60>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6013      	str	r3, [r2, #0]
  /* check whether text to parse left */
  if (!start) return NULL;
 80017b6:	4b11      	ldr	r3, [pc, #68]	; (80017fc <strtoke+0x60>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <strtoke+0x26>
 80017be:	2300      	movs	r3, #0
 80017c0:	e017      	b.n	80017f2 <strtoke+0x56>
  /* remember current start as found token */
  token = start;
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <strtoke+0x60>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	60fb      	str	r3, [r7, #12]
  /* find next occurrence of delim */
  start = strpbrk(start, delim);
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <strtoke+0x60>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6839      	ldr	r1, [r7, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f007 f887 	bl	80088e2 <strpbrk>
 80017d4:	4603      	mov	r3, r0
 80017d6:	4a09      	ldr	r2, [pc, #36]	; (80017fc <strtoke+0x60>)
 80017d8:	6013      	str	r3, [r2, #0]
  /* replace delim with terminator and move start to follower */
  if (start) *start++ = '\0';
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <strtoke+0x60>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d006      	beq.n	80017f0 <strtoke+0x54>
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <strtoke+0x60>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	4904      	ldr	r1, [pc, #16]	; (80017fc <strtoke+0x60>)
 80017ea:	600a      	str	r2, [r1, #0]
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
  /* done */
  return token;
 80017f0:	68fb      	ldr	r3, [r7, #12]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000294 	.word	0x20000294

08001800 <NEO6_ReceiveUartChar>:

void NEO6_ReceiveUartChar(NEO6_State *GpsStateHandler)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	uint8_t TempHead;

	TempHead = (GpsStateHandler->UartBufferHead + 1) % GPS_UART_BUFFER_SIZE;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800180e:	3301      	adds	r3, #1
 8001810:	425a      	negs	r2, r3
 8001812:	b2db      	uxtb	r3, r3
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	bf58      	it	pl
 8001818:	4253      	negpl	r3, r2
 800181a:	73fb      	strb	r3, [r7, #15]

	if( TempHead == GpsStateHandler->UartBufferTail) // No room for new data
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8001822:	7bfa      	ldrb	r2, [r7, #15]
 8001824:	429a      	cmp	r2, r3
 8001826:	d02f      	beq.n	8001888 <NEO6_ReceiveUartChar+0x88>
		// Error handle?
		//
	}
	else
	{
		if(UartReceivedChar == 13)
 8001828:	4b1d      	ldr	r3, [pc, #116]	; (80018a0 <NEO6_ReceiveUartChar+0xa0>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b0d      	cmp	r3, #13
 8001830:	d114      	bne.n	800185c <NEO6_ReceiveUartChar+0x5c>
		{
			GpsStateHandler->UartBufferLines++;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8001838:	3301      	adds	r3, #1
 800183a:	b2da      	uxtb	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			GpsStateHandler->UartBufferHead = TempHead;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	7bfa      	ldrb	r2, [r7, #15]
 8001846:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	4a14      	ldr	r2, [pc, #80]	; (80018a0 <NEO6_ReceiveUartChar+0xa0>)
 800184e:	7812      	ldrb	r2, [r2, #0]
 8001850:	b2d1      	uxtb	r1, r2
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	460a      	mov	r2, r1
 8001858:	711a      	strb	r2, [r3, #4]
 800185a:	e015      	b.n	8001888 <NEO6_ReceiveUartChar+0x88>
		}
		else if((UartReceivedChar == 0) || (UartReceivedChar == 10))
 800185c:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <NEO6_ReceiveUartChar+0xa0>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d010      	beq.n	8001888 <NEO6_ReceiveUartChar+0x88>
 8001866:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <NEO6_ReceiveUartChar+0xa0>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b0a      	cmp	r3, #10
 800186e:	d00b      	beq.n	8001888 <NEO6_ReceiveUartChar+0x88>
		{
			// Ignore byte 0 and 10 (LF char)
		}
		else
		{
			GpsStateHandler->UartBufferHead = TempHead;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	7bfa      	ldrb	r2, [r7, #15]
 8001874:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	4a09      	ldr	r2, [pc, #36]	; (80018a0 <NEO6_ReceiveUartChar+0xa0>)
 800187c:	7812      	ldrb	r2, [r2, #0]
 800187e:	b2d1      	uxtb	r1, r2
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	4413      	add	r3, r2
 8001884:	460a      	mov	r2, r1
 8001886:	711a      	strb	r2, [r3, #4]
		}

	}

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2201      	movs	r2, #1
 800188e:	4904      	ldr	r1, [pc, #16]	; (80018a0 <NEO6_ReceiveUartChar+0xa0>)
 8001890:	4618      	mov	r0, r3
 8001892:	f004 fea1 	bl	80065d8 <HAL_UART_Receive_IT>
}
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000291 	.word	0x20000291

080018a4 <NEO6_GetCharFromBuffer>:

int NEO6_GetCharFromBuffer(NEO6_State *GpsStateHandler)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
	if(GpsStateHandler->UartBufferHead == GpsStateHandler->UartBufferTail)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d102      	bne.n	80018c2 <NEO6_GetCharFromBuffer+0x1e>
	{
		return -1; // error - no char to return
 80018bc:	f04f 33ff 	mov.w	r3, #4294967295
 80018c0:	e013      	b.n	80018ea <NEO6_GetCharFromBuffer+0x46>
	}
	GpsStateHandler->UartBufferTail = (GpsStateHandler->UartBufferTail + 1) % GPS_UART_BUFFER_SIZE;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 80018c8:	3301      	adds	r3, #1
 80018ca:	425a      	negs	r2, r3
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	bf58      	it	pl
 80018d2:	4253      	negpl	r3, r2
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

	return GpsStateHandler->UartBuffer[GpsStateHandler->UartBufferTail];
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 80018e2:	461a      	mov	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4413      	add	r3, r2
 80018e8:	791b      	ldrb	r3, [r3, #4]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <NEO6_GetLineFromBuffer>:

int NEO6_GetLineFromBuffer(NEO6_State *GpsStateHandler)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	char TempChar;
	char* LinePointer = (char*)GpsStateHandler->WorkingBuffer;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f203 1307 	addw	r3, r3, #263	; 0x107
 8001902:	60fb      	str	r3, [r7, #12]
	if(GpsStateHandler->UartBufferLines)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800190a:	2b00      	cmp	r3, #0
 800190c:	d01e      	beq.n	800194c <NEO6_GetLineFromBuffer+0x58>
	{
		while((TempChar = NEO6_GetCharFromBuffer(GpsStateHandler)))
 800190e:	e008      	b.n	8001922 <NEO6_GetLineFromBuffer+0x2e>
		{
			if(TempChar == 13)
 8001910:	7afb      	ldrb	r3, [r7, #11]
 8001912:	2b0d      	cmp	r3, #13
 8001914:	d00e      	beq.n	8001934 <NEO6_GetLineFromBuffer+0x40>
			{
				break;
			}
			*LinePointer = TempChar;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	7afa      	ldrb	r2, [r7, #11]
 800191a:	701a      	strb	r2, [r3, #0]
			LinePointer++;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	3301      	adds	r3, #1
 8001920:	60fb      	str	r3, [r7, #12]
		while((TempChar = NEO6_GetCharFromBuffer(GpsStateHandler)))
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff ffbe 	bl	80018a4 <NEO6_GetCharFromBuffer>
 8001928:	4603      	mov	r3, r0
 800192a:	72fb      	strb	r3, [r7, #11]
 800192c:	7afb      	ldrb	r3, [r7, #11]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1ee      	bne.n	8001910 <NEO6_GetLineFromBuffer+0x1c>
 8001932:	e000      	b.n	8001936 <NEO6_GetLineFromBuffer+0x42>
				break;
 8001934:	bf00      	nop
		}
		*LinePointer = 0; // end of cstring
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	701a      	strb	r2, [r3, #0]
		GpsStateHandler->UartBufferLines--; // decrement line counter
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8001942:	3b01      	subs	r3, #1
 8001944:	b2da      	uxtb	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
	}
	return 0;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <NEO6_ParseGPRMC>:

//
// Recommended minimum specific GPS/Transit data
//
void NEO6_ParseGPRMC(NEO6_State *GpsStateHandler)
{
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b08b      	sub	sp, #44	; 0x2c
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]

	char *ParsePoiner;
	uint32_t Temp;

	// Time of FIX
	ParsePoiner = strtoke(NULL, ",");
 8001960:	4996      	ldr	r1, [pc, #600]	; (8001bbc <NEO6_ParseGPRMC+0x264>)
 8001962:	2000      	movs	r0, #0
 8001964:	f7ff ff1a 	bl	800179c <strtoke>
 8001968:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d033      	beq.n	80019da <NEO6_ParseGPRMC+0x82>
	{
		Temp = atoi(ParsePoiner);
 8001972:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001974:	f005 fb6b 	bl	800704e <atoi>
 8001978:	4603      	mov	r3, r0
 800197a:	623b      	str	r3, [r7, #32]
		GpsStateHandler->Second = Temp % 100;
 800197c:	6a3a      	ldr	r2, [r7, #32]
 800197e:	4b90      	ldr	r3, [pc, #576]	; (8001bc0 <NEO6_ParseGPRMC+0x268>)
 8001980:	fba3 1302 	umull	r1, r3, r3, r2
 8001984:	095b      	lsrs	r3, r3, #5
 8001986:	2164      	movs	r1, #100	; 0x64
 8001988:	fb01 f303 	mul.w	r3, r1, r3
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	b2da      	uxtb	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
		GpsStateHandler->Minute = (Temp / 100) % 100;
 8001996:	6a3b      	ldr	r3, [r7, #32]
 8001998:	4a89      	ldr	r2, [pc, #548]	; (8001bc0 <NEO6_ParseGPRMC+0x268>)
 800199a:	fba2 2303 	umull	r2, r3, r2, r3
 800199e:	095a      	lsrs	r2, r3, #5
 80019a0:	4b87      	ldr	r3, [pc, #540]	; (8001bc0 <NEO6_ParseGPRMC+0x268>)
 80019a2:	fba3 1302 	umull	r1, r3, r3, r2
 80019a6:	095b      	lsrs	r3, r3, #5
 80019a8:	2164      	movs	r1, #100	; 0x64
 80019aa:	fb01 f303 	mul.w	r3, r1, r3
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
		GpsStateHandler->Hour = (Temp / 10000) % 100;
 80019b8:	6a3b      	ldr	r3, [r7, #32]
 80019ba:	4a82      	ldr	r2, [pc, #520]	; (8001bc4 <NEO6_ParseGPRMC+0x26c>)
 80019bc:	fba2 2303 	umull	r2, r3, r2, r3
 80019c0:	0b5a      	lsrs	r2, r3, #13
 80019c2:	4b7f      	ldr	r3, [pc, #508]	; (8001bc0 <NEO6_ParseGPRMC+0x268>)
 80019c4:	fba3 1302 	umull	r1, r3, r3, r2
 80019c8:	095b      	lsrs	r3, r3, #5
 80019ca:	2164      	movs	r1, #100	; 0x64
 80019cc:	fb01 f303 	mul.w	r3, r1, r3
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
	}
	// Navigation receiver warning A = OK, V = warning
	ParsePoiner = strtoke(NULL, ",");
 80019da:	4978      	ldr	r1, [pc, #480]	; (8001bbc <NEO6_ParseGPRMC+0x264>)
 80019dc:	2000      	movs	r0, #0
 80019de:	f7ff fedd 	bl	800179c <strtoke>
 80019e2:	6278      	str	r0, [r7, #36]	; 0x24
	// Latitude
	ParsePoiner = strtoke(NULL, ",");
 80019e4:	4975      	ldr	r1, [pc, #468]	; (8001bbc <NEO6_ParseGPRMC+0x264>)
 80019e6:	2000      	movs	r0, #0
 80019e8:	f7ff fed8 	bl	800179c <strtoke>
 80019ec:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d038      	beq.n	8001a68 <NEO6_ParseGPRMC+0x110>
	{
		float RawLatitude = atof(ParsePoiner);
 80019f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80019f8:	f005 fb26 	bl	8007048 <atof>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	f7ff f86a 	bl	8000adc <__aeabi_d2f>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	61fb      	str	r3, [r7, #28]
		int DegLat = (int)(RawLatitude / 100);
 8001a0c:	496e      	ldr	r1, [pc, #440]	; (8001bc8 <NEO6_ParseGPRMC+0x270>)
 8001a0e:	69f8      	ldr	r0, [r7, #28]
 8001a10:	f7ff fa76 	bl	8000f00 <__aeabi_fdiv>
 8001a14:	4603      	mov	r3, r0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fb0e 	bl	8001038 <__aeabi_f2iz>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	61bb      	str	r3, [r7, #24]
		float MinLat = RawLatitude - (DegLat * 100);
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	2264      	movs	r2, #100	; 0x64
 8001a24:	fb02 f303 	mul.w	r3, r2, r3
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff f961 	bl	8000cf0 <__aeabi_i2f>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4619      	mov	r1, r3
 8001a32:	69f8      	ldr	r0, [r7, #28]
 8001a34:	f7ff f8a6 	bl	8000b84 <__aeabi_fsub>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	617b      	str	r3, [r7, #20]
		GpsStateHandler->Latitude = DegLat + MinLat / 60;
 8001a3c:	69b8      	ldr	r0, [r7, #24]
 8001a3e:	f7ff f957 	bl	8000cf0 <__aeabi_i2f>
 8001a42:	4604      	mov	r4, r0
 8001a44:	4961      	ldr	r1, [pc, #388]	; (8001bcc <NEO6_ParseGPRMC+0x274>)
 8001a46:	6978      	ldr	r0, [r7, #20]
 8001a48:	f7ff fa5a 	bl	8000f00 <__aeabi_fdiv>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4620      	mov	r0, r4
 8001a52:	f7ff f899 	bl	8000b88 <__addsf3>
 8001a56:	4603      	mov	r3, r0
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe fcef 	bl	800043c <__aeabi_f2d>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	e9c1 2364 	strd	r2, r3, [r1, #400]	; 0x190
	}
	// Latitude Direction
	ParsePoiner = strtoke(NULL, ",");
 8001a68:	4954      	ldr	r1, [pc, #336]	; (8001bbc <NEO6_ParseGPRMC+0x264>)
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	f7ff fe96 	bl	800179c <strtoke>
 8001a70:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d004      	beq.n	8001a84 <NEO6_ParseGPRMC+0x12c>
	{
		GpsStateHandler->LatitudeDirection = *ParsePoiner;
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	781a      	ldrb	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	}
	// Longnitude
	ParsePoiner = strtoke(NULL, ",");
 8001a84:	494d      	ldr	r1, [pc, #308]	; (8001bbc <NEO6_ParseGPRMC+0x264>)
 8001a86:	2000      	movs	r0, #0
 8001a88:	f7ff fe88 	bl	800179c <strtoke>
 8001a8c:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d038      	beq.n	8001b08 <NEO6_ParseGPRMC+0x1b0>
	{
		float RawLongitude = atof(ParsePoiner);
 8001a96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a98:	f005 fad6 	bl	8007048 <atof>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f7ff f81a 	bl	8000adc <__aeabi_d2f>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	613b      	str	r3, [r7, #16]
		int DegLon = (int)(RawLongitude / 100);
 8001aac:	4946      	ldr	r1, [pc, #280]	; (8001bc8 <NEO6_ParseGPRMC+0x270>)
 8001aae:	6938      	ldr	r0, [r7, #16]
 8001ab0:	f7ff fa26 	bl	8000f00 <__aeabi_fdiv>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fabe 	bl	8001038 <__aeabi_f2iz>
 8001abc:	4603      	mov	r3, r0
 8001abe:	60fb      	str	r3, [r7, #12]
		float MinLon = RawLongitude - (DegLon * 100);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2264      	movs	r2, #100	; 0x64
 8001ac4:	fb02 f303 	mul.w	r3, r2, r3
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff f911 	bl	8000cf0 <__aeabi_i2f>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	6938      	ldr	r0, [r7, #16]
 8001ad4:	f7ff f856 	bl	8000b84 <__aeabi_fsub>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	60bb      	str	r3, [r7, #8]
		GpsStateHandler->Longitude = DegLon + MinLon / 60;
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f7ff f907 	bl	8000cf0 <__aeabi_i2f>
 8001ae2:	4604      	mov	r4, r0
 8001ae4:	4939      	ldr	r1, [pc, #228]	; (8001bcc <NEO6_ParseGPRMC+0x274>)
 8001ae6:	68b8      	ldr	r0, [r7, #8]
 8001ae8:	f7ff fa0a 	bl	8000f00 <__aeabi_fdiv>
 8001aec:	4603      	mov	r3, r0
 8001aee:	4619      	mov	r1, r3
 8001af0:	4620      	mov	r0, r4
 8001af2:	f7ff f849 	bl	8000b88 <__addsf3>
 8001af6:	4603      	mov	r3, r0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fc9f 	bl	800043c <__aeabi_f2d>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0
	}
	// Longnitude Direction
	ParsePoiner = strtoke(NULL, ",");
 8001b08:	492c      	ldr	r1, [pc, #176]	; (8001bbc <NEO6_ParseGPRMC+0x264>)
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	f7ff fe46 	bl	800179c <strtoke>
 8001b10:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d004      	beq.n	8001b24 <NEO6_ParseGPRMC+0x1cc>
	{
		GpsStateHandler->LongitudeDirection = *ParsePoiner;
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	781a      	ldrb	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	}
	// Speed over ground, Knots
	ParsePoiner = strtoke(NULL, ",");
 8001b24:	4925      	ldr	r1, [pc, #148]	; (8001bbc <NEO6_ParseGPRMC+0x264>)
 8001b26:	2000      	movs	r0, #0
 8001b28:	f7ff fe38 	bl	800179c <strtoke>
 8001b2c:	6278      	str	r0, [r7, #36]	; 0x24
	// Course Made Good, True
	ParsePoiner = strtoke(NULL, ",");
 8001b2e:	4923      	ldr	r1, [pc, #140]	; (8001bbc <NEO6_ParseGPRMC+0x264>)
 8001b30:	2000      	movs	r0, #0
 8001b32:	f7ff fe33 	bl	800179c <strtoke>
 8001b36:	6278      	str	r0, [r7, #36]	; 0x24
	// Date of fix
	ParsePoiner = strtoke(NULL, ",");
 8001b38:	4920      	ldr	r1, [pc, #128]	; (8001bbc <NEO6_ParseGPRMC+0x264>)
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f7ff fe2e 	bl	800179c <strtoke>
 8001b40:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d033      	beq.n	8001bb2 <NEO6_ParseGPRMC+0x25a>
	{
		Temp = atoi(ParsePoiner);
 8001b4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b4c:	f005 fa7f 	bl	800704e <atoi>
 8001b50:	4603      	mov	r3, r0
 8001b52:	623b      	str	r3, [r7, #32]
		GpsStateHandler->Year = Temp % 100;
 8001b54:	6a3a      	ldr	r2, [r7, #32]
 8001b56:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <NEO6_ParseGPRMC+0x268>)
 8001b58:	fba3 1302 	umull	r1, r3, r3, r2
 8001b5c:	095b      	lsrs	r3, r3, #5
 8001b5e:	2164      	movs	r1, #100	; 0x64
 8001b60:	fb01 f303 	mul.w	r3, r1, r3
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c
		GpsStateHandler->Month = (Temp / 100) % 100;
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	4a13      	ldr	r2, [pc, #76]	; (8001bc0 <NEO6_ParseGPRMC+0x268>)
 8001b72:	fba2 2303 	umull	r2, r3, r2, r3
 8001b76:	095a      	lsrs	r2, r3, #5
 8001b78:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <NEO6_ParseGPRMC+0x268>)
 8001b7a:	fba3 1302 	umull	r1, r3, r3, r2
 8001b7e:	095b      	lsrs	r3, r3, #5
 8001b80:	2164      	movs	r1, #100	; 0x64
 8001b82:	fb01 f303 	mul.w	r3, r1, r3
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
		GpsStateHandler->Day = (Temp / 10000) % 100;
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	4a0c      	ldr	r2, [pc, #48]	; (8001bc4 <NEO6_ParseGPRMC+0x26c>)
 8001b94:	fba2 2303 	umull	r2, r3, r2, r3
 8001b98:	0b5a      	lsrs	r2, r3, #13
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <NEO6_ParseGPRMC+0x268>)
 8001b9c:	fba3 1302 	umull	r1, r3, r3, r2
 8001ba0:	095b      	lsrs	r3, r3, #5
 8001ba2:	2164      	movs	r1, #100	; 0x64
 8001ba4:	fb01 f303 	mul.w	r3, r1, r3
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
	}
}
 8001bb2:	bf00      	nop
 8001bb4:	372c      	adds	r7, #44	; 0x2c
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd90      	pop	{r4, r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	0800cb28 	.word	0x0800cb28
 8001bc0:	51eb851f 	.word	0x51eb851f
 8001bc4:	d1b71759 	.word	0xd1b71759
 8001bc8:	42c80000 	.word	0x42c80000
 8001bcc:	42700000 	.word	0x42700000

08001bd0 <NEO6_ParseGPVTG>:

//
//	Track Made Good and Ground Speed.
//
void NEO6_ParseGPVTG(NEO6_State *GpsStateHandler)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	// eg2. $GPVTG,054.7,T,034.4,M,005.5,N,010.2,K

	char *ParsePoiner;

	// True track made good
	ParsePoiner = strtoke(NULL, ",");
 8001bd8:	491f      	ldr	r1, [pc, #124]	; (8001c58 <NEO6_ParseGPVTG+0x88>)
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f7ff fdde 	bl	800179c <strtoke>
 8001be0:	60f8      	str	r0, [r7, #12]
	ParsePoiner = strtoke(NULL, ",");
 8001be2:	491d      	ldr	r1, [pc, #116]	; (8001c58 <NEO6_ParseGPVTG+0x88>)
 8001be4:	2000      	movs	r0, #0
 8001be6:	f7ff fdd9 	bl	800179c <strtoke>
 8001bea:	60f8      	str	r0, [r7, #12]
	// Magnetic track made good
	ParsePoiner = strtoke(NULL, ",");
 8001bec:	491a      	ldr	r1, [pc, #104]	; (8001c58 <NEO6_ParseGPVTG+0x88>)
 8001bee:	2000      	movs	r0, #0
 8001bf0:	f7ff fdd4 	bl	800179c <strtoke>
 8001bf4:	60f8      	str	r0, [r7, #12]
	ParsePoiner = strtoke(NULL, ",");
 8001bf6:	4918      	ldr	r1, [pc, #96]	; (8001c58 <NEO6_ParseGPVTG+0x88>)
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	f7ff fdcf 	bl	800179c <strtoke>
 8001bfe:	60f8      	str	r0, [r7, #12]
	// Ground speed, knots
	ParsePoiner = strtoke(NULL, ",");
 8001c00:	4915      	ldr	r1, [pc, #84]	; (8001c58 <NEO6_ParseGPVTG+0x88>)
 8001c02:	2000      	movs	r0, #0
 8001c04:	f7ff fdca 	bl	800179c <strtoke>
 8001c08:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d007      	beq.n	8001c22 <NEO6_ParseGPVTG+0x52>
	{
		GpsStateHandler->SpeedKnots = atof(ParsePoiner);
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f005 fa18 	bl	8007048 <atof>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	6879      	ldr	r1, [r7, #4]
 8001c1e:	e9c1 2374 	strd	r2, r3, [r1, #464]	; 0x1d0
	}
	ParsePoiner = strtoke(NULL, ",");
 8001c22:	490d      	ldr	r1, [pc, #52]	; (8001c58 <NEO6_ParseGPVTG+0x88>)
 8001c24:	2000      	movs	r0, #0
 8001c26:	f7ff fdb9 	bl	800179c <strtoke>
 8001c2a:	60f8      	str	r0, [r7, #12]
	// Ground speed, Kilometers per hour
	ParsePoiner = strtoke(NULL, ",");
 8001c2c:	490a      	ldr	r1, [pc, #40]	; (8001c58 <NEO6_ParseGPVTG+0x88>)
 8001c2e:	2000      	movs	r0, #0
 8001c30:	f7ff fdb4 	bl	800179c <strtoke>
 8001c34:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d007      	beq.n	8001c4e <NEO6_ParseGPVTG+0x7e>
	{
		GpsStateHandler->SpeedKilometers = atof(ParsePoiner);
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f005 fa02 	bl	8007048 <atof>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	e9c1 2376 	strd	r2, r3, [r1, #472]	; 0x1d8
	}
}
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	0800cb28 	.word	0x0800cb28

08001c5c <NEO6_ParseGPGGA>:

//
//	Global Positioning System Fix Data
//
void NEO6_ParseGPGGA(NEO6_State *GpsStateHandler)
{
 8001c5c:	b590      	push	{r4, r7, lr}
 8001c5e:	b08b      	sub	sp, #44	; 0x2c
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]

	char *ParsePoiner;


	// UTC of Position
	ParsePoiner = strtoke(NULL, ",");
 8001c64:	4967      	ldr	r1, [pc, #412]	; (8001e04 <NEO6_ParseGPGGA+0x1a8>)
 8001c66:	2000      	movs	r0, #0
 8001c68:	f7ff fd98 	bl	800179c <strtoke>
 8001c6c:	6278      	str	r0, [r7, #36]	; 0x24
	// Latitude
	ParsePoiner = strtoke(NULL, ",");
 8001c6e:	4965      	ldr	r1, [pc, #404]	; (8001e04 <NEO6_ParseGPGGA+0x1a8>)
 8001c70:	2000      	movs	r0, #0
 8001c72:	f7ff fd93 	bl	800179c <strtoke>
 8001c76:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d038      	beq.n	8001cf2 <NEO6_ParseGPGGA+0x96>
	{
		float RawLatitude = atof(ParsePoiner);
 8001c80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c82:	f005 f9e1 	bl	8007048 <atof>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f7fe ff25 	bl	8000adc <__aeabi_d2f>
 8001c92:	4603      	mov	r3, r0
 8001c94:	623b      	str	r3, [r7, #32]
		int DegLat = (int)(RawLatitude / 100);
 8001c96:	495c      	ldr	r1, [pc, #368]	; (8001e08 <NEO6_ParseGPGGA+0x1ac>)
 8001c98:	6a38      	ldr	r0, [r7, #32]
 8001c9a:	f7ff f931 	bl	8000f00 <__aeabi_fdiv>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff f9c9 	bl	8001038 <__aeabi_f2iz>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	61fb      	str	r3, [r7, #28]
		float MinLat = RawLatitude - (DegLat * 100);
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	2264      	movs	r2, #100	; 0x64
 8001cae:	fb02 f303 	mul.w	r3, r2, r3
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff f81c 	bl	8000cf0 <__aeabi_i2f>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	4619      	mov	r1, r3
 8001cbc:	6a38      	ldr	r0, [r7, #32]
 8001cbe:	f7fe ff61 	bl	8000b84 <__aeabi_fsub>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	61bb      	str	r3, [r7, #24]
		GpsStateHandler->Latitude = DegLat + MinLat / 60;
 8001cc6:	69f8      	ldr	r0, [r7, #28]
 8001cc8:	f7ff f812 	bl	8000cf0 <__aeabi_i2f>
 8001ccc:	4604      	mov	r4, r0
 8001cce:	494f      	ldr	r1, [pc, #316]	; (8001e0c <NEO6_ParseGPGGA+0x1b0>)
 8001cd0:	69b8      	ldr	r0, [r7, #24]
 8001cd2:	f7ff f915 	bl	8000f00 <__aeabi_fdiv>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4620      	mov	r0, r4
 8001cdc:	f7fe ff54 	bl	8000b88 <__addsf3>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fbaa 	bl	800043c <__aeabi_f2d>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	e9c1 2364 	strd	r2, r3, [r1, #400]	; 0x190
	}
	// N or S
	ParsePoiner = strtoke(NULL, ",");
 8001cf2:	4944      	ldr	r1, [pc, #272]	; (8001e04 <NEO6_ParseGPGGA+0x1a8>)
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f7ff fd51 	bl	800179c <strtoke>
 8001cfa:	6278      	str	r0, [r7, #36]	; 0x24
	// Longitude
	ParsePoiner = strtoke(NULL, ",");
 8001cfc:	4941      	ldr	r1, [pc, #260]	; (8001e04 <NEO6_ParseGPGGA+0x1a8>)
 8001cfe:	2000      	movs	r0, #0
 8001d00:	f7ff fd4c 	bl	800179c <strtoke>
 8001d04:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d038      	beq.n	8001d80 <NEO6_ParseGPGGA+0x124>
	{
		float RawLongitude = atof(ParsePoiner);
 8001d0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d10:	f005 f99a 	bl	8007048 <atof>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	4610      	mov	r0, r2
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f7fe fede 	bl	8000adc <__aeabi_d2f>
 8001d20:	4603      	mov	r3, r0
 8001d22:	617b      	str	r3, [r7, #20]
		int DegLon = (int)(RawLongitude / 100);
 8001d24:	4938      	ldr	r1, [pc, #224]	; (8001e08 <NEO6_ParseGPGGA+0x1ac>)
 8001d26:	6978      	ldr	r0, [r7, #20]
 8001d28:	f7ff f8ea 	bl	8000f00 <__aeabi_fdiv>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff f982 	bl	8001038 <__aeabi_f2iz>
 8001d34:	4603      	mov	r3, r0
 8001d36:	613b      	str	r3, [r7, #16]
		float MinLon = RawLongitude - (DegLon * 100);
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	2264      	movs	r2, #100	; 0x64
 8001d3c:	fb02 f303 	mul.w	r3, r2, r3
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe ffd5 	bl	8000cf0 <__aeabi_i2f>
 8001d46:	4603      	mov	r3, r0
 8001d48:	4619      	mov	r1, r3
 8001d4a:	6978      	ldr	r0, [r7, #20]
 8001d4c:	f7fe ff1a 	bl	8000b84 <__aeabi_fsub>
 8001d50:	4603      	mov	r3, r0
 8001d52:	60fb      	str	r3, [r7, #12]
		GpsStateHandler->Longitude = DegLon + MinLon / 60;
 8001d54:	6938      	ldr	r0, [r7, #16]
 8001d56:	f7fe ffcb 	bl	8000cf0 <__aeabi_i2f>
 8001d5a:	4604      	mov	r4, r0
 8001d5c:	492b      	ldr	r1, [pc, #172]	; (8001e0c <NEO6_ParseGPGGA+0x1b0>)
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f7ff f8ce 	bl	8000f00 <__aeabi_fdiv>
 8001d64:	4603      	mov	r3, r0
 8001d66:	4619      	mov	r1, r3
 8001d68:	4620      	mov	r0, r4
 8001d6a:	f7fe ff0d 	bl	8000b88 <__addsf3>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe fb63 	bl	800043c <__aeabi_f2d>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0
	}
	// E or W
	ParsePoiner = strtoke(NULL, ",");
 8001d80:	4920      	ldr	r1, [pc, #128]	; (8001e04 <NEO6_ParseGPGGA+0x1a8>)
 8001d82:	2000      	movs	r0, #0
 8001d84:	f7ff fd0a 	bl	800179c <strtoke>
 8001d88:	6278      	str	r0, [r7, #36]	; 0x24
	// GPS quality indicator (0=invalid; 1=GPS fix; 2=Diff. GPS fix)
	ParsePoiner = strtoke(NULL, ",");
 8001d8a:	491e      	ldr	r1, [pc, #120]	; (8001e04 <NEO6_ParseGPGGA+0x1a8>)
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f7ff fd05 	bl	800179c <strtoke>
 8001d92:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d007      	beq.n	8001dac <NEO6_ParseGPGGA+0x150>
	{
		GpsStateHandler->Quality = atoi(ParsePoiner);
 8001d9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d9e:	f005 f956 	bl	800704e <atoi>
 8001da2:	4603      	mov	r3, r0
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
	}
	// Number of satellites in use [not those in view]
	ParsePoiner = strtoke(NULL, ",");
 8001dac:	4915      	ldr	r1, [pc, #84]	; (8001e04 <NEO6_ParseGPGGA+0x1a8>)
 8001dae:	2000      	movs	r0, #0
 8001db0:	f7ff fcf4 	bl	800179c <strtoke>
 8001db4:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d007      	beq.n	8001dce <NEO6_ParseGPGGA+0x172>
	{
		GpsStateHandler->SatelitesNumber = atoi(ParsePoiner);
 8001dbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001dc0:	f005 f945 	bl	800704e <atoi>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
	}
	// Horizontal dilution of position
	ParsePoiner = strtoke(NULL, ",");
 8001dce:	490d      	ldr	r1, [pc, #52]	; (8001e04 <NEO6_ParseGPGGA+0x1a8>)
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	f7ff fce3 	bl	800179c <strtoke>
 8001dd6:	6278      	str	r0, [r7, #36]	; 0x24
	// Antenna altitude above/below mean sea level (geoid)
	ParsePoiner = strtoke(NULL, ",");
 8001dd8:	490a      	ldr	r1, [pc, #40]	; (8001e04 <NEO6_ParseGPGGA+0x1a8>)
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f7ff fcde 	bl	800179c <strtoke>
 8001de0:	6278      	str	r0, [r7, #36]	; 0x24
	if(strlen(ParsePoiner) > 0)
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d007      	beq.n	8001dfa <NEO6_ParseGPGGA+0x19e>
	{
		GpsStateHandler->Altitude = atof(ParsePoiner);
 8001dea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001dec:	f005 f92c 	bl	8007048 <atof>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
	}
}
 8001dfa:	bf00      	nop
 8001dfc:	372c      	adds	r7, #44	; 0x2c
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd90      	pop	{r4, r7, pc}
 8001e02:	bf00      	nop
 8001e04:	0800cb28 	.word	0x0800cb28
 8001e08:	42c80000 	.word	0x42c80000
 8001e0c:	42700000 	.word	0x42700000

08001e10 <NEO6_ParseGPGSA>:

//
//	GPS DOP and active satellites
//
void NEO6_ParseGPGSA(NEO6_State *GpsStateHandler)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	// eg2. $GPGSA,A,3,19,28,14,18,27,22,31,39,,,,,1.7,1.0,1.3*35

	char *ParsePoiner;

	// Mode
	ParsePoiner = strtoke(NULL, ",");
 8001e18:	492d      	ldr	r1, [pc, #180]	; (8001ed0 <NEO6_ParseGPGSA+0xc0>)
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	f7ff fcbe 	bl	800179c <strtoke>
 8001e20:	60b8      	str	r0, [r7, #8]
	// 2D/3D Fix
	ParsePoiner = strtoke(NULL, ",");
 8001e22:	492b      	ldr	r1, [pc, #172]	; (8001ed0 <NEO6_ParseGPGSA+0xc0>)
 8001e24:	2000      	movs	r0, #0
 8001e26:	f7ff fcb9 	bl	800179c <strtoke>
 8001e2a:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d007      	beq.n	8001e44 <NEO6_ParseGPGSA+0x34>
	{
		GpsStateHandler->FixMode = atoi(ParsePoiner);
 8001e34:	68b8      	ldr	r0, [r7, #8]
 8001e36:	f005 f90a 	bl	800704e <atoi>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f883 21e2 	strb.w	r2, [r3, #482]	; 0x1e2
	}
	// IDs of SVs used in position fix (null for unused fields)
	for(uint8_t i=0; i < 12; i++)
 8001e44:	2300      	movs	r3, #0
 8001e46:	73fb      	strb	r3, [r7, #15]
 8001e48:	e007      	b.n	8001e5a <NEO6_ParseGPGSA+0x4a>
	{
		ParsePoiner = strtoke(NULL, ",");
 8001e4a:	4921      	ldr	r1, [pc, #132]	; (8001ed0 <NEO6_ParseGPGSA+0xc0>)
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	f7ff fca5 	bl	800179c <strtoke>
 8001e52:	60b8      	str	r0, [r7, #8]
	for(uint8_t i=0; i < 12; i++)
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
 8001e56:	3301      	adds	r3, #1
 8001e58:	73fb      	strb	r3, [r7, #15]
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	2b0b      	cmp	r3, #11
 8001e5e:	d9f4      	bls.n	8001e4a <NEO6_ParseGPGSA+0x3a>
	}
	// PDOP
	ParsePoiner = strtoke(NULL, ",");
 8001e60:	491b      	ldr	r1, [pc, #108]	; (8001ed0 <NEO6_ParseGPGSA+0xc0>)
 8001e62:	2000      	movs	r0, #0
 8001e64:	f7ff fc9a 	bl	800179c <strtoke>
 8001e68:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d007      	beq.n	8001e82 <NEO6_ParseGPGSA+0x72>
	{
		GpsStateHandler->Dop = atof(ParsePoiner);
 8001e72:	68b8      	ldr	r0, [r7, #8]
 8001e74:	f005 f8e8 	bl	8007048 <atof>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	e9c1 237a 	strd	r2, r3, [r1, #488]	; 0x1e8
	}
	// HDOP
	ParsePoiner = strtoke(NULL, ",");
 8001e82:	4913      	ldr	r1, [pc, #76]	; (8001ed0 <NEO6_ParseGPGSA+0xc0>)
 8001e84:	2000      	movs	r0, #0
 8001e86:	f7ff fc89 	bl	800179c <strtoke>
 8001e8a:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d007      	beq.n	8001ea4 <NEO6_ParseGPGSA+0x94>
	{
		GpsStateHandler->Hdop = atof(ParsePoiner);
 8001e94:	68b8      	ldr	r0, [r7, #8]
 8001e96:	f005 f8d7 	bl	8007048 <atof>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	e9c1 237c 	strd	r2, r3, [r1, #496]	; 0x1f0
	}
	// VDOP
	ParsePoiner = strtoke(NULL, ",");
 8001ea4:	490a      	ldr	r1, [pc, #40]	; (8001ed0 <NEO6_ParseGPGSA+0xc0>)
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f7ff fc78 	bl	800179c <strtoke>
 8001eac:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d007      	beq.n	8001ec6 <NEO6_ParseGPGSA+0xb6>
	{
		GpsStateHandler->Vdop = atof(ParsePoiner);
 8001eb6:	68b8      	ldr	r0, [r7, #8]
 8001eb8:	f005 f8c6 	bl	8007048 <atof>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	e9c1 237e 	strd	r2, r3, [r1, #504]	; 0x1f8
	}
}
 8001ec6:	bf00      	nop
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	0800cb28 	.word	0x0800cb28

08001ed4 <NEO6_ParseLine>:
	// Could be good for minimal system for LoRa device
}


void NEO6_ParseLine(NEO6_State *GpsStateHandler)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
	// Nice website with NMEA commuincates description
	//	http://aprs.gids.nl/nmea
	//

	// Header
	char* ParsePoiner = strtoke((char*)GpsStateHandler->WorkingBuffer, ",");
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f203 1307 	addw	r3, r3, #263	; 0x107
 8001ee2:	491a      	ldr	r1, [pc, #104]	; (8001f4c <NEO6_ParseLine+0x78>)
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff fc59 	bl	800179c <strtoke>
 8001eea:	60f8      	str	r0, [r7, #12]

	if(strcmp(ParsePoiner, "$GPRMC") == 0) NEO6_ParseGPRMC(GpsStateHandler);
 8001eec:	4918      	ldr	r1, [pc, #96]	; (8001f50 <NEO6_ParseLine+0x7c>)
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f7fe f92e 	bl	8000150 <strcmp>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d103      	bne.n	8001f02 <NEO6_ParseLine+0x2e>
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff fd2c 	bl	8001958 <NEO6_ParseGPRMC>
	else if(strcmp(ParsePoiner, "$GPVTG") == 0) NEO6_ParseGPVTG(GpsStateHandler);
	else if(strcmp(ParsePoiner, "$GPGGA") == 0) NEO6_ParseGPGGA(GpsStateHandler);
	else if(strcmp(ParsePoiner, "$GPGSA") == 0) NEO6_ParseGPGSA(GpsStateHandler);
//	else if(strcmp(ParsePoiner, "$GPGSV") == 0) NEO6_ParseGPGSV(GpsStateHandler);
//	else if(strcmp(ParsePoiner, "$GPGLL") == 0) NEO6_ParseGPGLL(GpsStateHandler);
}
 8001f00:	e01f      	b.n	8001f42 <NEO6_ParseLine+0x6e>
	else if(strcmp(ParsePoiner, "$GPVTG") == 0) NEO6_ParseGPVTG(GpsStateHandler);
 8001f02:	4914      	ldr	r1, [pc, #80]	; (8001f54 <NEO6_ParseLine+0x80>)
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f7fe f923 	bl	8000150 <strcmp>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d103      	bne.n	8001f18 <NEO6_ParseLine+0x44>
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff fe5d 	bl	8001bd0 <NEO6_ParseGPVTG>
}
 8001f16:	e014      	b.n	8001f42 <NEO6_ParseLine+0x6e>
	else if(strcmp(ParsePoiner, "$GPGGA") == 0) NEO6_ParseGPGGA(GpsStateHandler);
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <NEO6_ParseLine+0x84>)
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f7fe f918 	bl	8000150 <strcmp>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d103      	bne.n	8001f2e <NEO6_ParseLine+0x5a>
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff fe98 	bl	8001c5c <NEO6_ParseGPGGA>
}
 8001f2c:	e009      	b.n	8001f42 <NEO6_ParseLine+0x6e>
	else if(strcmp(ParsePoiner, "$GPGSA") == 0) NEO6_ParseGPGSA(GpsStateHandler);
 8001f2e:	490b      	ldr	r1, [pc, #44]	; (8001f5c <NEO6_ParseLine+0x88>)
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f7fe f90d 	bl	8000150 <strcmp>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d102      	bne.n	8001f42 <NEO6_ParseLine+0x6e>
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff ff67 	bl	8001e10 <NEO6_ParseGPGSA>
}
 8001f42:	bf00      	nop
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	0800cb28 	.word	0x0800cb28
 8001f50:	0800cb2c 	.word	0x0800cb2c
 8001f54:	0800cb34 	.word	0x0800cb34
 8001f58:	0800cb3c 	.word	0x0800cb3c
 8001f5c:	0800cb44 	.word	0x0800cb44

08001f60 <NEO6_Task>:
{
	return GpsStateHandler->Quality;
}

void NEO6_Task(NEO6_State *GpsStateHandler)
{
 8001f60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f64:	b086      	sub	sp, #24
 8001f66:	af04      	add	r7, sp, #16
 8001f68:	6078      	str	r0, [r7, #4]
    	if(GpsStateHandler->UartBufferLines)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d078      	beq.n	8002066 <NEO6_Task+0x106>
    	{
        NEO6_GetLineFromBuffer(GpsStateHandler);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff fcbd 	bl	80018f4 <NEO6_GetLineFromBuffer>
        NEO6_ParseLine(GpsStateHandler);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff ffaa 	bl	8001ed4 <NEO6_ParseLine>

        // Check if GPS is moving
        if(GpsStateHandler->SpeedKilometers > MIN_SPEED_KM && GpsStateHandler->last_latitude != 0.0 && GpsStateHandler->last_longitude != 0.0)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	e9d3 0176 	ldrd	r0, r1, [r3, #472]	; 0x1d8
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	4b39      	ldr	r3, [pc, #228]	; (8002070 <NEO6_Task+0x110>)
 8001f8c:	f7fe fd3e 	bl	8000a0c <__aeabi_dcmpgt>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d04d      	beq.n	8002032 <NEO6_Task+0xd2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	e9d3 016e 	ldrd	r0, r1, [r3, #440]	; 0x1b8
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	f04f 0300 	mov.w	r3, #0
 8001fa4:	f7fe fd0a 	bl	80009bc <__aeabi_dcmpeq>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d141      	bne.n	8002032 <NEO6_Task+0xd2>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	e9d3 0170 	ldrd	r0, r1, [r3, #448]	; 0x1c0
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	f04f 0300 	mov.w	r3, #0
 8001fbc:	f7fe fcfe 	bl	80009bc <__aeabi_dcmpeq>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d135      	bne.n	8002032 <NEO6_Task+0xd2>
        {
            // Add the distance from the last received GPS coordinate
            GpsStateHandler->total_distance += haversine_km(GpsStateHandler->last_latitude, GpsStateHandler->last_longitude, GpsStateHandler->Latitude, GpsStateHandler->Longitude);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	e9d3 456e 	ldrd	r4, r5, [r3, #440]	; 0x1b8
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	e9d3 8970 	ldrd	r8, r9, [r3, #448]	; 0x1c0
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	e9d1 0168 	ldrd	r0, r1, [r1, #416]	; 0x1a0
 8001fde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001fe2:	e9cd 2300 	strd	r2, r3, [sp]
 8001fe6:	4642      	mov	r2, r8
 8001fe8:	464b      	mov	r3, r9
 8001fea:	4620      	mov	r0, r4
 8001fec:	4629      	mov	r1, r5
 8001fee:	f000 f93f 	bl	8002270 <haversine_km>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	e9d3 4572 	ldrd	r4, r5, [r3, #456]	; 0x1c8
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	f7fe fa0c 	bl	8000418 <__aeabi_i2d>
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	4620      	mov	r0, r4
 8002006:	4629      	mov	r1, r5
 8002008:	f7fe f8ba 	bl	8000180 <__adddf3>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	e9c1 2372 	strd	r2, r3, [r1, #456]	; 0x1c8
            // Store GPS coordinates for next distance calculation
            GpsStateHandler->last_latitude = GpsStateHandler->Latitude;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	e9c1 236e 	strd	r2, r3, [r1, #440]	; 0x1b8
            GpsStateHandler->last_longitude = GpsStateHandler->Longitude;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	; 0x1a0
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
        {
 800202e:	bf00      	nop
            // If GPS is stationary, set speed to zero and don't update last received coordinates
            GpsStateHandler->SpeedKilometers = 0.0;
            GpsStateHandler->SpeedKnots = 0.0;
        }
    }
}
 8002030:	e019      	b.n	8002066 <NEO6_Task+0x106>
        } else if (GpsStateHandler->SpeedKilometers <= MIN_SPEED_KM)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	e9d3 0176 	ldrd	r0, r1, [r3, #472]	; 0x1d8
 8002038:	f04f 0200 	mov.w	r2, #0
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <NEO6_Task+0x110>)
 800203e:	f7fe fcd1 	bl	80009e4 <__aeabi_dcmple>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d100      	bne.n	800204a <NEO6_Task+0xea>
}
 8002048:	e00d      	b.n	8002066 <NEO6_Task+0x106>
            GpsStateHandler->SpeedKilometers = 0.0;
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	e9c1 2376 	strd	r2, r3, [r1, #472]	; 0x1d8
            GpsStateHandler->SpeedKnots = 0.0;
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	f04f 0200 	mov.w	r2, #0
 800205e:	f04f 0300 	mov.w	r3, #0
 8002062:	e9c1 2374 	strd	r2, r3, [r1, #464]	; 0x1d0
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002070:	3ff80000 	.word	0x3ff80000

08002074 <NEO6_Init>:
double NEO6_GetTotalDistance(NEO6_State *GpsStateHandler) {
    return GpsStateHandler->total_distance;
}

void NEO6_Init(NEO6_State *GpsStateHandler, UART_HandleTypeDef *huart)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
	GpsStateHandler->neo6_huart = huart;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	601a      	str	r2, [r3, #0]
	GpsStateHandler->UartBufferHead = 0;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	GpsStateHandler->UartBufferTail = 0;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
	GpsStateHandler->UartBufferLines = 0;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

	GpsStateHandler->Hour = 0;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
	GpsStateHandler->Minute = 0;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
	GpsStateHandler->Second = 0;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
	GpsStateHandler->Day = 0;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
	GpsStateHandler->Month = 0;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
	GpsStateHandler->Year = 0;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c

	GpsStateHandler->Latitude = 0;
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	f04f 0200 	mov.w	r2, #0
 80020d2:	f04f 0300 	mov.w	r3, #0
 80020d6:	e9c1 2364 	strd	r2, r3, [r1, #400]	; 0x190
	GpsStateHandler->LatitudeDirection = '0';
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2230      	movs	r2, #48	; 0x30
 80020de:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	GpsStateHandler->Longitude = 0;
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0
	GpsStateHandler->LongitudeDirection = '0';
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2230      	movs	r2, #48	; 0x30
 80020f4:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	GpsStateHandler->last_latitude = 0;
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	f04f 0200 	mov.w	r2, #0
 80020fe:	f04f 0300 	mov.w	r3, #0
 8002102:	e9c1 236e 	strd	r2, r3, [r1, #440]	; 0x1b8
	GpsStateHandler->last_longitude = 0;
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	f04f 0300 	mov.w	r3, #0
 8002110:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
	GpsStateHandler->total_distance = 0;
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	f04f 0300 	mov.w	r3, #0
 800211e:	e9c1 2372 	strd	r2, r3, [r1, #456]	; 0x1c8

	GpsStateHandler->SpeedKilometers = 0;
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	f04f 0300 	mov.w	r3, #0
 800212c:	e9c1 2376 	strd	r2, r3, [r1, #472]	; 0x1d8
	GpsStateHandler->SpeedKnots = 0;
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	f04f 0300 	mov.w	r3, #0
 800213a:	e9c1 2374 	strd	r2, r3, [r1, #464]	; 0x1d0

	GpsStateHandler->SatelitesNumber = 0;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
	GpsStateHandler->Quality = 0;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
	GpsStateHandler->Dop = 0;
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	f04f 0200 	mov.w	r2, #0
 8002154:	f04f 0300 	mov.w	r3, #0
 8002158:	e9c1 237a 	strd	r2, r3, [r1, #488]	; 0x1e8
	GpsStateHandler->Hdop = 0;
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	f04f 0300 	mov.w	r3, #0
 8002166:	e9c1 237c 	strd	r2, r3, [r1, #496]	; 0x1f0
	GpsStateHandler->Vdop = 0;
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	f04f 0300 	mov.w	r3, #0
 8002174:	e9c1 237e 	strd	r2, r3, [r1, #504]	; 0x1f8

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2201      	movs	r2, #1
 800217e:	4904      	ldr	r1, [pc, #16]	; (8002190 <NEO6_Init+0x11c>)
 8002180:	4618      	mov	r0, r3
 8002182:	f004 fa29 	bl	80065d8 <HAL_UART_Receive_IT>
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000291 	.word	0x20000291

08002194 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002198:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <MX_I2C1_Init+0x50>)
 800219a:	4a13      	ldr	r2, [pc, #76]	; (80021e8 <MX_I2C1_Init+0x54>)
 800219c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800219e:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <MX_I2C1_Init+0x50>)
 80021a0:	4a12      	ldr	r2, [pc, #72]	; (80021ec <MX_I2C1_Init+0x58>)
 80021a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021a4:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <MX_I2C1_Init+0x50>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021aa:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <MX_I2C1_Init+0x50>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <MX_I2C1_Init+0x50>)
 80021b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021b8:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <MX_I2C1_Init+0x50>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <MX_I2C1_Init+0x50>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021c4:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <MX_I2C1_Init+0x50>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021ca:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <MX_I2C1_Init+0x50>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021d0:	4804      	ldr	r0, [pc, #16]	; (80021e4 <MX_I2C1_Init+0x50>)
 80021d2:	f002 fbb3 	bl	800493c <HAL_I2C_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80021dc:	f000 fbf2 	bl	80029c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20000298 	.word	0x20000298
 80021e8:	40005400 	.word	0x40005400
 80021ec:	00061a80 	.word	0x00061a80

080021f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 0310 	add.w	r3, r7, #16
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a15      	ldr	r2, [pc, #84]	; (8002260 <HAL_I2C_MspInit+0x70>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d123      	bne.n	8002258 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002210:	4b14      	ldr	r3, [pc, #80]	; (8002264 <HAL_I2C_MspInit+0x74>)
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	4a13      	ldr	r2, [pc, #76]	; (8002264 <HAL_I2C_MspInit+0x74>)
 8002216:	f043 0308 	orr.w	r3, r3, #8
 800221a:	6193      	str	r3, [r2, #24]
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <HAL_I2C_MspInit+0x74>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	f003 0308 	and.w	r3, r3, #8
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002228:	23c0      	movs	r3, #192	; 0xc0
 800222a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800222c:	2312      	movs	r3, #18
 800222e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002230:	2303      	movs	r3, #3
 8002232:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002234:	f107 0310 	add.w	r3, r7, #16
 8002238:	4619      	mov	r1, r3
 800223a:	480b      	ldr	r0, [pc, #44]	; (8002268 <HAL_I2C_MspInit+0x78>)
 800223c:	f002 f9b2 	bl	80045a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002240:	4b08      	ldr	r3, [pc, #32]	; (8002264 <HAL_I2C_MspInit+0x74>)
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	4a07      	ldr	r2, [pc, #28]	; (8002264 <HAL_I2C_MspInit+0x74>)
 8002246:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800224a:	61d3      	str	r3, [r2, #28]
 800224c:	4b05      	ldr	r3, [pc, #20]	; (8002264 <HAL_I2C_MspInit+0x74>)
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002258:	bf00      	nop
 800225a:	3720      	adds	r7, #32
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40005400 	.word	0x40005400
 8002264:	40021000 	.word	0x40021000
 8002268:	40010c00 	.word	0x40010c00
 800226c:	00000000 	.word	0x00000000

08002270 <haversine_km>:
  * @retval Haversine distance between the two coordinates
  */
double haversine_km(double lat1, double lon1, double lat2, double lon2);

double haversine_km(double lat1, double lon1, double lat2, double lon2)
{
 8002270:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002274:	b08c      	sub	sp, #48	; 0x30
 8002276:	af00      	add	r7, sp, #0
 8002278:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800227c:	e9c7 2300 	strd	r2, r3, [r7]
    // Convert degrees to radians
    lat1 *= DEG_TO_RAD;
 8002280:	a371      	add	r3, pc, #452	; (adr r3, 8002448 <haversine_km+0x1d8>)
 8002282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002286:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800228a:	f7fe f92f 	bl	80004ec <__aeabi_dmul>
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	e9c7 2302 	strd	r2, r3, [r7, #8]
    lon1 *= DEG_TO_RAD;
 8002296:	a36c      	add	r3, pc, #432	; (adr r3, 8002448 <haversine_km+0x1d8>)
 8002298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022a0:	f7fe f924 	bl	80004ec <__aeabi_dmul>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	e9c7 2300 	strd	r2, r3, [r7]
    lat2 *= DEG_TO_RAD;
 80022ac:	a366      	add	r3, pc, #408	; (adr r3, 8002448 <haversine_km+0x1d8>)
 80022ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80022b6:	f7fe f919 	bl	80004ec <__aeabi_dmul>
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    lon2 *= DEG_TO_RAD;
 80022c2:	a361      	add	r3, pc, #388	; (adr r3, 8002448 <haversine_km+0x1d8>)
 80022c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80022cc:	f7fe f90e 	bl	80004ec <__aeabi_dmul>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

    // Apply haversine formula
    double d_lat = lat2 - lat1;
 80022d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022dc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80022e0:	f7fd ff4c 	bl	800017c <__aeabi_dsub>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double d_lon = lon2 - lon1;
 80022ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022f0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80022f4:	f7fd ff42 	bl	800017c <__aeabi_dsub>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double a = sin(d_lat / 2) * sin(d_lat / 2) +
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002308:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800230c:	f7fe fa18 	bl	8000740 <__aeabi_ddiv>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	4610      	mov	r0, r2
 8002316:	4619      	mov	r1, r3
 8002318:	f009 f8d2 	bl	800b4c0 <sin>
 800231c:	4604      	mov	r4, r0
 800231e:	460d      	mov	r5, r1
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002328:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800232c:	f7fe fa08 	bl	8000740 <__aeabi_ddiv>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4610      	mov	r0, r2
 8002336:	4619      	mov	r1, r3
 8002338:	f009 f8c2 	bl	800b4c0 <sin>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	4620      	mov	r0, r4
 8002342:	4629      	mov	r1, r5
 8002344:	f7fe f8d2 	bl	80004ec <__aeabi_dmul>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4690      	mov	r8, r2
 800234e:	4699      	mov	r9, r3
               cos(lat1) * cos(lat2) *
 8002350:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002354:	f009 f86e 	bl	800b434 <cos>
 8002358:	4604      	mov	r4, r0
 800235a:	460d      	mov	r5, r1
 800235c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002360:	f009 f868 	bl	800b434 <cos>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4620      	mov	r0, r4
 800236a:	4629      	mov	r1, r5
 800236c:	f7fe f8be 	bl	80004ec <__aeabi_dmul>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	4614      	mov	r4, r2
 8002376:	461d      	mov	r5, r3
               sin(d_lon / 2) * sin(d_lon / 2);
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002380:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002384:	f7fe f9dc 	bl	8000740 <__aeabi_ddiv>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4610      	mov	r0, r2
 800238e:	4619      	mov	r1, r3
 8002390:	f009 f896 	bl	800b4c0 <sin>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
               cos(lat1) * cos(lat2) *
 8002398:	4620      	mov	r0, r4
 800239a:	4629      	mov	r1, r5
 800239c:	f7fe f8a6 	bl	80004ec <__aeabi_dmul>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4614      	mov	r4, r2
 80023a6:	461d      	mov	r5, r3
               sin(d_lon / 2) * sin(d_lon / 2);
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023b0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80023b4:	f7fe f9c4 	bl	8000740 <__aeabi_ddiv>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4610      	mov	r0, r2
 80023be:	4619      	mov	r1, r3
 80023c0:	f009 f87e 	bl	800b4c0 <sin>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	4620      	mov	r0, r4
 80023ca:	4629      	mov	r1, r5
 80023cc:	f7fe f88e 	bl	80004ec <__aeabi_dmul>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
    double a = sin(d_lat / 2) * sin(d_lat / 2) +
 80023d4:	4640      	mov	r0, r8
 80023d6:	4649      	mov	r1, r9
 80023d8:	f7fd fed2 	bl	8000180 <__adddf3>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double c = 2 * atan2(sqrt(a), sqrt(1 - a));
 80023e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80023e8:	f009 f800 	bl	800b3ec <sqrt>
 80023ec:	4604      	mov	r4, r0
 80023ee:	460d      	mov	r5, r1
 80023f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023f4:	f04f 0000 	mov.w	r0, #0
 80023f8:	4917      	ldr	r1, [pc, #92]	; (8002458 <haversine_km+0x1e8>)
 80023fa:	f7fd febf 	bl	800017c <__aeabi_dsub>
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	4610      	mov	r0, r2
 8002404:	4619      	mov	r1, r3
 8002406:	f008 fff1 	bl	800b3ec <sqrt>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	4620      	mov	r0, r4
 8002410:	4629      	mov	r1, r5
 8002412:	f008 ffe9 	bl	800b3e8 <atan2>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	f7fd feb1 	bl	8000180 <__adddf3>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // Multiply by Earth's radius to obtain distance in km
    return GPS_EARTH_RADIUS_KM * c;
 8002426:	a30a      	add	r3, pc, #40	; (adr r3, 8002450 <haversine_km+0x1e0>)
 8002428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002430:	f7fe f85c 	bl	80004ec <__aeabi_dmul>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
}
 8002438:	4610      	mov	r0, r2
 800243a:	4619      	mov	r1, r3
 800243c:	3730      	adds	r7, #48	; 0x30
 800243e:	46bd      	mov	sp, r7
 8002440:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002444:	f3af 8000 	nop.w
 8002448:	22d4405f 	.word	0x22d4405f
 800244c:	3f91df47 	.word	0x3f91df47
 8002450:	00000000 	.word	0x00000000
 8002454:	40b8e300 	.word	0x40b8e300
 8002458:	3ff00000 	.word	0x3ff00000
 800245c:	00000000 	.word	0x00000000

08002460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002460:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002464:	b08c      	sub	sp, #48	; 0x30
 8002466:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002468:	f001 fa2a 	bl	80038c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800246c:	f000 fa3c 	bl	80028e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002470:	f7ff f928 	bl	80016c4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002474:	f001 f980 	bl	8003778 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8002478:	f7fe fe3c 	bl	80010f4 <MX_ADC1_Init>
  MX_I2C1_Init();
 800247c:	f7ff fe8a 	bl	8002194 <MX_I2C1_Init>
  MX_TIM1_Init();
 8002480:	f001 f90c 	bl	800369c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc1);
 8002484:	4813      	ldr	r0, [pc, #76]	; (80024d4 <main+0x74>)
 8002486:	f001 fb79 	bl	8003b7c <HAL_ADC_Start>

  SSD1306_Init();
 800248a:	f000 fd21 	bl	8002ed0 <SSD1306_Init>
  DS18B20_Init(DS18B20_Resolution_12bits);
 800248e:	200c      	movs	r0, #12
 8002490:	f7ff f8c6 	bl	8001620 <DS18B20_Init>
  HAL_GPIO_WritePin(TEST_Pin_GPIO_Port, TEST_Pin_Pin, 0);
 8002494:	2200      	movs	r2, #0
 8002496:	2101      	movs	r1, #1
 8002498:	480f      	ldr	r0, [pc, #60]	; (80024d8 <main+0x78>)
 800249a:	f002 fa1e 	bl	80048da <HAL_GPIO_WritePin>


  NEO6_Init(&GpsState, &huart1);
 800249e:	490f      	ldr	r1, [pc, #60]	; (80024dc <main+0x7c>)
 80024a0:	480f      	ldr	r0, [pc, #60]	; (80024e0 <main+0x80>)
 80024a2:	f7ff fde7 	bl	8002074 <NEO6_Init>

  uint32_t DS18B20_delay = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61fb      	str	r3, [r7, #28]
  uint32_t NEO6_delay = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61bb      	str	r3, [r7, #24]
  uint32_t ADC_delay = 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
  uint32_t OLED_delay = 0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	613b      	str	r3, [r7, #16]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 if((HAL_GetTick() - DS18B20_delay) > 1000) // Odświeżaj temperaturę co sekundę (1000 ms)
 80024b6:	f001 fa5b 	bl	8003970 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024c4:	d93e      	bls.n	8002544 <main+0xe4>
	 {
		 DS18B20_ReadAll();
 80024c6:	f7ff f815 	bl	80014f4 <DS18B20_ReadAll>
		 DS18B20_StartAll();
 80024ca:	f7fe fe8d 	bl	80011e8 <DS18B20_StartAll>

		 uint8_t ROM_tmp[8];
		 uint8_t i;

	    for(i = 0; i < DS18B20_Quantity(); i++)
 80024ce:	2300      	movs	r3, #0
 80024d0:	73fb      	strb	r3, [r7, #15]
 80024d2:	e028      	b.n	8002526 <main+0xc6>
 80024d4:	2000020c 	.word	0x2000020c
 80024d8:	40010800 	.word	0x40010800
 80024dc:	20000b30 	.word	0x20000b30
 80024e0:	20000300 	.word	0x20000300
	    {
	       if(DS18B20_GetTemperature(i, &temperature))
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	49b4      	ldr	r1, [pc, #720]	; (80027b8 <main+0x358>)
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff f879 	bl	80015e0 <DS18B20_GetTemperature>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d015      	beq.n	8002520 <main+0xc0>
		   {
		    DS18B20_GetROM(i, ROM_tmp);
 80024f4:	1d3a      	adds	r2, r7, #4
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
 80024f8:	4611      	mov	r1, r2
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff f83a 	bl	8001574 <DS18B20_GetROM>
		   	memset(temp_string, 0, sizeof(temp_string));
 8002500:	2240      	movs	r2, #64	; 0x40
 8002502:	2100      	movs	r1, #0
 8002504:	48ad      	ldr	r0, [pc, #692]	; (80027bc <main+0x35c>)
 8002506:	f006 f9d2 	bl	80088ae <memset>

		   	sprintf(temp_string, "%.1f *C", temperature);
 800250a:	4bab      	ldr	r3, [pc, #684]	; (80027b8 <main+0x358>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7fd ff94 	bl	800043c <__aeabi_f2d>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	49a9      	ldr	r1, [pc, #676]	; (80027c0 <main+0x360>)
 800251a:	48a8      	ldr	r0, [pc, #672]	; (80027bc <main+0x35c>)
 800251c:	f006 f964 	bl	80087e8 <siprintf>
	    for(i = 0; i < DS18B20_Quantity(); i++)
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	3301      	adds	r3, #1
 8002524:	73fb      	strb	r3, [r7, #15]
 8002526:	f7ff f851 	bl	80015cc <DS18B20_Quantity>
 800252a:	4603      	mov	r3, r0
 800252c:	461a      	mov	r2, r3
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	4293      	cmp	r3, r2
 8002532:	d3d7      	bcc.n	80024e4 <main+0x84>
		   }
		}
	    HAL_GPIO_TogglePin(LED_Pin_GPIO_Port, LED_Pin_Pin);
 8002534:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002538:	48a2      	ldr	r0, [pc, #648]	; (80027c4 <main+0x364>)
 800253a:	f002 f9e6 	bl	800490a <HAL_GPIO_TogglePin>
		DS18B20_delay = HAL_GetTick();
 800253e:	f001 fa17 	bl	8003970 <HAL_GetTick>
 8002542:	61f8      	str	r0, [r7, #28]
	 }


	  if((HAL_GetTick() - ADC_delay) > 250) // Odświeżaj odczyt ADC co 250 ms
 8002544:	f001 fa14 	bl	8003970 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2bfa      	cmp	r3, #250	; 0xfa
 8002550:	d95b      	bls.n	800260a <main+0x1aa>
	  {
	   HAL_ADC_PollForConversion(&hadc1,1000);
 8002552:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002556:	489c      	ldr	r0, [pc, #624]	; (80027c8 <main+0x368>)
 8002558:	f001 fbbe 	bl	8003cd8 <HAL_ADC_PollForConversion>
	   readValue = HAL_ADC_GetValue(&hadc1);
 800255c:	489a      	ldr	r0, [pc, #616]	; (80027c8 <main+0x368>)
 800255e:	f001 fcc1 	bl	8003ee4 <HAL_ADC_GetValue>
 8002562:	4603      	mov	r3, r0
 8002564:	b29a      	uxth	r2, r3
 8002566:	4b99      	ldr	r3, [pc, #612]	; (80027cc <main+0x36c>)
 8002568:	801a      	strh	r2, [r3, #0]
	   rawVoltage = (float) readValue * 3.3 / 3838;
 800256a:	4b98      	ldr	r3, [pc, #608]	; (80027cc <main+0x36c>)
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f7fe fbba 	bl	8000ce8 <__aeabi_ui2f>
 8002574:	4603      	mov	r3, r0
 8002576:	4618      	mov	r0, r3
 8002578:	f7fd ff60 	bl	800043c <__aeabi_f2d>
 800257c:	a38a      	add	r3, pc, #552	; (adr r3, 80027a8 <main+0x348>)
 800257e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002582:	f7fd ffb3 	bl	80004ec <__aeabi_dmul>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4610      	mov	r0, r2
 800258c:	4619      	mov	r1, r3
 800258e:	a388      	add	r3, pc, #544	; (adr r3, 80027b0 <main+0x350>)
 8002590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002594:	f7fe f8d4 	bl	8000740 <__aeabi_ddiv>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	4610      	mov	r0, r2
 800259e:	4619      	mov	r1, r3
 80025a0:	f7fe fa9c 	bl	8000adc <__aeabi_d2f>
 80025a4:	4603      	mov	r3, r0
 80025a6:	4a8a      	ldr	r2, [pc, #552]	; (80027d0 <main+0x370>)
 80025a8:	6013      	str	r3, [r2, #0]
	   current =(rawVoltage - 2.5)/sensitivity;
 80025aa:	4b89      	ldr	r3, [pc, #548]	; (80027d0 <main+0x370>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fd ff44 	bl	800043c <__aeabi_f2d>
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	4b86      	ldr	r3, [pc, #536]	; (80027d4 <main+0x374>)
 80025ba:	f7fd fddf 	bl	800017c <__aeabi_dsub>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	4614      	mov	r4, r2
 80025c4:	461d      	mov	r5, r3
 80025c6:	4b84      	ldr	r3, [pc, #528]	; (80027d8 <main+0x378>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fd ff36 	bl	800043c <__aeabi_f2d>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4620      	mov	r0, r4
 80025d6:	4629      	mov	r1, r5
 80025d8:	f7fe f8b2 	bl	8000740 <__aeabi_ddiv>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4610      	mov	r0, r2
 80025e2:	4619      	mov	r1, r3
 80025e4:	f7fe fa7a 	bl	8000adc <__aeabi_d2f>
 80025e8:	4603      	mov	r3, r0
 80025ea:	4a7c      	ldr	r2, [pc, #496]	; (80027dc <main+0x37c>)
 80025ec:	6013      	str	r3, [r2, #0]
	   sprintf(current_string,"%.2f A ", current);
 80025ee:	4b7b      	ldr	r3, [pc, #492]	; (80027dc <main+0x37c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fd ff22 	bl	800043c <__aeabi_f2d>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	4978      	ldr	r1, [pc, #480]	; (80027e0 <main+0x380>)
 80025fe:	4879      	ldr	r0, [pc, #484]	; (80027e4 <main+0x384>)
 8002600:	f006 f8f2 	bl	80087e8 <siprintf>
	   ADC_delay = HAL_GetTick();
 8002604:	f001 f9b4 	bl	8003970 <HAL_GetTick>
 8002608:	6178      	str	r0, [r7, #20]
	  }


	  if((HAL_GetTick() - NEO6_delay) > 100) // Odświeżaj odczyt GPS co sekundę (1000 ms)
 800260a:	f001 f9b1 	bl	8003970 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b64      	cmp	r3, #100	; 0x64
 8002616:	f240 8081 	bls.w	800271c <main+0x2bc>
	  {
	  NEO6_Task(&GpsState);
 800261a:	4873      	ldr	r0, [pc, #460]	; (80027e8 <main+0x388>)
 800261c:	f7ff fca0 	bl	8001f60 <NEO6_Task>

	  if (GpsState.SpeedKilometers >= MIN_SPEED_KM)
 8002620:	4b71      	ldr	r3, [pc, #452]	; (80027e8 <main+0x388>)
 8002622:	e9d3 0176 	ldrd	r0, r1, [r3, #472]	; 0x1d8
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	4b70      	ldr	r3, [pc, #448]	; (80027ec <main+0x38c>)
 800262c:	f7fe f9e4 	bl	80009f8 <__aeabi_dcmpge>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d04b      	beq.n	80026ce <main+0x26e>
	  {
	    if ( (last_latitude != 0.0) && (last_longitude != 0.0))
 8002636:	4b6e      	ldr	r3, [pc, #440]	; (80027f0 <main+0x390>)
 8002638:	e9d3 0100 	ldrd	r0, r1, [r3]
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	f7fe f9ba 	bl	80009bc <__aeabi_dcmpeq>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d133      	bne.n	80026b6 <main+0x256>
 800264e:	4b69      	ldr	r3, [pc, #420]	; (80027f4 <main+0x394>)
 8002650:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	f7fe f9ae 	bl	80009bc <__aeabi_dcmpeq>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d127      	bne.n	80026b6 <main+0x256>
	    {
	  	// Calculate the trip distance using the haversine function
	     current_distance = haversine_km(last_latitude, last_longitude, GpsState.Latitude, GpsState.Longitude);
 8002666:	4b62      	ldr	r3, [pc, #392]	; (80027f0 <main+0x390>)
 8002668:	e9d3 4500 	ldrd	r4, r5, [r3]
 800266c:	4b61      	ldr	r3, [pc, #388]	; (80027f4 <main+0x394>)
 800266e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002672:	4b5d      	ldr	r3, [pc, #372]	; (80027e8 <main+0x388>)
 8002674:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 8002678:	495b      	ldr	r1, [pc, #364]	; (80027e8 <main+0x388>)
 800267a:	e9d1 0168 	ldrd	r0, r1, [r1, #416]	; 0x1a0
 800267e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002682:	e9cd 2300 	strd	r2, r3, [sp]
 8002686:	4642      	mov	r2, r8
 8002688:	464b      	mov	r3, r9
 800268a:	4620      	mov	r0, r4
 800268c:	4629      	mov	r1, r5
 800268e:	f7ff fdef 	bl	8002270 <haversine_km>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4958      	ldr	r1, [pc, #352]	; (80027f8 <main+0x398>)
 8002698:	e9c1 2300 	strd	r2, r3, [r1]
	     GpsState.total_distance += current_distance;
 800269c:	4b52      	ldr	r3, [pc, #328]	; (80027e8 <main+0x388>)
 800269e:	e9d3 0172 	ldrd	r0, r1, [r3, #456]	; 0x1c8
 80026a2:	4b55      	ldr	r3, [pc, #340]	; (80027f8 <main+0x398>)
 80026a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a8:	f7fd fd6a 	bl	8000180 <__adddf3>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	494d      	ldr	r1, [pc, #308]	; (80027e8 <main+0x388>)
 80026b2:	e9c1 2372 	strd	r2, r3, [r1, #456]	; 0x1c8
	    }

	  	 last_latitude = GpsState.Latitude;
 80026b6:	4b4c      	ldr	r3, [pc, #304]	; (80027e8 <main+0x388>)
 80026b8:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 80026bc:	494c      	ldr	r1, [pc, #304]	; (80027f0 <main+0x390>)
 80026be:	e9c1 2300 	strd	r2, r3, [r1]
	  	 last_longitude = GpsState.Longitude;
 80026c2:	4b49      	ldr	r3, [pc, #292]	; (80027e8 <main+0x388>)
 80026c4:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	; 0x1a0
 80026c8:	494a      	ldr	r1, [pc, #296]	; (80027f4 <main+0x394>)
 80026ca:	e9c1 2300 	strd	r2, r3, [r1]
	  }

	     // ... the rest of your GPS processing code here ...
	  	sprintf(total_distance_string, "%.2f km", GpsState.total_distance); // write into the string the total distance with 2 decimal precision
 80026ce:	4b46      	ldr	r3, [pc, #280]	; (80027e8 <main+0x388>)
 80026d0:	e9d3 2372 	ldrd	r2, r3, [r3, #456]	; 0x1c8
 80026d4:	4949      	ldr	r1, [pc, #292]	; (80027fc <main+0x39c>)
 80026d6:	484a      	ldr	r0, [pc, #296]	; (8002800 <main+0x3a0>)
 80026d8:	f006 f886 	bl	80087e8 <siprintf>
	    sprintf(LatitudeString, "%f", GpsState.Latitude);
 80026dc:	4b42      	ldr	r3, [pc, #264]	; (80027e8 <main+0x388>)
 80026de:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 80026e2:	4948      	ldr	r1, [pc, #288]	; (8002804 <main+0x3a4>)
 80026e4:	4848      	ldr	r0, [pc, #288]	; (8002808 <main+0x3a8>)
 80026e6:	f006 f87f 	bl	80087e8 <siprintf>
	    sprintf(LongitudeString, "%f", GpsState.Longitude);
 80026ea:	4b3f      	ldr	r3, [pc, #252]	; (80027e8 <main+0x388>)
 80026ec:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	; 0x1a0
 80026f0:	4944      	ldr	r1, [pc, #272]	; (8002804 <main+0x3a4>)
 80026f2:	4846      	ldr	r0, [pc, #280]	; (800280c <main+0x3ac>)
 80026f4:	f006 f878 	bl	80087e8 <siprintf>
	    sprintf(SpeedString, "%.2f km/h", GpsState.SpeedKilometers);
 80026f8:	4b3b      	ldr	r3, [pc, #236]	; (80027e8 <main+0x388>)
 80026fa:	e9d3 2376 	ldrd	r2, r3, [r3, #472]	; 0x1d8
 80026fe:	4944      	ldr	r1, [pc, #272]	; (8002810 <main+0x3b0>)
 8002700:	4844      	ldr	r0, [pc, #272]	; (8002814 <main+0x3b4>)
 8002702:	f006 f871 	bl	80087e8 <siprintf>
	    sprintf(SatelitesNumberString, "%d", GpsState.SatelitesNumber);
 8002706:	4b38      	ldr	r3, [pc, #224]	; (80027e8 <main+0x388>)
 8002708:	f893 31e0 	ldrb.w	r3, [r3, #480]	; 0x1e0
 800270c:	461a      	mov	r2, r3
 800270e:	4942      	ldr	r1, [pc, #264]	; (8002818 <main+0x3b8>)
 8002710:	4842      	ldr	r0, [pc, #264]	; (800281c <main+0x3bc>)
 8002712:	f006 f869 	bl	80087e8 <siprintf>
	    NEO6_delay = HAL_GetTick();
 8002716:	f001 f92b 	bl	8003970 <HAL_GetTick>
 800271a:	61b8      	str	r0, [r7, #24]

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if((HAL_GetTick() - OLED_delay) > 250) // Aktualizuj wyświetlacz co 250 ms
 800271c:	f001 f928 	bl	8003970 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2bfa      	cmp	r3, #250	; 0xfa
 8002728:	f67f aec5 	bls.w	80024b6 <main+0x56>
	   {
		 SSD1306_GotoXY (0, 0);
 800272c:	2100      	movs	r1, #0
 800272e:	2000      	movs	r0, #0
 8002730:	f000 fd36 	bl	80031a0 <SSD1306_GotoXY>
		 SSD1306_Puts ("TMP:", &Font_7x10, 1);
 8002734:	2201      	movs	r2, #1
 8002736:	493a      	ldr	r1, [pc, #232]	; (8002820 <main+0x3c0>)
 8002738:	483a      	ldr	r0, [pc, #232]	; (8002824 <main+0x3c4>)
 800273a:	f000 fdc7 	bl	80032cc <SSD1306_Puts>
	     SSD1306_GotoXY (28,0);  // przejdź do pozycji 0,0
 800273e:	2100      	movs	r1, #0
 8002740:	201c      	movs	r0, #28
 8002742:	f000 fd2d 	bl	80031a0 <SSD1306_GotoXY>
	     SSD1306_Puts (temp_string, &Font_7x10, 1); // wypisz temperaturę
 8002746:	2201      	movs	r2, #1
 8002748:	4935      	ldr	r1, [pc, #212]	; (8002820 <main+0x3c0>)
 800274a:	481c      	ldr	r0, [pc, #112]	; (80027bc <main+0x35c>)
 800274c:	f000 fdbe 	bl	80032cc <SSD1306_Puts>

	     SSD1306_GotoXY (00, 10);
 8002750:	210a      	movs	r1, #10
 8002752:	2000      	movs	r0, #0
 8002754:	f000 fd24 	bl	80031a0 <SSD1306_GotoXY>
	   	 SSD1306_Puts ("Prad:", &Font_7x10, 1);
 8002758:	2201      	movs	r2, #1
 800275a:	4931      	ldr	r1, [pc, #196]	; (8002820 <main+0x3c0>)
 800275c:	4832      	ldr	r0, [pc, #200]	; (8002828 <main+0x3c8>)
 800275e:	f000 fdb5 	bl	80032cc <SSD1306_Puts>
	     SSD1306_GotoXY (40,10); // przejdź do następnej linii
 8002762:	210a      	movs	r1, #10
 8002764:	2028      	movs	r0, #40	; 0x28
 8002766:	f000 fd1b 	bl	80031a0 <SSD1306_GotoXY>
	     SSD1306_Puts (current_string, &Font_7x10, 1); // wypisz prąd
 800276a:	2201      	movs	r2, #1
 800276c:	492c      	ldr	r1, [pc, #176]	; (8002820 <main+0x3c0>)
 800276e:	481d      	ldr	r0, [pc, #116]	; (80027e4 <main+0x384>)
 8002770:	f000 fdac 	bl	80032cc <SSD1306_Puts>


	     SSD1306_GotoXY (0, 20);
 8002774:	2114      	movs	r1, #20
 8002776:	2000      	movs	r0, #0
 8002778:	f000 fd12 	bl	80031a0 <SSD1306_GotoXY>
	     SSD1306_Puts ("P_GPS:", &Font_7x10, 1);
 800277c:	2201      	movs	r2, #1
 800277e:	4928      	ldr	r1, [pc, #160]	; (8002820 <main+0x3c0>)
 8002780:	482a      	ldr	r0, [pc, #168]	; (800282c <main+0x3cc>)
 8002782:	f000 fda3 	bl	80032cc <SSD1306_Puts>
	     SSD1306_GotoXY (40,20);// przejdź do następnej linii
 8002786:	2114      	movs	r1, #20
 8002788:	2028      	movs	r0, #40	; 0x28
 800278a:	f000 fd09 	bl	80031a0 <SSD1306_GotoXY>
	     SSD1306_Puts (SpeedString, &Font_7x10, 1); // wypisz prędkość
 800278e:	2201      	movs	r2, #1
 8002790:	4923      	ldr	r1, [pc, #140]	; (8002820 <main+0x3c0>)
 8002792:	4820      	ldr	r0, [pc, #128]	; (8002814 <main+0x3b4>)
 8002794:	f000 fd9a 	bl	80032cc <SSD1306_Puts>

	     SSD1306_GotoXY (0, 30);
 8002798:	211e      	movs	r1, #30
 800279a:	2000      	movs	r0, #0
 800279c:	f000 fd00 	bl	80031a0 <SSD1306_GotoXY>
	     SSD1306_Puts ("DYS:", &Font_7x10, 1);
 80027a0:	2201      	movs	r2, #1
 80027a2:	e045      	b.n	8002830 <main+0x3d0>
 80027a4:	f3af 8000 	nop.w
 80027a8:	66666666 	.word	0x66666666
 80027ac:	400a6666 	.word	0x400a6666
 80027b0:	00000000 	.word	0x00000000
 80027b4:	40adfc00 	.word	0x40adfc00
 80027b8:	20000698 	.word	0x20000698
 80027bc:	2000069c 	.word	0x2000069c
 80027c0:	0800cb4c 	.word	0x0800cb4c
 80027c4:	40011000 	.word	0x40011000
 80027c8:	2000020c 	.word	0x2000020c
 80027cc:	20000600 	.word	0x20000600
 80027d0:	20000604 	.word	0x20000604
 80027d4:	40040000 	.word	0x40040000
 80027d8:	20000008 	.word	0x20000008
 80027dc:	20000608 	.word	0x20000608
 80027e0:	0800cb54 	.word	0x0800cb54
 80027e4:	2000060c 	.word	0x2000060c
 80027e8:	20000300 	.word	0x20000300
 80027ec:	3ff80000 	.word	0x3ff80000
 80027f0:	200002f0 	.word	0x200002f0
 80027f4:	200002f8 	.word	0x200002f8
 80027f8:	20000690 	.word	0x20000690
 80027fc:	0800cb5c 	.word	0x0800cb5c
 8002800:	2000064c 	.word	0x2000064c
 8002804:	0800cb64 	.word	0x0800cb64
 8002808:	20000500 	.word	0x20000500
 800280c:	20000540 	.word	0x20000540
 8002810:	0800cb68 	.word	0x0800cb68
 8002814:	20000580 	.word	0x20000580
 8002818:	0800cb74 	.word	0x0800cb74
 800281c:	200005c0 	.word	0x200005c0
 8002820:	20000000 	.word	0x20000000
 8002824:	0800cb78 	.word	0x0800cb78
 8002828:	0800cb80 	.word	0x0800cb80
 800282c:	0800cb88 	.word	0x0800cb88
 8002830:	4924      	ldr	r1, [pc, #144]	; (80028c4 <main+0x464>)
 8002832:	4825      	ldr	r0, [pc, #148]	; (80028c8 <main+0x468>)
 8002834:	f000 fd4a 	bl	80032cc <SSD1306_Puts>
	     SSD1306_GotoXY (35,30);// przejdź do następnej linii
 8002838:	211e      	movs	r1, #30
 800283a:	2023      	movs	r0, #35	; 0x23
 800283c:	f000 fcb0 	bl	80031a0 <SSD1306_GotoXY>
	     SSD1306_Puts (total_distance_string, &Font_7x10, 1); // wypisz liczbę satelitów
 8002840:	2201      	movs	r2, #1
 8002842:	4920      	ldr	r1, [pc, #128]	; (80028c4 <main+0x464>)
 8002844:	4821      	ldr	r0, [pc, #132]	; (80028cc <main+0x46c>)
 8002846:	f000 fd41 	bl	80032cc <SSD1306_Puts>

	     SSD1306_GotoXY (0, 40);
 800284a:	2128      	movs	r1, #40	; 0x28
 800284c:	2000      	movs	r0, #0
 800284e:	f000 fca7 	bl	80031a0 <SSD1306_GotoXY>
	   	 SSD1306_Puts ("Lat:", &Font_7x10, 1);
 8002852:	2201      	movs	r2, #1
 8002854:	491b      	ldr	r1, [pc, #108]	; (80028c4 <main+0x464>)
 8002856:	481e      	ldr	r0, [pc, #120]	; (80028d0 <main+0x470>)
 8002858:	f000 fd38 	bl	80032cc <SSD1306_Puts>
	     SSD1306_GotoXY (35,40);  // przejdź do pozycji 0,0
 800285c:	2128      	movs	r1, #40	; 0x28
 800285e:	2023      	movs	r0, #35	; 0x23
 8002860:	f000 fc9e 	bl	80031a0 <SSD1306_GotoXY>
	     SSD1306_Puts (LatitudeString, &Font_7x10, 1); // wypisz szerokość geograficzną
 8002864:	2201      	movs	r2, #1
 8002866:	4917      	ldr	r1, [pc, #92]	; (80028c4 <main+0x464>)
 8002868:	481a      	ldr	r0, [pc, #104]	; (80028d4 <main+0x474>)
 800286a:	f000 fd2f 	bl	80032cc <SSD1306_Puts>

	     SSD1306_GotoXY (0, 50);
 800286e:	2132      	movs	r1, #50	; 0x32
 8002870:	2000      	movs	r0, #0
 8002872:	f000 fc95 	bl	80031a0 <SSD1306_GotoXY>
	   	 SSD1306_Puts ("Lon:", &Font_7x10, 1);
 8002876:	2201      	movs	r2, #1
 8002878:	4912      	ldr	r1, [pc, #72]	; (80028c4 <main+0x464>)
 800287a:	4817      	ldr	r0, [pc, #92]	; (80028d8 <main+0x478>)
 800287c:	f000 fd26 	bl	80032cc <SSD1306_Puts>
	     SSD1306_GotoXY (35,50); // przejdź do następnej linii
 8002880:	2132      	movs	r1, #50	; 0x32
 8002882:	2023      	movs	r0, #35	; 0x23
 8002884:	f000 fc8c 	bl	80031a0 <SSD1306_GotoXY>
	     SSD1306_Puts (LongitudeString, &Font_7x10, 1); // wypisz długość geograficzną
 8002888:	2201      	movs	r2, #1
 800288a:	490e      	ldr	r1, [pc, #56]	; (80028c4 <main+0x464>)
 800288c:	4813      	ldr	r0, [pc, #76]	; (80028dc <main+0x47c>)
 800288e:	f000 fd1d 	bl	80032cc <SSD1306_Puts>


	     SSD1306_GotoXY (85, 0);
 8002892:	2100      	movs	r1, #0
 8002894:	2055      	movs	r0, #85	; 0x55
 8002896:	f000 fc83 	bl	80031a0 <SSD1306_GotoXY>
	     SSD1306_Puts ("S:", &Font_7x10, 1);
 800289a:	2201      	movs	r2, #1
 800289c:	4909      	ldr	r1, [pc, #36]	; (80028c4 <main+0x464>)
 800289e:	4810      	ldr	r0, [pc, #64]	; (80028e0 <main+0x480>)
 80028a0:	f000 fd14 	bl	80032cc <SSD1306_Puts>
	     SSD1306_GotoXY (100,0);// przejdź do następnej linii
 80028a4:	2100      	movs	r1, #0
 80028a6:	2064      	movs	r0, #100	; 0x64
 80028a8:	f000 fc7a 	bl	80031a0 <SSD1306_GotoXY>
	     SSD1306_Puts (SatelitesNumberString, &Font_7x10, 1); // wypisz liczbę satelitów
 80028ac:	2201      	movs	r2, #1
 80028ae:	4905      	ldr	r1, [pc, #20]	; (80028c4 <main+0x464>)
 80028b0:	480c      	ldr	r0, [pc, #48]	; (80028e4 <main+0x484>)
 80028b2:	f000 fd0b 	bl	80032cc <SSD1306_Puts>

	     SSD1306_UpdateScreen(); // aktualizuj ekran
 80028b6:	f000 fbcf 	bl	8003058 <SSD1306_UpdateScreen>
	     OLED_delay = HAL_GetTick();
 80028ba:	f001 f859 	bl	8003970 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]
	 if((HAL_GetTick() - DS18B20_delay) > 1000) // Odświeżaj temperaturę co sekundę (1000 ms)
 80028c0:	e5f9      	b.n	80024b6 <main+0x56>
 80028c2:	bf00      	nop
 80028c4:	20000000 	.word	0x20000000
 80028c8:	0800cb90 	.word	0x0800cb90
 80028cc:	2000064c 	.word	0x2000064c
 80028d0:	0800cb98 	.word	0x0800cb98
 80028d4:	20000500 	.word	0x20000500
 80028d8:	0800cba0 	.word	0x0800cba0
 80028dc:	20000540 	.word	0x20000540
 80028e0:	0800cba8 	.word	0x0800cba8
 80028e4:	200005c0 	.word	0x200005c0

080028e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b094      	sub	sp, #80	; 0x50
 80028ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028f2:	2228      	movs	r2, #40	; 0x28
 80028f4:	2100      	movs	r1, #0
 80028f6:	4618      	mov	r0, r3
 80028f8:	f005 ffd9 	bl	80088ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028fc:	f107 0314 	add.w	r3, r7, #20
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800290c:	1d3b      	adds	r3, r7, #4
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	605a      	str	r2, [r3, #4]
 8002914:	609a      	str	r2, [r3, #8]
 8002916:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002918:	2301      	movs	r3, #1
 800291a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800291c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002920:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002922:	2300      	movs	r3, #0
 8002924:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002926:	2301      	movs	r3, #1
 8002928:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800292a:	2302      	movs	r3, #2
 800292c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800292e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002932:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002934:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002938:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800293a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800293e:	4618      	mov	r0, r3
 8002940:	f002 fdc6 	bl	80054d0 <HAL_RCC_OscConfig>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800294a:	f000 f83b 	bl	80029c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800294e:	230f      	movs	r3, #15
 8002950:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002952:	2302      	movs	r3, #2
 8002954:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002956:	2300      	movs	r3, #0
 8002958:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800295a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800295e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002960:	2300      	movs	r3, #0
 8002962:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002964:	f107 0314 	add.w	r3, r7, #20
 8002968:	2102      	movs	r1, #2
 800296a:	4618      	mov	r0, r3
 800296c:	f003 f832 	bl	80059d4 <HAL_RCC_ClockConfig>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002976:	f000 f825 	bl	80029c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800297a:	2302      	movs	r3, #2
 800297c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800297e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002982:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002984:	1d3b      	adds	r3, r7, #4
 8002986:	4618      	mov	r0, r3
 8002988:	f003 f9b2 	bl	8005cf0 <HAL_RCCEx_PeriphCLKConfig>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002992:	f000 f817 	bl	80029c4 <Error_Handler>
  }
}
 8002996:	bf00      	nop
 8002998:	3750      	adds	r7, #80	; 0x50
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  if(huart == GpsState.neo6_huart)
 80029a8:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <HAL_UART_RxCpltCallback+0x20>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d102      	bne.n	80029b8 <HAL_UART_RxCpltCallback+0x18>
  {
    NEO6_ReceiveUartChar(&GpsState);
 80029b2:	4803      	ldr	r0, [pc, #12]	; (80029c0 <HAL_UART_RxCpltCallback+0x20>)
 80029b4:	f7fe ff24 	bl	8001800 <NEO6_ReceiveUartChar>
  }
}
 80029b8:	bf00      	nop
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	20000300 	.word	0x20000300

080029c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029c8:	b672      	cpsid	i
}
 80029ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029cc:	e7fe      	b.n	80029cc <Error_Handler+0x8>
	...

080029d0 <OneWire_Delay>:

//
//	Delay function for constant 1-Wire timings
//
void OneWire_Delay(uint16_t us)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 80029da:	4b08      	ldr	r3, [pc, #32]	; (80029fc <OneWire_Delay+0x2c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2200      	movs	r2, #0
 80029e0:	625a      	str	r2, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= us);
 80029e2:	bf00      	nop
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <OneWire_Delay+0x2c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029ea:	88fb      	ldrh	r3, [r7, #6]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d9f9      	bls.n	80029e4 <OneWire_Delay+0x14>
}
 80029f0:	bf00      	nop
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr
 80029fc:	20000ae8 	.word	0x20000ae8

08002a00 <OneWire_BusInputDirection>:

//
//	Bus direction control
//
void OneWire_BusInputDirection(OneWire_t *onewire)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8002a10:	2301      	movs	r3, #1
 8002a12:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	889b      	ldrh	r3, [r3, #4]
 8002a18:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f107 0208 	add.w	r2, r7, #8
 8002a22:	4611      	mov	r1, r2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f001 fdbd 	bl	80045a4 <HAL_GPIO_Init>
}
 8002a2a:	bf00      	nop
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <OneWire_BusOutputDirection>:

void OneWire_BusOutputDirection(OneWire_t *onewire)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b086      	sub	sp, #24
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
 8002a3a:	2311      	movs	r3, #17
 8002a3c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8002a3e:	2300      	movs	r3, #0
 8002a40:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8002a42:	2301      	movs	r3, #1
 8002a44:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	889b      	ldrh	r3, [r3, #4]
 8002a4a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f107 0208 	add.w	r2, r7, #8
 8002a54:	4611      	mov	r1, r2
 8002a56:	4618      	mov	r0, r3
 8002a58:	f001 fda4 	bl	80045a4 <HAL_GPIO_Init>
}
 8002a5c:	bf00      	nop
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <OneWire_OutputLow>:

//
//	Bus pin output state control
//
void OneWire_OutputLow(OneWire_t *onewire)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin<<16; // Reset the 1-Wire pin
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	889b      	ldrh	r3, [r3, #4]
 8002a70:	041a      	lsls	r2, r3, #16
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	611a      	str	r2, [r3, #16]
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr

08002a82 <OneWire_OutputHigh>:

void OneWire_OutputHigh(OneWire_t *onewire)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	889a      	ldrh	r2, [r3, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	611a      	str	r2, [r3, #16]
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr

08002a9e <OneWire_Reset>:
//	Returns:
//	0 - Reset ok
//	1 - Error
//
uint8_t OneWire_Reset(OneWire_t* onewire)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b084      	sub	sp, #16
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
	uint8_t i;

	OneWire_OutputLow(onewire);  // Write bus output low
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7ff ffdc 	bl	8002a64 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff ffc0 	bl	8002a32 <OneWire_BusOutputDirection>
	OneWire_Delay(480); // Wait 480 us for reset
 8002ab2:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8002ab6:	f7ff ff8b 	bl	80029d0 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release the bus by switching to input
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7ff ffa0 	bl	8002a00 <OneWire_BusInputDirection>
	OneWire_Delay(70);
 8002ac0:	2046      	movs	r0, #70	; 0x46
 8002ac2:	f7ff ff85 	bl	80029d0 <OneWire_Delay>

	i = HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin); // Check if bus is low
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	889b      	ldrh	r3, [r3, #4]
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	f001 feeb 	bl	80048ac <HAL_GPIO_ReadPin>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	73fb      	strb	r3, [r7, #15]
															 // if it's high - no device is presence on the bus
	OneWire_Delay(410);
 8002ada:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8002ade:	f7ff ff77 	bl	80029d0 <OneWire_Delay>

	return i;
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <OneWire_WriteBit>:

//
//	Writing/Reading operations
//
void OneWire_WriteBit(OneWire_t* onewire, uint8_t bit)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	70fb      	strb	r3, [r7, #3]
	if (bit) // Send '1',
 8002af8:	78fb      	ldrb	r3, [r7, #3]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00f      	beq.n	8002b1e <OneWire_WriteBit+0x32>
	{
		OneWire_OutputLow(onewire);	// Set the bus low
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff ffb0 	bl	8002a64 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff ff94 	bl	8002a32 <OneWire_BusOutputDirection>
		OneWire_Delay(6);
 8002b0a:	2006      	movs	r0, #6
 8002b0c:	f7ff ff60 	bl	80029d0 <OneWire_Delay>

		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff ff75 	bl	8002a00 <OneWire_BusInputDirection>
		OneWire_Delay(64);
 8002b16:	2040      	movs	r0, #64	; 0x40
 8002b18:	f7ff ff5a 	bl	80029d0 <OneWire_Delay>
		OneWire_Delay(60);

		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
		OneWire_Delay(10);
	}
}
 8002b1c:	e00e      	b.n	8002b3c <OneWire_WriteBit+0x50>
		OneWire_OutputLow(onewire); // Set the bus low
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7ff ffa0 	bl	8002a64 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7ff ff84 	bl	8002a32 <OneWire_BusOutputDirection>
		OneWire_Delay(60);
 8002b2a:	203c      	movs	r0, #60	; 0x3c
 8002b2c:	f7ff ff50 	bl	80029d0 <OneWire_Delay>
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff ff65 	bl	8002a00 <OneWire_BusInputDirection>
		OneWire_Delay(10);
 8002b36:	200a      	movs	r0, #10
 8002b38:	f7ff ff4a 	bl	80029d0 <OneWire_Delay>
}
 8002b3c:	bf00      	nop
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <OneWire_ReadBit>:

uint8_t OneWire_ReadBit(OneWire_t* onewire)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0; // Default read bit state is low
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	73fb      	strb	r3, [r7, #15]

	OneWire_OutputLow(onewire); // Set low to initiate reading
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f7ff ff87 	bl	8002a64 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7ff ff6b 	bl	8002a32 <OneWire_BusOutputDirection>
	OneWire_Delay(2);
 8002b5c:	2002      	movs	r0, #2
 8002b5e:	f7ff ff37 	bl	80029d0 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release bus for Slave response
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7ff ff4c 	bl	8002a00 <OneWire_BusInputDirection>
	OneWire_Delay(10);
 8002b68:	200a      	movs	r0, #10
 8002b6a:	f7ff ff31 	bl	80029d0 <OneWire_Delay>

	if (HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin)) // Read the bus state
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	889b      	ldrh	r3, [r3, #4]
 8002b76:	4619      	mov	r1, r3
 8002b78:	4610      	mov	r0, r2
 8002b7a:	f001 fe97 	bl	80048ac <HAL_GPIO_ReadPin>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <OneWire_ReadBit+0x44>
		bit = 1;
 8002b84:	2301      	movs	r3, #1
 8002b86:	73fb      	strb	r3, [r7, #15]

	OneWire_Delay(50); // Wait for end of read cycle
 8002b88:	2032      	movs	r0, #50	; 0x32
 8002b8a:	f7ff ff21 	bl	80029d0 <OneWire_Delay>

	return bit;
 8002b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* onewire, uint8_t byte)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8002ba4:	2308      	movs	r3, #8
 8002ba6:	73fb      	strb	r3, [r7, #15]

	do
	{
		OneWire_WriteBit(onewire, byte & 1); // LSB first
 8002ba8:	78fb      	ldrb	r3, [r7, #3]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7ff ff9a 	bl	8002aec <OneWire_WriteBit>
		byte >>= 1;
 8002bb8:	78fb      	ldrb	r3, [r7, #3]
 8002bba:	085b      	lsrs	r3, r3, #1
 8002bbc:	70fb      	strb	r3, [r7, #3]
	} while(--i);
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	73fb      	strb	r3, [r7, #15]
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1ee      	bne.n	8002ba8 <OneWire_WriteByte+0x10>
}
 8002bca:	bf00      	nop
 8002bcc:	bf00      	nop
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* onewire)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8002bdc:	2308      	movs	r3, #8
 8002bde:	73fb      	strb	r3, [r7, #15]
 8002be0:	2300      	movs	r3, #0
 8002be2:	73bb      	strb	r3, [r7, #14]

	do{
		byte >>= 1;
 8002be4:	7bbb      	ldrb	r3, [r7, #14]
 8002be6:	085b      	lsrs	r3, r3, #1
 8002be8:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7ff ffaa 	bl	8002b44 <OneWire_ReadBit>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	01db      	lsls	r3, r3, #7
 8002bf4:	b25a      	sxtb	r2, r3
 8002bf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	b25b      	sxtb	r3, r3
 8002bfe:	73bb      	strb	r3, [r7, #14]
	} while(--i);
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	73fb      	strb	r3, [r7, #15]
 8002c06:	7bfb      	ldrb	r3, [r7, #15]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1eb      	bne.n	8002be4 <OneWire_ReadByte+0x10>

	return byte;
 8002c0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <OneWire_ResetSearch>:

//
// 1-Wire search operations
//
void OneWire_ResetSearch(OneWire_t* onewire)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
	// Clear the search results
	onewire->LastDiscrepancy = 0;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	719a      	strb	r2, [r3, #6]
	onewire->LastDeviceFlag = 0;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	721a      	strb	r2, [r3, #8]
	onewire->LastFamilyDiscrepancy = 0;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	71da      	strb	r2, [r3, #7]
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr

08002c3a <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* onewire, uint8_t command)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b084      	sub	sp, #16
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	460b      	mov	r3, r1
 8002c44:	70fb      	strb	r3, [r7, #3]
	uint8_t id_bit_number;
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	id_bit_number = 1;
 8002c46:	2301      	movs	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8002c52:	2301      	movs	r3, #1
 8002c54:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8002c56:	2300      	movs	r3, #0
 8002c58:	733b      	strb	r3, [r7, #12]

	if (!onewire->LastDeviceFlag) // If last device flag is not set
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	7a1b      	ldrb	r3, [r3, #8]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f040 809a 	bne.w	8002d98 <OneWire_Search+0x15e>
	{
		if (OneWire_Reset(onewire)) // Reset bus
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7ff ff1a 	bl	8002a9e <OneWire_Reset>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00a      	beq.n	8002c86 <OneWire_Search+0x4c>
		{
			// If error while reset - reset search results
			onewire->LastDiscrepancy = 0;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	719a      	strb	r2, [r3, #6]
			onewire->LastDeviceFlag = 0;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	721a      	strb	r2, [r3, #8]
			onewire->LastFamilyDiscrepancy = 0;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	71da      	strb	r2, [r3, #7]
			return 0;
 8002c82:	2300      	movs	r3, #0
 8002c84:	e09b      	b.n	8002dbe <OneWire_Search+0x184>
		}

		OneWire_WriteByte(onewire, command); // Send searching command
 8002c86:	78fb      	ldrb	r3, [r7, #3]
 8002c88:	4619      	mov	r1, r3
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7ff ff84 	bl	8002b98 <OneWire_WriteByte>

		// Searching loop, Maxim APPLICATION NOTE 187
		do
		{
			id_bit = OneWire_ReadBit(onewire); // Read a bit 1
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7ff ff57 	bl	8002b44 <OneWire_ReadBit>
 8002c96:	4603      	mov	r3, r0
 8002c98:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(onewire); // Read the complement of bit 1
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7ff ff52 	bl	8002b44 <OneWire_ReadBit>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	723b      	strb	r3, [r7, #8]

			if ((id_bit == 1) && (cmp_id_bit == 1)) // 11 - data error
 8002ca4:	7a7b      	ldrb	r3, [r7, #9]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d102      	bne.n	8002cb0 <OneWire_Search+0x76>
 8002caa:	7a3b      	ldrb	r3, [r7, #8]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d064      	beq.n	8002d7a <OneWire_Search+0x140>
			{
				break;
			}
			else
			{
				if (id_bit != cmp_id_bit)
 8002cb0:	7a7a      	ldrb	r2, [r7, #9]
 8002cb2:	7a3b      	ldrb	r3, [r7, #8]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d002      	beq.n	8002cbe <OneWire_Search+0x84>
				{
					search_direction = id_bit;  // Bit write value for search
 8002cb8:	7a7b      	ldrb	r3, [r7, #9]
 8002cba:	72bb      	strb	r3, [r7, #10]
 8002cbc:	e026      	b.n	8002d0c <OneWire_Search+0xd2>
				}
				else // 00 - 2 devices
				{
					// Table 3. Search Path Direction
					if (id_bit_number < onewire->LastDiscrepancy)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	799b      	ldrb	r3, [r3, #6]
 8002cc2:	7bfa      	ldrb	r2, [r7, #15]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d20d      	bcs.n	8002ce4 <OneWire_Search+0xaa>
					{
						search_direction = ((onewire->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8002cc8:	7b7b      	ldrb	r3, [r7, #13]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	4413      	add	r3, r2
 8002cce:	7a5a      	ldrb	r2, [r3, #9]
 8002cd0:	7afb      	ldrb	r3, [r7, #11]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	bf14      	ite	ne
 8002cda:	2301      	movne	r3, #1
 8002cdc:	2300      	moveq	r3, #0
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	72bb      	strb	r3, [r7, #10]
 8002ce2:	e008      	b.n	8002cf6 <OneWire_Search+0xbc>
					}
					else
					{
						// If bit is equal to last - pick 1
						// If not - then pick 0
						search_direction = (id_bit_number == onewire->LastDiscrepancy);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	799b      	ldrb	r3, [r3, #6]
 8002ce8:	7bfa      	ldrb	r2, [r7, #15]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	bf0c      	ite	eq
 8002cee:	2301      	moveq	r3, #1
 8002cf0:	2300      	movne	r3, #0
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	72bb      	strb	r3, [r7, #10]
					}

					if (search_direction == 0) // If 0 was picked, write it to LastZero
 8002cf6:	7abb      	ldrb	r3, [r7, #10]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d107      	bne.n	8002d0c <OneWire_Search+0xd2>
					{
						last_zero = id_bit_number;
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
 8002cfe:	73bb      	strb	r3, [r7, #14]

						if (last_zero < 9) // Check for last discrepancy in family
 8002d00:	7bbb      	ldrb	r3, [r7, #14]
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d802      	bhi.n	8002d0c <OneWire_Search+0xd2>
						{
							onewire->LastFamilyDiscrepancy = last_zero;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	7bba      	ldrb	r2, [r7, #14]
 8002d0a:	71da      	strb	r2, [r3, #7]
						}
					}
				}

				if (search_direction == 1)
 8002d0c:	7abb      	ldrb	r3, [r7, #10]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d10c      	bne.n	8002d2c <OneWire_Search+0xf2>
				{
					onewire->ROM_NO[rom_byte_number] |= rom_byte_mask; // Set the bit in the ROM byte rom_byte_number
 8002d12:	7b7b      	ldrb	r3, [r7, #13]
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	4413      	add	r3, r2
 8002d18:	7a59      	ldrb	r1, [r3, #9]
 8002d1a:	7b7b      	ldrb	r3, [r7, #13]
 8002d1c:	7afa      	ldrb	r2, [r7, #11]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	b2d1      	uxtb	r1, r2
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	4413      	add	r3, r2
 8002d26:	460a      	mov	r2, r1
 8002d28:	725a      	strb	r2, [r3, #9]
 8002d2a:	e010      	b.n	8002d4e <OneWire_Search+0x114>
				}
				else
				{
					onewire->ROM_NO[rom_byte_number] &= ~rom_byte_mask; // Clear the bit in the ROM byte rom_byte_number
 8002d2c:	7b7b      	ldrb	r3, [r7, #13]
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	4413      	add	r3, r2
 8002d32:	7a5b      	ldrb	r3, [r3, #9]
 8002d34:	b25a      	sxtb	r2, r3
 8002d36:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	b25b      	sxtb	r3, r3
 8002d3e:	4013      	ands	r3, r2
 8002d40:	b25a      	sxtb	r2, r3
 8002d42:	7b7b      	ldrb	r3, [r7, #13]
 8002d44:	b2d1      	uxtb	r1, r2
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	4413      	add	r3, r2
 8002d4a:	460a      	mov	r2, r1
 8002d4c:	725a      	strb	r2, [r3, #9]
				}

				OneWire_WriteBit(onewire, search_direction); // Search direction write bit
 8002d4e:	7abb      	ldrb	r3, [r7, #10]
 8002d50:	4619      	mov	r1, r3
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7ff feca 	bl	8002aec <OneWire_WriteBit>

				id_bit_number++; // Next bit search - increase the id
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1; // Shoft the mask for next bit
 8002d5e:	7afb      	ldrb	r3, [r7, #11]
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	72fb      	strb	r3, [r7, #11]

				if (rom_byte_mask == 0) // If the mask is 0, it says the whole byte is read
 8002d64:	7afb      	ldrb	r3, [r7, #11]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d104      	bne.n	8002d74 <OneWire_Search+0x13a>
				{
					rom_byte_number++; // Next byte number
 8002d6a:	7b7b      	ldrb	r3, [r7, #13]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1; // Reset the mask - first bit
 8002d70:	2301      	movs	r3, #1
 8002d72:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while(rom_byte_number < 8);  // Read 8 bytes
 8002d74:	7b7b      	ldrb	r3, [r7, #13]
 8002d76:	2b07      	cmp	r3, #7
 8002d78:	d98a      	bls.n	8002c90 <OneWire_Search+0x56>

		if (!(id_bit_number < 65)) // If all read bits number is below 65 (8 bytes)
 8002d7a:	7bfb      	ldrb	r3, [r7, #15]
 8002d7c:	2b40      	cmp	r3, #64	; 0x40
 8002d7e:	d90b      	bls.n	8002d98 <OneWire_Search+0x15e>
		{
			onewire->LastDiscrepancy = last_zero;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	7bba      	ldrb	r2, [r7, #14]
 8002d84:	719a      	strb	r2, [r3, #6]

			if (onewire->LastDiscrepancy == 0) // If last discrepancy is 0 - last device found
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	799b      	ldrb	r3, [r3, #6]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d102      	bne.n	8002d94 <OneWire_Search+0x15a>
			{
				onewire->LastDeviceFlag = 1; // Set the flag
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1; // Searching successful
 8002d94:	2301      	movs	r3, #1
 8002d96:	733b      	strb	r3, [r7, #12]
		}
	}

	// If no device is found - reset search data and return 0
	if (!search_result || !onewire->ROM_NO[0])
 8002d98:	7b3b      	ldrb	r3, [r7, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <OneWire_Search+0x16c>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	7a5b      	ldrb	r3, [r3, #9]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10a      	bne.n	8002dbc <OneWire_Search+0x182>
	{
		onewire->LastDiscrepancy = 0;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	719a      	strb	r2, [r3, #6]
		onewire->LastDeviceFlag = 0;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	721a      	strb	r2, [r3, #8]
		onewire->LastFamilyDiscrepancy = 0;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 8002dbc:	7b3b      	ldrb	r3, [r7, #12]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <OneWire_First>:

//
//	Return first device on 1-Wire bus
//
uint8_t OneWire_First(OneWire_t* onewire)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b082      	sub	sp, #8
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
	OneWire_ResetSearch(onewire);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7ff ff21 	bl	8002c16 <OneWire_ResetSearch>

	return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 8002dd4:	21f0      	movs	r1, #240	; 0xf0
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7ff ff2f 	bl	8002c3a <OneWire_Search>
 8002ddc:	4603      	mov	r3, r0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <OneWire_Next>:

//
//	Return next device on 1-Wire bus
//
uint8_t OneWire_Next(OneWire_t* onewire)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 8002dee:	21f0      	movs	r1, #240	; 0xf0
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7ff ff22 	bl	8002c3a <OneWire_Search>
 8002df6:	4603      	mov	r3, r0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <OneWire_SelectWithPointer>:

//
//	Select a device on bus by pointer to ROM address
//
void OneWire_SelectWithPointer(OneWire_t* onewire, uint8_t *ROM)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(onewire, ONEWIRE_CMD_MATCHROM); // Match ROM command
 8002e0a:	2155      	movs	r1, #85	; 0x55
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7ff fec3 	bl	8002b98 <OneWire_WriteByte>

	for (i = 0; i < 8; i++)
 8002e12:	2300      	movs	r3, #0
 8002e14:	73fb      	strb	r3, [r7, #15]
 8002e16:	e00a      	b.n	8002e2e <OneWire_SelectWithPointer+0x2e>
	{
		OneWire_WriteByte(onewire, *(ROM + i));
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	4619      	mov	r1, r3
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7ff feb8 	bl	8002b98 <OneWire_WriteByte>
	for (i = 0; i < 8; i++)
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	73fb      	strb	r3, [r7, #15]
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	2b07      	cmp	r3, #7
 8002e32:	d9f1      	bls.n	8002e18 <OneWire_SelectWithPointer+0x18>
	}
}
 8002e34:	bf00      	nop
 8002e36:	bf00      	nop
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <OneWire_GetFullROM>:

//
//	Get the ROM of found device
//
void OneWire_GetFullROM(OneWire_t* onewire, uint8_t *firstIndex)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b085      	sub	sp, #20
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8002e48:	2300      	movs	r3, #0
 8002e4a:	73fb      	strb	r3, [r7, #15]
 8002e4c:	e00a      	b.n	8002e64 <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = onewire->ROM_NO[i];
 8002e4e:	7bfa      	ldrb	r2, [r7, #15]
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	6839      	ldr	r1, [r7, #0]
 8002e54:	440b      	add	r3, r1
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	440a      	add	r2, r1
 8002e5a:	7a52      	ldrb	r2, [r2, #9]
 8002e5c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
 8002e60:	3301      	adds	r3, #1
 8002e62:	73fb      	strb	r3, [r7, #15]
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	2b07      	cmp	r3, #7
 8002e68:	d9f1      	bls.n	8002e4e <OneWire_GetFullROM+0x10>
	}
}
 8002e6a:	bf00      	nop
 8002e6c:	bf00      	nop
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr
	...

08002e78 <OneWire_Init>:

//
//	1-Wire initialization
//
void OneWire_Init(OneWire_t* onewire, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	4613      	mov	r3, r2
 8002e84:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&_DS18B20_TIMER); // Start the delay timer
 8002e86:	4811      	ldr	r0, [pc, #68]	; (8002ecc <OneWire_Init+0x54>)
 8002e88:	f003 f8ee 	bl	8006068 <HAL_TIM_Base_Start>

	onewire->GPIOx = GPIOx; // Save 1-wire bus pin
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	601a      	str	r2, [r3, #0]
	onewire->GPIO_Pin = GPIO_Pin;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	88fa      	ldrh	r2, [r7, #6]
 8002e96:	809a      	strh	r2, [r3, #4]

	// 1-Wire bit bang initialization
	OneWire_BusOutputDirection(onewire);
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f7ff fdca 	bl	8002a32 <OneWire_BusOutputDirection>
	OneWire_OutputHigh(onewire);
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f7ff fdef 	bl	8002a82 <OneWire_OutputHigh>
	HAL_Delay(100);
 8002ea4:	2064      	movs	r0, #100	; 0x64
 8002ea6:	f000 fd6d 	bl	8003984 <HAL_Delay>
	OneWire_OutputLow(onewire);
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f7ff fdda 	bl	8002a64 <OneWire_OutputLow>
	HAL_Delay(100);
 8002eb0:	2064      	movs	r0, #100	; 0x64
 8002eb2:	f000 fd67 	bl	8003984 <HAL_Delay>
	OneWire_OutputHigh(onewire);
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f7ff fde3 	bl	8002a82 <OneWire_OutputHigh>
	HAL_Delay(200);
 8002ebc:	20c8      	movs	r0, #200	; 0xc8
 8002ebe:	f000 fd61 	bl	8003984 <HAL_Delay>
}
 8002ec2:	bf00      	nop
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20000ae8 	.word	0x20000ae8

08002ed0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8002ed6:	f000 fa1f 	bl	8003318 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002eda:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002ede:	2201      	movs	r2, #1
 8002ee0:	2178      	movs	r1, #120	; 0x78
 8002ee2:	485b      	ldr	r0, [pc, #364]	; (8003050 <SSD1306_Init+0x180>)
 8002ee4:	f001 ff6c 	bl	8004dc0 <HAL_I2C_IsDeviceReady>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	e0a9      	b.n	8003046 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8002ef2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002ef6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002ef8:	e002      	b.n	8002f00 <SSD1306_Init+0x30>
		p--;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3b01      	subs	r3, #1
 8002efe:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f9      	bne.n	8002efa <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002f06:	22ae      	movs	r2, #174	; 0xae
 8002f08:	2100      	movs	r1, #0
 8002f0a:	2078      	movs	r0, #120	; 0x78
 8002f0c:	f000 fa7e 	bl	800340c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8002f10:	2220      	movs	r2, #32
 8002f12:	2100      	movs	r1, #0
 8002f14:	2078      	movs	r0, #120	; 0x78
 8002f16:	f000 fa79 	bl	800340c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002f1a:	2210      	movs	r2, #16
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	2078      	movs	r0, #120	; 0x78
 8002f20:	f000 fa74 	bl	800340c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002f24:	22b0      	movs	r2, #176	; 0xb0
 8002f26:	2100      	movs	r1, #0
 8002f28:	2078      	movs	r0, #120	; 0x78
 8002f2a:	f000 fa6f 	bl	800340c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002f2e:	22c8      	movs	r2, #200	; 0xc8
 8002f30:	2100      	movs	r1, #0
 8002f32:	2078      	movs	r0, #120	; 0x78
 8002f34:	f000 fa6a 	bl	800340c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002f38:	2200      	movs	r2, #0
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	2078      	movs	r0, #120	; 0x78
 8002f3e:	f000 fa65 	bl	800340c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002f42:	2210      	movs	r2, #16
 8002f44:	2100      	movs	r1, #0
 8002f46:	2078      	movs	r0, #120	; 0x78
 8002f48:	f000 fa60 	bl	800340c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002f4c:	2240      	movs	r2, #64	; 0x40
 8002f4e:	2100      	movs	r1, #0
 8002f50:	2078      	movs	r0, #120	; 0x78
 8002f52:	f000 fa5b 	bl	800340c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002f56:	2281      	movs	r2, #129	; 0x81
 8002f58:	2100      	movs	r1, #0
 8002f5a:	2078      	movs	r0, #120	; 0x78
 8002f5c:	f000 fa56 	bl	800340c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002f60:	22ff      	movs	r2, #255	; 0xff
 8002f62:	2100      	movs	r1, #0
 8002f64:	2078      	movs	r0, #120	; 0x78
 8002f66:	f000 fa51 	bl	800340c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002f6a:	22a1      	movs	r2, #161	; 0xa1
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	2078      	movs	r0, #120	; 0x78
 8002f70:	f000 fa4c 	bl	800340c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002f74:	22a6      	movs	r2, #166	; 0xa6
 8002f76:	2100      	movs	r1, #0
 8002f78:	2078      	movs	r0, #120	; 0x78
 8002f7a:	f000 fa47 	bl	800340c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002f7e:	22a8      	movs	r2, #168	; 0xa8
 8002f80:	2100      	movs	r1, #0
 8002f82:	2078      	movs	r0, #120	; 0x78
 8002f84:	f000 fa42 	bl	800340c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002f88:	223f      	movs	r2, #63	; 0x3f
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	2078      	movs	r0, #120	; 0x78
 8002f8e:	f000 fa3d 	bl	800340c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002f92:	22a4      	movs	r2, #164	; 0xa4
 8002f94:	2100      	movs	r1, #0
 8002f96:	2078      	movs	r0, #120	; 0x78
 8002f98:	f000 fa38 	bl	800340c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002f9c:	22d3      	movs	r2, #211	; 0xd3
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	2078      	movs	r0, #120	; 0x78
 8002fa2:	f000 fa33 	bl	800340c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2100      	movs	r1, #0
 8002faa:	2078      	movs	r0, #120	; 0x78
 8002fac:	f000 fa2e 	bl	800340c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002fb0:	22d5      	movs	r2, #213	; 0xd5
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	2078      	movs	r0, #120	; 0x78
 8002fb6:	f000 fa29 	bl	800340c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002fba:	22f0      	movs	r2, #240	; 0xf0
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	2078      	movs	r0, #120	; 0x78
 8002fc0:	f000 fa24 	bl	800340c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002fc4:	22d9      	movs	r2, #217	; 0xd9
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	2078      	movs	r0, #120	; 0x78
 8002fca:	f000 fa1f 	bl	800340c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002fce:	2222      	movs	r2, #34	; 0x22
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	2078      	movs	r0, #120	; 0x78
 8002fd4:	f000 fa1a 	bl	800340c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002fd8:	22da      	movs	r2, #218	; 0xda
 8002fda:	2100      	movs	r1, #0
 8002fdc:	2078      	movs	r0, #120	; 0x78
 8002fde:	f000 fa15 	bl	800340c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002fe2:	2212      	movs	r2, #18
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	2078      	movs	r0, #120	; 0x78
 8002fe8:	f000 fa10 	bl	800340c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002fec:	22db      	movs	r2, #219	; 0xdb
 8002fee:	2100      	movs	r1, #0
 8002ff0:	2078      	movs	r0, #120	; 0x78
 8002ff2:	f000 fa0b 	bl	800340c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	2078      	movs	r0, #120	; 0x78
 8002ffc:	f000 fa06 	bl	800340c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8003000:	228d      	movs	r2, #141	; 0x8d
 8003002:	2100      	movs	r1, #0
 8003004:	2078      	movs	r0, #120	; 0x78
 8003006:	f000 fa01 	bl	800340c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800300a:	2214      	movs	r2, #20
 800300c:	2100      	movs	r1, #0
 800300e:	2078      	movs	r0, #120	; 0x78
 8003010:	f000 f9fc 	bl	800340c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8003014:	22af      	movs	r2, #175	; 0xaf
 8003016:	2100      	movs	r1, #0
 8003018:	2078      	movs	r0, #120	; 0x78
 800301a:	f000 f9f7 	bl	800340c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800301e:	222e      	movs	r2, #46	; 0x2e
 8003020:	2100      	movs	r1, #0
 8003022:	2078      	movs	r0, #120	; 0x78
 8003024:	f000 f9f2 	bl	800340c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8003028:	2000      	movs	r0, #0
 800302a:	f000 f843 	bl	80030b4 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800302e:	f000 f813 	bl	8003058 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8003032:	4b08      	ldr	r3, [pc, #32]	; (8003054 <SSD1306_Init+0x184>)
 8003034:	2200      	movs	r2, #0
 8003036:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8003038:	4b06      	ldr	r3, [pc, #24]	; (8003054 <SSD1306_Init+0x184>)
 800303a:	2200      	movs	r2, #0
 800303c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800303e:	4b05      	ldr	r3, [pc, #20]	; (8003054 <SSD1306_Init+0x184>)
 8003040:	2201      	movs	r2, #1
 8003042:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8003044:	2301      	movs	r3, #1
}
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	20000298 	.word	0x20000298
 8003054:	20000adc 	.word	0x20000adc

08003058 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800305e:	2300      	movs	r3, #0
 8003060:	71fb      	strb	r3, [r7, #7]
 8003062:	e01d      	b.n	80030a0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8003064:	79fb      	ldrb	r3, [r7, #7]
 8003066:	3b50      	subs	r3, #80	; 0x50
 8003068:	b2db      	uxtb	r3, r3
 800306a:	461a      	mov	r2, r3
 800306c:	2100      	movs	r1, #0
 800306e:	2078      	movs	r0, #120	; 0x78
 8003070:	f000 f9cc 	bl	800340c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8003074:	2200      	movs	r2, #0
 8003076:	2100      	movs	r1, #0
 8003078:	2078      	movs	r0, #120	; 0x78
 800307a:	f000 f9c7 	bl	800340c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800307e:	2210      	movs	r2, #16
 8003080:	2100      	movs	r1, #0
 8003082:	2078      	movs	r0, #120	; 0x78
 8003084:	f000 f9c2 	bl	800340c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003088:	79fb      	ldrb	r3, [r7, #7]
 800308a:	01db      	lsls	r3, r3, #7
 800308c:	4a08      	ldr	r2, [pc, #32]	; (80030b0 <SSD1306_UpdateScreen+0x58>)
 800308e:	441a      	add	r2, r3
 8003090:	2380      	movs	r3, #128	; 0x80
 8003092:	2140      	movs	r1, #64	; 0x40
 8003094:	2078      	movs	r0, #120	; 0x78
 8003096:	f000 f953 	bl	8003340 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	3301      	adds	r3, #1
 800309e:	71fb      	strb	r3, [r7, #7]
 80030a0:	79fb      	ldrb	r3, [r7, #7]
 80030a2:	2b07      	cmp	r3, #7
 80030a4:	d9de      	bls.n	8003064 <SSD1306_UpdateScreen+0xc>
	}
}
 80030a6:	bf00      	nop
 80030a8:	bf00      	nop
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	200006dc 	.word	0x200006dc

080030b4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <SSD1306_Fill+0x14>
 80030c4:	2300      	movs	r3, #0
 80030c6:	e000      	b.n	80030ca <SSD1306_Fill+0x16>
 80030c8:	23ff      	movs	r3, #255	; 0xff
 80030ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030ce:	4619      	mov	r1, r3
 80030d0:	4803      	ldr	r0, [pc, #12]	; (80030e0 <SSD1306_Fill+0x2c>)
 80030d2:	f005 fbec 	bl	80088ae <memset>
}
 80030d6:	bf00      	nop
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	200006dc 	.word	0x200006dc

080030e4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	80fb      	strh	r3, [r7, #6]
 80030ee:	460b      	mov	r3, r1
 80030f0:	80bb      	strh	r3, [r7, #4]
 80030f2:	4613      	mov	r3, r2
 80030f4:	70fb      	strb	r3, [r7, #3]
	if (
 80030f6:	88fb      	ldrh	r3, [r7, #6]
 80030f8:	2b7f      	cmp	r3, #127	; 0x7f
 80030fa:	d848      	bhi.n	800318e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80030fc:	88bb      	ldrh	r3, [r7, #4]
 80030fe:	2b3f      	cmp	r3, #63	; 0x3f
 8003100:	d845      	bhi.n	800318e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8003102:	4b25      	ldr	r3, [pc, #148]	; (8003198 <SSD1306_DrawPixel+0xb4>)
 8003104:	791b      	ldrb	r3, [r3, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d006      	beq.n	8003118 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	2b00      	cmp	r3, #0
 800310e:	bf0c      	ite	eq
 8003110:	2301      	moveq	r3, #1
 8003112:	2300      	movne	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8003118:	78fb      	ldrb	r3, [r7, #3]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d11a      	bne.n	8003154 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800311e:	88fa      	ldrh	r2, [r7, #6]
 8003120:	88bb      	ldrh	r3, [r7, #4]
 8003122:	08db      	lsrs	r3, r3, #3
 8003124:	b298      	uxth	r0, r3
 8003126:	4603      	mov	r3, r0
 8003128:	01db      	lsls	r3, r3, #7
 800312a:	4413      	add	r3, r2
 800312c:	4a1b      	ldr	r2, [pc, #108]	; (800319c <SSD1306_DrawPixel+0xb8>)
 800312e:	5cd3      	ldrb	r3, [r2, r3]
 8003130:	b25a      	sxtb	r2, r3
 8003132:	88bb      	ldrh	r3, [r7, #4]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	2101      	movs	r1, #1
 800313a:	fa01 f303 	lsl.w	r3, r1, r3
 800313e:	b25b      	sxtb	r3, r3
 8003140:	4313      	orrs	r3, r2
 8003142:	b259      	sxtb	r1, r3
 8003144:	88fa      	ldrh	r2, [r7, #6]
 8003146:	4603      	mov	r3, r0
 8003148:	01db      	lsls	r3, r3, #7
 800314a:	4413      	add	r3, r2
 800314c:	b2c9      	uxtb	r1, r1
 800314e:	4a13      	ldr	r2, [pc, #76]	; (800319c <SSD1306_DrawPixel+0xb8>)
 8003150:	54d1      	strb	r1, [r2, r3]
 8003152:	e01d      	b.n	8003190 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003154:	88fa      	ldrh	r2, [r7, #6]
 8003156:	88bb      	ldrh	r3, [r7, #4]
 8003158:	08db      	lsrs	r3, r3, #3
 800315a:	b298      	uxth	r0, r3
 800315c:	4603      	mov	r3, r0
 800315e:	01db      	lsls	r3, r3, #7
 8003160:	4413      	add	r3, r2
 8003162:	4a0e      	ldr	r2, [pc, #56]	; (800319c <SSD1306_DrawPixel+0xb8>)
 8003164:	5cd3      	ldrb	r3, [r2, r3]
 8003166:	b25a      	sxtb	r2, r3
 8003168:	88bb      	ldrh	r3, [r7, #4]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	2101      	movs	r1, #1
 8003170:	fa01 f303 	lsl.w	r3, r1, r3
 8003174:	b25b      	sxtb	r3, r3
 8003176:	43db      	mvns	r3, r3
 8003178:	b25b      	sxtb	r3, r3
 800317a:	4013      	ands	r3, r2
 800317c:	b259      	sxtb	r1, r3
 800317e:	88fa      	ldrh	r2, [r7, #6]
 8003180:	4603      	mov	r3, r0
 8003182:	01db      	lsls	r3, r3, #7
 8003184:	4413      	add	r3, r2
 8003186:	b2c9      	uxtb	r1, r1
 8003188:	4a04      	ldr	r2, [pc, #16]	; (800319c <SSD1306_DrawPixel+0xb8>)
 800318a:	54d1      	strb	r1, [r2, r3]
 800318c:	e000      	b.n	8003190 <SSD1306_DrawPixel+0xac>
		return;
 800318e:	bf00      	nop
	}
}
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr
 8003198:	20000adc 	.word	0x20000adc
 800319c:	200006dc 	.word	0x200006dc

080031a0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	460a      	mov	r2, r1
 80031aa:	80fb      	strh	r3, [r7, #6]
 80031ac:	4613      	mov	r3, r2
 80031ae:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80031b0:	4a05      	ldr	r2, [pc, #20]	; (80031c8 <SSD1306_GotoXY+0x28>)
 80031b2:	88fb      	ldrh	r3, [r7, #6]
 80031b4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80031b6:	4a04      	ldr	r2, [pc, #16]	; (80031c8 <SSD1306_GotoXY+0x28>)
 80031b8:	88bb      	ldrh	r3, [r7, #4]
 80031ba:	8053      	strh	r3, [r2, #2]
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	20000adc 	.word	0x20000adc

080031cc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	6039      	str	r1, [r7, #0]
 80031d6:	71fb      	strb	r3, [r7, #7]
 80031d8:	4613      	mov	r3, r2
 80031da:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80031dc:	4b3a      	ldr	r3, [pc, #232]	; (80032c8 <SSD1306_Putc+0xfc>)
 80031de:	881b      	ldrh	r3, [r3, #0]
 80031e0:	461a      	mov	r2, r3
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	4413      	add	r3, r2
	if (
 80031e8:	2b7f      	cmp	r3, #127	; 0x7f
 80031ea:	dc07      	bgt.n	80031fc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80031ec:	4b36      	ldr	r3, [pc, #216]	; (80032c8 <SSD1306_Putc+0xfc>)
 80031ee:	885b      	ldrh	r3, [r3, #2]
 80031f0:	461a      	mov	r2, r3
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	785b      	ldrb	r3, [r3, #1]
 80031f6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80031f8:	2b3f      	cmp	r3, #63	; 0x3f
 80031fa:	dd01      	ble.n	8003200 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	e05e      	b.n	80032be <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8003200:	2300      	movs	r3, #0
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	e04b      	b.n	800329e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	3b20      	subs	r3, #32
 800320e:	6839      	ldr	r1, [r7, #0]
 8003210:	7849      	ldrb	r1, [r1, #1]
 8003212:	fb01 f303 	mul.w	r3, r1, r3
 8003216:	4619      	mov	r1, r3
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	440b      	add	r3, r1
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	4413      	add	r3, r2
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8003224:	2300      	movs	r3, #0
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	e030      	b.n	800328c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d010      	beq.n	800325c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800323a:	4b23      	ldr	r3, [pc, #140]	; (80032c8 <SSD1306_Putc+0xfc>)
 800323c:	881a      	ldrh	r2, [r3, #0]
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	b29b      	uxth	r3, r3
 8003242:	4413      	add	r3, r2
 8003244:	b298      	uxth	r0, r3
 8003246:	4b20      	ldr	r3, [pc, #128]	; (80032c8 <SSD1306_Putc+0xfc>)
 8003248:	885a      	ldrh	r2, [r3, #2]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	b29b      	uxth	r3, r3
 800324e:	4413      	add	r3, r2
 8003250:	b29b      	uxth	r3, r3
 8003252:	79ba      	ldrb	r2, [r7, #6]
 8003254:	4619      	mov	r1, r3
 8003256:	f7ff ff45 	bl	80030e4 <SSD1306_DrawPixel>
 800325a:	e014      	b.n	8003286 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800325c:	4b1a      	ldr	r3, [pc, #104]	; (80032c8 <SSD1306_Putc+0xfc>)
 800325e:	881a      	ldrh	r2, [r3, #0]
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	b29b      	uxth	r3, r3
 8003264:	4413      	add	r3, r2
 8003266:	b298      	uxth	r0, r3
 8003268:	4b17      	ldr	r3, [pc, #92]	; (80032c8 <SSD1306_Putc+0xfc>)
 800326a:	885a      	ldrh	r2, [r3, #2]
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	b29b      	uxth	r3, r3
 8003270:	4413      	add	r3, r2
 8003272:	b299      	uxth	r1, r3
 8003274:	79bb      	ldrb	r3, [r7, #6]
 8003276:	2b00      	cmp	r3, #0
 8003278:	bf0c      	ite	eq
 800327a:	2301      	moveq	r3, #1
 800327c:	2300      	movne	r3, #0
 800327e:	b2db      	uxtb	r3, r3
 8003280:	461a      	mov	r2, r3
 8003282:	f7ff ff2f 	bl	80030e4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	3301      	adds	r3, #1
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	461a      	mov	r2, r3
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	4293      	cmp	r3, r2
 8003296:	d3c8      	bcc.n	800322a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	3301      	adds	r3, #1
 800329c:	617b      	str	r3, [r7, #20]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	785b      	ldrb	r3, [r3, #1]
 80032a2:	461a      	mov	r2, r3
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d3ad      	bcc.n	8003206 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80032aa:	4b07      	ldr	r3, [pc, #28]	; (80032c8 <SSD1306_Putc+0xfc>)
 80032ac:	881a      	ldrh	r2, [r3, #0]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	4413      	add	r3, r2
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	4b03      	ldr	r3, [pc, #12]	; (80032c8 <SSD1306_Putc+0xfc>)
 80032ba:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80032bc:	79fb      	ldrb	r3, [r7, #7]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3718      	adds	r7, #24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20000adc 	.word	0x20000adc

080032cc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	4613      	mov	r3, r2
 80032d8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80032da:	e012      	b.n	8003302 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	79fa      	ldrb	r2, [r7, #7]
 80032e2:	68b9      	ldr	r1, [r7, #8]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff ff71 	bl	80031cc <SSD1306_Putc>
 80032ea:	4603      	mov	r3, r0
 80032ec:	461a      	mov	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d002      	beq.n	80032fc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	e008      	b.n	800330e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	3301      	adds	r3, #1
 8003300:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1e8      	bne.n	80032dc <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	781b      	ldrb	r3, [r3, #0]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800331e:	4b07      	ldr	r3, [pc, #28]	; (800333c <ssd1306_I2C_Init+0x24>)
 8003320:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003322:	e002      	b.n	800332a <ssd1306_I2C_Init+0x12>
		p--;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3b01      	subs	r3, #1
 8003328:	607b      	str	r3, [r7, #4]
	while(p>0)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1f9      	bne.n	8003324 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8003330:	bf00      	nop
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr
 800333c:	0003d090 	.word	0x0003d090

08003340 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003340:	b590      	push	{r4, r7, lr}
 8003342:	b0c7      	sub	sp, #284	; 0x11c
 8003344:	af02      	add	r7, sp, #8
 8003346:	4604      	mov	r4, r0
 8003348:	4608      	mov	r0, r1
 800334a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800334e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8003352:	600a      	str	r2, [r1, #0]
 8003354:	4619      	mov	r1, r3
 8003356:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800335a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800335e:	4622      	mov	r2, r4
 8003360:	701a      	strb	r2, [r3, #0]
 8003362:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003366:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800336a:	4602      	mov	r2, r0
 800336c:	701a      	strb	r2, [r3, #0]
 800336e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003372:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003376:	460a      	mov	r2, r1
 8003378:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800337a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800337e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003382:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003386:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800338a:	7812      	ldrb	r2, [r2, #0]
 800338c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800338e:	2300      	movs	r3, #0
 8003390:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8003394:	e015      	b.n	80033c2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8003396:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800339a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800339e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	441a      	add	r2, r3
 80033a6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80033aa:	3301      	adds	r3, #1
 80033ac:	7811      	ldrb	r1, [r2, #0]
 80033ae:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80033b2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80033b6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80033b8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80033bc:	3301      	adds	r3, #1
 80033be:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80033c2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80033cc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80033d0:	8812      	ldrh	r2, [r2, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d8df      	bhi.n	8003396 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80033d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80033da:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	b299      	uxth	r1, r3
 80033e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80033e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80033ea:	881b      	ldrh	r3, [r3, #0]
 80033ec:	3301      	adds	r3, #1
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	f107 020c 	add.w	r2, r7, #12
 80033f4:	200a      	movs	r0, #10
 80033f6:	9000      	str	r0, [sp, #0]
 80033f8:	4803      	ldr	r0, [pc, #12]	; (8003408 <ssd1306_I2C_WriteMulti+0xc8>)
 80033fa:	f001 fbe3 	bl	8004bc4 <HAL_I2C_Master_Transmit>
}
 80033fe:	bf00      	nop
 8003400:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8003404:	46bd      	mov	sp, r7
 8003406:	bd90      	pop	{r4, r7, pc}
 8003408:	20000298 	.word	0x20000298

0800340c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af02      	add	r7, sp, #8
 8003412:	4603      	mov	r3, r0
 8003414:	71fb      	strb	r3, [r7, #7]
 8003416:	460b      	mov	r3, r1
 8003418:	71bb      	strb	r3, [r7, #6]
 800341a:	4613      	mov	r3, r2
 800341c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800341e:	79bb      	ldrb	r3, [r7, #6]
 8003420:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8003422:	797b      	ldrb	r3, [r7, #5]
 8003424:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8003426:	79fb      	ldrb	r3, [r7, #7]
 8003428:	b299      	uxth	r1, r3
 800342a:	f107 020c 	add.w	r2, r7, #12
 800342e:	230a      	movs	r3, #10
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	2302      	movs	r3, #2
 8003434:	4803      	ldr	r0, [pc, #12]	; (8003444 <ssd1306_I2C_Write+0x38>)
 8003436:	f001 fbc5 	bl	8004bc4 <HAL_I2C_Master_Transmit>
}
 800343a:	bf00      	nop
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	20000298 	.word	0x20000298

08003448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800344e:	4b15      	ldr	r3, [pc, #84]	; (80034a4 <HAL_MspInit+0x5c>)
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	4a14      	ldr	r2, [pc, #80]	; (80034a4 <HAL_MspInit+0x5c>)
 8003454:	f043 0301 	orr.w	r3, r3, #1
 8003458:	6193      	str	r3, [r2, #24]
 800345a:	4b12      	ldr	r3, [pc, #72]	; (80034a4 <HAL_MspInit+0x5c>)
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	60bb      	str	r3, [r7, #8]
 8003464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003466:	4b0f      	ldr	r3, [pc, #60]	; (80034a4 <HAL_MspInit+0x5c>)
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	4a0e      	ldr	r2, [pc, #56]	; (80034a4 <HAL_MspInit+0x5c>)
 800346c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003470:	61d3      	str	r3, [r2, #28]
 8003472:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <HAL_MspInit+0x5c>)
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347a:	607b      	str	r3, [r7, #4]
 800347c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800347e:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <HAL_MspInit+0x60>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	4a04      	ldr	r2, [pc, #16]	; (80034a8 <HAL_MspInit+0x60>)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800349a:	bf00      	nop
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr
 80034a4:	40021000 	.word	0x40021000
 80034a8:	40010000 	.word	0x40010000

080034ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034b0:	e7fe      	b.n	80034b0 <NMI_Handler+0x4>

080034b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034b2:	b480      	push	{r7}
 80034b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034b6:	e7fe      	b.n	80034b6 <HardFault_Handler+0x4>

080034b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034bc:	e7fe      	b.n	80034bc <MemManage_Handler+0x4>

080034be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034be:	b480      	push	{r7}
 80034c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034c2:	e7fe      	b.n	80034c2 <BusFault_Handler+0x4>

080034c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034c8:	e7fe      	b.n	80034c8 <UsageFault_Handler+0x4>

080034ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034ca:	b480      	push	{r7}
 80034cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034ce:	bf00      	nop
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bc80      	pop	{r7}
 80034d4:	4770      	bx	lr

080034d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034d6:	b480      	push	{r7}
 80034d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034da:	bf00      	nop
 80034dc:	46bd      	mov	sp, r7
 80034de:	bc80      	pop	{r7}
 80034e0:	4770      	bx	lr

080034e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034e2:	b480      	push	{r7}
 80034e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034e6:	bf00      	nop
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bc80      	pop	{r7}
 80034ec:	4770      	bx	lr

080034ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034f2:	f000 fa2b 	bl	800394c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034f6:	bf00      	nop
 80034f8:	bd80      	pop	{r7, pc}
	...

080034fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003500:	4802      	ldr	r0, [pc, #8]	; (800350c <USART1_IRQHandler+0x10>)
 8003502:	f003 f88f 	bl	8006624 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003506:	bf00      	nop
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	20000b30 	.word	0x20000b30

08003510 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  return 1;
 8003514:	2301      	movs	r3, #1
}
 8003516:	4618      	mov	r0, r3
 8003518:	46bd      	mov	sp, r7
 800351a:	bc80      	pop	{r7}
 800351c:	4770      	bx	lr

0800351e <_kill>:

int _kill(int pid, int sig)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b082      	sub	sp, #8
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
 8003526:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003528:	f005 fa3e 	bl	80089a8 <__errno>
 800352c:	4603      	mov	r3, r0
 800352e:	2216      	movs	r2, #22
 8003530:	601a      	str	r2, [r3, #0]
  return -1;
 8003532:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003536:	4618      	mov	r0, r3
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <_exit>:

void _exit (int status)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b082      	sub	sp, #8
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003546:	f04f 31ff 	mov.w	r1, #4294967295
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff ffe7 	bl	800351e <_kill>
  while (1) {}    /* Make sure we hang here */
 8003550:	e7fe      	b.n	8003550 <_exit+0x12>

08003552 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b086      	sub	sp, #24
 8003556:	af00      	add	r7, sp, #0
 8003558:	60f8      	str	r0, [r7, #12]
 800355a:	60b9      	str	r1, [r7, #8]
 800355c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800355e:	2300      	movs	r3, #0
 8003560:	617b      	str	r3, [r7, #20]
 8003562:	e00a      	b.n	800357a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003564:	f3af 8000 	nop.w
 8003568:	4601      	mov	r1, r0
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	1c5a      	adds	r2, r3, #1
 800356e:	60ba      	str	r2, [r7, #8]
 8003570:	b2ca      	uxtb	r2, r1
 8003572:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	3301      	adds	r3, #1
 8003578:	617b      	str	r3, [r7, #20]
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	429a      	cmp	r2, r3
 8003580:	dbf0      	blt.n	8003564 <_read+0x12>
  }

  return len;
 8003582:	687b      	ldr	r3, [r7, #4]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3718      	adds	r7, #24
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003598:	2300      	movs	r3, #0
 800359a:	617b      	str	r3, [r7, #20]
 800359c:	e009      	b.n	80035b2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	60ba      	str	r2, [r7, #8]
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	3301      	adds	r3, #1
 80035b0:	617b      	str	r3, [r7, #20]
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	dbf1      	blt.n	800359e <_write+0x12>
  }
  return len;
 80035ba:	687b      	ldr	r3, [r7, #4]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <_close>:

int _close(int file)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bc80      	pop	{r7}
 80035d8:	4770      	bx	lr

080035da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
 80035e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035ea:	605a      	str	r2, [r3, #4]
  return 0;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr

080035f8 <_isatty>:

int _isatty(int file)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003600:	2301      	movs	r3, #1
}
 8003602:	4618      	mov	r0, r3
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr

0800360c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	bc80      	pop	{r7}
 8003622:	4770      	bx	lr

08003624 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800362c:	4a14      	ldr	r2, [pc, #80]	; (8003680 <_sbrk+0x5c>)
 800362e:	4b15      	ldr	r3, [pc, #84]	; (8003684 <_sbrk+0x60>)
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003638:	4b13      	ldr	r3, [pc, #76]	; (8003688 <_sbrk+0x64>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d102      	bne.n	8003646 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003640:	4b11      	ldr	r3, [pc, #68]	; (8003688 <_sbrk+0x64>)
 8003642:	4a12      	ldr	r2, [pc, #72]	; (800368c <_sbrk+0x68>)
 8003644:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003646:	4b10      	ldr	r3, [pc, #64]	; (8003688 <_sbrk+0x64>)
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4413      	add	r3, r2
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	429a      	cmp	r2, r3
 8003652:	d207      	bcs.n	8003664 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003654:	f005 f9a8 	bl	80089a8 <__errno>
 8003658:	4603      	mov	r3, r0
 800365a:	220c      	movs	r2, #12
 800365c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800365e:	f04f 33ff 	mov.w	r3, #4294967295
 8003662:	e009      	b.n	8003678 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003664:	4b08      	ldr	r3, [pc, #32]	; (8003688 <_sbrk+0x64>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800366a:	4b07      	ldr	r3, [pc, #28]	; (8003688 <_sbrk+0x64>)
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4413      	add	r3, r2
 8003672:	4a05      	ldr	r2, [pc, #20]	; (8003688 <_sbrk+0x64>)
 8003674:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003676:	68fb      	ldr	r3, [r7, #12]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	20005000 	.word	0x20005000
 8003684:	00000400 	.word	0x00000400
 8003688:	20000ae4 	.word	0x20000ae4
 800368c:	20000cc8 	.word	0x20000cc8

08003690 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003694:	bf00      	nop
 8003696:	46bd      	mov	sp, r7
 8003698:	bc80      	pop	{r7}
 800369a:	4770      	bx	lr

0800369c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036a2:	f107 0308 	add.w	r3, r7, #8
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	605a      	str	r2, [r3, #4]
 80036ac:	609a      	str	r2, [r3, #8]
 80036ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036b0:	463b      	mov	r3, r7
 80036b2:	2200      	movs	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80036b8:	4b1e      	ldr	r3, [pc, #120]	; (8003734 <MX_TIM1_Init+0x98>)
 80036ba:	4a1f      	ldr	r2, [pc, #124]	; (8003738 <MX_TIM1_Init+0x9c>)
 80036bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 70-1;
 80036be:	4b1d      	ldr	r3, [pc, #116]	; (8003734 <MX_TIM1_Init+0x98>)
 80036c0:	2245      	movs	r2, #69	; 0x45
 80036c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036c4:	4b1b      	ldr	r3, [pc, #108]	; (8003734 <MX_TIM1_Init+0x98>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65500;
 80036ca:	4b1a      	ldr	r3, [pc, #104]	; (8003734 <MX_TIM1_Init+0x98>)
 80036cc:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 80036d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036d2:	4b18      	ldr	r3, [pc, #96]	; (8003734 <MX_TIM1_Init+0x98>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80036d8:	4b16      	ldr	r3, [pc, #88]	; (8003734 <MX_TIM1_Init+0x98>)
 80036da:	2200      	movs	r2, #0
 80036dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036de:	4b15      	ldr	r3, [pc, #84]	; (8003734 <MX_TIM1_Init+0x98>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80036e4:	4813      	ldr	r0, [pc, #76]	; (8003734 <MX_TIM1_Init+0x98>)
 80036e6:	f002 fc6f 	bl	8005fc8 <HAL_TIM_Base_Init>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80036f0:	f7ff f968 	bl	80029c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80036fa:	f107 0308 	add.w	r3, r7, #8
 80036fe:	4619      	mov	r1, r3
 8003700:	480c      	ldr	r0, [pc, #48]	; (8003734 <MX_TIM1_Init+0x98>)
 8003702:	f002 fcfb 	bl	80060fc <HAL_TIM_ConfigClockSource>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800370c:	f7ff f95a 	bl	80029c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003710:	2300      	movs	r3, #0
 8003712:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003714:	2300      	movs	r3, #0
 8003716:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003718:	463b      	mov	r3, r7
 800371a:	4619      	mov	r1, r3
 800371c:	4805      	ldr	r0, [pc, #20]	; (8003734 <MX_TIM1_Init+0x98>)
 800371e:	f002 fead 	bl	800647c <HAL_TIMEx_MasterConfigSynchronization>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003728:	f7ff f94c 	bl	80029c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800372c:	bf00      	nop
 800372e:	3718      	adds	r7, #24
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	20000ae8 	.word	0x20000ae8
 8003738:	40012c00 	.word	0x40012c00

0800373c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a09      	ldr	r2, [pc, #36]	; (8003770 <HAL_TIM_Base_MspInit+0x34>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d10b      	bne.n	8003766 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800374e:	4b09      	ldr	r3, [pc, #36]	; (8003774 <HAL_TIM_Base_MspInit+0x38>)
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	4a08      	ldr	r2, [pc, #32]	; (8003774 <HAL_TIM_Base_MspInit+0x38>)
 8003754:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003758:	6193      	str	r3, [r2, #24]
 800375a:	4b06      	ldr	r3, [pc, #24]	; (8003774 <HAL_TIM_Base_MspInit+0x38>)
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003766:	bf00      	nop
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	bc80      	pop	{r7}
 800376e:	4770      	bx	lr
 8003770:	40012c00 	.word	0x40012c00
 8003774:	40021000 	.word	0x40021000

08003778 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800377c:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <MX_USART1_UART_Init+0x4c>)
 800377e:	4a12      	ldr	r2, [pc, #72]	; (80037c8 <MX_USART1_UART_Init+0x50>)
 8003780:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003782:	4b10      	ldr	r3, [pc, #64]	; (80037c4 <MX_USART1_UART_Init+0x4c>)
 8003784:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003788:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800378a:	4b0e      	ldr	r3, [pc, #56]	; (80037c4 <MX_USART1_UART_Init+0x4c>)
 800378c:	2200      	movs	r2, #0
 800378e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003790:	4b0c      	ldr	r3, [pc, #48]	; (80037c4 <MX_USART1_UART_Init+0x4c>)
 8003792:	2200      	movs	r2, #0
 8003794:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003796:	4b0b      	ldr	r3, [pc, #44]	; (80037c4 <MX_USART1_UART_Init+0x4c>)
 8003798:	2200      	movs	r2, #0
 800379a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800379c:	4b09      	ldr	r3, [pc, #36]	; (80037c4 <MX_USART1_UART_Init+0x4c>)
 800379e:	220c      	movs	r2, #12
 80037a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037a2:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <MX_USART1_UART_Init+0x4c>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80037a8:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <MX_USART1_UART_Init+0x4c>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80037ae:	4805      	ldr	r0, [pc, #20]	; (80037c4 <MX_USART1_UART_Init+0x4c>)
 80037b0:	f002 fec2 	bl	8006538 <HAL_UART_Init>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80037ba:	f7ff f903 	bl	80029c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80037be:	bf00      	nop
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	20000b30 	.word	0x20000b30
 80037c8:	40013800 	.word	0x40013800

080037cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d4:	f107 0310 	add.w	r3, r7, #16
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	605a      	str	r2, [r3, #4]
 80037de:	609a      	str	r2, [r3, #8]
 80037e0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a20      	ldr	r2, [pc, #128]	; (8003868 <HAL_UART_MspInit+0x9c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d139      	bne.n	8003860 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80037ec:	4b1f      	ldr	r3, [pc, #124]	; (800386c <HAL_UART_MspInit+0xa0>)
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	4a1e      	ldr	r2, [pc, #120]	; (800386c <HAL_UART_MspInit+0xa0>)
 80037f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037f6:	6193      	str	r3, [r2, #24]
 80037f8:	4b1c      	ldr	r3, [pc, #112]	; (800386c <HAL_UART_MspInit+0xa0>)
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003804:	4b19      	ldr	r3, [pc, #100]	; (800386c <HAL_UART_MspInit+0xa0>)
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	4a18      	ldr	r2, [pc, #96]	; (800386c <HAL_UART_MspInit+0xa0>)
 800380a:	f043 0304 	orr.w	r3, r3, #4
 800380e:	6193      	str	r3, [r2, #24]
 8003810:	4b16      	ldr	r3, [pc, #88]	; (800386c <HAL_UART_MspInit+0xa0>)
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800381c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003820:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003822:	2302      	movs	r3, #2
 8003824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003826:	2303      	movs	r3, #3
 8003828:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800382a:	f107 0310 	add.w	r3, r7, #16
 800382e:	4619      	mov	r1, r3
 8003830:	480f      	ldr	r0, [pc, #60]	; (8003870 <HAL_UART_MspInit+0xa4>)
 8003832:	f000 feb7 	bl	80045a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800383a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003840:	2300      	movs	r3, #0
 8003842:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003844:	f107 0310 	add.w	r3, r7, #16
 8003848:	4619      	mov	r1, r3
 800384a:	4809      	ldr	r0, [pc, #36]	; (8003870 <HAL_UART_MspInit+0xa4>)
 800384c:	f000 feaa 	bl	80045a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003850:	2200      	movs	r2, #0
 8003852:	2100      	movs	r1, #0
 8003854:	2025      	movs	r0, #37	; 0x25
 8003856:	f000 fdbc 	bl	80043d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800385a:	2025      	movs	r0, #37	; 0x25
 800385c:	f000 fdd5 	bl	800440a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003860:	bf00      	nop
 8003862:	3720      	adds	r7, #32
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40013800 	.word	0x40013800
 800386c:	40021000 	.word	0x40021000
 8003870:	40010800 	.word	0x40010800

08003874 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003874:	f7ff ff0c 	bl	8003690 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003878:	480b      	ldr	r0, [pc, #44]	; (80038a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800387a:	490c      	ldr	r1, [pc, #48]	; (80038ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800387c:	4a0c      	ldr	r2, [pc, #48]	; (80038b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800387e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003880:	e002      	b.n	8003888 <LoopCopyDataInit>

08003882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003886:	3304      	adds	r3, #4

08003888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800388a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800388c:	d3f9      	bcc.n	8003882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800388e:	4a09      	ldr	r2, [pc, #36]	; (80038b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003890:	4c09      	ldr	r4, [pc, #36]	; (80038b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003894:	e001      	b.n	800389a <LoopFillZerobss>

08003896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003898:	3204      	adds	r2, #4

0800389a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800389a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800389c:	d3fb      	bcc.n	8003896 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800389e:	f005 f889 	bl	80089b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80038a2:	f7fe fddd 	bl	8002460 <main>
  bx lr
 80038a6:	4770      	bx	lr
  ldr r0, =_sdata
 80038a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038ac:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80038b0:	0800d9d0 	.word	0x0800d9d0
  ldr r2, =_sbss
 80038b4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80038b8:	20000cc8 	.word	0x20000cc8

080038bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038bc:	e7fe      	b.n	80038bc <ADC1_2_IRQHandler>
	...

080038c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038c4:	4b08      	ldr	r3, [pc, #32]	; (80038e8 <HAL_Init+0x28>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a07      	ldr	r2, [pc, #28]	; (80038e8 <HAL_Init+0x28>)
 80038ca:	f043 0310 	orr.w	r3, r3, #16
 80038ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038d0:	2003      	movs	r0, #3
 80038d2:	f000 fd73 	bl	80043bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038d6:	200f      	movs	r0, #15
 80038d8:	f000 f808 	bl	80038ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038dc:	f7ff fdb4 	bl	8003448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40022000 	.word	0x40022000

080038ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038f4:	4b12      	ldr	r3, [pc, #72]	; (8003940 <HAL_InitTick+0x54>)
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	4b12      	ldr	r3, [pc, #72]	; (8003944 <HAL_InitTick+0x58>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	4619      	mov	r1, r3
 80038fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003902:	fbb3 f3f1 	udiv	r3, r3, r1
 8003906:	fbb2 f3f3 	udiv	r3, r2, r3
 800390a:	4618      	mov	r0, r3
 800390c:	f000 fd8b 	bl	8004426 <HAL_SYSTICK_Config>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e00e      	b.n	8003938 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b0f      	cmp	r3, #15
 800391e:	d80a      	bhi.n	8003936 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003920:	2200      	movs	r2, #0
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	f04f 30ff 	mov.w	r0, #4294967295
 8003928:	f000 fd53 	bl	80043d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800392c:	4a06      	ldr	r2, [pc, #24]	; (8003948 <HAL_InitTick+0x5c>)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	e000      	b.n	8003938 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
}
 8003938:	4618      	mov	r0, r3
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	2000000c 	.word	0x2000000c
 8003944:	20000014 	.word	0x20000014
 8003948:	20000010 	.word	0x20000010

0800394c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003950:	4b05      	ldr	r3, [pc, #20]	; (8003968 <HAL_IncTick+0x1c>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	461a      	mov	r2, r3
 8003956:	4b05      	ldr	r3, [pc, #20]	; (800396c <HAL_IncTick+0x20>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4413      	add	r3, r2
 800395c:	4a03      	ldr	r2, [pc, #12]	; (800396c <HAL_IncTick+0x20>)
 800395e:	6013      	str	r3, [r2, #0]
}
 8003960:	bf00      	nop
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr
 8003968:	20000014 	.word	0x20000014
 800396c:	20000b78 	.word	0x20000b78

08003970 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  return uwTick;
 8003974:	4b02      	ldr	r3, [pc, #8]	; (8003980 <HAL_GetTick+0x10>)
 8003976:	681b      	ldr	r3, [r3, #0]
}
 8003978:	4618      	mov	r0, r3
 800397a:	46bd      	mov	sp, r7
 800397c:	bc80      	pop	{r7}
 800397e:	4770      	bx	lr
 8003980:	20000b78 	.word	0x20000b78

08003984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800398c:	f7ff fff0 	bl	8003970 <HAL_GetTick>
 8003990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399c:	d005      	beq.n	80039aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800399e:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <HAL_Delay+0x44>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4413      	add	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039aa:	bf00      	nop
 80039ac:	f7ff ffe0 	bl	8003970 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d8f7      	bhi.n	80039ac <HAL_Delay+0x28>
  {
  }
}
 80039bc:	bf00      	nop
 80039be:	bf00      	nop
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20000014 	.word	0x20000014

080039cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039d4:	2300      	movs	r3, #0
 80039d6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e0be      	b.n	8003b6c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d109      	bne.n	8003a10 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7fd fbb0 	bl	8001170 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 fbc5 	bl	80041a0 <ADC_ConversionStop_Disable>
 8003a16:	4603      	mov	r3, r0
 8003a18:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1e:	f003 0310 	and.w	r3, r3, #16
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f040 8099 	bne.w	8003b5a <HAL_ADC_Init+0x18e>
 8003a28:	7dfb      	ldrb	r3, [r7, #23]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f040 8095 	bne.w	8003b5a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a34:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a38:	f023 0302 	bic.w	r3, r3, #2
 8003a3c:	f043 0202 	orr.w	r2, r3, #2
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003a4c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	7b1b      	ldrb	r3, [r3, #12]
 8003a52:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003a54:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a64:	d003      	beq.n	8003a6e <HAL_ADC_Init+0xa2>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d102      	bne.n	8003a74 <HAL_ADC_Init+0xa8>
 8003a6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a72:	e000      	b.n	8003a76 <HAL_ADC_Init+0xaa>
 8003a74:	2300      	movs	r3, #0
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	7d1b      	ldrb	r3, [r3, #20]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d119      	bne.n	8003ab8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	7b1b      	ldrb	r3, [r3, #12]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d109      	bne.n	8003aa0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	3b01      	subs	r3, #1
 8003a92:	035a      	lsls	r2, r3, #13
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a9c:	613b      	str	r3, [r7, #16]
 8003a9e:	e00b      	b.n	8003ab8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa4:	f043 0220 	orr.w	r2, r3, #32
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	f043 0201 	orr.w	r2, r3, #1
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	4b28      	ldr	r3, [pc, #160]	; (8003b74 <HAL_ADC_Init+0x1a8>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6812      	ldr	r2, [r2, #0]
 8003ada:	68b9      	ldr	r1, [r7, #8]
 8003adc:	430b      	orrs	r3, r1
 8003ade:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ae8:	d003      	beq.n	8003af2 <HAL_ADC_Init+0x126>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d104      	bne.n	8003afc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	051b      	lsls	r3, r3, #20
 8003afa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689a      	ldr	r2, [r3, #8]
 8003b16:	4b18      	ldr	r3, [pc, #96]	; (8003b78 <HAL_ADC_Init+0x1ac>)
 8003b18:	4013      	ands	r3, r2
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d10b      	bne.n	8003b38 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2a:	f023 0303 	bic.w	r3, r3, #3
 8003b2e:	f043 0201 	orr.w	r2, r3, #1
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003b36:	e018      	b.n	8003b6a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3c:	f023 0312 	bic.w	r3, r3, #18
 8003b40:	f043 0210 	orr.w	r2, r3, #16
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	f043 0201 	orr.w	r2, r3, #1
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003b58:	e007      	b.n	8003b6a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5e:	f043 0210 	orr.w	r2, r3, #16
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	ffe1f7fd 	.word	0xffe1f7fd
 8003b78:	ff1f0efe 	.word	0xff1f0efe

08003b7c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b84:	2300      	movs	r3, #0
 8003b86:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_ADC_Start+0x1a>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e098      	b.n	8003cc8 <HAL_ADC_Start+0x14c>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 faa4 	bl	80040ec <ADC_Enable>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f040 8087 	bne.w	8003cbe <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb8:	f023 0301 	bic.w	r3, r3, #1
 8003bbc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a41      	ldr	r2, [pc, #260]	; (8003cd0 <HAL_ADC_Start+0x154>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d105      	bne.n	8003bda <HAL_ADC_Start+0x5e>
 8003bce:	4b41      	ldr	r3, [pc, #260]	; (8003cd4 <HAL_ADC_Start+0x158>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d115      	bne.n	8003c06 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bde:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d026      	beq.n	8003c42 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003bfc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c04:	e01d      	b.n	8003c42 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a2f      	ldr	r2, [pc, #188]	; (8003cd4 <HAL_ADC_Start+0x158>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d004      	beq.n	8003c26 <HAL_ADC_Start+0xaa>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a2b      	ldr	r2, [pc, #172]	; (8003cd0 <HAL_ADC_Start+0x154>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d10d      	bne.n	8003c42 <HAL_ADC_Start+0xc6>
 8003c26:	4b2b      	ldr	r3, [pc, #172]	; (8003cd4 <HAL_ADC_Start+0x158>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d007      	beq.n	8003c42 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c36:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c3a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d006      	beq.n	8003c5c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c52:	f023 0206 	bic.w	r2, r3, #6
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c5a:	e002      	b.n	8003c62 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f06f 0202 	mvn.w	r2, #2
 8003c72:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003c7e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003c82:	d113      	bne.n	8003cac <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003c88:	4a11      	ldr	r2, [pc, #68]	; (8003cd0 <HAL_ADC_Start+0x154>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d105      	bne.n	8003c9a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003c8e:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <HAL_ADC_Start+0x158>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d108      	bne.n	8003cac <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003ca8:	609a      	str	r2, [r3, #8]
 8003caa:	e00c      	b.n	8003cc6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003cba:	609a      	str	r2, [r3, #8]
 8003cbc:	e003      	b.n	8003cc6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40012800 	.word	0x40012800
 8003cd4:	40012400 	.word	0x40012400

08003cd8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003cd8:	b590      	push	{r4, r7, lr}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003cee:	f7ff fe3f 	bl	8003970 <HAL_GetTick>
 8003cf2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00b      	beq.n	8003d1a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d06:	f043 0220 	orr.w	r2, r3, #32
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e0d3      	b.n	8003ec2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d131      	bne.n	8003d8c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d12a      	bne.n	8003d8c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003d36:	e021      	b.n	8003d7c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3e:	d01d      	beq.n	8003d7c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d007      	beq.n	8003d56 <HAL_ADC_PollForConversion+0x7e>
 8003d46:	f7ff fe13 	bl	8003970 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d212      	bcs.n	8003d7c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10b      	bne.n	8003d7c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d68:	f043 0204 	orr.w	r2, r3, #4
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e0a2      	b.n	8003ec2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0d6      	beq.n	8003d38 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003d8a:	e070      	b.n	8003e6e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003d8c:	4b4f      	ldr	r3, [pc, #316]	; (8003ecc <HAL_ADC_PollForConversion+0x1f4>)
 8003d8e:	681c      	ldr	r4, [r3, #0]
 8003d90:	2002      	movs	r0, #2
 8003d92:	f002 f863 	bl	8005e5c <HAL_RCCEx_GetPeriphCLKFreq>
 8003d96:	4603      	mov	r3, r0
 8003d98:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6919      	ldr	r1, [r3, #16]
 8003da2:	4b4b      	ldr	r3, [pc, #300]	; (8003ed0 <HAL_ADC_PollForConversion+0x1f8>)
 8003da4:	400b      	ands	r3, r1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d118      	bne.n	8003ddc <HAL_ADC_PollForConversion+0x104>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68d9      	ldr	r1, [r3, #12]
 8003db0:	4b48      	ldr	r3, [pc, #288]	; (8003ed4 <HAL_ADC_PollForConversion+0x1fc>)
 8003db2:	400b      	ands	r3, r1
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d111      	bne.n	8003ddc <HAL_ADC_PollForConversion+0x104>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6919      	ldr	r1, [r3, #16]
 8003dbe:	4b46      	ldr	r3, [pc, #280]	; (8003ed8 <HAL_ADC_PollForConversion+0x200>)
 8003dc0:	400b      	ands	r3, r1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d108      	bne.n	8003dd8 <HAL_ADC_PollForConversion+0x100>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68d9      	ldr	r1, [r3, #12]
 8003dcc:	4b43      	ldr	r3, [pc, #268]	; (8003edc <HAL_ADC_PollForConversion+0x204>)
 8003dce:	400b      	ands	r3, r1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_ADC_PollForConversion+0x100>
 8003dd4:	2314      	movs	r3, #20
 8003dd6:	e020      	b.n	8003e1a <HAL_ADC_PollForConversion+0x142>
 8003dd8:	2329      	movs	r3, #41	; 0x29
 8003dda:	e01e      	b.n	8003e1a <HAL_ADC_PollForConversion+0x142>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6919      	ldr	r1, [r3, #16]
 8003de2:	4b3d      	ldr	r3, [pc, #244]	; (8003ed8 <HAL_ADC_PollForConversion+0x200>)
 8003de4:	400b      	ands	r3, r1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d106      	bne.n	8003df8 <HAL_ADC_PollForConversion+0x120>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68d9      	ldr	r1, [r3, #12]
 8003df0:	4b3a      	ldr	r3, [pc, #232]	; (8003edc <HAL_ADC_PollForConversion+0x204>)
 8003df2:	400b      	ands	r3, r1
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00d      	beq.n	8003e14 <HAL_ADC_PollForConversion+0x13c>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6919      	ldr	r1, [r3, #16]
 8003dfe:	4b38      	ldr	r3, [pc, #224]	; (8003ee0 <HAL_ADC_PollForConversion+0x208>)
 8003e00:	400b      	ands	r3, r1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d108      	bne.n	8003e18 <HAL_ADC_PollForConversion+0x140>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68d9      	ldr	r1, [r3, #12]
 8003e0c:	4b34      	ldr	r3, [pc, #208]	; (8003ee0 <HAL_ADC_PollForConversion+0x208>)
 8003e0e:	400b      	ands	r3, r1
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_ADC_PollForConversion+0x140>
 8003e14:	2354      	movs	r3, #84	; 0x54
 8003e16:	e000      	b.n	8003e1a <HAL_ADC_PollForConversion+0x142>
 8003e18:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003e1a:	fb02 f303 	mul.w	r3, r2, r3
 8003e1e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003e20:	e021      	b.n	8003e66 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e28:	d01a      	beq.n	8003e60 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d007      	beq.n	8003e40 <HAL_ADC_PollForConversion+0x168>
 8003e30:	f7ff fd9e 	bl	8003970 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d20f      	bcs.n	8003e60 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d90b      	bls.n	8003e60 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4c:	f043 0204 	orr.w	r2, r3, #4
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e030      	b.n	8003ec2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	3301      	adds	r3, #1
 8003e64:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d8d9      	bhi.n	8003e22 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f06f 0212 	mvn.w	r2, #18
 8003e76:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003e8e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003e92:	d115      	bne.n	8003ec0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d111      	bne.n	8003ec0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d105      	bne.n	8003ec0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb8:	f043 0201 	orr.w	r2, r3, #1
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	371c      	adds	r7, #28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd90      	pop	{r4, r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	2000000c 	.word	0x2000000c
 8003ed0:	24924924 	.word	0x24924924
 8003ed4:	00924924 	.word	0x00924924
 8003ed8:	12492492 	.word	0x12492492
 8003edc:	00492492 	.word	0x00492492
 8003ee0:	00249249 	.word	0x00249249

08003ee4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bc80      	pop	{r7}
 8003efa:	4770      	bx	lr

08003efc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f06:	2300      	movs	r3, #0
 8003f08:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d101      	bne.n	8003f1c <HAL_ADC_ConfigChannel+0x20>
 8003f18:	2302      	movs	r3, #2
 8003f1a:	e0dc      	b.n	80040d6 <HAL_ADC_ConfigChannel+0x1da>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	2b06      	cmp	r3, #6
 8003f2a:	d81c      	bhi.n	8003f66 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	4613      	mov	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	3b05      	subs	r3, #5
 8003f3e:	221f      	movs	r2, #31
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	43db      	mvns	r3, r3
 8003f46:	4019      	ands	r1, r3
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	6818      	ldr	r0, [r3, #0]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	4613      	mov	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	3b05      	subs	r3, #5
 8003f58:	fa00 f203 	lsl.w	r2, r0, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	635a      	str	r2, [r3, #52]	; 0x34
 8003f64:	e03c      	b.n	8003fe0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2b0c      	cmp	r3, #12
 8003f6c:	d81c      	bhi.n	8003fa8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	3b23      	subs	r3, #35	; 0x23
 8003f80:	221f      	movs	r2, #31
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	43db      	mvns	r3, r3
 8003f88:	4019      	ands	r1, r3
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	6818      	ldr	r0, [r3, #0]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	4613      	mov	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	3b23      	subs	r3, #35	; 0x23
 8003f9a:	fa00 f203 	lsl.w	r2, r0, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	631a      	str	r2, [r3, #48]	; 0x30
 8003fa6:	e01b      	b.n	8003fe0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	3b41      	subs	r3, #65	; 0x41
 8003fba:	221f      	movs	r2, #31
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	4019      	ands	r1, r3
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	6818      	ldr	r0, [r3, #0]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	3b41      	subs	r3, #65	; 0x41
 8003fd4:	fa00 f203 	lsl.w	r2, r0, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b09      	cmp	r3, #9
 8003fe6:	d91c      	bls.n	8004022 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68d9      	ldr	r1, [r3, #12]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	4413      	add	r3, r2
 8003ff8:	3b1e      	subs	r3, #30
 8003ffa:	2207      	movs	r2, #7
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	43db      	mvns	r3, r3
 8004002:	4019      	ands	r1, r3
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	6898      	ldr	r0, [r3, #8]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	4613      	mov	r3, r2
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	4413      	add	r3, r2
 8004012:	3b1e      	subs	r3, #30
 8004014:	fa00 f203 	lsl.w	r2, r0, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	60da      	str	r2, [r3, #12]
 8004020:	e019      	b.n	8004056 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6919      	ldr	r1, [r3, #16]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	4613      	mov	r3, r2
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	4413      	add	r3, r2
 8004032:	2207      	movs	r2, #7
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	43db      	mvns	r3, r3
 800403a:	4019      	ands	r1, r3
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	6898      	ldr	r0, [r3, #8]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	4613      	mov	r3, r2
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	4413      	add	r3, r2
 800404a:	fa00 f203 	lsl.w	r2, r0, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b10      	cmp	r3, #16
 800405c:	d003      	beq.n	8004066 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004062:	2b11      	cmp	r3, #17
 8004064:	d132      	bne.n	80040cc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a1d      	ldr	r2, [pc, #116]	; (80040e0 <HAL_ADC_ConfigChannel+0x1e4>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d125      	bne.n	80040bc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d126      	bne.n	80040cc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800408c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b10      	cmp	r3, #16
 8004094:	d11a      	bne.n	80040cc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004096:	4b13      	ldr	r3, [pc, #76]	; (80040e4 <HAL_ADC_ConfigChannel+0x1e8>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a13      	ldr	r2, [pc, #76]	; (80040e8 <HAL_ADC_ConfigChannel+0x1ec>)
 800409c:	fba2 2303 	umull	r2, r3, r2, r3
 80040a0:	0c9a      	lsrs	r2, r3, #18
 80040a2:	4613      	mov	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4413      	add	r3, r2
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80040ac:	e002      	b.n	80040b4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	3b01      	subs	r3, #1
 80040b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f9      	bne.n	80040ae <HAL_ADC_ConfigChannel+0x1b2>
 80040ba:	e007      	b.n	80040cc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c0:	f043 0220 	orr.w	r2, r3, #32
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	bc80      	pop	{r7}
 80040de:	4770      	bx	lr
 80040e0:	40012400 	.word	0x40012400
 80040e4:	2000000c 	.word	0x2000000c
 80040e8:	431bde83 	.word	0x431bde83

080040ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b01      	cmp	r3, #1
 8004108:	d040      	beq.n	800418c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f042 0201 	orr.w	r2, r2, #1
 8004118:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800411a:	4b1f      	ldr	r3, [pc, #124]	; (8004198 <ADC_Enable+0xac>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a1f      	ldr	r2, [pc, #124]	; (800419c <ADC_Enable+0xb0>)
 8004120:	fba2 2303 	umull	r2, r3, r2, r3
 8004124:	0c9b      	lsrs	r3, r3, #18
 8004126:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004128:	e002      	b.n	8004130 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	3b01      	subs	r3, #1
 800412e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1f9      	bne.n	800412a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004136:	f7ff fc1b 	bl	8003970 <HAL_GetTick>
 800413a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800413c:	e01f      	b.n	800417e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800413e:	f7ff fc17 	bl	8003970 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d918      	bls.n	800417e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b01      	cmp	r3, #1
 8004158:	d011      	beq.n	800417e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415e:	f043 0210 	orr.w	r2, r3, #16
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416a:	f043 0201 	orr.w	r2, r3, #1
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e007      	b.n	800418e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b01      	cmp	r3, #1
 800418a:	d1d8      	bne.n	800413e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	2000000c 	.word	0x2000000c
 800419c:	431bde83 	.word	0x431bde83

080041a0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d12e      	bne.n	8004218 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0201 	bic.w	r2, r2, #1
 80041c8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80041ca:	f7ff fbd1 	bl	8003970 <HAL_GetTick>
 80041ce:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80041d0:	e01b      	b.n	800420a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80041d2:	f7ff fbcd 	bl	8003970 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d914      	bls.n	800420a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d10d      	bne.n	800420a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f2:	f043 0210 	orr.w	r2, r3, #16
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fe:	f043 0201 	orr.w	r2, r3, #1
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e007      	b.n	800421a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b01      	cmp	r3, #1
 8004216:	d0dc      	beq.n	80041d2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
	...

08004224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f003 0307 	and.w	r3, r3, #7
 8004232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004234:	4b0c      	ldr	r3, [pc, #48]	; (8004268 <__NVIC_SetPriorityGrouping+0x44>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004240:	4013      	ands	r3, r2
 8004242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800424c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004256:	4a04      	ldr	r2, [pc, #16]	; (8004268 <__NVIC_SetPriorityGrouping+0x44>)
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	60d3      	str	r3, [r2, #12]
}
 800425c:	bf00      	nop
 800425e:	3714      	adds	r7, #20
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	e000ed00 	.word	0xe000ed00

0800426c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004270:	4b04      	ldr	r3, [pc, #16]	; (8004284 <__NVIC_GetPriorityGrouping+0x18>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	0a1b      	lsrs	r3, r3, #8
 8004276:	f003 0307 	and.w	r3, r3, #7
}
 800427a:	4618      	mov	r0, r3
 800427c:	46bd      	mov	sp, r7
 800427e:	bc80      	pop	{r7}
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	e000ed00 	.word	0xe000ed00

08004288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	4603      	mov	r3, r0
 8004290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004296:	2b00      	cmp	r3, #0
 8004298:	db0b      	blt.n	80042b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800429a:	79fb      	ldrb	r3, [r7, #7]
 800429c:	f003 021f 	and.w	r2, r3, #31
 80042a0:	4906      	ldr	r1, [pc, #24]	; (80042bc <__NVIC_EnableIRQ+0x34>)
 80042a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a6:	095b      	lsrs	r3, r3, #5
 80042a8:	2001      	movs	r0, #1
 80042aa:	fa00 f202 	lsl.w	r2, r0, r2
 80042ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bc80      	pop	{r7}
 80042ba:	4770      	bx	lr
 80042bc:	e000e100 	.word	0xe000e100

080042c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	4603      	mov	r3, r0
 80042c8:	6039      	str	r1, [r7, #0]
 80042ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	db0a      	blt.n	80042ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	490c      	ldr	r1, [pc, #48]	; (800430c <__NVIC_SetPriority+0x4c>)
 80042da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042de:	0112      	lsls	r2, r2, #4
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	440b      	add	r3, r1
 80042e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042e8:	e00a      	b.n	8004300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	4908      	ldr	r1, [pc, #32]	; (8004310 <__NVIC_SetPriority+0x50>)
 80042f0:	79fb      	ldrb	r3, [r7, #7]
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	3b04      	subs	r3, #4
 80042f8:	0112      	lsls	r2, r2, #4
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	440b      	add	r3, r1
 80042fe:	761a      	strb	r2, [r3, #24]
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	bc80      	pop	{r7}
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	e000e100 	.word	0xe000e100
 8004310:	e000ed00 	.word	0xe000ed00

08004314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004314:	b480      	push	{r7}
 8004316:	b089      	sub	sp, #36	; 0x24
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	f1c3 0307 	rsb	r3, r3, #7
 800432e:	2b04      	cmp	r3, #4
 8004330:	bf28      	it	cs
 8004332:	2304      	movcs	r3, #4
 8004334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	3304      	adds	r3, #4
 800433a:	2b06      	cmp	r3, #6
 800433c:	d902      	bls.n	8004344 <NVIC_EncodePriority+0x30>
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	3b03      	subs	r3, #3
 8004342:	e000      	b.n	8004346 <NVIC_EncodePriority+0x32>
 8004344:	2300      	movs	r3, #0
 8004346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004348:	f04f 32ff 	mov.w	r2, #4294967295
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	43da      	mvns	r2, r3
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	401a      	ands	r2, r3
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800435c:	f04f 31ff 	mov.w	r1, #4294967295
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	fa01 f303 	lsl.w	r3, r1, r3
 8004366:	43d9      	mvns	r1, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800436c:	4313      	orrs	r3, r2
         );
}
 800436e:	4618      	mov	r0, r3
 8004370:	3724      	adds	r7, #36	; 0x24
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr

08004378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3b01      	subs	r3, #1
 8004384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004388:	d301      	bcc.n	800438e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800438a:	2301      	movs	r3, #1
 800438c:	e00f      	b.n	80043ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800438e:	4a0a      	ldr	r2, [pc, #40]	; (80043b8 <SysTick_Config+0x40>)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3b01      	subs	r3, #1
 8004394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004396:	210f      	movs	r1, #15
 8004398:	f04f 30ff 	mov.w	r0, #4294967295
 800439c:	f7ff ff90 	bl	80042c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043a0:	4b05      	ldr	r3, [pc, #20]	; (80043b8 <SysTick_Config+0x40>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043a6:	4b04      	ldr	r3, [pc, #16]	; (80043b8 <SysTick_Config+0x40>)
 80043a8:	2207      	movs	r2, #7
 80043aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	e000e010 	.word	0xe000e010

080043bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7ff ff2d 	bl	8004224 <__NVIC_SetPriorityGrouping>
}
 80043ca:	bf00      	nop
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b086      	sub	sp, #24
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	4603      	mov	r3, r0
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	607a      	str	r2, [r7, #4]
 80043de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043e4:	f7ff ff42 	bl	800426c <__NVIC_GetPriorityGrouping>
 80043e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	68b9      	ldr	r1, [r7, #8]
 80043ee:	6978      	ldr	r0, [r7, #20]
 80043f0:	f7ff ff90 	bl	8004314 <NVIC_EncodePriority>
 80043f4:	4602      	mov	r2, r0
 80043f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043fa:	4611      	mov	r1, r2
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff ff5f 	bl	80042c0 <__NVIC_SetPriority>
}
 8004402:	bf00      	nop
 8004404:	3718      	adds	r7, #24
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b082      	sub	sp, #8
 800440e:	af00      	add	r7, sp, #0
 8004410:	4603      	mov	r3, r0
 8004412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff ff35 	bl	8004288 <__NVIC_EnableIRQ>
}
 800441e:	bf00      	nop
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b082      	sub	sp, #8
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7ff ffa2 	bl	8004378 <SysTick_Config>
 8004434:	4603      	mov	r3, r0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800443e:	b480      	push	{r7}
 8004440:	b085      	sub	sp, #20
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004446:	2300      	movs	r3, #0
 8004448:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d008      	beq.n	8004468 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2204      	movs	r2, #4
 800445a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e020      	b.n	80044aa <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 020e 	bic.w	r2, r2, #14
 8004476:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0201 	bic.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004490:	2101      	movs	r1, #1
 8004492:	fa01 f202 	lsl.w	r2, r1, r2
 8004496:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr

080044b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044bc:	2300      	movs	r3, #0
 80044be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d005      	beq.n	80044d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2204      	movs	r2, #4
 80044d0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	73fb      	strb	r3, [r7, #15]
 80044d6:	e051      	b.n	800457c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 020e 	bic.w	r2, r2, #14
 80044e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 0201 	bic.w	r2, r2, #1
 80044f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a22      	ldr	r2, [pc, #136]	; (8004588 <HAL_DMA_Abort_IT+0xd4>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d029      	beq.n	8004556 <HAL_DMA_Abort_IT+0xa2>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a21      	ldr	r2, [pc, #132]	; (800458c <HAL_DMA_Abort_IT+0xd8>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d022      	beq.n	8004552 <HAL_DMA_Abort_IT+0x9e>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a1f      	ldr	r2, [pc, #124]	; (8004590 <HAL_DMA_Abort_IT+0xdc>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d01a      	beq.n	800454c <HAL_DMA_Abort_IT+0x98>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a1e      	ldr	r2, [pc, #120]	; (8004594 <HAL_DMA_Abort_IT+0xe0>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d012      	beq.n	8004546 <HAL_DMA_Abort_IT+0x92>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a1c      	ldr	r2, [pc, #112]	; (8004598 <HAL_DMA_Abort_IT+0xe4>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d00a      	beq.n	8004540 <HAL_DMA_Abort_IT+0x8c>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a1b      	ldr	r2, [pc, #108]	; (800459c <HAL_DMA_Abort_IT+0xe8>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d102      	bne.n	800453a <HAL_DMA_Abort_IT+0x86>
 8004534:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004538:	e00e      	b.n	8004558 <HAL_DMA_Abort_IT+0xa4>
 800453a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800453e:	e00b      	b.n	8004558 <HAL_DMA_Abort_IT+0xa4>
 8004540:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004544:	e008      	b.n	8004558 <HAL_DMA_Abort_IT+0xa4>
 8004546:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800454a:	e005      	b.n	8004558 <HAL_DMA_Abort_IT+0xa4>
 800454c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004550:	e002      	b.n	8004558 <HAL_DMA_Abort_IT+0xa4>
 8004552:	2310      	movs	r3, #16
 8004554:	e000      	b.n	8004558 <HAL_DMA_Abort_IT+0xa4>
 8004556:	2301      	movs	r3, #1
 8004558:	4a11      	ldr	r2, [pc, #68]	; (80045a0 <HAL_DMA_Abort_IT+0xec>)
 800455a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	4798      	blx	r3
    } 
  }
  return status;
 800457c:	7bfb      	ldrb	r3, [r7, #15]
}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	40020008 	.word	0x40020008
 800458c:	4002001c 	.word	0x4002001c
 8004590:	40020030 	.word	0x40020030
 8004594:	40020044 	.word	0x40020044
 8004598:	40020058 	.word	0x40020058
 800459c:	4002006c 	.word	0x4002006c
 80045a0:	40020000 	.word	0x40020000

080045a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b08b      	sub	sp, #44	; 0x2c
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045ae:	2300      	movs	r3, #0
 80045b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80045b2:	2300      	movs	r3, #0
 80045b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045b6:	e169      	b.n	800488c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80045b8:	2201      	movs	r2, #1
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	fa02 f303 	lsl.w	r3, r2, r3
 80045c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	69fa      	ldr	r2, [r7, #28]
 80045c8:	4013      	ands	r3, r2
 80045ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	f040 8158 	bne.w	8004886 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	4a9a      	ldr	r2, [pc, #616]	; (8004844 <HAL_GPIO_Init+0x2a0>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d05e      	beq.n	800469e <HAL_GPIO_Init+0xfa>
 80045e0:	4a98      	ldr	r2, [pc, #608]	; (8004844 <HAL_GPIO_Init+0x2a0>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d875      	bhi.n	80046d2 <HAL_GPIO_Init+0x12e>
 80045e6:	4a98      	ldr	r2, [pc, #608]	; (8004848 <HAL_GPIO_Init+0x2a4>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d058      	beq.n	800469e <HAL_GPIO_Init+0xfa>
 80045ec:	4a96      	ldr	r2, [pc, #600]	; (8004848 <HAL_GPIO_Init+0x2a4>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d86f      	bhi.n	80046d2 <HAL_GPIO_Init+0x12e>
 80045f2:	4a96      	ldr	r2, [pc, #600]	; (800484c <HAL_GPIO_Init+0x2a8>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d052      	beq.n	800469e <HAL_GPIO_Init+0xfa>
 80045f8:	4a94      	ldr	r2, [pc, #592]	; (800484c <HAL_GPIO_Init+0x2a8>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d869      	bhi.n	80046d2 <HAL_GPIO_Init+0x12e>
 80045fe:	4a94      	ldr	r2, [pc, #592]	; (8004850 <HAL_GPIO_Init+0x2ac>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d04c      	beq.n	800469e <HAL_GPIO_Init+0xfa>
 8004604:	4a92      	ldr	r2, [pc, #584]	; (8004850 <HAL_GPIO_Init+0x2ac>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d863      	bhi.n	80046d2 <HAL_GPIO_Init+0x12e>
 800460a:	4a92      	ldr	r2, [pc, #584]	; (8004854 <HAL_GPIO_Init+0x2b0>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d046      	beq.n	800469e <HAL_GPIO_Init+0xfa>
 8004610:	4a90      	ldr	r2, [pc, #576]	; (8004854 <HAL_GPIO_Init+0x2b0>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d85d      	bhi.n	80046d2 <HAL_GPIO_Init+0x12e>
 8004616:	2b12      	cmp	r3, #18
 8004618:	d82a      	bhi.n	8004670 <HAL_GPIO_Init+0xcc>
 800461a:	2b12      	cmp	r3, #18
 800461c:	d859      	bhi.n	80046d2 <HAL_GPIO_Init+0x12e>
 800461e:	a201      	add	r2, pc, #4	; (adr r2, 8004624 <HAL_GPIO_Init+0x80>)
 8004620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004624:	0800469f 	.word	0x0800469f
 8004628:	08004679 	.word	0x08004679
 800462c:	0800468b 	.word	0x0800468b
 8004630:	080046cd 	.word	0x080046cd
 8004634:	080046d3 	.word	0x080046d3
 8004638:	080046d3 	.word	0x080046d3
 800463c:	080046d3 	.word	0x080046d3
 8004640:	080046d3 	.word	0x080046d3
 8004644:	080046d3 	.word	0x080046d3
 8004648:	080046d3 	.word	0x080046d3
 800464c:	080046d3 	.word	0x080046d3
 8004650:	080046d3 	.word	0x080046d3
 8004654:	080046d3 	.word	0x080046d3
 8004658:	080046d3 	.word	0x080046d3
 800465c:	080046d3 	.word	0x080046d3
 8004660:	080046d3 	.word	0x080046d3
 8004664:	080046d3 	.word	0x080046d3
 8004668:	08004681 	.word	0x08004681
 800466c:	08004695 	.word	0x08004695
 8004670:	4a79      	ldr	r2, [pc, #484]	; (8004858 <HAL_GPIO_Init+0x2b4>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d013      	beq.n	800469e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004676:	e02c      	b.n	80046d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	623b      	str	r3, [r7, #32]
          break;
 800467e:	e029      	b.n	80046d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	3304      	adds	r3, #4
 8004686:	623b      	str	r3, [r7, #32]
          break;
 8004688:	e024      	b.n	80046d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	3308      	adds	r3, #8
 8004690:	623b      	str	r3, [r7, #32]
          break;
 8004692:	e01f      	b.n	80046d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	330c      	adds	r3, #12
 800469a:	623b      	str	r3, [r7, #32]
          break;
 800469c:	e01a      	b.n	80046d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d102      	bne.n	80046ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80046a6:	2304      	movs	r3, #4
 80046a8:	623b      	str	r3, [r7, #32]
          break;
 80046aa:	e013      	b.n	80046d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d105      	bne.n	80046c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80046b4:	2308      	movs	r3, #8
 80046b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	69fa      	ldr	r2, [r7, #28]
 80046bc:	611a      	str	r2, [r3, #16]
          break;
 80046be:	e009      	b.n	80046d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80046c0:	2308      	movs	r3, #8
 80046c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69fa      	ldr	r2, [r7, #28]
 80046c8:	615a      	str	r2, [r3, #20]
          break;
 80046ca:	e003      	b.n	80046d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80046cc:	2300      	movs	r3, #0
 80046ce:	623b      	str	r3, [r7, #32]
          break;
 80046d0:	e000      	b.n	80046d4 <HAL_GPIO_Init+0x130>
          break;
 80046d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	2bff      	cmp	r3, #255	; 0xff
 80046d8:	d801      	bhi.n	80046de <HAL_GPIO_Init+0x13a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	e001      	b.n	80046e2 <HAL_GPIO_Init+0x13e>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3304      	adds	r3, #4
 80046e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	2bff      	cmp	r3, #255	; 0xff
 80046e8:	d802      	bhi.n	80046f0 <HAL_GPIO_Init+0x14c>
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	e002      	b.n	80046f6 <HAL_GPIO_Init+0x152>
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	3b08      	subs	r3, #8
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	210f      	movs	r1, #15
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	fa01 f303 	lsl.w	r3, r1, r3
 8004704:	43db      	mvns	r3, r3
 8004706:	401a      	ands	r2, r3
 8004708:	6a39      	ldr	r1, [r7, #32]
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	fa01 f303 	lsl.w	r3, r1, r3
 8004710:	431a      	orrs	r2, r3
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 80b1 	beq.w	8004886 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004724:	4b4d      	ldr	r3, [pc, #308]	; (800485c <HAL_GPIO_Init+0x2b8>)
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	4a4c      	ldr	r2, [pc, #304]	; (800485c <HAL_GPIO_Init+0x2b8>)
 800472a:	f043 0301 	orr.w	r3, r3, #1
 800472e:	6193      	str	r3, [r2, #24]
 8004730:	4b4a      	ldr	r3, [pc, #296]	; (800485c <HAL_GPIO_Init+0x2b8>)
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	60bb      	str	r3, [r7, #8]
 800473a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800473c:	4a48      	ldr	r2, [pc, #288]	; (8004860 <HAL_GPIO_Init+0x2bc>)
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	089b      	lsrs	r3, r3, #2
 8004742:	3302      	adds	r3, #2
 8004744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004748:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474c:	f003 0303 	and.w	r3, r3, #3
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	220f      	movs	r2, #15
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	43db      	mvns	r3, r3
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	4013      	ands	r3, r2
 800475e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a40      	ldr	r2, [pc, #256]	; (8004864 <HAL_GPIO_Init+0x2c0>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d013      	beq.n	8004790 <HAL_GPIO_Init+0x1ec>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a3f      	ldr	r2, [pc, #252]	; (8004868 <HAL_GPIO_Init+0x2c4>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d00d      	beq.n	800478c <HAL_GPIO_Init+0x1e8>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a3e      	ldr	r2, [pc, #248]	; (800486c <HAL_GPIO_Init+0x2c8>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d007      	beq.n	8004788 <HAL_GPIO_Init+0x1e4>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a3d      	ldr	r2, [pc, #244]	; (8004870 <HAL_GPIO_Init+0x2cc>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d101      	bne.n	8004784 <HAL_GPIO_Init+0x1e0>
 8004780:	2303      	movs	r3, #3
 8004782:	e006      	b.n	8004792 <HAL_GPIO_Init+0x1ee>
 8004784:	2304      	movs	r3, #4
 8004786:	e004      	b.n	8004792 <HAL_GPIO_Init+0x1ee>
 8004788:	2302      	movs	r3, #2
 800478a:	e002      	b.n	8004792 <HAL_GPIO_Init+0x1ee>
 800478c:	2301      	movs	r3, #1
 800478e:	e000      	b.n	8004792 <HAL_GPIO_Init+0x1ee>
 8004790:	2300      	movs	r3, #0
 8004792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004794:	f002 0203 	and.w	r2, r2, #3
 8004798:	0092      	lsls	r2, r2, #2
 800479a:	4093      	lsls	r3, r2
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	4313      	orrs	r3, r2
 80047a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80047a2:	492f      	ldr	r1, [pc, #188]	; (8004860 <HAL_GPIO_Init+0x2bc>)
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	089b      	lsrs	r3, r3, #2
 80047a8:	3302      	adds	r3, #2
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d006      	beq.n	80047ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80047bc:	4b2d      	ldr	r3, [pc, #180]	; (8004874 <HAL_GPIO_Init+0x2d0>)
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	492c      	ldr	r1, [pc, #176]	; (8004874 <HAL_GPIO_Init+0x2d0>)
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	608b      	str	r3, [r1, #8]
 80047c8:	e006      	b.n	80047d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80047ca:	4b2a      	ldr	r3, [pc, #168]	; (8004874 <HAL_GPIO_Init+0x2d0>)
 80047cc:	689a      	ldr	r2, [r3, #8]
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	43db      	mvns	r3, r3
 80047d2:	4928      	ldr	r1, [pc, #160]	; (8004874 <HAL_GPIO_Init+0x2d0>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d006      	beq.n	80047f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80047e4:	4b23      	ldr	r3, [pc, #140]	; (8004874 <HAL_GPIO_Init+0x2d0>)
 80047e6:	68da      	ldr	r2, [r3, #12]
 80047e8:	4922      	ldr	r1, [pc, #136]	; (8004874 <HAL_GPIO_Init+0x2d0>)
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60cb      	str	r3, [r1, #12]
 80047f0:	e006      	b.n	8004800 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80047f2:	4b20      	ldr	r3, [pc, #128]	; (8004874 <HAL_GPIO_Init+0x2d0>)
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	43db      	mvns	r3, r3
 80047fa:	491e      	ldr	r1, [pc, #120]	; (8004874 <HAL_GPIO_Init+0x2d0>)
 80047fc:	4013      	ands	r3, r2
 80047fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d006      	beq.n	800481a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800480c:	4b19      	ldr	r3, [pc, #100]	; (8004874 <HAL_GPIO_Init+0x2d0>)
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	4918      	ldr	r1, [pc, #96]	; (8004874 <HAL_GPIO_Init+0x2d0>)
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	4313      	orrs	r3, r2
 8004816:	604b      	str	r3, [r1, #4]
 8004818:	e006      	b.n	8004828 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800481a:	4b16      	ldr	r3, [pc, #88]	; (8004874 <HAL_GPIO_Init+0x2d0>)
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	43db      	mvns	r3, r3
 8004822:	4914      	ldr	r1, [pc, #80]	; (8004874 <HAL_GPIO_Init+0x2d0>)
 8004824:	4013      	ands	r3, r2
 8004826:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d021      	beq.n	8004878 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004834:	4b0f      	ldr	r3, [pc, #60]	; (8004874 <HAL_GPIO_Init+0x2d0>)
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	490e      	ldr	r1, [pc, #56]	; (8004874 <HAL_GPIO_Init+0x2d0>)
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	4313      	orrs	r3, r2
 800483e:	600b      	str	r3, [r1, #0]
 8004840:	e021      	b.n	8004886 <HAL_GPIO_Init+0x2e2>
 8004842:	bf00      	nop
 8004844:	10320000 	.word	0x10320000
 8004848:	10310000 	.word	0x10310000
 800484c:	10220000 	.word	0x10220000
 8004850:	10210000 	.word	0x10210000
 8004854:	10120000 	.word	0x10120000
 8004858:	10110000 	.word	0x10110000
 800485c:	40021000 	.word	0x40021000
 8004860:	40010000 	.word	0x40010000
 8004864:	40010800 	.word	0x40010800
 8004868:	40010c00 	.word	0x40010c00
 800486c:	40011000 	.word	0x40011000
 8004870:	40011400 	.word	0x40011400
 8004874:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004878:	4b0b      	ldr	r3, [pc, #44]	; (80048a8 <HAL_GPIO_Init+0x304>)
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	43db      	mvns	r3, r3
 8004880:	4909      	ldr	r1, [pc, #36]	; (80048a8 <HAL_GPIO_Init+0x304>)
 8004882:	4013      	ands	r3, r2
 8004884:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	3301      	adds	r3, #1
 800488a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	fa22 f303 	lsr.w	r3, r2, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	f47f ae8e 	bne.w	80045b8 <HAL_GPIO_Init+0x14>
  }
}
 800489c:	bf00      	nop
 800489e:	bf00      	nop
 80048a0:	372c      	adds	r7, #44	; 0x2c
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bc80      	pop	{r7}
 80048a6:	4770      	bx	lr
 80048a8:	40010400 	.word	0x40010400

080048ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	460b      	mov	r3, r1
 80048b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	887b      	ldrh	r3, [r7, #2]
 80048be:	4013      	ands	r3, r2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d002      	beq.n	80048ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048c4:	2301      	movs	r3, #1
 80048c6:	73fb      	strb	r3, [r7, #15]
 80048c8:	e001      	b.n	80048ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048ca:	2300      	movs	r3, #0
 80048cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bc80      	pop	{r7}
 80048d8:	4770      	bx	lr

080048da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	460b      	mov	r3, r1
 80048e4:	807b      	strh	r3, [r7, #2]
 80048e6:	4613      	mov	r3, r2
 80048e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048ea:	787b      	ldrb	r3, [r7, #1]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048f0:	887a      	ldrh	r2, [r7, #2]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80048f6:	e003      	b.n	8004900 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80048f8:	887b      	ldrh	r3, [r7, #2]
 80048fa:	041a      	lsls	r2, r3, #16
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	611a      	str	r2, [r3, #16]
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	bc80      	pop	{r7}
 8004908:	4770      	bx	lr

0800490a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800490a:	b480      	push	{r7}
 800490c:	b085      	sub	sp, #20
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
 8004912:	460b      	mov	r3, r1
 8004914:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800491c:	887a      	ldrh	r2, [r7, #2]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	4013      	ands	r3, r2
 8004922:	041a      	lsls	r2, r3, #16
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	43d9      	mvns	r1, r3
 8004928:	887b      	ldrh	r3, [r7, #2]
 800492a:	400b      	ands	r3, r1
 800492c:	431a      	orrs	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	611a      	str	r2, [r3, #16]
}
 8004932:	bf00      	nop
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	bc80      	pop	{r7}
 800493a:	4770      	bx	lr

0800493c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e12b      	b.n	8004ba6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d106      	bne.n	8004968 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7fd fc44 	bl	80021f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2224      	movs	r2, #36	; 0x24
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0201 	bic.w	r2, r2, #1
 800497e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800498e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800499e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049a0:	f001 f960 	bl	8005c64 <HAL_RCC_GetPCLK1Freq>
 80049a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	4a81      	ldr	r2, [pc, #516]	; (8004bb0 <HAL_I2C_Init+0x274>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d807      	bhi.n	80049c0 <HAL_I2C_Init+0x84>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4a80      	ldr	r2, [pc, #512]	; (8004bb4 <HAL_I2C_Init+0x278>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	bf94      	ite	ls
 80049b8:	2301      	movls	r3, #1
 80049ba:	2300      	movhi	r3, #0
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	e006      	b.n	80049ce <HAL_I2C_Init+0x92>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4a7d      	ldr	r2, [pc, #500]	; (8004bb8 <HAL_I2C_Init+0x27c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	bf94      	ite	ls
 80049c8:	2301      	movls	r3, #1
 80049ca:	2300      	movhi	r3, #0
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e0e7      	b.n	8004ba6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4a78      	ldr	r2, [pc, #480]	; (8004bbc <HAL_I2C_Init+0x280>)
 80049da:	fba2 2303 	umull	r2, r3, r2, r3
 80049de:	0c9b      	lsrs	r3, r3, #18
 80049e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	4a6a      	ldr	r2, [pc, #424]	; (8004bb0 <HAL_I2C_Init+0x274>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d802      	bhi.n	8004a10 <HAL_I2C_Init+0xd4>
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	e009      	b.n	8004a24 <HAL_I2C_Init+0xe8>
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a16:	fb02 f303 	mul.w	r3, r2, r3
 8004a1a:	4a69      	ldr	r2, [pc, #420]	; (8004bc0 <HAL_I2C_Init+0x284>)
 8004a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a20:	099b      	lsrs	r3, r3, #6
 8004a22:	3301      	adds	r3, #1
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	6812      	ldr	r2, [r2, #0]
 8004a28:	430b      	orrs	r3, r1
 8004a2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	495c      	ldr	r1, [pc, #368]	; (8004bb0 <HAL_I2C_Init+0x274>)
 8004a40:	428b      	cmp	r3, r1
 8004a42:	d819      	bhi.n	8004a78 <HAL_I2C_Init+0x13c>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	1e59      	subs	r1, r3, #1
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a52:	1c59      	adds	r1, r3, #1
 8004a54:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a58:	400b      	ands	r3, r1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <HAL_I2C_Init+0x138>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	1e59      	subs	r1, r3, #1
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a72:	e051      	b.n	8004b18 <HAL_I2C_Init+0x1dc>
 8004a74:	2304      	movs	r3, #4
 8004a76:	e04f      	b.n	8004b18 <HAL_I2C_Init+0x1dc>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d111      	bne.n	8004aa4 <HAL_I2C_Init+0x168>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	1e58      	subs	r0, r3, #1
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6859      	ldr	r1, [r3, #4]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	005b      	lsls	r3, r3, #1
 8004a8c:	440b      	add	r3, r1
 8004a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a92:	3301      	adds	r3, #1
 8004a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	bf0c      	ite	eq
 8004a9c:	2301      	moveq	r3, #1
 8004a9e:	2300      	movne	r3, #0
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	e012      	b.n	8004aca <HAL_I2C_Init+0x18e>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	1e58      	subs	r0, r3, #1
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6859      	ldr	r1, [r3, #4]
 8004aac:	460b      	mov	r3, r1
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	440b      	add	r3, r1
 8004ab2:	0099      	lsls	r1, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aba:	3301      	adds	r3, #1
 8004abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	bf0c      	ite	eq
 8004ac4:	2301      	moveq	r3, #1
 8004ac6:	2300      	movne	r3, #0
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <HAL_I2C_Init+0x196>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e022      	b.n	8004b18 <HAL_I2C_Init+0x1dc>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10e      	bne.n	8004af8 <HAL_I2C_Init+0x1bc>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	1e58      	subs	r0, r3, #1
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6859      	ldr	r1, [r3, #4]
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	440b      	add	r3, r1
 8004ae8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aec:	3301      	adds	r3, #1
 8004aee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004af6:	e00f      	b.n	8004b18 <HAL_I2C_Init+0x1dc>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	1e58      	subs	r0, r3, #1
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6859      	ldr	r1, [r3, #4]
 8004b00:	460b      	mov	r3, r1
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	440b      	add	r3, r1
 8004b06:	0099      	lsls	r1, r3, #2
 8004b08:	440b      	add	r3, r1
 8004b0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b0e:	3301      	adds	r3, #1
 8004b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b18:	6879      	ldr	r1, [r7, #4]
 8004b1a:	6809      	ldr	r1, [r1, #0]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	69da      	ldr	r2, [r3, #28]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	431a      	orrs	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6911      	ldr	r1, [r2, #16]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	68d2      	ldr	r2, [r2, #12]
 8004b52:	4311      	orrs	r1, r2
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6812      	ldr	r2, [r2, #0]
 8004b58:	430b      	orrs	r3, r1
 8004b5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	695a      	ldr	r2, [r3, #20]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0201 	orr.w	r2, r2, #1
 8004b86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2220      	movs	r2, #32
 8004b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	000186a0 	.word	0x000186a0
 8004bb4:	001e847f 	.word	0x001e847f
 8004bb8:	003d08ff 	.word	0x003d08ff
 8004bbc:	431bde83 	.word	0x431bde83
 8004bc0:	10624dd3 	.word	0x10624dd3

08004bc4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b088      	sub	sp, #32
 8004bc8:	af02      	add	r7, sp, #8
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	607a      	str	r2, [r7, #4]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	817b      	strh	r3, [r7, #10]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bd8:	f7fe feca 	bl	8003970 <HAL_GetTick>
 8004bdc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b20      	cmp	r3, #32
 8004be8:	f040 80e0 	bne.w	8004dac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	2319      	movs	r3, #25
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	4970      	ldr	r1, [pc, #448]	; (8004db8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f000 fa92 	bl	8005120 <I2C_WaitOnFlagUntilTimeout>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004c02:	2302      	movs	r3, #2
 8004c04:	e0d3      	b.n	8004dae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d101      	bne.n	8004c14 <HAL_I2C_Master_Transmit+0x50>
 8004c10:	2302      	movs	r3, #2
 8004c12:	e0cc      	b.n	8004dae <HAL_I2C_Master_Transmit+0x1ea>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d007      	beq.n	8004c3a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f042 0201 	orr.w	r2, r2, #1
 8004c38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2221      	movs	r2, #33	; 0x21
 8004c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2210      	movs	r2, #16
 8004c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	893a      	ldrh	r2, [r7, #8]
 8004c6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4a50      	ldr	r2, [pc, #320]	; (8004dbc <HAL_I2C_Master_Transmit+0x1f8>)
 8004c7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c7c:	8979      	ldrh	r1, [r7, #10]
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	6a3a      	ldr	r2, [r7, #32]
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 f9ca 	bl	800501c <I2C_MasterRequestWrite>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e08d      	b.n	8004dae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c92:	2300      	movs	r3, #0
 8004c94:	613b      	str	r3, [r7, #16]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	613b      	str	r3, [r7, #16]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	613b      	str	r3, [r7, #16]
 8004ca6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004ca8:	e066      	b.n	8004d78 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	6a39      	ldr	r1, [r7, #32]
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f000 fb50 	bl	8005354 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00d      	beq.n	8004cd6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	d107      	bne.n	8004cd2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cd0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e06b      	b.n	8004dae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	781a      	ldrb	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	2b04      	cmp	r3, #4
 8004d12:	d11b      	bne.n	8004d4c <HAL_I2C_Master_Transmit+0x188>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d017      	beq.n	8004d4c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	781a      	ldrb	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d44:	3b01      	subs	r3, #1
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	6a39      	ldr	r1, [r7, #32]
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 fb47 	bl	80053e4 <I2C_WaitOnBTFFlagUntilTimeout>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00d      	beq.n	8004d78 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d60:	2b04      	cmp	r3, #4
 8004d62:	d107      	bne.n	8004d74 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d72:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e01a      	b.n	8004dae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d194      	bne.n	8004caa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004da8:	2300      	movs	r3, #0
 8004daa:	e000      	b.n	8004dae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004dac:	2302      	movs	r3, #2
  }
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	00100002 	.word	0x00100002
 8004dbc:	ffff0000 	.word	0xffff0000

08004dc0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b08a      	sub	sp, #40	; 0x28
 8004dc4:	af02      	add	r7, sp, #8
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	607a      	str	r2, [r7, #4]
 8004dca:	603b      	str	r3, [r7, #0]
 8004dcc:	460b      	mov	r3, r1
 8004dce:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004dd0:	f7fe fdce 	bl	8003970 <HAL_GetTick>
 8004dd4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b20      	cmp	r3, #32
 8004de4:	f040 8111 	bne.w	800500a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	2319      	movs	r3, #25
 8004dee:	2201      	movs	r2, #1
 8004df0:	4988      	ldr	r1, [pc, #544]	; (8005014 <HAL_I2C_IsDeviceReady+0x254>)
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 f994 	bl	8005120 <I2C_WaitOnFlagUntilTimeout>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004dfe:	2302      	movs	r3, #2
 8004e00:	e104      	b.n	800500c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d101      	bne.n	8004e10 <HAL_I2C_IsDeviceReady+0x50>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	e0fd      	b.n	800500c <HAL_I2C_IsDeviceReady+0x24c>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d007      	beq.n	8004e36 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f042 0201 	orr.w	r2, r2, #1
 8004e34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2224      	movs	r2, #36	; 0x24
 8004e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	4a70      	ldr	r2, [pc, #448]	; (8005018 <HAL_I2C_IsDeviceReady+0x258>)
 8004e58:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e68:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f000 f952 	bl	8005120 <I2C_WaitOnFlagUntilTimeout>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00d      	beq.n	8004e9e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e90:	d103      	bne.n	8004e9a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e98:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e0b6      	b.n	800500c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e9e:	897b      	ldrh	r3, [r7, #10]
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004eac:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004eae:	f7fe fd5f 	bl	8003970 <HAL_GetTick>
 8004eb2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	bf0c      	ite	eq
 8004ec2:	2301      	moveq	r3, #1
 8004ec4:	2300      	movne	r3, #0
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ed8:	bf0c      	ite	eq
 8004eda:	2301      	moveq	r3, #1
 8004edc:	2300      	movne	r3, #0
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004ee2:	e025      	b.n	8004f30 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ee4:	f7fe fd44 	bl	8003970 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d302      	bcc.n	8004efa <HAL_I2C_IsDeviceReady+0x13a>
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d103      	bne.n	8004f02 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	22a0      	movs	r2, #160	; 0xa0
 8004efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	bf0c      	ite	eq
 8004f10:	2301      	moveq	r3, #1
 8004f12:	2300      	movne	r3, #0
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f26:	bf0c      	ite	eq
 8004f28:	2301      	moveq	r3, #1
 8004f2a:	2300      	movne	r3, #0
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2ba0      	cmp	r3, #160	; 0xa0
 8004f3a:	d005      	beq.n	8004f48 <HAL_I2C_IsDeviceReady+0x188>
 8004f3c:	7dfb      	ldrb	r3, [r7, #23]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d102      	bne.n	8004f48 <HAL_I2C_IsDeviceReady+0x188>
 8004f42:	7dbb      	ldrb	r3, [r7, #22]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d0cd      	beq.n	8004ee4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d129      	bne.n	8004fb2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f6c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f6e:	2300      	movs	r3, #0
 8004f70:	613b      	str	r3, [r7, #16]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	613b      	str	r3, [r7, #16]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	613b      	str	r3, [r7, #16]
 8004f82:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	2319      	movs	r3, #25
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	4921      	ldr	r1, [pc, #132]	; (8005014 <HAL_I2C_IsDeviceReady+0x254>)
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f000 f8c6 	bl	8005120 <I2C_WaitOnFlagUntilTimeout>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e036      	b.n	800500c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	e02c      	b.n	800500c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fc0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fca:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	2319      	movs	r3, #25
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	490f      	ldr	r1, [pc, #60]	; (8005014 <HAL_I2C_IsDeviceReady+0x254>)
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f000 f8a2 	bl	8005120 <I2C_WaitOnFlagUntilTimeout>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e012      	b.n	800500c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	f4ff af32 	bcc.w	8004e5a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2220      	movs	r2, #32
 8004ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800500a:	2302      	movs	r3, #2
  }
}
 800500c:	4618      	mov	r0, r3
 800500e:	3720      	adds	r7, #32
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	00100002 	.word	0x00100002
 8005018:	ffff0000 	.word	0xffff0000

0800501c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b088      	sub	sp, #32
 8005020:	af02      	add	r7, sp, #8
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	607a      	str	r2, [r7, #4]
 8005026:	603b      	str	r3, [r7, #0]
 8005028:	460b      	mov	r3, r1
 800502a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005030:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2b08      	cmp	r3, #8
 8005036:	d006      	beq.n	8005046 <I2C_MasterRequestWrite+0x2a>
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d003      	beq.n	8005046 <I2C_MasterRequestWrite+0x2a>
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005044:	d108      	bne.n	8005058 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	e00b      	b.n	8005070 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505c:	2b12      	cmp	r3, #18
 800505e:	d107      	bne.n	8005070 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800506e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f000 f84f 	bl	8005120 <I2C_WaitOnFlagUntilTimeout>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00d      	beq.n	80050a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005096:	d103      	bne.n	80050a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800509e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e035      	b.n	8005110 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050ac:	d108      	bne.n	80050c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050ae:	897b      	ldrh	r3, [r7, #10]
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	461a      	mov	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050bc:	611a      	str	r2, [r3, #16]
 80050be:	e01b      	b.n	80050f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80050c0:	897b      	ldrh	r3, [r7, #10]
 80050c2:	11db      	asrs	r3, r3, #7
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	f003 0306 	and.w	r3, r3, #6
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	f063 030f 	orn	r3, r3, #15
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	490e      	ldr	r1, [pc, #56]	; (8005118 <I2C_MasterRequestWrite+0xfc>)
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f000 f898 	bl	8005214 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e010      	b.n	8005110 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80050ee:	897b      	ldrh	r3, [r7, #10]
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	4907      	ldr	r1, [pc, #28]	; (800511c <I2C_MasterRequestWrite+0x100>)
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 f888 	bl	8005214 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e000      	b.n	8005110 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3718      	adds	r7, #24
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	00010008 	.word	0x00010008
 800511c:	00010002 	.word	0x00010002

08005120 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	603b      	str	r3, [r7, #0]
 800512c:	4613      	mov	r3, r2
 800512e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005130:	e048      	b.n	80051c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005138:	d044      	beq.n	80051c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800513a:	f7fe fc19 	bl	8003970 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	429a      	cmp	r2, r3
 8005148:	d302      	bcc.n	8005150 <I2C_WaitOnFlagUntilTimeout+0x30>
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d139      	bne.n	80051c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	0c1b      	lsrs	r3, r3, #16
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b01      	cmp	r3, #1
 8005158:	d10d      	bne.n	8005176 <I2C_WaitOnFlagUntilTimeout+0x56>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	695b      	ldr	r3, [r3, #20]
 8005160:	43da      	mvns	r2, r3
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	4013      	ands	r3, r2
 8005166:	b29b      	uxth	r3, r3
 8005168:	2b00      	cmp	r3, #0
 800516a:	bf0c      	ite	eq
 800516c:	2301      	moveq	r3, #1
 800516e:	2300      	movne	r3, #0
 8005170:	b2db      	uxtb	r3, r3
 8005172:	461a      	mov	r2, r3
 8005174:	e00c      	b.n	8005190 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	43da      	mvns	r2, r3
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	4013      	ands	r3, r2
 8005182:	b29b      	uxth	r3, r3
 8005184:	2b00      	cmp	r3, #0
 8005186:	bf0c      	ite	eq
 8005188:	2301      	moveq	r3, #1
 800518a:	2300      	movne	r3, #0
 800518c:	b2db      	uxtb	r3, r3
 800518e:	461a      	mov	r2, r3
 8005190:	79fb      	ldrb	r3, [r7, #7]
 8005192:	429a      	cmp	r2, r3
 8005194:	d116      	bne.n	80051c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2220      	movs	r2, #32
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b0:	f043 0220 	orr.w	r2, r3, #32
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e023      	b.n	800520c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	0c1b      	lsrs	r3, r3, #16
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d10d      	bne.n	80051ea <I2C_WaitOnFlagUntilTimeout+0xca>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	43da      	mvns	r2, r3
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	4013      	ands	r3, r2
 80051da:	b29b      	uxth	r3, r3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	bf0c      	ite	eq
 80051e0:	2301      	moveq	r3, #1
 80051e2:	2300      	movne	r3, #0
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	461a      	mov	r2, r3
 80051e8:	e00c      	b.n	8005204 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	43da      	mvns	r2, r3
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	4013      	ands	r3, r2
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	bf0c      	ite	eq
 80051fc:	2301      	moveq	r3, #1
 80051fe:	2300      	movne	r3, #0
 8005200:	b2db      	uxtb	r3, r3
 8005202:	461a      	mov	r2, r3
 8005204:	79fb      	ldrb	r3, [r7, #7]
 8005206:	429a      	cmp	r2, r3
 8005208:	d093      	beq.n	8005132 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
 8005220:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005222:	e071      	b.n	8005308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800522e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005232:	d123      	bne.n	800527c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005242:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800524c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2220      	movs	r2, #32
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005268:	f043 0204 	orr.w	r2, r3, #4
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e067      	b.n	800534c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005282:	d041      	beq.n	8005308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005284:	f7fe fb74 	bl	8003970 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	429a      	cmp	r2, r3
 8005292:	d302      	bcc.n	800529a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d136      	bne.n	8005308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	0c1b      	lsrs	r3, r3, #16
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d10c      	bne.n	80052be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	43da      	mvns	r2, r3
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	4013      	ands	r3, r2
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	bf14      	ite	ne
 80052b6:	2301      	movne	r3, #1
 80052b8:	2300      	moveq	r3, #0
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	e00b      	b.n	80052d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	43da      	mvns	r2, r3
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	4013      	ands	r3, r2
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	bf14      	ite	ne
 80052d0:	2301      	movne	r3, #1
 80052d2:	2300      	moveq	r3, #0
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d016      	beq.n	8005308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f4:	f043 0220 	orr.w	r2, r3, #32
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e021      	b.n	800534c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	0c1b      	lsrs	r3, r3, #16
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b01      	cmp	r3, #1
 8005310:	d10c      	bne.n	800532c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	43da      	mvns	r2, r3
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	4013      	ands	r3, r2
 800531e:	b29b      	uxth	r3, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	bf14      	ite	ne
 8005324:	2301      	movne	r3, #1
 8005326:	2300      	moveq	r3, #0
 8005328:	b2db      	uxtb	r3, r3
 800532a:	e00b      	b.n	8005344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	43da      	mvns	r2, r3
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4013      	ands	r3, r2
 8005338:	b29b      	uxth	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	bf14      	ite	ne
 800533e:	2301      	movne	r3, #1
 8005340:	2300      	moveq	r3, #0
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b00      	cmp	r3, #0
 8005346:	f47f af6d 	bne.w	8005224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005360:	e034      	b.n	80053cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 f886 	bl	8005474 <I2C_IsAcknowledgeFailed>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e034      	b.n	80053dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005378:	d028      	beq.n	80053cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800537a:	f7fe faf9 	bl	8003970 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	429a      	cmp	r2, r3
 8005388:	d302      	bcc.n	8005390 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d11d      	bne.n	80053cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800539a:	2b80      	cmp	r3, #128	; 0x80
 800539c:	d016      	beq.n	80053cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2220      	movs	r2, #32
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b8:	f043 0220 	orr.w	r2, r3, #32
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e007      	b.n	80053dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d6:	2b80      	cmp	r3, #128	; 0x80
 80053d8:	d1c3      	bne.n	8005362 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053f0:	e034      	b.n	800545c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f000 f83e 	bl	8005474 <I2C_IsAcknowledgeFailed>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e034      	b.n	800546c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005408:	d028      	beq.n	800545c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800540a:	f7fe fab1 	bl	8003970 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	429a      	cmp	r2, r3
 8005418:	d302      	bcc.n	8005420 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d11d      	bne.n	800545c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	f003 0304 	and.w	r3, r3, #4
 800542a:	2b04      	cmp	r3, #4
 800542c:	d016      	beq.n	800545c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2220      	movs	r2, #32
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005448:	f043 0220 	orr.w	r2, r3, #32
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e007      	b.n	800546c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	f003 0304 	and.w	r3, r3, #4
 8005466:	2b04      	cmp	r3, #4
 8005468:	d1c3      	bne.n	80053f2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800548a:	d11b      	bne.n	80054c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005494:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2220      	movs	r2, #32
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b0:	f043 0204 	orr.w	r2, r3, #4
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e000      	b.n	80054c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bc80      	pop	{r7}
 80054ce:	4770      	bx	lr

080054d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e272      	b.n	80059c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f000 8087 	beq.w	80055fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80054f0:	4b92      	ldr	r3, [pc, #584]	; (800573c <HAL_RCC_OscConfig+0x26c>)
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f003 030c 	and.w	r3, r3, #12
 80054f8:	2b04      	cmp	r3, #4
 80054fa:	d00c      	beq.n	8005516 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80054fc:	4b8f      	ldr	r3, [pc, #572]	; (800573c <HAL_RCC_OscConfig+0x26c>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f003 030c 	and.w	r3, r3, #12
 8005504:	2b08      	cmp	r3, #8
 8005506:	d112      	bne.n	800552e <HAL_RCC_OscConfig+0x5e>
 8005508:	4b8c      	ldr	r3, [pc, #560]	; (800573c <HAL_RCC_OscConfig+0x26c>)
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005514:	d10b      	bne.n	800552e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005516:	4b89      	ldr	r3, [pc, #548]	; (800573c <HAL_RCC_OscConfig+0x26c>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d06c      	beq.n	80055fc <HAL_RCC_OscConfig+0x12c>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d168      	bne.n	80055fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e24c      	b.n	80059c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005536:	d106      	bne.n	8005546 <HAL_RCC_OscConfig+0x76>
 8005538:	4b80      	ldr	r3, [pc, #512]	; (800573c <HAL_RCC_OscConfig+0x26c>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a7f      	ldr	r2, [pc, #508]	; (800573c <HAL_RCC_OscConfig+0x26c>)
 800553e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005542:	6013      	str	r3, [r2, #0]
 8005544:	e02e      	b.n	80055a4 <HAL_RCC_OscConfig+0xd4>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10c      	bne.n	8005568 <HAL_RCC_OscConfig+0x98>
 800554e:	4b7b      	ldr	r3, [pc, #492]	; (800573c <HAL_RCC_OscConfig+0x26c>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a7a      	ldr	r2, [pc, #488]	; (800573c <HAL_RCC_OscConfig+0x26c>)
 8005554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005558:	6013      	str	r3, [r2, #0]
 800555a:	4b78      	ldr	r3, [pc, #480]	; (800573c <HAL_RCC_OscConfig+0x26c>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a77      	ldr	r2, [pc, #476]	; (800573c <HAL_RCC_OscConfig+0x26c>)
 8005560:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005564:	6013      	str	r3, [r2, #0]
 8005566:	e01d      	b.n	80055a4 <HAL_RCC_OscConfig+0xd4>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005570:	d10c      	bne.n	800558c <HAL_RCC_OscConfig+0xbc>
 8005572:	4b72      	ldr	r3, [pc, #456]	; (800573c <HAL_RCC_OscConfig+0x26c>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a71      	ldr	r2, [pc, #452]	; (800573c <HAL_RCC_OscConfig+0x26c>)
 8005578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800557c:	6013      	str	r3, [r2, #0]
 800557e:	4b6f      	ldr	r3, [pc, #444]	; (800573c <HAL_RCC_OscConfig+0x26c>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a6e      	ldr	r2, [pc, #440]	; (800573c <HAL_RCC_OscConfig+0x26c>)
 8005584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005588:	6013      	str	r3, [r2, #0]
 800558a:	e00b      	b.n	80055a4 <HAL_RCC_OscConfig+0xd4>
 800558c:	4b6b      	ldr	r3, [pc, #428]	; (800573c <HAL_RCC_OscConfig+0x26c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a6a      	ldr	r2, [pc, #424]	; (800573c <HAL_RCC_OscConfig+0x26c>)
 8005592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005596:	6013      	str	r3, [r2, #0]
 8005598:	4b68      	ldr	r3, [pc, #416]	; (800573c <HAL_RCC_OscConfig+0x26c>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a67      	ldr	r2, [pc, #412]	; (800573c <HAL_RCC_OscConfig+0x26c>)
 800559e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d013      	beq.n	80055d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ac:	f7fe f9e0 	bl	8003970 <HAL_GetTick>
 80055b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055b2:	e008      	b.n	80055c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055b4:	f7fe f9dc 	bl	8003970 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b64      	cmp	r3, #100	; 0x64
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e200      	b.n	80059c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055c6:	4b5d      	ldr	r3, [pc, #372]	; (800573c <HAL_RCC_OscConfig+0x26c>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0f0      	beq.n	80055b4 <HAL_RCC_OscConfig+0xe4>
 80055d2:	e014      	b.n	80055fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d4:	f7fe f9cc 	bl	8003970 <HAL_GetTick>
 80055d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055da:	e008      	b.n	80055ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055dc:	f7fe f9c8 	bl	8003970 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b64      	cmp	r3, #100	; 0x64
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e1ec      	b.n	80059c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ee:	4b53      	ldr	r3, [pc, #332]	; (800573c <HAL_RCC_OscConfig+0x26c>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1f0      	bne.n	80055dc <HAL_RCC_OscConfig+0x10c>
 80055fa:	e000      	b.n	80055fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d063      	beq.n	80056d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800560a:	4b4c      	ldr	r3, [pc, #304]	; (800573c <HAL_RCC_OscConfig+0x26c>)
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f003 030c 	and.w	r3, r3, #12
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00b      	beq.n	800562e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005616:	4b49      	ldr	r3, [pc, #292]	; (800573c <HAL_RCC_OscConfig+0x26c>)
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f003 030c 	and.w	r3, r3, #12
 800561e:	2b08      	cmp	r3, #8
 8005620:	d11c      	bne.n	800565c <HAL_RCC_OscConfig+0x18c>
 8005622:	4b46      	ldr	r3, [pc, #280]	; (800573c <HAL_RCC_OscConfig+0x26c>)
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d116      	bne.n	800565c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800562e:	4b43      	ldr	r3, [pc, #268]	; (800573c <HAL_RCC_OscConfig+0x26c>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d005      	beq.n	8005646 <HAL_RCC_OscConfig+0x176>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d001      	beq.n	8005646 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e1c0      	b.n	80059c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005646:	4b3d      	ldr	r3, [pc, #244]	; (800573c <HAL_RCC_OscConfig+0x26c>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	00db      	lsls	r3, r3, #3
 8005654:	4939      	ldr	r1, [pc, #228]	; (800573c <HAL_RCC_OscConfig+0x26c>)
 8005656:	4313      	orrs	r3, r2
 8005658:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800565a:	e03a      	b.n	80056d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d020      	beq.n	80056a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005664:	4b36      	ldr	r3, [pc, #216]	; (8005740 <HAL_RCC_OscConfig+0x270>)
 8005666:	2201      	movs	r2, #1
 8005668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800566a:	f7fe f981 	bl	8003970 <HAL_GetTick>
 800566e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005670:	e008      	b.n	8005684 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005672:	f7fe f97d 	bl	8003970 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e1a1      	b.n	80059c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005684:	4b2d      	ldr	r3, [pc, #180]	; (800573c <HAL_RCC_OscConfig+0x26c>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0f0      	beq.n	8005672 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005690:	4b2a      	ldr	r3, [pc, #168]	; (800573c <HAL_RCC_OscConfig+0x26c>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	00db      	lsls	r3, r3, #3
 800569e:	4927      	ldr	r1, [pc, #156]	; (800573c <HAL_RCC_OscConfig+0x26c>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	600b      	str	r3, [r1, #0]
 80056a4:	e015      	b.n	80056d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056a6:	4b26      	ldr	r3, [pc, #152]	; (8005740 <HAL_RCC_OscConfig+0x270>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ac:	f7fe f960 	bl	8003970 <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056b4:	f7fe f95c 	bl	8003970 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e180      	b.n	80059c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056c6:	4b1d      	ldr	r3, [pc, #116]	; (800573c <HAL_RCC_OscConfig+0x26c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1f0      	bne.n	80056b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0308 	and.w	r3, r3, #8
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d03a      	beq.n	8005754 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d019      	beq.n	800571a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056e6:	4b17      	ldr	r3, [pc, #92]	; (8005744 <HAL_RCC_OscConfig+0x274>)
 80056e8:	2201      	movs	r2, #1
 80056ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056ec:	f7fe f940 	bl	8003970 <HAL_GetTick>
 80056f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056f2:	e008      	b.n	8005706 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056f4:	f7fe f93c 	bl	8003970 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d901      	bls.n	8005706 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e160      	b.n	80059c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005706:	4b0d      	ldr	r3, [pc, #52]	; (800573c <HAL_RCC_OscConfig+0x26c>)
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	f003 0302 	and.w	r3, r3, #2
 800570e:	2b00      	cmp	r3, #0
 8005710:	d0f0      	beq.n	80056f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005712:	2001      	movs	r0, #1
 8005714:	f000 face 	bl	8005cb4 <RCC_Delay>
 8005718:	e01c      	b.n	8005754 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800571a:	4b0a      	ldr	r3, [pc, #40]	; (8005744 <HAL_RCC_OscConfig+0x274>)
 800571c:	2200      	movs	r2, #0
 800571e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005720:	f7fe f926 	bl	8003970 <HAL_GetTick>
 8005724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005726:	e00f      	b.n	8005748 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005728:	f7fe f922 	bl	8003970 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b02      	cmp	r3, #2
 8005734:	d908      	bls.n	8005748 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e146      	b.n	80059c8 <HAL_RCC_OscConfig+0x4f8>
 800573a:	bf00      	nop
 800573c:	40021000 	.word	0x40021000
 8005740:	42420000 	.word	0x42420000
 8005744:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005748:	4b92      	ldr	r3, [pc, #584]	; (8005994 <HAL_RCC_OscConfig+0x4c4>)
 800574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1e9      	bne.n	8005728 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0304 	and.w	r3, r3, #4
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 80a6 	beq.w	80058ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005762:	2300      	movs	r3, #0
 8005764:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005766:	4b8b      	ldr	r3, [pc, #556]	; (8005994 <HAL_RCC_OscConfig+0x4c4>)
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10d      	bne.n	800578e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005772:	4b88      	ldr	r3, [pc, #544]	; (8005994 <HAL_RCC_OscConfig+0x4c4>)
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	4a87      	ldr	r2, [pc, #540]	; (8005994 <HAL_RCC_OscConfig+0x4c4>)
 8005778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800577c:	61d3      	str	r3, [r2, #28]
 800577e:	4b85      	ldr	r3, [pc, #532]	; (8005994 <HAL_RCC_OscConfig+0x4c4>)
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005786:	60bb      	str	r3, [r7, #8]
 8005788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800578a:	2301      	movs	r3, #1
 800578c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800578e:	4b82      	ldr	r3, [pc, #520]	; (8005998 <HAL_RCC_OscConfig+0x4c8>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005796:	2b00      	cmp	r3, #0
 8005798:	d118      	bne.n	80057cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800579a:	4b7f      	ldr	r3, [pc, #508]	; (8005998 <HAL_RCC_OscConfig+0x4c8>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a7e      	ldr	r2, [pc, #504]	; (8005998 <HAL_RCC_OscConfig+0x4c8>)
 80057a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057a6:	f7fe f8e3 	bl	8003970 <HAL_GetTick>
 80057aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057ac:	e008      	b.n	80057c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057ae:	f7fe f8df 	bl	8003970 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	2b64      	cmp	r3, #100	; 0x64
 80057ba:	d901      	bls.n	80057c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e103      	b.n	80059c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057c0:	4b75      	ldr	r3, [pc, #468]	; (8005998 <HAL_RCC_OscConfig+0x4c8>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d0f0      	beq.n	80057ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d106      	bne.n	80057e2 <HAL_RCC_OscConfig+0x312>
 80057d4:	4b6f      	ldr	r3, [pc, #444]	; (8005994 <HAL_RCC_OscConfig+0x4c4>)
 80057d6:	6a1b      	ldr	r3, [r3, #32]
 80057d8:	4a6e      	ldr	r2, [pc, #440]	; (8005994 <HAL_RCC_OscConfig+0x4c4>)
 80057da:	f043 0301 	orr.w	r3, r3, #1
 80057de:	6213      	str	r3, [r2, #32]
 80057e0:	e02d      	b.n	800583e <HAL_RCC_OscConfig+0x36e>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10c      	bne.n	8005804 <HAL_RCC_OscConfig+0x334>
 80057ea:	4b6a      	ldr	r3, [pc, #424]	; (8005994 <HAL_RCC_OscConfig+0x4c4>)
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	4a69      	ldr	r2, [pc, #420]	; (8005994 <HAL_RCC_OscConfig+0x4c4>)
 80057f0:	f023 0301 	bic.w	r3, r3, #1
 80057f4:	6213      	str	r3, [r2, #32]
 80057f6:	4b67      	ldr	r3, [pc, #412]	; (8005994 <HAL_RCC_OscConfig+0x4c4>)
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	4a66      	ldr	r2, [pc, #408]	; (8005994 <HAL_RCC_OscConfig+0x4c4>)
 80057fc:	f023 0304 	bic.w	r3, r3, #4
 8005800:	6213      	str	r3, [r2, #32]
 8005802:	e01c      	b.n	800583e <HAL_RCC_OscConfig+0x36e>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	2b05      	cmp	r3, #5
 800580a:	d10c      	bne.n	8005826 <HAL_RCC_OscConfig+0x356>
 800580c:	4b61      	ldr	r3, [pc, #388]	; (8005994 <HAL_RCC_OscConfig+0x4c4>)
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	4a60      	ldr	r2, [pc, #384]	; (8005994 <HAL_RCC_OscConfig+0x4c4>)
 8005812:	f043 0304 	orr.w	r3, r3, #4
 8005816:	6213      	str	r3, [r2, #32]
 8005818:	4b5e      	ldr	r3, [pc, #376]	; (8005994 <HAL_RCC_OscConfig+0x4c4>)
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	4a5d      	ldr	r2, [pc, #372]	; (8005994 <HAL_RCC_OscConfig+0x4c4>)
 800581e:	f043 0301 	orr.w	r3, r3, #1
 8005822:	6213      	str	r3, [r2, #32]
 8005824:	e00b      	b.n	800583e <HAL_RCC_OscConfig+0x36e>
 8005826:	4b5b      	ldr	r3, [pc, #364]	; (8005994 <HAL_RCC_OscConfig+0x4c4>)
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	4a5a      	ldr	r2, [pc, #360]	; (8005994 <HAL_RCC_OscConfig+0x4c4>)
 800582c:	f023 0301 	bic.w	r3, r3, #1
 8005830:	6213      	str	r3, [r2, #32]
 8005832:	4b58      	ldr	r3, [pc, #352]	; (8005994 <HAL_RCC_OscConfig+0x4c4>)
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	4a57      	ldr	r2, [pc, #348]	; (8005994 <HAL_RCC_OscConfig+0x4c4>)
 8005838:	f023 0304 	bic.w	r3, r3, #4
 800583c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d015      	beq.n	8005872 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005846:	f7fe f893 	bl	8003970 <HAL_GetTick>
 800584a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800584c:	e00a      	b.n	8005864 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800584e:	f7fe f88f 	bl	8003970 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	f241 3288 	movw	r2, #5000	; 0x1388
 800585c:	4293      	cmp	r3, r2
 800585e:	d901      	bls.n	8005864 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e0b1      	b.n	80059c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005864:	4b4b      	ldr	r3, [pc, #300]	; (8005994 <HAL_RCC_OscConfig+0x4c4>)
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d0ee      	beq.n	800584e <HAL_RCC_OscConfig+0x37e>
 8005870:	e014      	b.n	800589c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005872:	f7fe f87d 	bl	8003970 <HAL_GetTick>
 8005876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005878:	e00a      	b.n	8005890 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800587a:	f7fe f879 	bl	8003970 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	f241 3288 	movw	r2, #5000	; 0x1388
 8005888:	4293      	cmp	r3, r2
 800588a:	d901      	bls.n	8005890 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e09b      	b.n	80059c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005890:	4b40      	ldr	r3, [pc, #256]	; (8005994 <HAL_RCC_OscConfig+0x4c4>)
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1ee      	bne.n	800587a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800589c:	7dfb      	ldrb	r3, [r7, #23]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d105      	bne.n	80058ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058a2:	4b3c      	ldr	r3, [pc, #240]	; (8005994 <HAL_RCC_OscConfig+0x4c4>)
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	4a3b      	ldr	r2, [pc, #236]	; (8005994 <HAL_RCC_OscConfig+0x4c4>)
 80058a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f000 8087 	beq.w	80059c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058b8:	4b36      	ldr	r3, [pc, #216]	; (8005994 <HAL_RCC_OscConfig+0x4c4>)
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	f003 030c 	and.w	r3, r3, #12
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	d061      	beq.n	8005988 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d146      	bne.n	800595a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058cc:	4b33      	ldr	r3, [pc, #204]	; (800599c <HAL_RCC_OscConfig+0x4cc>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058d2:	f7fe f84d 	bl	8003970 <HAL_GetTick>
 80058d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058d8:	e008      	b.n	80058ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058da:	f7fe f849 	bl	8003970 <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d901      	bls.n	80058ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e06d      	b.n	80059c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058ec:	4b29      	ldr	r3, [pc, #164]	; (8005994 <HAL_RCC_OscConfig+0x4c4>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1f0      	bne.n	80058da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a1b      	ldr	r3, [r3, #32]
 80058fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005900:	d108      	bne.n	8005914 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005902:	4b24      	ldr	r3, [pc, #144]	; (8005994 <HAL_RCC_OscConfig+0x4c4>)
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	4921      	ldr	r1, [pc, #132]	; (8005994 <HAL_RCC_OscConfig+0x4c4>)
 8005910:	4313      	orrs	r3, r2
 8005912:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005914:	4b1f      	ldr	r3, [pc, #124]	; (8005994 <HAL_RCC_OscConfig+0x4c4>)
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a19      	ldr	r1, [r3, #32]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005924:	430b      	orrs	r3, r1
 8005926:	491b      	ldr	r1, [pc, #108]	; (8005994 <HAL_RCC_OscConfig+0x4c4>)
 8005928:	4313      	orrs	r3, r2
 800592a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800592c:	4b1b      	ldr	r3, [pc, #108]	; (800599c <HAL_RCC_OscConfig+0x4cc>)
 800592e:	2201      	movs	r2, #1
 8005930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005932:	f7fe f81d 	bl	8003970 <HAL_GetTick>
 8005936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005938:	e008      	b.n	800594c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800593a:	f7fe f819 	bl	8003970 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d901      	bls.n	800594c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e03d      	b.n	80059c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800594c:	4b11      	ldr	r3, [pc, #68]	; (8005994 <HAL_RCC_OscConfig+0x4c4>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d0f0      	beq.n	800593a <HAL_RCC_OscConfig+0x46a>
 8005958:	e035      	b.n	80059c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800595a:	4b10      	ldr	r3, [pc, #64]	; (800599c <HAL_RCC_OscConfig+0x4cc>)
 800595c:	2200      	movs	r2, #0
 800595e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005960:	f7fe f806 	bl	8003970 <HAL_GetTick>
 8005964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005966:	e008      	b.n	800597a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005968:	f7fe f802 	bl	8003970 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b02      	cmp	r3, #2
 8005974:	d901      	bls.n	800597a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e026      	b.n	80059c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800597a:	4b06      	ldr	r3, [pc, #24]	; (8005994 <HAL_RCC_OscConfig+0x4c4>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1f0      	bne.n	8005968 <HAL_RCC_OscConfig+0x498>
 8005986:	e01e      	b.n	80059c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	69db      	ldr	r3, [r3, #28]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d107      	bne.n	80059a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e019      	b.n	80059c8 <HAL_RCC_OscConfig+0x4f8>
 8005994:	40021000 	.word	0x40021000
 8005998:	40007000 	.word	0x40007000
 800599c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80059a0:	4b0b      	ldr	r3, [pc, #44]	; (80059d0 <HAL_RCC_OscConfig+0x500>)
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d106      	bne.n	80059c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059be:	429a      	cmp	r2, r3
 80059c0:	d001      	beq.n	80059c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e000      	b.n	80059c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3718      	adds	r7, #24
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	40021000 	.word	0x40021000

080059d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d101      	bne.n	80059e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e0d0      	b.n	8005b8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059e8:	4b6a      	ldr	r3, [pc, #424]	; (8005b94 <HAL_RCC_ClockConfig+0x1c0>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0307 	and.w	r3, r3, #7
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d910      	bls.n	8005a18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059f6:	4b67      	ldr	r3, [pc, #412]	; (8005b94 <HAL_RCC_ClockConfig+0x1c0>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f023 0207 	bic.w	r2, r3, #7
 80059fe:	4965      	ldr	r1, [pc, #404]	; (8005b94 <HAL_RCC_ClockConfig+0x1c0>)
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a06:	4b63      	ldr	r3, [pc, #396]	; (8005b94 <HAL_RCC_ClockConfig+0x1c0>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0307 	and.w	r3, r3, #7
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d001      	beq.n	8005a18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e0b8      	b.n	8005b8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0302 	and.w	r3, r3, #2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d020      	beq.n	8005a66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0304 	and.w	r3, r3, #4
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d005      	beq.n	8005a3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a30:	4b59      	ldr	r3, [pc, #356]	; (8005b98 <HAL_RCC_ClockConfig+0x1c4>)
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	4a58      	ldr	r2, [pc, #352]	; (8005b98 <HAL_RCC_ClockConfig+0x1c4>)
 8005a36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005a3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0308 	and.w	r3, r3, #8
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d005      	beq.n	8005a54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a48:	4b53      	ldr	r3, [pc, #332]	; (8005b98 <HAL_RCC_ClockConfig+0x1c4>)
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	4a52      	ldr	r2, [pc, #328]	; (8005b98 <HAL_RCC_ClockConfig+0x1c4>)
 8005a4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005a52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a54:	4b50      	ldr	r3, [pc, #320]	; (8005b98 <HAL_RCC_ClockConfig+0x1c4>)
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	494d      	ldr	r1, [pc, #308]	; (8005b98 <HAL_RCC_ClockConfig+0x1c4>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d040      	beq.n	8005af4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d107      	bne.n	8005a8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a7a:	4b47      	ldr	r3, [pc, #284]	; (8005b98 <HAL_RCC_ClockConfig+0x1c4>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d115      	bne.n	8005ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e07f      	b.n	8005b8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d107      	bne.n	8005aa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a92:	4b41      	ldr	r3, [pc, #260]	; (8005b98 <HAL_RCC_ClockConfig+0x1c4>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d109      	bne.n	8005ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e073      	b.n	8005b8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aa2:	4b3d      	ldr	r3, [pc, #244]	; (8005b98 <HAL_RCC_ClockConfig+0x1c4>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e06b      	b.n	8005b8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ab2:	4b39      	ldr	r3, [pc, #228]	; (8005b98 <HAL_RCC_ClockConfig+0x1c4>)
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f023 0203 	bic.w	r2, r3, #3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	4936      	ldr	r1, [pc, #216]	; (8005b98 <HAL_RCC_ClockConfig+0x1c4>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ac4:	f7fd ff54 	bl	8003970 <HAL_GetTick>
 8005ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aca:	e00a      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005acc:	f7fd ff50 	bl	8003970 <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e053      	b.n	8005b8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ae2:	4b2d      	ldr	r3, [pc, #180]	; (8005b98 <HAL_RCC_ClockConfig+0x1c4>)
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f003 020c 	and.w	r2, r3, #12
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d1eb      	bne.n	8005acc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005af4:	4b27      	ldr	r3, [pc, #156]	; (8005b94 <HAL_RCC_ClockConfig+0x1c0>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0307 	and.w	r3, r3, #7
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d210      	bcs.n	8005b24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b02:	4b24      	ldr	r3, [pc, #144]	; (8005b94 <HAL_RCC_ClockConfig+0x1c0>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f023 0207 	bic.w	r2, r3, #7
 8005b0a:	4922      	ldr	r1, [pc, #136]	; (8005b94 <HAL_RCC_ClockConfig+0x1c0>)
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b12:	4b20      	ldr	r3, [pc, #128]	; (8005b94 <HAL_RCC_ClockConfig+0x1c0>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0307 	and.w	r3, r3, #7
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d001      	beq.n	8005b24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e032      	b.n	8005b8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0304 	and.w	r3, r3, #4
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d008      	beq.n	8005b42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b30:	4b19      	ldr	r3, [pc, #100]	; (8005b98 <HAL_RCC_ClockConfig+0x1c4>)
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	4916      	ldr	r1, [pc, #88]	; (8005b98 <HAL_RCC_ClockConfig+0x1c4>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0308 	and.w	r3, r3, #8
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d009      	beq.n	8005b62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005b4e:	4b12      	ldr	r3, [pc, #72]	; (8005b98 <HAL_RCC_ClockConfig+0x1c4>)
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	490e      	ldr	r1, [pc, #56]	; (8005b98 <HAL_RCC_ClockConfig+0x1c4>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005b62:	f000 f821 	bl	8005ba8 <HAL_RCC_GetSysClockFreq>
 8005b66:	4602      	mov	r2, r0
 8005b68:	4b0b      	ldr	r3, [pc, #44]	; (8005b98 <HAL_RCC_ClockConfig+0x1c4>)
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	091b      	lsrs	r3, r3, #4
 8005b6e:	f003 030f 	and.w	r3, r3, #15
 8005b72:	490a      	ldr	r1, [pc, #40]	; (8005b9c <HAL_RCC_ClockConfig+0x1c8>)
 8005b74:	5ccb      	ldrb	r3, [r1, r3]
 8005b76:	fa22 f303 	lsr.w	r3, r2, r3
 8005b7a:	4a09      	ldr	r2, [pc, #36]	; (8005ba0 <HAL_RCC_ClockConfig+0x1cc>)
 8005b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005b7e:	4b09      	ldr	r3, [pc, #36]	; (8005ba4 <HAL_RCC_ClockConfig+0x1d0>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7fd feb2 	bl	80038ec <HAL_InitTick>

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	40022000 	.word	0x40022000
 8005b98:	40021000 	.word	0x40021000
 8005b9c:	0800d318 	.word	0x0800d318
 8005ba0:	2000000c 	.word	0x2000000c
 8005ba4:	20000010 	.word	0x20000010

08005ba8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	60fb      	str	r3, [r7, #12]
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60bb      	str	r3, [r7, #8]
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	617b      	str	r3, [r7, #20]
 8005bba:	2300      	movs	r3, #0
 8005bbc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005bc2:	4b1e      	ldr	r3, [pc, #120]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x94>)
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f003 030c 	and.w	r3, r3, #12
 8005bce:	2b04      	cmp	r3, #4
 8005bd0:	d002      	beq.n	8005bd8 <HAL_RCC_GetSysClockFreq+0x30>
 8005bd2:	2b08      	cmp	r3, #8
 8005bd4:	d003      	beq.n	8005bde <HAL_RCC_GetSysClockFreq+0x36>
 8005bd6:	e027      	b.n	8005c28 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005bd8:	4b19      	ldr	r3, [pc, #100]	; (8005c40 <HAL_RCC_GetSysClockFreq+0x98>)
 8005bda:	613b      	str	r3, [r7, #16]
      break;
 8005bdc:	e027      	b.n	8005c2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	0c9b      	lsrs	r3, r3, #18
 8005be2:	f003 030f 	and.w	r3, r3, #15
 8005be6:	4a17      	ldr	r2, [pc, #92]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005be8:	5cd3      	ldrb	r3, [r2, r3]
 8005bea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d010      	beq.n	8005c18 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005bf6:	4b11      	ldr	r3, [pc, #68]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x94>)
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	0c5b      	lsrs	r3, r3, #17
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	4a11      	ldr	r2, [pc, #68]	; (8005c48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005c02:	5cd3      	ldrb	r3, [r2, r3]
 8005c04:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a0d      	ldr	r2, [pc, #52]	; (8005c40 <HAL_RCC_GetSysClockFreq+0x98>)
 8005c0a:	fb03 f202 	mul.w	r2, r3, r2
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c14:	617b      	str	r3, [r7, #20]
 8005c16:	e004      	b.n	8005c22 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a0c      	ldr	r2, [pc, #48]	; (8005c4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8005c1c:	fb02 f303 	mul.w	r3, r2, r3
 8005c20:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	613b      	str	r3, [r7, #16]
      break;
 8005c26:	e002      	b.n	8005c2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005c28:	4b05      	ldr	r3, [pc, #20]	; (8005c40 <HAL_RCC_GetSysClockFreq+0x98>)
 8005c2a:	613b      	str	r3, [r7, #16]
      break;
 8005c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c2e:	693b      	ldr	r3, [r7, #16]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	371c      	adds	r7, #28
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bc80      	pop	{r7}
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	40021000 	.word	0x40021000
 8005c40:	007a1200 	.word	0x007a1200
 8005c44:	0800d330 	.word	0x0800d330
 8005c48:	0800d340 	.word	0x0800d340
 8005c4c:	003d0900 	.word	0x003d0900

08005c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c50:	b480      	push	{r7}
 8005c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c54:	4b02      	ldr	r3, [pc, #8]	; (8005c60 <HAL_RCC_GetHCLKFreq+0x10>)
 8005c56:	681b      	ldr	r3, [r3, #0]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bc80      	pop	{r7}
 8005c5e:	4770      	bx	lr
 8005c60:	2000000c 	.word	0x2000000c

08005c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c68:	f7ff fff2 	bl	8005c50 <HAL_RCC_GetHCLKFreq>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	4b05      	ldr	r3, [pc, #20]	; (8005c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	0a1b      	lsrs	r3, r3, #8
 8005c74:	f003 0307 	and.w	r3, r3, #7
 8005c78:	4903      	ldr	r1, [pc, #12]	; (8005c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c7a:	5ccb      	ldrb	r3, [r1, r3]
 8005c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	40021000 	.word	0x40021000
 8005c88:	0800d328 	.word	0x0800d328

08005c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c90:	f7ff ffde 	bl	8005c50 <HAL_RCC_GetHCLKFreq>
 8005c94:	4602      	mov	r2, r0
 8005c96:	4b05      	ldr	r3, [pc, #20]	; (8005cac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	0adb      	lsrs	r3, r3, #11
 8005c9c:	f003 0307 	and.w	r3, r3, #7
 8005ca0:	4903      	ldr	r1, [pc, #12]	; (8005cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ca2:	5ccb      	ldrb	r3, [r1, r3]
 8005ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	40021000 	.word	0x40021000
 8005cb0:	0800d328 	.word	0x0800d328

08005cb4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005cbc:	4b0a      	ldr	r3, [pc, #40]	; (8005ce8 <RCC_Delay+0x34>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a0a      	ldr	r2, [pc, #40]	; (8005cec <RCC_Delay+0x38>)
 8005cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc6:	0a5b      	lsrs	r3, r3, #9
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	fb02 f303 	mul.w	r3, r2, r3
 8005cce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005cd0:	bf00      	nop
  }
  while (Delay --);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	1e5a      	subs	r2, r3, #1
 8005cd6:	60fa      	str	r2, [r7, #12]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1f9      	bne.n	8005cd0 <RCC_Delay+0x1c>
}
 8005cdc:	bf00      	nop
 8005cde:	bf00      	nop
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bc80      	pop	{r7}
 8005ce6:	4770      	bx	lr
 8005ce8:	2000000c 	.word	0x2000000c
 8005cec:	10624dd3 	.word	0x10624dd3

08005cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	613b      	str	r3, [r7, #16]
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d07d      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d10:	4b4f      	ldr	r3, [pc, #316]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d10d      	bne.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d1c:	4b4c      	ldr	r3, [pc, #304]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d1e:	69db      	ldr	r3, [r3, #28]
 8005d20:	4a4b      	ldr	r2, [pc, #300]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d26:	61d3      	str	r3, [r2, #28]
 8005d28:	4b49      	ldr	r3, [pc, #292]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d2a:	69db      	ldr	r3, [r3, #28]
 8005d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d30:	60bb      	str	r3, [r7, #8]
 8005d32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d34:	2301      	movs	r3, #1
 8005d36:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d38:	4b46      	ldr	r3, [pc, #280]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d118      	bne.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d44:	4b43      	ldr	r3, [pc, #268]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a42      	ldr	r2, [pc, #264]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d50:	f7fd fe0e 	bl	8003970 <HAL_GetTick>
 8005d54:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d56:	e008      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d58:	f7fd fe0a 	bl	8003970 <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	2b64      	cmp	r3, #100	; 0x64
 8005d64:	d901      	bls.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e06d      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d6a:	4b3a      	ldr	r3, [pc, #232]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d0f0      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d76:	4b36      	ldr	r3, [pc, #216]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d7e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d02e      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d027      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d94:	4b2e      	ldr	r3, [pc, #184]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d96:	6a1b      	ldr	r3, [r3, #32]
 8005d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d9c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d9e:	4b2e      	ldr	r3, [pc, #184]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005da0:	2201      	movs	r2, #1
 8005da2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005da4:	4b2c      	ldr	r3, [pc, #176]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005da6:	2200      	movs	r2, #0
 8005da8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005daa:	4a29      	ldr	r2, [pc, #164]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d014      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dba:	f7fd fdd9 	bl	8003970 <HAL_GetTick>
 8005dbe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dc0:	e00a      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dc2:	f7fd fdd5 	bl	8003970 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d901      	bls.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e036      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dd8:	4b1d      	ldr	r3, [pc, #116]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	f003 0302 	and.w	r3, r3, #2
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d0ee      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005de4:	4b1a      	ldr	r3, [pc, #104]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005de6:	6a1b      	ldr	r3, [r3, #32]
 8005de8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	4917      	ldr	r1, [pc, #92]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005df6:	7dfb      	ldrb	r3, [r7, #23]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d105      	bne.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dfc:	4b14      	ldr	r3, [pc, #80]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dfe:	69db      	ldr	r3, [r3, #28]
 8005e00:	4a13      	ldr	r2, [pc, #76]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e06:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0302 	and.w	r3, r3, #2
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d008      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e14:	4b0e      	ldr	r3, [pc, #56]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	490b      	ldr	r1, [pc, #44]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0310 	and.w	r3, r3, #16
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d008      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e32:	4b07      	ldr	r3, [pc, #28]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	4904      	ldr	r1, [pc, #16]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3718      	adds	r7, #24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	40021000 	.word	0x40021000
 8005e54:	40007000 	.word	0x40007000
 8005e58:	42420440 	.word	0x42420440

08005e5c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b088      	sub	sp, #32
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005e64:	2300      	movs	r3, #0
 8005e66:	617b      	str	r3, [r7, #20]
 8005e68:	2300      	movs	r3, #0
 8005e6a:	61fb      	str	r3, [r7, #28]
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	60fb      	str	r3, [r7, #12]
 8005e74:	2300      	movs	r3, #0
 8005e76:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b10      	cmp	r3, #16
 8005e7c:	d00a      	beq.n	8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2b10      	cmp	r3, #16
 8005e82:	f200 808a 	bhi.w	8005f9a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d045      	beq.n	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d075      	beq.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005e92:	e082      	b.n	8005f9a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005e94:	4b46      	ldr	r3, [pc, #280]	; (8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005e9a:	4b45      	ldr	r3, [pc, #276]	; (8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d07b      	beq.n	8005f9e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	0c9b      	lsrs	r3, r3, #18
 8005eaa:	f003 030f 	and.w	r3, r3, #15
 8005eae:	4a41      	ldr	r2, [pc, #260]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005eb0:	5cd3      	ldrb	r3, [r2, r3]
 8005eb2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d015      	beq.n	8005eea <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005ebe:	4b3c      	ldr	r3, [pc, #240]	; (8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	0c5b      	lsrs	r3, r3, #17
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	4a3b      	ldr	r2, [pc, #236]	; (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005eca:	5cd3      	ldrb	r3, [r2, r3]
 8005ecc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00d      	beq.n	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005ed8:	4a38      	ldr	r2, [pc, #224]	; (8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	fb02 f303 	mul.w	r3, r2, r3
 8005ee6:	61fb      	str	r3, [r7, #28]
 8005ee8:	e004      	b.n	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	4a34      	ldr	r2, [pc, #208]	; (8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005eee:	fb02 f303 	mul.w	r3, r2, r3
 8005ef2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005ef4:	4b2e      	ldr	r3, [pc, #184]	; (8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005efc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f00:	d102      	bne.n	8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	61bb      	str	r3, [r7, #24]
      break;
 8005f06:	e04a      	b.n	8005f9e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	005b      	lsls	r3, r3, #1
 8005f0c:	4a2d      	ldr	r2, [pc, #180]	; (8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f12:	085b      	lsrs	r3, r3, #1
 8005f14:	61bb      	str	r3, [r7, #24]
      break;
 8005f16:	e042      	b.n	8005f9e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005f18:	4b25      	ldr	r3, [pc, #148]	; (8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f1a:	6a1b      	ldr	r3, [r3, #32]
 8005f1c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f28:	d108      	bne.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d003      	beq.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005f34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f38:	61bb      	str	r3, [r7, #24]
 8005f3a:	e01f      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f46:	d109      	bne.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005f48:	4b19      	ldr	r3, [pc, #100]	; (8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4c:	f003 0302 	and.w	r3, r3, #2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d003      	beq.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005f54:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005f58:	61bb      	str	r3, [r7, #24]
 8005f5a:	e00f      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f66:	d11c      	bne.n	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005f68:	4b11      	ldr	r3, [pc, #68]	; (8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d016      	beq.n	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005f74:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005f78:	61bb      	str	r3, [r7, #24]
      break;
 8005f7a:	e012      	b.n	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005f7c:	e011      	b.n	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005f7e:	f7ff fe85 	bl	8005c8c <HAL_RCC_GetPCLK2Freq>
 8005f82:	4602      	mov	r2, r0
 8005f84:	4b0a      	ldr	r3, [pc, #40]	; (8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	0b9b      	lsrs	r3, r3, #14
 8005f8a:	f003 0303 	and.w	r3, r3, #3
 8005f8e:	3301      	adds	r3, #1
 8005f90:	005b      	lsls	r3, r3, #1
 8005f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f96:	61bb      	str	r3, [r7, #24]
      break;
 8005f98:	e004      	b.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005f9a:	bf00      	nop
 8005f9c:	e002      	b.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005f9e:	bf00      	nop
 8005fa0:	e000      	b.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005fa2:	bf00      	nop
    }
  }
  return (frequency);
 8005fa4:	69bb      	ldr	r3, [r7, #24]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3720      	adds	r7, #32
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	40021000 	.word	0x40021000
 8005fb4:	0800d344 	.word	0x0800d344
 8005fb8:	0800d354 	.word	0x0800d354
 8005fbc:	007a1200 	.word	0x007a1200
 8005fc0:	003d0900 	.word	0x003d0900
 8005fc4:	aaaaaaab 	.word	0xaaaaaaab

08005fc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e041      	b.n	800605e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d106      	bne.n	8005ff4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f7fd fba4 	bl	800373c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	3304      	adds	r3, #4
 8006004:	4619      	mov	r1, r3
 8006006:	4610      	mov	r0, r2
 8006008:	f000 f940 	bl	800628c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
	...

08006068 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b01      	cmp	r3, #1
 800607a:	d001      	beq.n	8006080 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e032      	b.n	80060e6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2202      	movs	r2, #2
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a18      	ldr	r2, [pc, #96]	; (80060f0 <HAL_TIM_Base_Start+0x88>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d00e      	beq.n	80060b0 <HAL_TIM_Base_Start+0x48>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800609a:	d009      	beq.n	80060b0 <HAL_TIM_Base_Start+0x48>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a14      	ldr	r2, [pc, #80]	; (80060f4 <HAL_TIM_Base_Start+0x8c>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d004      	beq.n	80060b0 <HAL_TIM_Base_Start+0x48>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a13      	ldr	r2, [pc, #76]	; (80060f8 <HAL_TIM_Base_Start+0x90>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d111      	bne.n	80060d4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f003 0307 	and.w	r3, r3, #7
 80060ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2b06      	cmp	r3, #6
 80060c0:	d010      	beq.n	80060e4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f042 0201 	orr.w	r2, r2, #1
 80060d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060d2:	e007      	b.n	80060e4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f042 0201 	orr.w	r2, r2, #1
 80060e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3714      	adds	r7, #20
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bc80      	pop	{r7}
 80060ee:	4770      	bx	lr
 80060f0:	40012c00 	.word	0x40012c00
 80060f4:	40000400 	.word	0x40000400
 80060f8:	40000800 	.word	0x40000800

080060fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006110:	2b01      	cmp	r3, #1
 8006112:	d101      	bne.n	8006118 <HAL_TIM_ConfigClockSource+0x1c>
 8006114:	2302      	movs	r3, #2
 8006116:	e0b4      	b.n	8006282 <HAL_TIM_ConfigClockSource+0x186>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006136:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800613e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006150:	d03e      	beq.n	80061d0 <HAL_TIM_ConfigClockSource+0xd4>
 8006152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006156:	f200 8087 	bhi.w	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 800615a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800615e:	f000 8086 	beq.w	800626e <HAL_TIM_ConfigClockSource+0x172>
 8006162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006166:	d87f      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006168:	2b70      	cmp	r3, #112	; 0x70
 800616a:	d01a      	beq.n	80061a2 <HAL_TIM_ConfigClockSource+0xa6>
 800616c:	2b70      	cmp	r3, #112	; 0x70
 800616e:	d87b      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006170:	2b60      	cmp	r3, #96	; 0x60
 8006172:	d050      	beq.n	8006216 <HAL_TIM_ConfigClockSource+0x11a>
 8006174:	2b60      	cmp	r3, #96	; 0x60
 8006176:	d877      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006178:	2b50      	cmp	r3, #80	; 0x50
 800617a:	d03c      	beq.n	80061f6 <HAL_TIM_ConfigClockSource+0xfa>
 800617c:	2b50      	cmp	r3, #80	; 0x50
 800617e:	d873      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006180:	2b40      	cmp	r3, #64	; 0x40
 8006182:	d058      	beq.n	8006236 <HAL_TIM_ConfigClockSource+0x13a>
 8006184:	2b40      	cmp	r3, #64	; 0x40
 8006186:	d86f      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006188:	2b30      	cmp	r3, #48	; 0x30
 800618a:	d064      	beq.n	8006256 <HAL_TIM_ConfigClockSource+0x15a>
 800618c:	2b30      	cmp	r3, #48	; 0x30
 800618e:	d86b      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006190:	2b20      	cmp	r3, #32
 8006192:	d060      	beq.n	8006256 <HAL_TIM_ConfigClockSource+0x15a>
 8006194:	2b20      	cmp	r3, #32
 8006196:	d867      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006198:	2b00      	cmp	r3, #0
 800619a:	d05c      	beq.n	8006256 <HAL_TIM_ConfigClockSource+0x15a>
 800619c:	2b10      	cmp	r3, #16
 800619e:	d05a      	beq.n	8006256 <HAL_TIM_ConfigClockSource+0x15a>
 80061a0:	e062      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061b2:	f000 f944 	bl	800643e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80061c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	609a      	str	r2, [r3, #8]
      break;
 80061ce:	e04f      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061e0:	f000 f92d 	bl	800643e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689a      	ldr	r2, [r3, #8]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061f2:	609a      	str	r2, [r3, #8]
      break;
 80061f4:	e03c      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006202:	461a      	mov	r2, r3
 8006204:	f000 f8a4 	bl	8006350 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2150      	movs	r1, #80	; 0x50
 800620e:	4618      	mov	r0, r3
 8006210:	f000 f8fb 	bl	800640a <TIM_ITRx_SetConfig>
      break;
 8006214:	e02c      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006222:	461a      	mov	r2, r3
 8006224:	f000 f8c2 	bl	80063ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2160      	movs	r1, #96	; 0x60
 800622e:	4618      	mov	r0, r3
 8006230:	f000 f8eb 	bl	800640a <TIM_ITRx_SetConfig>
      break;
 8006234:	e01c      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006242:	461a      	mov	r2, r3
 8006244:	f000 f884 	bl	8006350 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2140      	movs	r1, #64	; 0x40
 800624e:	4618      	mov	r0, r3
 8006250:	f000 f8db 	bl	800640a <TIM_ITRx_SetConfig>
      break;
 8006254:	e00c      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4619      	mov	r1, r3
 8006260:	4610      	mov	r0, r2
 8006262:	f000 f8d2 	bl	800640a <TIM_ITRx_SetConfig>
      break;
 8006266:	e003      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	73fb      	strb	r3, [r7, #15]
      break;
 800626c:	e000      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800626e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006280:	7bfb      	ldrb	r3, [r7, #15]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
	...

0800628c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a29      	ldr	r2, [pc, #164]	; (8006344 <TIM_Base_SetConfig+0xb8>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d00b      	beq.n	80062bc <TIM_Base_SetConfig+0x30>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062aa:	d007      	beq.n	80062bc <TIM_Base_SetConfig+0x30>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a26      	ldr	r2, [pc, #152]	; (8006348 <TIM_Base_SetConfig+0xbc>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d003      	beq.n	80062bc <TIM_Base_SetConfig+0x30>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a25      	ldr	r2, [pc, #148]	; (800634c <TIM_Base_SetConfig+0xc0>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d108      	bne.n	80062ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a1c      	ldr	r2, [pc, #112]	; (8006344 <TIM_Base_SetConfig+0xb8>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d00b      	beq.n	80062ee <TIM_Base_SetConfig+0x62>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062dc:	d007      	beq.n	80062ee <TIM_Base_SetConfig+0x62>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a19      	ldr	r2, [pc, #100]	; (8006348 <TIM_Base_SetConfig+0xbc>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d003      	beq.n	80062ee <TIM_Base_SetConfig+0x62>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a18      	ldr	r2, [pc, #96]	; (800634c <TIM_Base_SetConfig+0xc0>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d108      	bne.n	8006300 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	4313      	orrs	r3, r2
 800630c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	689a      	ldr	r2, [r3, #8]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a07      	ldr	r2, [pc, #28]	; (8006344 <TIM_Base_SetConfig+0xb8>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d103      	bne.n	8006334 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	691a      	ldr	r2, [r3, #16]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	615a      	str	r2, [r3, #20]
}
 800633a:	bf00      	nop
 800633c:	3714      	adds	r7, #20
 800633e:	46bd      	mov	sp, r7
 8006340:	bc80      	pop	{r7}
 8006342:	4770      	bx	lr
 8006344:	40012c00 	.word	0x40012c00
 8006348:	40000400 	.word	0x40000400
 800634c:	40000800 	.word	0x40000800

08006350 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006350:	b480      	push	{r7}
 8006352:	b087      	sub	sp, #28
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	f023 0201 	bic.w	r2, r3, #1
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800637a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	011b      	lsls	r3, r3, #4
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	4313      	orrs	r3, r2
 8006384:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f023 030a 	bic.w	r3, r3, #10
 800638c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	4313      	orrs	r3, r2
 8006394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	621a      	str	r2, [r3, #32]
}
 80063a2:	bf00      	nop
 80063a4:	371c      	adds	r7, #28
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bc80      	pop	{r7}
 80063aa:	4770      	bx	lr

080063ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	f023 0210 	bic.w	r2, r3, #16
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	031b      	lsls	r3, r3, #12
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	4313      	orrs	r3, r2
 80063e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063e8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	011b      	lsls	r3, r3, #4
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	621a      	str	r2, [r3, #32]
}
 8006400:	bf00      	nop
 8006402:	371c      	adds	r7, #28
 8006404:	46bd      	mov	sp, r7
 8006406:	bc80      	pop	{r7}
 8006408:	4770      	bx	lr

0800640a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800640a:	b480      	push	{r7}
 800640c:	b085      	sub	sp, #20
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006420:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	4313      	orrs	r3, r2
 8006428:	f043 0307 	orr.w	r3, r3, #7
 800642c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	609a      	str	r2, [r3, #8]
}
 8006434:	bf00      	nop
 8006436:	3714      	adds	r7, #20
 8006438:	46bd      	mov	sp, r7
 800643a:	bc80      	pop	{r7}
 800643c:	4770      	bx	lr

0800643e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800643e:	b480      	push	{r7}
 8006440:	b087      	sub	sp, #28
 8006442:	af00      	add	r7, sp, #0
 8006444:	60f8      	str	r0, [r7, #12]
 8006446:	60b9      	str	r1, [r7, #8]
 8006448:	607a      	str	r2, [r7, #4]
 800644a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006458:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	021a      	lsls	r2, r3, #8
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	431a      	orrs	r2, r3
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	4313      	orrs	r3, r2
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	4313      	orrs	r3, r2
 800646a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	609a      	str	r2, [r3, #8]
}
 8006472:	bf00      	nop
 8006474:	371c      	adds	r7, #28
 8006476:	46bd      	mov	sp, r7
 8006478:	bc80      	pop	{r7}
 800647a:	4770      	bx	lr

0800647c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800648c:	2b01      	cmp	r3, #1
 800648e:	d101      	bne.n	8006494 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006490:	2302      	movs	r3, #2
 8006492:	e046      	b.n	8006522 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2202      	movs	r2, #2
 80064a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a16      	ldr	r2, [pc, #88]	; (800652c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d00e      	beq.n	80064f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064e0:	d009      	beq.n	80064f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a12      	ldr	r2, [pc, #72]	; (8006530 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d004      	beq.n	80064f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a10      	ldr	r2, [pc, #64]	; (8006534 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d10c      	bne.n	8006510 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	68ba      	ldr	r2, [r7, #8]
 8006504:	4313      	orrs	r3, r2
 8006506:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	bc80      	pop	{r7}
 800652a:	4770      	bx	lr
 800652c:	40012c00 	.word	0x40012c00
 8006530:	40000400 	.word	0x40000400
 8006534:	40000800 	.word	0x40000800

08006538 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d101      	bne.n	800654a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e042      	b.n	80065d0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b00      	cmp	r3, #0
 8006554:	d106      	bne.n	8006564 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f7fd f934 	bl	80037cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2224      	movs	r2, #36	; 0x24
 8006568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68da      	ldr	r2, [r3, #12]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800657a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 fcd5 	bl	8006f2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	691a      	ldr	r2, [r3, #16]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006590:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	695a      	ldr	r2, [r3, #20]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68da      	ldr	r2, [r3, #12]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2220      	movs	r2, #32
 80065bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2220      	movs	r2, #32
 80065c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3708      	adds	r7, #8
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	4613      	mov	r3, r2
 80065e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b20      	cmp	r3, #32
 80065f0:	d112      	bne.n	8006618 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d002      	beq.n	80065fe <HAL_UART_Receive_IT+0x26>
 80065f8:	88fb      	ldrh	r3, [r7, #6]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e00b      	b.n	800661a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006608:	88fb      	ldrh	r3, [r7, #6]
 800660a:	461a      	mov	r2, r3
 800660c:	68b9      	ldr	r1, [r7, #8]
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f000 fab7 	bl	8006b82 <UART_Start_Receive_IT>
 8006614:	4603      	mov	r3, r0
 8006616:	e000      	b.n	800661a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006618:	2302      	movs	r3, #2
  }
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
	...

08006624 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b0ba      	sub	sp, #232	; 0xe8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800664a:	2300      	movs	r3, #0
 800664c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006650:	2300      	movs	r3, #0
 8006652:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800665a:	f003 030f 	and.w	r3, r3, #15
 800665e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006662:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10f      	bne.n	800668a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800666a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800666e:	f003 0320 	and.w	r3, r3, #32
 8006672:	2b00      	cmp	r3, #0
 8006674:	d009      	beq.n	800668a <HAL_UART_IRQHandler+0x66>
 8006676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800667a:	f003 0320 	and.w	r3, r3, #32
 800667e:	2b00      	cmp	r3, #0
 8006680:	d003      	beq.n	800668a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fb93 	bl	8006dae <UART_Receive_IT>
      return;
 8006688:	e25b      	b.n	8006b42 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800668a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800668e:	2b00      	cmp	r3, #0
 8006690:	f000 80de 	beq.w	8006850 <HAL_UART_IRQHandler+0x22c>
 8006694:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	2b00      	cmp	r3, #0
 800669e:	d106      	bne.n	80066ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 80d1 	beq.w	8006850 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80066ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00b      	beq.n	80066d2 <HAL_UART_IRQHandler+0xae>
 80066ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d005      	beq.n	80066d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ca:	f043 0201 	orr.w	r2, r3, #1
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066d6:	f003 0304 	and.w	r3, r3, #4
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00b      	beq.n	80066f6 <HAL_UART_IRQHandler+0xd2>
 80066de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d005      	beq.n	80066f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ee:	f043 0202 	orr.w	r2, r3, #2
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066fa:	f003 0302 	and.w	r3, r3, #2
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00b      	beq.n	800671a <HAL_UART_IRQHandler+0xf6>
 8006702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b00      	cmp	r3, #0
 800670c:	d005      	beq.n	800671a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006712:	f043 0204 	orr.w	r2, r3, #4
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800671a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800671e:	f003 0308 	and.w	r3, r3, #8
 8006722:	2b00      	cmp	r3, #0
 8006724:	d011      	beq.n	800674a <HAL_UART_IRQHandler+0x126>
 8006726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800672a:	f003 0320 	and.w	r3, r3, #32
 800672e:	2b00      	cmp	r3, #0
 8006730:	d105      	bne.n	800673e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b00      	cmp	r3, #0
 800673c:	d005      	beq.n	800674a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006742:	f043 0208 	orr.w	r2, r3, #8
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800674e:	2b00      	cmp	r3, #0
 8006750:	f000 81f2 	beq.w	8006b38 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006758:	f003 0320 	and.w	r3, r3, #32
 800675c:	2b00      	cmp	r3, #0
 800675e:	d008      	beq.n	8006772 <HAL_UART_IRQHandler+0x14e>
 8006760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006764:	f003 0320 	and.w	r3, r3, #32
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 fb1e 	bl	8006dae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	695b      	ldr	r3, [r3, #20]
 8006778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677c:	2b00      	cmp	r3, #0
 800677e:	bf14      	ite	ne
 8006780:	2301      	movne	r3, #1
 8006782:	2300      	moveq	r3, #0
 8006784:	b2db      	uxtb	r3, r3
 8006786:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800678e:	f003 0308 	and.w	r3, r3, #8
 8006792:	2b00      	cmp	r3, #0
 8006794:	d103      	bne.n	800679e <HAL_UART_IRQHandler+0x17a>
 8006796:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800679a:	2b00      	cmp	r3, #0
 800679c:	d04f      	beq.n	800683e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fa28 	bl	8006bf4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d041      	beq.n	8006836 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	3314      	adds	r3, #20
 80067b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067c0:	e853 3f00 	ldrex	r3, [r3]
 80067c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80067c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	3314      	adds	r3, #20
 80067da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80067de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80067e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80067ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80067ee:	e841 2300 	strex	r3, r2, [r1]
 80067f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80067f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1d9      	bne.n	80067b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006802:	2b00      	cmp	r3, #0
 8006804:	d013      	beq.n	800682e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800680a:	4a7e      	ldr	r2, [pc, #504]	; (8006a04 <HAL_UART_IRQHandler+0x3e0>)
 800680c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006812:	4618      	mov	r0, r3
 8006814:	f7fd fe4e 	bl	80044b4 <HAL_DMA_Abort_IT>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d016      	beq.n	800684c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006828:	4610      	mov	r0, r2
 800682a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800682c:	e00e      	b.n	800684c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f993 	bl	8006b5a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006834:	e00a      	b.n	800684c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 f98f 	bl	8006b5a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800683c:	e006      	b.n	800684c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 f98b 	bl	8006b5a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800684a:	e175      	b.n	8006b38 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800684c:	bf00      	nop
    return;
 800684e:	e173      	b.n	8006b38 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006854:	2b01      	cmp	r3, #1
 8006856:	f040 814f 	bne.w	8006af8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800685a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800685e:	f003 0310 	and.w	r3, r3, #16
 8006862:	2b00      	cmp	r3, #0
 8006864:	f000 8148 	beq.w	8006af8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800686c:	f003 0310 	and.w	r3, r3, #16
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 8141 	beq.w	8006af8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006876:	2300      	movs	r3, #0
 8006878:	60bb      	str	r3, [r7, #8]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	60bb      	str	r3, [r7, #8]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	60bb      	str	r3, [r7, #8]
 800688a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 80b6 	beq.w	8006a08 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f000 8145 	beq.w	8006b3c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068ba:	429a      	cmp	r2, r3
 80068bc:	f080 813e 	bcs.w	8006b3c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	2b20      	cmp	r3, #32
 80068d0:	f000 8088 	beq.w	80069e4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	330c      	adds	r3, #12
 80068da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068e2:	e853 3f00 	ldrex	r3, [r3]
 80068e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80068ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	330c      	adds	r3, #12
 80068fc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006900:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006904:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006908:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800690c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006910:	e841 2300 	strex	r3, r2, [r1]
 8006914:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006918:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1d9      	bne.n	80068d4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	3314      	adds	r3, #20
 8006926:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006928:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800692a:	e853 3f00 	ldrex	r3, [r3]
 800692e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006930:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006932:	f023 0301 	bic.w	r3, r3, #1
 8006936:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	3314      	adds	r3, #20
 8006940:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006944:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006948:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800694c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006950:	e841 2300 	strex	r3, r2, [r1]
 8006954:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006956:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1e1      	bne.n	8006920 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	3314      	adds	r3, #20
 8006962:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006964:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006966:	e853 3f00 	ldrex	r3, [r3]
 800696a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800696c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800696e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006972:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	3314      	adds	r3, #20
 800697c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006980:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006982:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006984:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006986:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006988:	e841 2300 	strex	r3, r2, [r1]
 800698c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800698e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1e3      	bne.n	800695c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2220      	movs	r2, #32
 8006998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	330c      	adds	r3, #12
 80069a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ac:	e853 3f00 	ldrex	r3, [r3]
 80069b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069b4:	f023 0310 	bic.w	r3, r3, #16
 80069b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	330c      	adds	r3, #12
 80069c2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80069c6:	65ba      	str	r2, [r7, #88]	; 0x58
 80069c8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069ce:	e841 2300 	strex	r3, r2, [r1]
 80069d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1e3      	bne.n	80069a2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069de:	4618      	mov	r0, r3
 80069e0:	f7fd fd2d 	bl	800443e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2202      	movs	r2, #2
 80069e8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	4619      	mov	r1, r3
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f8b6 	bl	8006b6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a00:	e09c      	b.n	8006b3c <HAL_UART_IRQHandler+0x518>
 8006a02:	bf00      	nop
 8006a04:	08006cb9 	.word	0x08006cb9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f000 808e 	beq.w	8006b40 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006a24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 8089 	beq.w	8006b40 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	330c      	adds	r3, #12
 8006a34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a38:	e853 3f00 	ldrex	r3, [r3]
 8006a3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	330c      	adds	r3, #12
 8006a4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006a52:	647a      	str	r2, [r7, #68]	; 0x44
 8006a54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a5a:	e841 2300 	strex	r3, r2, [r1]
 8006a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1e3      	bne.n	8006a2e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	3314      	adds	r3, #20
 8006a6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	e853 3f00 	ldrex	r3, [r3]
 8006a74:	623b      	str	r3, [r7, #32]
   return(result);
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	f023 0301 	bic.w	r3, r3, #1
 8006a7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	3314      	adds	r3, #20
 8006a86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a8a:	633a      	str	r2, [r7, #48]	; 0x30
 8006a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a92:	e841 2300 	strex	r3, r2, [r1]
 8006a96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1e3      	bne.n	8006a66 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2220      	movs	r2, #32
 8006aa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	330c      	adds	r3, #12
 8006ab2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	e853 3f00 	ldrex	r3, [r3]
 8006aba:	60fb      	str	r3, [r7, #12]
   return(result);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f023 0310 	bic.w	r3, r3, #16
 8006ac2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	330c      	adds	r3, #12
 8006acc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006ad0:	61fa      	str	r2, [r7, #28]
 8006ad2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad4:	69b9      	ldr	r1, [r7, #24]
 8006ad6:	69fa      	ldr	r2, [r7, #28]
 8006ad8:	e841 2300 	strex	r3, r2, [r1]
 8006adc:	617b      	str	r3, [r7, #20]
   return(result);
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1e3      	bne.n	8006aac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006aea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f83b 	bl	8006b6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006af6:	e023      	b.n	8006b40 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d009      	beq.n	8006b18 <HAL_UART_IRQHandler+0x4f4>
 8006b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d003      	beq.n	8006b18 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 f8e5 	bl	8006ce0 <UART_Transmit_IT>
    return;
 8006b16:	e014      	b.n	8006b42 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00e      	beq.n	8006b42 <HAL_UART_IRQHandler+0x51e>
 8006b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d008      	beq.n	8006b42 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f924 	bl	8006d7e <UART_EndTransmit_IT>
    return;
 8006b36:	e004      	b.n	8006b42 <HAL_UART_IRQHandler+0x51e>
    return;
 8006b38:	bf00      	nop
 8006b3a:	e002      	b.n	8006b42 <HAL_UART_IRQHandler+0x51e>
      return;
 8006b3c:	bf00      	nop
 8006b3e:	e000      	b.n	8006b42 <HAL_UART_IRQHandler+0x51e>
      return;
 8006b40:	bf00      	nop
  }
}
 8006b42:	37e8      	adds	r7, #232	; 0xe8
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bc80      	pop	{r7}
 8006b58:	4770      	bx	lr

08006b5a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b083      	sub	sp, #12
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b62:	bf00      	nop
 8006b64:	370c      	adds	r7, #12
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bc80      	pop	{r7}
 8006b6a:	4770      	bx	lr

08006b6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	460b      	mov	r3, r1
 8006b76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bc80      	pop	{r7}
 8006b80:	4770      	bx	lr

08006b82 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b085      	sub	sp, #20
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	60f8      	str	r0, [r7, #12]
 8006b8a:	60b9      	str	r1, [r7, #8]
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	88fa      	ldrh	r2, [r7, #6]
 8006b9a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	88fa      	ldrh	r2, [r7, #6]
 8006ba0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2222      	movs	r2, #34	; 0x22
 8006bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d007      	beq.n	8006bc8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68da      	ldr	r2, [r3, #12]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bc6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	695a      	ldr	r2, [r3, #20]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f042 0201 	orr.w	r2, r2, #1
 8006bd6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68da      	ldr	r2, [r3, #12]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f042 0220 	orr.w	r2, r2, #32
 8006be6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3714      	adds	r7, #20
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bc80      	pop	{r7}
 8006bf2:	4770      	bx	lr

08006bf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b095      	sub	sp, #84	; 0x54
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	330c      	adds	r3, #12
 8006c02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c06:	e853 3f00 	ldrex	r3, [r3]
 8006c0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	330c      	adds	r3, #12
 8006c1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c1c:	643a      	str	r2, [r7, #64]	; 0x40
 8006c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c24:	e841 2300 	strex	r3, r2, [r1]
 8006c28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1e5      	bne.n	8006bfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	3314      	adds	r3, #20
 8006c36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c38:	6a3b      	ldr	r3, [r7, #32]
 8006c3a:	e853 3f00 	ldrex	r3, [r3]
 8006c3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	f023 0301 	bic.w	r3, r3, #1
 8006c46:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	3314      	adds	r3, #20
 8006c4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c58:	e841 2300 	strex	r3, r2, [r1]
 8006c5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1e5      	bne.n	8006c30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d119      	bne.n	8006ca0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	330c      	adds	r3, #12
 8006c72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	e853 3f00 	ldrex	r3, [r3]
 8006c7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	f023 0310 	bic.w	r3, r3, #16
 8006c82:	647b      	str	r3, [r7, #68]	; 0x44
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	330c      	adds	r3, #12
 8006c8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c8c:	61ba      	str	r2, [r7, #24]
 8006c8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c90:	6979      	ldr	r1, [r7, #20]
 8006c92:	69ba      	ldr	r2, [r7, #24]
 8006c94:	e841 2300 	strex	r3, r2, [r1]
 8006c98:	613b      	str	r3, [r7, #16]
   return(result);
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1e5      	bne.n	8006c6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2220      	movs	r2, #32
 8006ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006cae:	bf00      	nop
 8006cb0:	3754      	adds	r7, #84	; 0x54
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bc80      	pop	{r7}
 8006cb6:	4770      	bx	lr

08006cb8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	f7ff ff41 	bl	8006b5a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cd8:	bf00      	nop
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2b21      	cmp	r3, #33	; 0x21
 8006cf2:	d13e      	bne.n	8006d72 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cfc:	d114      	bne.n	8006d28 <UART_Transmit_IT+0x48>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d110      	bne.n	8006d28 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a1b      	ldr	r3, [r3, #32]
 8006d0a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	881b      	ldrh	r3, [r3, #0]
 8006d10:	461a      	mov	r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d1a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6a1b      	ldr	r3, [r3, #32]
 8006d20:	1c9a      	adds	r2, r3, #2
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	621a      	str	r2, [r3, #32]
 8006d26:	e008      	b.n	8006d3a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a1b      	ldr	r3, [r3, #32]
 8006d2c:	1c59      	adds	r1, r3, #1
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	6211      	str	r1, [r2, #32]
 8006d32:	781a      	ldrb	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	3b01      	subs	r3, #1
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	4619      	mov	r1, r3
 8006d48:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10f      	bne.n	8006d6e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68da      	ldr	r2, [r3, #12]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d5c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68da      	ldr	r2, [r3, #12]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d6c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	e000      	b.n	8006d74 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006d72:	2302      	movs	r3, #2
  }
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3714      	adds	r7, #20
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bc80      	pop	{r7}
 8006d7c:	4770      	bx	lr

08006d7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b082      	sub	sp, #8
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68da      	ldr	r2, [r3, #12]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2220      	movs	r2, #32
 8006d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7ff fed2 	bl	8006b48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3708      	adds	r7, #8
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b08c      	sub	sp, #48	; 0x30
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	2b22      	cmp	r3, #34	; 0x22
 8006dc0:	f040 80ae 	bne.w	8006f20 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dcc:	d117      	bne.n	8006dfe <UART_Receive_IT+0x50>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d113      	bne.n	8006dfe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dde:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df6:	1c9a      	adds	r2, r3, #2
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	629a      	str	r2, [r3, #40]	; 0x28
 8006dfc:	e026      	b.n	8006e4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e02:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006e04:	2300      	movs	r3, #0
 8006e06:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e10:	d007      	beq.n	8006e22 <UART_Receive_IT+0x74>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10a      	bne.n	8006e30 <UART_Receive_IT+0x82>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d106      	bne.n	8006e30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	b2da      	uxtb	r2, r3
 8006e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2c:	701a      	strb	r2, [r3, #0]
 8006e2e:	e008      	b.n	8006e42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e3c:	b2da      	uxtb	r2, r3
 8006e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e46:	1c5a      	adds	r2, r3, #1
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	3b01      	subs	r3, #1
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	4619      	mov	r1, r3
 8006e5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d15d      	bne.n	8006f1c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68da      	ldr	r2, [r3, #12]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f022 0220 	bic.w	r2, r2, #32
 8006e6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68da      	ldr	r2, [r3, #12]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	695a      	ldr	r2, [r3, #20]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 0201 	bic.w	r2, r2, #1
 8006e8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2220      	movs	r2, #32
 8006e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d135      	bne.n	8006f12 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	330c      	adds	r3, #12
 8006eb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	e853 3f00 	ldrex	r3, [r3]
 8006eba:	613b      	str	r3, [r7, #16]
   return(result);
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	f023 0310 	bic.w	r3, r3, #16
 8006ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	330c      	adds	r3, #12
 8006eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ecc:	623a      	str	r2, [r7, #32]
 8006ece:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed0:	69f9      	ldr	r1, [r7, #28]
 8006ed2:	6a3a      	ldr	r2, [r7, #32]
 8006ed4:	e841 2300 	strex	r3, r2, [r1]
 8006ed8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1e5      	bne.n	8006eac <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0310 	and.w	r3, r3, #16
 8006eea:	2b10      	cmp	r3, #16
 8006eec:	d10a      	bne.n	8006f04 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006eee:	2300      	movs	r3, #0
 8006ef0:	60fb      	str	r3, [r7, #12]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	60fb      	str	r3, [r7, #12]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	60fb      	str	r3, [r7, #12]
 8006f02:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f08:	4619      	mov	r1, r3
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f7ff fe2e 	bl	8006b6c <HAL_UARTEx_RxEventCallback>
 8006f10:	e002      	b.n	8006f18 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f7fb fd44 	bl	80029a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	e002      	b.n	8006f22 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	e000      	b.n	8006f22 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006f20:	2302      	movs	r3, #2
  }
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3730      	adds	r7, #48	; 0x30
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
	...

08006f2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	68da      	ldr	r2, [r3, #12]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	430a      	orrs	r2, r1
 8006f48:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	689a      	ldr	r2, [r3, #8]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	431a      	orrs	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006f66:	f023 030c 	bic.w	r3, r3, #12
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	6812      	ldr	r2, [r2, #0]
 8006f6e:	68b9      	ldr	r1, [r7, #8]
 8006f70:	430b      	orrs	r3, r1
 8006f72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	699a      	ldr	r2, [r3, #24]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	430a      	orrs	r2, r1
 8006f88:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a2c      	ldr	r2, [pc, #176]	; (8007040 <UART_SetConfig+0x114>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d103      	bne.n	8006f9c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006f94:	f7fe fe7a 	bl	8005c8c <HAL_RCC_GetPCLK2Freq>
 8006f98:	60f8      	str	r0, [r7, #12]
 8006f9a:	e002      	b.n	8006fa2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006f9c:	f7fe fe62 	bl	8005c64 <HAL_RCC_GetPCLK1Freq>
 8006fa0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	4413      	add	r3, r2
 8006faa:	009a      	lsls	r2, r3, #2
 8006fac:	441a      	add	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb8:	4a22      	ldr	r2, [pc, #136]	; (8007044 <UART_SetConfig+0x118>)
 8006fba:	fba2 2303 	umull	r2, r3, r2, r3
 8006fbe:	095b      	lsrs	r3, r3, #5
 8006fc0:	0119      	lsls	r1, r3, #4
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	4413      	add	r3, r2
 8006fca:	009a      	lsls	r2, r3, #2
 8006fcc:	441a      	add	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006fd8:	4b1a      	ldr	r3, [pc, #104]	; (8007044 <UART_SetConfig+0x118>)
 8006fda:	fba3 0302 	umull	r0, r3, r3, r2
 8006fde:	095b      	lsrs	r3, r3, #5
 8006fe0:	2064      	movs	r0, #100	; 0x64
 8006fe2:	fb00 f303 	mul.w	r3, r0, r3
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	011b      	lsls	r3, r3, #4
 8006fea:	3332      	adds	r3, #50	; 0x32
 8006fec:	4a15      	ldr	r2, [pc, #84]	; (8007044 <UART_SetConfig+0x118>)
 8006fee:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff2:	095b      	lsrs	r3, r3, #5
 8006ff4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ff8:	4419      	add	r1, r3
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	4413      	add	r3, r2
 8007002:	009a      	lsls	r2, r3, #2
 8007004:	441a      	add	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007010:	4b0c      	ldr	r3, [pc, #48]	; (8007044 <UART_SetConfig+0x118>)
 8007012:	fba3 0302 	umull	r0, r3, r3, r2
 8007016:	095b      	lsrs	r3, r3, #5
 8007018:	2064      	movs	r0, #100	; 0x64
 800701a:	fb00 f303 	mul.w	r3, r0, r3
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	011b      	lsls	r3, r3, #4
 8007022:	3332      	adds	r3, #50	; 0x32
 8007024:	4a07      	ldr	r2, [pc, #28]	; (8007044 <UART_SetConfig+0x118>)
 8007026:	fba2 2303 	umull	r2, r3, r2, r3
 800702a:	095b      	lsrs	r3, r3, #5
 800702c:	f003 020f 	and.w	r2, r3, #15
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	440a      	add	r2, r1
 8007036:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007038:	bf00      	nop
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	40013800 	.word	0x40013800
 8007044:	51eb851f 	.word	0x51eb851f

08007048 <atof>:
 8007048:	2100      	movs	r1, #0
 800704a:	f000 be19 	b.w	8007c80 <strtod>

0800704e <atoi>:
 800704e:	220a      	movs	r2, #10
 8007050:	2100      	movs	r1, #0
 8007052:	f000 be9f 	b.w	8007d94 <strtol>

08007056 <sulp>:
 8007056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800705a:	460f      	mov	r7, r1
 800705c:	4690      	mov	r8, r2
 800705e:	f003 fb37 	bl	800a6d0 <__ulp>
 8007062:	4604      	mov	r4, r0
 8007064:	460d      	mov	r5, r1
 8007066:	f1b8 0f00 	cmp.w	r8, #0
 800706a:	d011      	beq.n	8007090 <sulp+0x3a>
 800706c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007070:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007074:	2b00      	cmp	r3, #0
 8007076:	dd0b      	ble.n	8007090 <sulp+0x3a>
 8007078:	2400      	movs	r4, #0
 800707a:	051b      	lsls	r3, r3, #20
 800707c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007080:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007084:	4622      	mov	r2, r4
 8007086:	462b      	mov	r3, r5
 8007088:	f7f9 fa30 	bl	80004ec <__aeabi_dmul>
 800708c:	4604      	mov	r4, r0
 800708e:	460d      	mov	r5, r1
 8007090:	4620      	mov	r0, r4
 8007092:	4629      	mov	r1, r5
 8007094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007098 <_strtod_l>:
 8007098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800709c:	b09f      	sub	sp, #124	; 0x7c
 800709e:	9217      	str	r2, [sp, #92]	; 0x5c
 80070a0:	2200      	movs	r2, #0
 80070a2:	4604      	mov	r4, r0
 80070a4:	921a      	str	r2, [sp, #104]	; 0x68
 80070a6:	460d      	mov	r5, r1
 80070a8:	f04f 0800 	mov.w	r8, #0
 80070ac:	f04f 0900 	mov.w	r9, #0
 80070b0:	460a      	mov	r2, r1
 80070b2:	9219      	str	r2, [sp, #100]	; 0x64
 80070b4:	7811      	ldrb	r1, [r2, #0]
 80070b6:	292b      	cmp	r1, #43	; 0x2b
 80070b8:	d04a      	beq.n	8007150 <_strtod_l+0xb8>
 80070ba:	d838      	bhi.n	800712e <_strtod_l+0x96>
 80070bc:	290d      	cmp	r1, #13
 80070be:	d832      	bhi.n	8007126 <_strtod_l+0x8e>
 80070c0:	2908      	cmp	r1, #8
 80070c2:	d832      	bhi.n	800712a <_strtod_l+0x92>
 80070c4:	2900      	cmp	r1, #0
 80070c6:	d03b      	beq.n	8007140 <_strtod_l+0xa8>
 80070c8:	2200      	movs	r2, #0
 80070ca:	920e      	str	r2, [sp, #56]	; 0x38
 80070cc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80070ce:	7832      	ldrb	r2, [r6, #0]
 80070d0:	2a30      	cmp	r2, #48	; 0x30
 80070d2:	f040 80b2 	bne.w	800723a <_strtod_l+0x1a2>
 80070d6:	7872      	ldrb	r2, [r6, #1]
 80070d8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80070dc:	2a58      	cmp	r2, #88	; 0x58
 80070de:	d16e      	bne.n	80071be <_strtod_l+0x126>
 80070e0:	9302      	str	r3, [sp, #8]
 80070e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070e4:	4620      	mov	r0, r4
 80070e6:	9301      	str	r3, [sp, #4]
 80070e8:	ab1a      	add	r3, sp, #104	; 0x68
 80070ea:	9300      	str	r3, [sp, #0]
 80070ec:	4a8c      	ldr	r2, [pc, #560]	; (8007320 <_strtod_l+0x288>)
 80070ee:	ab1b      	add	r3, sp, #108	; 0x6c
 80070f0:	a919      	add	r1, sp, #100	; 0x64
 80070f2:	f002 fbc9 	bl	8009888 <__gethex>
 80070f6:	f010 070f 	ands.w	r7, r0, #15
 80070fa:	4605      	mov	r5, r0
 80070fc:	d005      	beq.n	800710a <_strtod_l+0x72>
 80070fe:	2f06      	cmp	r7, #6
 8007100:	d128      	bne.n	8007154 <_strtod_l+0xbc>
 8007102:	2300      	movs	r3, #0
 8007104:	3601      	adds	r6, #1
 8007106:	9619      	str	r6, [sp, #100]	; 0x64
 8007108:	930e      	str	r3, [sp, #56]	; 0x38
 800710a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800710c:	2b00      	cmp	r3, #0
 800710e:	f040 85a0 	bne.w	8007c52 <_strtod_l+0xbba>
 8007112:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007114:	b1cb      	cbz	r3, 800714a <_strtod_l+0xb2>
 8007116:	4642      	mov	r2, r8
 8007118:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800711c:	4610      	mov	r0, r2
 800711e:	4619      	mov	r1, r3
 8007120:	b01f      	add	sp, #124	; 0x7c
 8007122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007126:	2920      	cmp	r1, #32
 8007128:	d1ce      	bne.n	80070c8 <_strtod_l+0x30>
 800712a:	3201      	adds	r2, #1
 800712c:	e7c1      	b.n	80070b2 <_strtod_l+0x1a>
 800712e:	292d      	cmp	r1, #45	; 0x2d
 8007130:	d1ca      	bne.n	80070c8 <_strtod_l+0x30>
 8007132:	2101      	movs	r1, #1
 8007134:	910e      	str	r1, [sp, #56]	; 0x38
 8007136:	1c51      	adds	r1, r2, #1
 8007138:	9119      	str	r1, [sp, #100]	; 0x64
 800713a:	7852      	ldrb	r2, [r2, #1]
 800713c:	2a00      	cmp	r2, #0
 800713e:	d1c5      	bne.n	80070cc <_strtod_l+0x34>
 8007140:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007142:	9519      	str	r5, [sp, #100]	; 0x64
 8007144:	2b00      	cmp	r3, #0
 8007146:	f040 8582 	bne.w	8007c4e <_strtod_l+0xbb6>
 800714a:	4642      	mov	r2, r8
 800714c:	464b      	mov	r3, r9
 800714e:	e7e5      	b.n	800711c <_strtod_l+0x84>
 8007150:	2100      	movs	r1, #0
 8007152:	e7ef      	b.n	8007134 <_strtod_l+0x9c>
 8007154:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007156:	b13a      	cbz	r2, 8007168 <_strtod_l+0xd0>
 8007158:	2135      	movs	r1, #53	; 0x35
 800715a:	a81c      	add	r0, sp, #112	; 0x70
 800715c:	f003 fba4 	bl	800a8a8 <__copybits>
 8007160:	4620      	mov	r0, r4
 8007162:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007164:	f002 ff88 	bl	800a078 <_Bfree>
 8007168:	3f01      	subs	r7, #1
 800716a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800716c:	2f04      	cmp	r7, #4
 800716e:	d806      	bhi.n	800717e <_strtod_l+0xe6>
 8007170:	e8df f007 	tbb	[pc, r7]
 8007174:	201d0314 	.word	0x201d0314
 8007178:	14          	.byte	0x14
 8007179:	00          	.byte	0x00
 800717a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800717e:	05e9      	lsls	r1, r5, #23
 8007180:	bf48      	it	mi
 8007182:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007186:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800718a:	0d1b      	lsrs	r3, r3, #20
 800718c:	051b      	lsls	r3, r3, #20
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1bb      	bne.n	800710a <_strtod_l+0x72>
 8007192:	f001 fc09 	bl	80089a8 <__errno>
 8007196:	2322      	movs	r3, #34	; 0x22
 8007198:	6003      	str	r3, [r0, #0]
 800719a:	e7b6      	b.n	800710a <_strtod_l+0x72>
 800719c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80071a0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80071a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80071a8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80071ac:	e7e7      	b.n	800717e <_strtod_l+0xe6>
 80071ae:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8007324 <_strtod_l+0x28c>
 80071b2:	e7e4      	b.n	800717e <_strtod_l+0xe6>
 80071b4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80071b8:	f04f 38ff 	mov.w	r8, #4294967295
 80071bc:	e7df      	b.n	800717e <_strtod_l+0xe6>
 80071be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80071c0:	1c5a      	adds	r2, r3, #1
 80071c2:	9219      	str	r2, [sp, #100]	; 0x64
 80071c4:	785b      	ldrb	r3, [r3, #1]
 80071c6:	2b30      	cmp	r3, #48	; 0x30
 80071c8:	d0f9      	beq.n	80071be <_strtod_l+0x126>
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d09d      	beq.n	800710a <_strtod_l+0x72>
 80071ce:	2301      	movs	r3, #1
 80071d0:	f04f 0a00 	mov.w	sl, #0
 80071d4:	220a      	movs	r2, #10
 80071d6:	46d3      	mov	fp, sl
 80071d8:	9305      	str	r3, [sp, #20]
 80071da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80071dc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80071e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80071e2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80071e4:	7806      	ldrb	r6, [r0, #0]
 80071e6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80071ea:	b2d9      	uxtb	r1, r3
 80071ec:	2909      	cmp	r1, #9
 80071ee:	d926      	bls.n	800723e <_strtod_l+0x1a6>
 80071f0:	2201      	movs	r2, #1
 80071f2:	494d      	ldr	r1, [pc, #308]	; (8007328 <_strtod_l+0x290>)
 80071f4:	f001 fb63 	bl	80088be <strncmp>
 80071f8:	2800      	cmp	r0, #0
 80071fa:	d030      	beq.n	800725e <_strtod_l+0x1c6>
 80071fc:	2000      	movs	r0, #0
 80071fe:	4632      	mov	r2, r6
 8007200:	4603      	mov	r3, r0
 8007202:	465e      	mov	r6, fp
 8007204:	9008      	str	r0, [sp, #32]
 8007206:	2a65      	cmp	r2, #101	; 0x65
 8007208:	d001      	beq.n	800720e <_strtod_l+0x176>
 800720a:	2a45      	cmp	r2, #69	; 0x45
 800720c:	d113      	bne.n	8007236 <_strtod_l+0x19e>
 800720e:	b91e      	cbnz	r6, 8007218 <_strtod_l+0x180>
 8007210:	9a05      	ldr	r2, [sp, #20]
 8007212:	4302      	orrs	r2, r0
 8007214:	d094      	beq.n	8007140 <_strtod_l+0xa8>
 8007216:	2600      	movs	r6, #0
 8007218:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800721a:	1c6a      	adds	r2, r5, #1
 800721c:	9219      	str	r2, [sp, #100]	; 0x64
 800721e:	786a      	ldrb	r2, [r5, #1]
 8007220:	2a2b      	cmp	r2, #43	; 0x2b
 8007222:	d074      	beq.n	800730e <_strtod_l+0x276>
 8007224:	2a2d      	cmp	r2, #45	; 0x2d
 8007226:	d078      	beq.n	800731a <_strtod_l+0x282>
 8007228:	f04f 0c00 	mov.w	ip, #0
 800722c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007230:	2909      	cmp	r1, #9
 8007232:	d97f      	bls.n	8007334 <_strtod_l+0x29c>
 8007234:	9519      	str	r5, [sp, #100]	; 0x64
 8007236:	2700      	movs	r7, #0
 8007238:	e09e      	b.n	8007378 <_strtod_l+0x2e0>
 800723a:	2300      	movs	r3, #0
 800723c:	e7c8      	b.n	80071d0 <_strtod_l+0x138>
 800723e:	f1bb 0f08 	cmp.w	fp, #8
 8007242:	bfd8      	it	le
 8007244:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8007246:	f100 0001 	add.w	r0, r0, #1
 800724a:	bfd6      	itet	le
 800724c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007250:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007254:	930a      	strle	r3, [sp, #40]	; 0x28
 8007256:	f10b 0b01 	add.w	fp, fp, #1
 800725a:	9019      	str	r0, [sp, #100]	; 0x64
 800725c:	e7c1      	b.n	80071e2 <_strtod_l+0x14a>
 800725e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007260:	1c5a      	adds	r2, r3, #1
 8007262:	9219      	str	r2, [sp, #100]	; 0x64
 8007264:	785a      	ldrb	r2, [r3, #1]
 8007266:	f1bb 0f00 	cmp.w	fp, #0
 800726a:	d037      	beq.n	80072dc <_strtod_l+0x244>
 800726c:	465e      	mov	r6, fp
 800726e:	9008      	str	r0, [sp, #32]
 8007270:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007274:	2b09      	cmp	r3, #9
 8007276:	d912      	bls.n	800729e <_strtod_l+0x206>
 8007278:	2301      	movs	r3, #1
 800727a:	e7c4      	b.n	8007206 <_strtod_l+0x16e>
 800727c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800727e:	3001      	adds	r0, #1
 8007280:	1c5a      	adds	r2, r3, #1
 8007282:	9219      	str	r2, [sp, #100]	; 0x64
 8007284:	785a      	ldrb	r2, [r3, #1]
 8007286:	2a30      	cmp	r2, #48	; 0x30
 8007288:	d0f8      	beq.n	800727c <_strtod_l+0x1e4>
 800728a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800728e:	2b08      	cmp	r3, #8
 8007290:	f200 84e4 	bhi.w	8007c5c <_strtod_l+0xbc4>
 8007294:	9008      	str	r0, [sp, #32]
 8007296:	2000      	movs	r0, #0
 8007298:	4606      	mov	r6, r0
 800729a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800729c:	930b      	str	r3, [sp, #44]	; 0x2c
 800729e:	3a30      	subs	r2, #48	; 0x30
 80072a0:	f100 0301 	add.w	r3, r0, #1
 80072a4:	d014      	beq.n	80072d0 <_strtod_l+0x238>
 80072a6:	9908      	ldr	r1, [sp, #32]
 80072a8:	eb00 0c06 	add.w	ip, r0, r6
 80072ac:	4419      	add	r1, r3
 80072ae:	9108      	str	r1, [sp, #32]
 80072b0:	4633      	mov	r3, r6
 80072b2:	210a      	movs	r1, #10
 80072b4:	4563      	cmp	r3, ip
 80072b6:	d113      	bne.n	80072e0 <_strtod_l+0x248>
 80072b8:	1833      	adds	r3, r6, r0
 80072ba:	2b08      	cmp	r3, #8
 80072bc:	f106 0601 	add.w	r6, r6, #1
 80072c0:	4406      	add	r6, r0
 80072c2:	dc1a      	bgt.n	80072fa <_strtod_l+0x262>
 80072c4:	230a      	movs	r3, #10
 80072c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80072c8:	fb03 2301 	mla	r3, r3, r1, r2
 80072cc:	930a      	str	r3, [sp, #40]	; 0x28
 80072ce:	2300      	movs	r3, #0
 80072d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80072d2:	4618      	mov	r0, r3
 80072d4:	1c51      	adds	r1, r2, #1
 80072d6:	9119      	str	r1, [sp, #100]	; 0x64
 80072d8:	7852      	ldrb	r2, [r2, #1]
 80072da:	e7c9      	b.n	8007270 <_strtod_l+0x1d8>
 80072dc:	4658      	mov	r0, fp
 80072de:	e7d2      	b.n	8007286 <_strtod_l+0x1ee>
 80072e0:	2b08      	cmp	r3, #8
 80072e2:	f103 0301 	add.w	r3, r3, #1
 80072e6:	dc03      	bgt.n	80072f0 <_strtod_l+0x258>
 80072e8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80072ea:	434f      	muls	r7, r1
 80072ec:	970a      	str	r7, [sp, #40]	; 0x28
 80072ee:	e7e1      	b.n	80072b4 <_strtod_l+0x21c>
 80072f0:	2b10      	cmp	r3, #16
 80072f2:	bfd8      	it	le
 80072f4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80072f8:	e7dc      	b.n	80072b4 <_strtod_l+0x21c>
 80072fa:	2e10      	cmp	r6, #16
 80072fc:	bfdc      	itt	le
 80072fe:	230a      	movle	r3, #10
 8007300:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007304:	e7e3      	b.n	80072ce <_strtod_l+0x236>
 8007306:	2300      	movs	r3, #0
 8007308:	9308      	str	r3, [sp, #32]
 800730a:	2301      	movs	r3, #1
 800730c:	e780      	b.n	8007210 <_strtod_l+0x178>
 800730e:	f04f 0c00 	mov.w	ip, #0
 8007312:	1caa      	adds	r2, r5, #2
 8007314:	9219      	str	r2, [sp, #100]	; 0x64
 8007316:	78aa      	ldrb	r2, [r5, #2]
 8007318:	e788      	b.n	800722c <_strtod_l+0x194>
 800731a:	f04f 0c01 	mov.w	ip, #1
 800731e:	e7f8      	b.n	8007312 <_strtod_l+0x27a>
 8007320:	0800d358 	.word	0x0800d358
 8007324:	7ff00000 	.word	0x7ff00000
 8007328:	0800d356 	.word	0x0800d356
 800732c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800732e:	1c51      	adds	r1, r2, #1
 8007330:	9119      	str	r1, [sp, #100]	; 0x64
 8007332:	7852      	ldrb	r2, [r2, #1]
 8007334:	2a30      	cmp	r2, #48	; 0x30
 8007336:	d0f9      	beq.n	800732c <_strtod_l+0x294>
 8007338:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800733c:	2908      	cmp	r1, #8
 800733e:	f63f af7a 	bhi.w	8007236 <_strtod_l+0x19e>
 8007342:	3a30      	subs	r2, #48	; 0x30
 8007344:	9209      	str	r2, [sp, #36]	; 0x24
 8007346:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007348:	920c      	str	r2, [sp, #48]	; 0x30
 800734a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800734c:	1c57      	adds	r7, r2, #1
 800734e:	9719      	str	r7, [sp, #100]	; 0x64
 8007350:	7852      	ldrb	r2, [r2, #1]
 8007352:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007356:	f1be 0f09 	cmp.w	lr, #9
 800735a:	d938      	bls.n	80073ce <_strtod_l+0x336>
 800735c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800735e:	1a7f      	subs	r7, r7, r1
 8007360:	2f08      	cmp	r7, #8
 8007362:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007366:	dc03      	bgt.n	8007370 <_strtod_l+0x2d8>
 8007368:	9909      	ldr	r1, [sp, #36]	; 0x24
 800736a:	428f      	cmp	r7, r1
 800736c:	bfa8      	it	ge
 800736e:	460f      	movge	r7, r1
 8007370:	f1bc 0f00 	cmp.w	ip, #0
 8007374:	d000      	beq.n	8007378 <_strtod_l+0x2e0>
 8007376:	427f      	negs	r7, r7
 8007378:	2e00      	cmp	r6, #0
 800737a:	d14f      	bne.n	800741c <_strtod_l+0x384>
 800737c:	9905      	ldr	r1, [sp, #20]
 800737e:	4301      	orrs	r1, r0
 8007380:	f47f aec3 	bne.w	800710a <_strtod_l+0x72>
 8007384:	2b00      	cmp	r3, #0
 8007386:	f47f aedb 	bne.w	8007140 <_strtod_l+0xa8>
 800738a:	2a69      	cmp	r2, #105	; 0x69
 800738c:	d029      	beq.n	80073e2 <_strtod_l+0x34a>
 800738e:	dc26      	bgt.n	80073de <_strtod_l+0x346>
 8007390:	2a49      	cmp	r2, #73	; 0x49
 8007392:	d026      	beq.n	80073e2 <_strtod_l+0x34a>
 8007394:	2a4e      	cmp	r2, #78	; 0x4e
 8007396:	f47f aed3 	bne.w	8007140 <_strtod_l+0xa8>
 800739a:	499a      	ldr	r1, [pc, #616]	; (8007604 <_strtod_l+0x56c>)
 800739c:	a819      	add	r0, sp, #100	; 0x64
 800739e:	f002 fcb5 	bl	8009d0c <__match>
 80073a2:	2800      	cmp	r0, #0
 80073a4:	f43f aecc 	beq.w	8007140 <_strtod_l+0xa8>
 80073a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	2b28      	cmp	r3, #40	; 0x28
 80073ae:	d12f      	bne.n	8007410 <_strtod_l+0x378>
 80073b0:	4995      	ldr	r1, [pc, #596]	; (8007608 <_strtod_l+0x570>)
 80073b2:	aa1c      	add	r2, sp, #112	; 0x70
 80073b4:	a819      	add	r0, sp, #100	; 0x64
 80073b6:	f002 fcbd 	bl	8009d34 <__hexnan>
 80073ba:	2805      	cmp	r0, #5
 80073bc:	d128      	bne.n	8007410 <_strtod_l+0x378>
 80073be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80073c0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80073c4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80073c8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80073cc:	e69d      	b.n	800710a <_strtod_l+0x72>
 80073ce:	210a      	movs	r1, #10
 80073d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80073d2:	fb01 2107 	mla	r1, r1, r7, r2
 80073d6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80073da:	9209      	str	r2, [sp, #36]	; 0x24
 80073dc:	e7b5      	b.n	800734a <_strtod_l+0x2b2>
 80073de:	2a6e      	cmp	r2, #110	; 0x6e
 80073e0:	e7d9      	b.n	8007396 <_strtod_l+0x2fe>
 80073e2:	498a      	ldr	r1, [pc, #552]	; (800760c <_strtod_l+0x574>)
 80073e4:	a819      	add	r0, sp, #100	; 0x64
 80073e6:	f002 fc91 	bl	8009d0c <__match>
 80073ea:	2800      	cmp	r0, #0
 80073ec:	f43f aea8 	beq.w	8007140 <_strtod_l+0xa8>
 80073f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80073f2:	4987      	ldr	r1, [pc, #540]	; (8007610 <_strtod_l+0x578>)
 80073f4:	3b01      	subs	r3, #1
 80073f6:	a819      	add	r0, sp, #100	; 0x64
 80073f8:	9319      	str	r3, [sp, #100]	; 0x64
 80073fa:	f002 fc87 	bl	8009d0c <__match>
 80073fe:	b910      	cbnz	r0, 8007406 <_strtod_l+0x36e>
 8007400:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007402:	3301      	adds	r3, #1
 8007404:	9319      	str	r3, [sp, #100]	; 0x64
 8007406:	f04f 0800 	mov.w	r8, #0
 800740a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8007614 <_strtod_l+0x57c>
 800740e:	e67c      	b.n	800710a <_strtod_l+0x72>
 8007410:	4881      	ldr	r0, [pc, #516]	; (8007618 <_strtod_l+0x580>)
 8007412:	f001 fb13 	bl	8008a3c <nan>
 8007416:	4680      	mov	r8, r0
 8007418:	4689      	mov	r9, r1
 800741a:	e676      	b.n	800710a <_strtod_l+0x72>
 800741c:	9b08      	ldr	r3, [sp, #32]
 800741e:	f1bb 0f00 	cmp.w	fp, #0
 8007422:	bf08      	it	eq
 8007424:	46b3      	moveq	fp, r6
 8007426:	1afb      	subs	r3, r7, r3
 8007428:	2e10      	cmp	r6, #16
 800742a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800742c:	4635      	mov	r5, r6
 800742e:	9309      	str	r3, [sp, #36]	; 0x24
 8007430:	bfa8      	it	ge
 8007432:	2510      	movge	r5, #16
 8007434:	f7f8 ffe0 	bl	80003f8 <__aeabi_ui2d>
 8007438:	2e09      	cmp	r6, #9
 800743a:	4680      	mov	r8, r0
 800743c:	4689      	mov	r9, r1
 800743e:	dd13      	ble.n	8007468 <_strtod_l+0x3d0>
 8007440:	4b76      	ldr	r3, [pc, #472]	; (800761c <_strtod_l+0x584>)
 8007442:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007446:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800744a:	f7f9 f84f 	bl	80004ec <__aeabi_dmul>
 800744e:	4680      	mov	r8, r0
 8007450:	4650      	mov	r0, sl
 8007452:	4689      	mov	r9, r1
 8007454:	f7f8 ffd0 	bl	80003f8 <__aeabi_ui2d>
 8007458:	4602      	mov	r2, r0
 800745a:	460b      	mov	r3, r1
 800745c:	4640      	mov	r0, r8
 800745e:	4649      	mov	r1, r9
 8007460:	f7f8 fe8e 	bl	8000180 <__adddf3>
 8007464:	4680      	mov	r8, r0
 8007466:	4689      	mov	r9, r1
 8007468:	2e0f      	cmp	r6, #15
 800746a:	dc36      	bgt.n	80074da <_strtod_l+0x442>
 800746c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800746e:	2b00      	cmp	r3, #0
 8007470:	f43f ae4b 	beq.w	800710a <_strtod_l+0x72>
 8007474:	dd22      	ble.n	80074bc <_strtod_l+0x424>
 8007476:	2b16      	cmp	r3, #22
 8007478:	dc09      	bgt.n	800748e <_strtod_l+0x3f6>
 800747a:	4968      	ldr	r1, [pc, #416]	; (800761c <_strtod_l+0x584>)
 800747c:	4642      	mov	r2, r8
 800747e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007482:	464b      	mov	r3, r9
 8007484:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007488:	f7f9 f830 	bl	80004ec <__aeabi_dmul>
 800748c:	e7c3      	b.n	8007416 <_strtod_l+0x37e>
 800748e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007490:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007494:	4293      	cmp	r3, r2
 8007496:	db20      	blt.n	80074da <_strtod_l+0x442>
 8007498:	4c60      	ldr	r4, [pc, #384]	; (800761c <_strtod_l+0x584>)
 800749a:	f1c6 060f 	rsb	r6, r6, #15
 800749e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80074a2:	4642      	mov	r2, r8
 80074a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074a8:	464b      	mov	r3, r9
 80074aa:	f7f9 f81f 	bl	80004ec <__aeabi_dmul>
 80074ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074b0:	1b9e      	subs	r6, r3, r6
 80074b2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80074b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80074ba:	e7e5      	b.n	8007488 <_strtod_l+0x3f0>
 80074bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074be:	3316      	adds	r3, #22
 80074c0:	db0b      	blt.n	80074da <_strtod_l+0x442>
 80074c2:	9b08      	ldr	r3, [sp, #32]
 80074c4:	4640      	mov	r0, r8
 80074c6:	1bdf      	subs	r7, r3, r7
 80074c8:	4b54      	ldr	r3, [pc, #336]	; (800761c <_strtod_l+0x584>)
 80074ca:	4649      	mov	r1, r9
 80074cc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80074d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074d4:	f7f9 f934 	bl	8000740 <__aeabi_ddiv>
 80074d8:	e79d      	b.n	8007416 <_strtod_l+0x37e>
 80074da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074dc:	1b75      	subs	r5, r6, r5
 80074de:	441d      	add	r5, r3
 80074e0:	2d00      	cmp	r5, #0
 80074e2:	dd70      	ble.n	80075c6 <_strtod_l+0x52e>
 80074e4:	f015 030f 	ands.w	r3, r5, #15
 80074e8:	d00a      	beq.n	8007500 <_strtod_l+0x468>
 80074ea:	494c      	ldr	r1, [pc, #304]	; (800761c <_strtod_l+0x584>)
 80074ec:	4642      	mov	r2, r8
 80074ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80074f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074f6:	464b      	mov	r3, r9
 80074f8:	f7f8 fff8 	bl	80004ec <__aeabi_dmul>
 80074fc:	4680      	mov	r8, r0
 80074fe:	4689      	mov	r9, r1
 8007500:	f035 050f 	bics.w	r5, r5, #15
 8007504:	d04d      	beq.n	80075a2 <_strtod_l+0x50a>
 8007506:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800750a:	dd22      	ble.n	8007552 <_strtod_l+0x4ba>
 800750c:	2600      	movs	r6, #0
 800750e:	46b3      	mov	fp, r6
 8007510:	960b      	str	r6, [sp, #44]	; 0x2c
 8007512:	9608      	str	r6, [sp, #32]
 8007514:	2322      	movs	r3, #34	; 0x22
 8007516:	f04f 0800 	mov.w	r8, #0
 800751a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8007614 <_strtod_l+0x57c>
 800751e:	6023      	str	r3, [r4, #0]
 8007520:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007522:	2b00      	cmp	r3, #0
 8007524:	f43f adf1 	beq.w	800710a <_strtod_l+0x72>
 8007528:	4620      	mov	r0, r4
 800752a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800752c:	f002 fda4 	bl	800a078 <_Bfree>
 8007530:	4620      	mov	r0, r4
 8007532:	9908      	ldr	r1, [sp, #32]
 8007534:	f002 fda0 	bl	800a078 <_Bfree>
 8007538:	4659      	mov	r1, fp
 800753a:	4620      	mov	r0, r4
 800753c:	f002 fd9c 	bl	800a078 <_Bfree>
 8007540:	4620      	mov	r0, r4
 8007542:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007544:	f002 fd98 	bl	800a078 <_Bfree>
 8007548:	4631      	mov	r1, r6
 800754a:	4620      	mov	r0, r4
 800754c:	f002 fd94 	bl	800a078 <_Bfree>
 8007550:	e5db      	b.n	800710a <_strtod_l+0x72>
 8007552:	4b33      	ldr	r3, [pc, #204]	; (8007620 <_strtod_l+0x588>)
 8007554:	4640      	mov	r0, r8
 8007556:	9305      	str	r3, [sp, #20]
 8007558:	2300      	movs	r3, #0
 800755a:	4649      	mov	r1, r9
 800755c:	469a      	mov	sl, r3
 800755e:	112d      	asrs	r5, r5, #4
 8007560:	2d01      	cmp	r5, #1
 8007562:	dc21      	bgt.n	80075a8 <_strtod_l+0x510>
 8007564:	b10b      	cbz	r3, 800756a <_strtod_l+0x4d2>
 8007566:	4680      	mov	r8, r0
 8007568:	4689      	mov	r9, r1
 800756a:	492d      	ldr	r1, [pc, #180]	; (8007620 <_strtod_l+0x588>)
 800756c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007570:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007574:	4642      	mov	r2, r8
 8007576:	e9d1 0100 	ldrd	r0, r1, [r1]
 800757a:	464b      	mov	r3, r9
 800757c:	f7f8 ffb6 	bl	80004ec <__aeabi_dmul>
 8007580:	4b24      	ldr	r3, [pc, #144]	; (8007614 <_strtod_l+0x57c>)
 8007582:	460a      	mov	r2, r1
 8007584:	400b      	ands	r3, r1
 8007586:	4927      	ldr	r1, [pc, #156]	; (8007624 <_strtod_l+0x58c>)
 8007588:	4680      	mov	r8, r0
 800758a:	428b      	cmp	r3, r1
 800758c:	d8be      	bhi.n	800750c <_strtod_l+0x474>
 800758e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007592:	428b      	cmp	r3, r1
 8007594:	bf86      	itte	hi
 8007596:	f04f 38ff 	movhi.w	r8, #4294967295
 800759a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8007628 <_strtod_l+0x590>
 800759e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80075a2:	2300      	movs	r3, #0
 80075a4:	9305      	str	r3, [sp, #20]
 80075a6:	e07b      	b.n	80076a0 <_strtod_l+0x608>
 80075a8:	07ea      	lsls	r2, r5, #31
 80075aa:	d505      	bpl.n	80075b8 <_strtod_l+0x520>
 80075ac:	9b05      	ldr	r3, [sp, #20]
 80075ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b2:	f7f8 ff9b 	bl	80004ec <__aeabi_dmul>
 80075b6:	2301      	movs	r3, #1
 80075b8:	9a05      	ldr	r2, [sp, #20]
 80075ba:	f10a 0a01 	add.w	sl, sl, #1
 80075be:	3208      	adds	r2, #8
 80075c0:	106d      	asrs	r5, r5, #1
 80075c2:	9205      	str	r2, [sp, #20]
 80075c4:	e7cc      	b.n	8007560 <_strtod_l+0x4c8>
 80075c6:	d0ec      	beq.n	80075a2 <_strtod_l+0x50a>
 80075c8:	426d      	negs	r5, r5
 80075ca:	f015 020f 	ands.w	r2, r5, #15
 80075ce:	d00a      	beq.n	80075e6 <_strtod_l+0x54e>
 80075d0:	4b12      	ldr	r3, [pc, #72]	; (800761c <_strtod_l+0x584>)
 80075d2:	4640      	mov	r0, r8
 80075d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075d8:	4649      	mov	r1, r9
 80075da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075de:	f7f9 f8af 	bl	8000740 <__aeabi_ddiv>
 80075e2:	4680      	mov	r8, r0
 80075e4:	4689      	mov	r9, r1
 80075e6:	112d      	asrs	r5, r5, #4
 80075e8:	d0db      	beq.n	80075a2 <_strtod_l+0x50a>
 80075ea:	2d1f      	cmp	r5, #31
 80075ec:	dd1e      	ble.n	800762c <_strtod_l+0x594>
 80075ee:	2600      	movs	r6, #0
 80075f0:	46b3      	mov	fp, r6
 80075f2:	960b      	str	r6, [sp, #44]	; 0x2c
 80075f4:	9608      	str	r6, [sp, #32]
 80075f6:	2322      	movs	r3, #34	; 0x22
 80075f8:	f04f 0800 	mov.w	r8, #0
 80075fc:	f04f 0900 	mov.w	r9, #0
 8007600:	6023      	str	r3, [r4, #0]
 8007602:	e78d      	b.n	8007520 <_strtod_l+0x488>
 8007604:	0800d4b6 	.word	0x0800d4b6
 8007608:	0800d36c 	.word	0x0800d36c
 800760c:	0800d4ae 	.word	0x0800d4ae
 8007610:	0800d4e8 	.word	0x0800d4e8
 8007614:	7ff00000 	.word	0x7ff00000
 8007618:	0800d778 	.word	0x0800d778
 800761c:	0800d658 	.word	0x0800d658
 8007620:	0800d630 	.word	0x0800d630
 8007624:	7ca00000 	.word	0x7ca00000
 8007628:	7fefffff 	.word	0x7fefffff
 800762c:	f015 0310 	ands.w	r3, r5, #16
 8007630:	bf18      	it	ne
 8007632:	236a      	movne	r3, #106	; 0x6a
 8007634:	4640      	mov	r0, r8
 8007636:	9305      	str	r3, [sp, #20]
 8007638:	4649      	mov	r1, r9
 800763a:	2300      	movs	r3, #0
 800763c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8007908 <_strtod_l+0x870>
 8007640:	07ea      	lsls	r2, r5, #31
 8007642:	d504      	bpl.n	800764e <_strtod_l+0x5b6>
 8007644:	e9da 2300 	ldrd	r2, r3, [sl]
 8007648:	f7f8 ff50 	bl	80004ec <__aeabi_dmul>
 800764c:	2301      	movs	r3, #1
 800764e:	106d      	asrs	r5, r5, #1
 8007650:	f10a 0a08 	add.w	sl, sl, #8
 8007654:	d1f4      	bne.n	8007640 <_strtod_l+0x5a8>
 8007656:	b10b      	cbz	r3, 800765c <_strtod_l+0x5c4>
 8007658:	4680      	mov	r8, r0
 800765a:	4689      	mov	r9, r1
 800765c:	9b05      	ldr	r3, [sp, #20]
 800765e:	b1bb      	cbz	r3, 8007690 <_strtod_l+0x5f8>
 8007660:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007664:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007668:	2b00      	cmp	r3, #0
 800766a:	4649      	mov	r1, r9
 800766c:	dd10      	ble.n	8007690 <_strtod_l+0x5f8>
 800766e:	2b1f      	cmp	r3, #31
 8007670:	f340 8128 	ble.w	80078c4 <_strtod_l+0x82c>
 8007674:	2b34      	cmp	r3, #52	; 0x34
 8007676:	bfd8      	it	le
 8007678:	f04f 33ff 	movle.w	r3, #4294967295
 800767c:	f04f 0800 	mov.w	r8, #0
 8007680:	bfcf      	iteee	gt
 8007682:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007686:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800768a:	4093      	lslle	r3, r2
 800768c:	ea03 0901 	andle.w	r9, r3, r1
 8007690:	2200      	movs	r2, #0
 8007692:	2300      	movs	r3, #0
 8007694:	4640      	mov	r0, r8
 8007696:	4649      	mov	r1, r9
 8007698:	f7f9 f990 	bl	80009bc <__aeabi_dcmpeq>
 800769c:	2800      	cmp	r0, #0
 800769e:	d1a6      	bne.n	80075ee <_strtod_l+0x556>
 80076a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076a2:	465a      	mov	r2, fp
 80076a4:	9300      	str	r3, [sp, #0]
 80076a6:	4620      	mov	r0, r4
 80076a8:	4633      	mov	r3, r6
 80076aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80076ac:	f002 fd4c 	bl	800a148 <__s2b>
 80076b0:	900b      	str	r0, [sp, #44]	; 0x2c
 80076b2:	2800      	cmp	r0, #0
 80076b4:	f43f af2a 	beq.w	800750c <_strtod_l+0x474>
 80076b8:	2600      	movs	r6, #0
 80076ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076bc:	9b08      	ldr	r3, [sp, #32]
 80076be:	2a00      	cmp	r2, #0
 80076c0:	eba3 0307 	sub.w	r3, r3, r7
 80076c4:	bfa8      	it	ge
 80076c6:	2300      	movge	r3, #0
 80076c8:	46b3      	mov	fp, r6
 80076ca:	9312      	str	r3, [sp, #72]	; 0x48
 80076cc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80076d0:	9316      	str	r3, [sp, #88]	; 0x58
 80076d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076d4:	4620      	mov	r0, r4
 80076d6:	6859      	ldr	r1, [r3, #4]
 80076d8:	f002 fc8e 	bl	8009ff8 <_Balloc>
 80076dc:	9008      	str	r0, [sp, #32]
 80076de:	2800      	cmp	r0, #0
 80076e0:	f43f af18 	beq.w	8007514 <_strtod_l+0x47c>
 80076e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076e6:	300c      	adds	r0, #12
 80076e8:	691a      	ldr	r2, [r3, #16]
 80076ea:	f103 010c 	add.w	r1, r3, #12
 80076ee:	3202      	adds	r2, #2
 80076f0:	0092      	lsls	r2, r2, #2
 80076f2:	f001 f994 	bl	8008a1e <memcpy>
 80076f6:	ab1c      	add	r3, sp, #112	; 0x70
 80076f8:	9301      	str	r3, [sp, #4]
 80076fa:	ab1b      	add	r3, sp, #108	; 0x6c
 80076fc:	9300      	str	r3, [sp, #0]
 80076fe:	4642      	mov	r2, r8
 8007700:	464b      	mov	r3, r9
 8007702:	4620      	mov	r0, r4
 8007704:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8007708:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800770c:	f003 f848 	bl	800a7a0 <__d2b>
 8007710:	901a      	str	r0, [sp, #104]	; 0x68
 8007712:	2800      	cmp	r0, #0
 8007714:	f43f aefe 	beq.w	8007514 <_strtod_l+0x47c>
 8007718:	2101      	movs	r1, #1
 800771a:	4620      	mov	r0, r4
 800771c:	f002 fdac 	bl	800a278 <__i2b>
 8007720:	4683      	mov	fp, r0
 8007722:	2800      	cmp	r0, #0
 8007724:	f43f aef6 	beq.w	8007514 <_strtod_l+0x47c>
 8007728:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800772a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800772c:	2f00      	cmp	r7, #0
 800772e:	bfab      	itete	ge
 8007730:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8007732:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007734:	eb07 0a03 	addge.w	sl, r7, r3
 8007738:	1bdd      	sublt	r5, r3, r7
 800773a:	9b05      	ldr	r3, [sp, #20]
 800773c:	bfa8      	it	ge
 800773e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007740:	eba7 0703 	sub.w	r7, r7, r3
 8007744:	4417      	add	r7, r2
 8007746:	4b71      	ldr	r3, [pc, #452]	; (800790c <_strtod_l+0x874>)
 8007748:	f107 37ff 	add.w	r7, r7, #4294967295
 800774c:	bfb8      	it	lt
 800774e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8007752:	429f      	cmp	r7, r3
 8007754:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007758:	f280 80c7 	bge.w	80078ea <_strtod_l+0x852>
 800775c:	1bdb      	subs	r3, r3, r7
 800775e:	2b1f      	cmp	r3, #31
 8007760:	f04f 0101 	mov.w	r1, #1
 8007764:	eba2 0203 	sub.w	r2, r2, r3
 8007768:	f300 80b3 	bgt.w	80078d2 <_strtod_l+0x83a>
 800776c:	fa01 f303 	lsl.w	r3, r1, r3
 8007770:	9313      	str	r3, [sp, #76]	; 0x4c
 8007772:	2300      	movs	r3, #0
 8007774:	9310      	str	r3, [sp, #64]	; 0x40
 8007776:	eb0a 0702 	add.w	r7, sl, r2
 800777a:	9b05      	ldr	r3, [sp, #20]
 800777c:	45ba      	cmp	sl, r7
 800777e:	4415      	add	r5, r2
 8007780:	441d      	add	r5, r3
 8007782:	4653      	mov	r3, sl
 8007784:	bfa8      	it	ge
 8007786:	463b      	movge	r3, r7
 8007788:	42ab      	cmp	r3, r5
 800778a:	bfa8      	it	ge
 800778c:	462b      	movge	r3, r5
 800778e:	2b00      	cmp	r3, #0
 8007790:	bfc2      	ittt	gt
 8007792:	1aff      	subgt	r7, r7, r3
 8007794:	1aed      	subgt	r5, r5, r3
 8007796:	ebaa 0a03 	subgt.w	sl, sl, r3
 800779a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800779c:	2b00      	cmp	r3, #0
 800779e:	dd17      	ble.n	80077d0 <_strtod_l+0x738>
 80077a0:	4659      	mov	r1, fp
 80077a2:	461a      	mov	r2, r3
 80077a4:	4620      	mov	r0, r4
 80077a6:	f002 fe25 	bl	800a3f4 <__pow5mult>
 80077aa:	4683      	mov	fp, r0
 80077ac:	2800      	cmp	r0, #0
 80077ae:	f43f aeb1 	beq.w	8007514 <_strtod_l+0x47c>
 80077b2:	4601      	mov	r1, r0
 80077b4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80077b6:	4620      	mov	r0, r4
 80077b8:	f002 fd74 	bl	800a2a4 <__multiply>
 80077bc:	900a      	str	r0, [sp, #40]	; 0x28
 80077be:	2800      	cmp	r0, #0
 80077c0:	f43f aea8 	beq.w	8007514 <_strtod_l+0x47c>
 80077c4:	4620      	mov	r0, r4
 80077c6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80077c8:	f002 fc56 	bl	800a078 <_Bfree>
 80077cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ce:	931a      	str	r3, [sp, #104]	; 0x68
 80077d0:	2f00      	cmp	r7, #0
 80077d2:	f300 808f 	bgt.w	80078f4 <_strtod_l+0x85c>
 80077d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077d8:	2b00      	cmp	r3, #0
 80077da:	dd08      	ble.n	80077ee <_strtod_l+0x756>
 80077dc:	4620      	mov	r0, r4
 80077de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80077e0:	9908      	ldr	r1, [sp, #32]
 80077e2:	f002 fe07 	bl	800a3f4 <__pow5mult>
 80077e6:	9008      	str	r0, [sp, #32]
 80077e8:	2800      	cmp	r0, #0
 80077ea:	f43f ae93 	beq.w	8007514 <_strtod_l+0x47c>
 80077ee:	2d00      	cmp	r5, #0
 80077f0:	dd08      	ble.n	8007804 <_strtod_l+0x76c>
 80077f2:	462a      	mov	r2, r5
 80077f4:	4620      	mov	r0, r4
 80077f6:	9908      	ldr	r1, [sp, #32]
 80077f8:	f002 fe56 	bl	800a4a8 <__lshift>
 80077fc:	9008      	str	r0, [sp, #32]
 80077fe:	2800      	cmp	r0, #0
 8007800:	f43f ae88 	beq.w	8007514 <_strtod_l+0x47c>
 8007804:	f1ba 0f00 	cmp.w	sl, #0
 8007808:	dd08      	ble.n	800781c <_strtod_l+0x784>
 800780a:	4659      	mov	r1, fp
 800780c:	4652      	mov	r2, sl
 800780e:	4620      	mov	r0, r4
 8007810:	f002 fe4a 	bl	800a4a8 <__lshift>
 8007814:	4683      	mov	fp, r0
 8007816:	2800      	cmp	r0, #0
 8007818:	f43f ae7c 	beq.w	8007514 <_strtod_l+0x47c>
 800781c:	4620      	mov	r0, r4
 800781e:	9a08      	ldr	r2, [sp, #32]
 8007820:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007822:	f002 fec9 	bl	800a5b8 <__mdiff>
 8007826:	4606      	mov	r6, r0
 8007828:	2800      	cmp	r0, #0
 800782a:	f43f ae73 	beq.w	8007514 <_strtod_l+0x47c>
 800782e:	2500      	movs	r5, #0
 8007830:	68c3      	ldr	r3, [r0, #12]
 8007832:	4659      	mov	r1, fp
 8007834:	60c5      	str	r5, [r0, #12]
 8007836:	930a      	str	r3, [sp, #40]	; 0x28
 8007838:	f002 fea2 	bl	800a580 <__mcmp>
 800783c:	42a8      	cmp	r0, r5
 800783e:	da6b      	bge.n	8007918 <_strtod_l+0x880>
 8007840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007842:	ea53 0308 	orrs.w	r3, r3, r8
 8007846:	f040 808f 	bne.w	8007968 <_strtod_l+0x8d0>
 800784a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800784e:	2b00      	cmp	r3, #0
 8007850:	f040 808a 	bne.w	8007968 <_strtod_l+0x8d0>
 8007854:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007858:	0d1b      	lsrs	r3, r3, #20
 800785a:	051b      	lsls	r3, r3, #20
 800785c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007860:	f240 8082 	bls.w	8007968 <_strtod_l+0x8d0>
 8007864:	6973      	ldr	r3, [r6, #20]
 8007866:	b913      	cbnz	r3, 800786e <_strtod_l+0x7d6>
 8007868:	6933      	ldr	r3, [r6, #16]
 800786a:	2b01      	cmp	r3, #1
 800786c:	dd7c      	ble.n	8007968 <_strtod_l+0x8d0>
 800786e:	4631      	mov	r1, r6
 8007870:	2201      	movs	r2, #1
 8007872:	4620      	mov	r0, r4
 8007874:	f002 fe18 	bl	800a4a8 <__lshift>
 8007878:	4659      	mov	r1, fp
 800787a:	4606      	mov	r6, r0
 800787c:	f002 fe80 	bl	800a580 <__mcmp>
 8007880:	2800      	cmp	r0, #0
 8007882:	dd71      	ble.n	8007968 <_strtod_l+0x8d0>
 8007884:	9905      	ldr	r1, [sp, #20]
 8007886:	464b      	mov	r3, r9
 8007888:	4a21      	ldr	r2, [pc, #132]	; (8007910 <_strtod_l+0x878>)
 800788a:	2900      	cmp	r1, #0
 800788c:	f000 808d 	beq.w	80079aa <_strtod_l+0x912>
 8007890:	ea02 0109 	and.w	r1, r2, r9
 8007894:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007898:	f300 8087 	bgt.w	80079aa <_strtod_l+0x912>
 800789c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80078a0:	f77f aea9 	ble.w	80075f6 <_strtod_l+0x55e>
 80078a4:	4640      	mov	r0, r8
 80078a6:	4649      	mov	r1, r9
 80078a8:	4b1a      	ldr	r3, [pc, #104]	; (8007914 <_strtod_l+0x87c>)
 80078aa:	2200      	movs	r2, #0
 80078ac:	f7f8 fe1e 	bl	80004ec <__aeabi_dmul>
 80078b0:	4b17      	ldr	r3, [pc, #92]	; (8007910 <_strtod_l+0x878>)
 80078b2:	4680      	mov	r8, r0
 80078b4:	400b      	ands	r3, r1
 80078b6:	4689      	mov	r9, r1
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f47f ae35 	bne.w	8007528 <_strtod_l+0x490>
 80078be:	2322      	movs	r3, #34	; 0x22
 80078c0:	6023      	str	r3, [r4, #0]
 80078c2:	e631      	b.n	8007528 <_strtod_l+0x490>
 80078c4:	f04f 32ff 	mov.w	r2, #4294967295
 80078c8:	fa02 f303 	lsl.w	r3, r2, r3
 80078cc:	ea03 0808 	and.w	r8, r3, r8
 80078d0:	e6de      	b.n	8007690 <_strtod_l+0x5f8>
 80078d2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 80078d6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 80078da:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 80078de:	37e2      	adds	r7, #226	; 0xe2
 80078e0:	fa01 f307 	lsl.w	r3, r1, r7
 80078e4:	9310      	str	r3, [sp, #64]	; 0x40
 80078e6:	9113      	str	r1, [sp, #76]	; 0x4c
 80078e8:	e745      	b.n	8007776 <_strtod_l+0x6de>
 80078ea:	2300      	movs	r3, #0
 80078ec:	9310      	str	r3, [sp, #64]	; 0x40
 80078ee:	2301      	movs	r3, #1
 80078f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80078f2:	e740      	b.n	8007776 <_strtod_l+0x6de>
 80078f4:	463a      	mov	r2, r7
 80078f6:	4620      	mov	r0, r4
 80078f8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80078fa:	f002 fdd5 	bl	800a4a8 <__lshift>
 80078fe:	901a      	str	r0, [sp, #104]	; 0x68
 8007900:	2800      	cmp	r0, #0
 8007902:	f47f af68 	bne.w	80077d6 <_strtod_l+0x73e>
 8007906:	e605      	b.n	8007514 <_strtod_l+0x47c>
 8007908:	0800d380 	.word	0x0800d380
 800790c:	fffffc02 	.word	0xfffffc02
 8007910:	7ff00000 	.word	0x7ff00000
 8007914:	39500000 	.word	0x39500000
 8007918:	46ca      	mov	sl, r9
 800791a:	d165      	bne.n	80079e8 <_strtod_l+0x950>
 800791c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800791e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007922:	b352      	cbz	r2, 800797a <_strtod_l+0x8e2>
 8007924:	4a9e      	ldr	r2, [pc, #632]	; (8007ba0 <_strtod_l+0xb08>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d12a      	bne.n	8007980 <_strtod_l+0x8e8>
 800792a:	9b05      	ldr	r3, [sp, #20]
 800792c:	4641      	mov	r1, r8
 800792e:	b1fb      	cbz	r3, 8007970 <_strtod_l+0x8d8>
 8007930:	4b9c      	ldr	r3, [pc, #624]	; (8007ba4 <_strtod_l+0xb0c>)
 8007932:	f04f 32ff 	mov.w	r2, #4294967295
 8007936:	ea09 0303 	and.w	r3, r9, r3
 800793a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800793e:	d81a      	bhi.n	8007976 <_strtod_l+0x8de>
 8007940:	0d1b      	lsrs	r3, r3, #20
 8007942:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007946:	fa02 f303 	lsl.w	r3, r2, r3
 800794a:	4299      	cmp	r1, r3
 800794c:	d118      	bne.n	8007980 <_strtod_l+0x8e8>
 800794e:	4b96      	ldr	r3, [pc, #600]	; (8007ba8 <_strtod_l+0xb10>)
 8007950:	459a      	cmp	sl, r3
 8007952:	d102      	bne.n	800795a <_strtod_l+0x8c2>
 8007954:	3101      	adds	r1, #1
 8007956:	f43f addd 	beq.w	8007514 <_strtod_l+0x47c>
 800795a:	f04f 0800 	mov.w	r8, #0
 800795e:	4b91      	ldr	r3, [pc, #580]	; (8007ba4 <_strtod_l+0xb0c>)
 8007960:	ea0a 0303 	and.w	r3, sl, r3
 8007964:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007968:	9b05      	ldr	r3, [sp, #20]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d19a      	bne.n	80078a4 <_strtod_l+0x80c>
 800796e:	e5db      	b.n	8007528 <_strtod_l+0x490>
 8007970:	f04f 33ff 	mov.w	r3, #4294967295
 8007974:	e7e9      	b.n	800794a <_strtod_l+0x8b2>
 8007976:	4613      	mov	r3, r2
 8007978:	e7e7      	b.n	800794a <_strtod_l+0x8b2>
 800797a:	ea53 0308 	orrs.w	r3, r3, r8
 800797e:	d081      	beq.n	8007884 <_strtod_l+0x7ec>
 8007980:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007982:	b1e3      	cbz	r3, 80079be <_strtod_l+0x926>
 8007984:	ea13 0f0a 	tst.w	r3, sl
 8007988:	d0ee      	beq.n	8007968 <_strtod_l+0x8d0>
 800798a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800798c:	4640      	mov	r0, r8
 800798e:	4649      	mov	r1, r9
 8007990:	9a05      	ldr	r2, [sp, #20]
 8007992:	b1c3      	cbz	r3, 80079c6 <_strtod_l+0x92e>
 8007994:	f7ff fb5f 	bl	8007056 <sulp>
 8007998:	4602      	mov	r2, r0
 800799a:	460b      	mov	r3, r1
 800799c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800799e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80079a0:	f7f8 fbee 	bl	8000180 <__adddf3>
 80079a4:	4680      	mov	r8, r0
 80079a6:	4689      	mov	r9, r1
 80079a8:	e7de      	b.n	8007968 <_strtod_l+0x8d0>
 80079aa:	4013      	ands	r3, r2
 80079ac:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80079b0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80079b4:	f04f 38ff 	mov.w	r8, #4294967295
 80079b8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80079bc:	e7d4      	b.n	8007968 <_strtod_l+0x8d0>
 80079be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80079c0:	ea13 0f08 	tst.w	r3, r8
 80079c4:	e7e0      	b.n	8007988 <_strtod_l+0x8f0>
 80079c6:	f7ff fb46 	bl	8007056 <sulp>
 80079ca:	4602      	mov	r2, r0
 80079cc:	460b      	mov	r3, r1
 80079ce:	980c      	ldr	r0, [sp, #48]	; 0x30
 80079d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80079d2:	f7f8 fbd3 	bl	800017c <__aeabi_dsub>
 80079d6:	2200      	movs	r2, #0
 80079d8:	2300      	movs	r3, #0
 80079da:	4680      	mov	r8, r0
 80079dc:	4689      	mov	r9, r1
 80079de:	f7f8 ffed 	bl	80009bc <__aeabi_dcmpeq>
 80079e2:	2800      	cmp	r0, #0
 80079e4:	d0c0      	beq.n	8007968 <_strtod_l+0x8d0>
 80079e6:	e606      	b.n	80075f6 <_strtod_l+0x55e>
 80079e8:	4659      	mov	r1, fp
 80079ea:	4630      	mov	r0, r6
 80079ec:	f002 ff2e 	bl	800a84c <__ratio>
 80079f0:	4602      	mov	r2, r0
 80079f2:	460b      	mov	r3, r1
 80079f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80079f8:	2200      	movs	r2, #0
 80079fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80079fe:	f7f8 fff1 	bl	80009e4 <__aeabi_dcmple>
 8007a02:	2800      	cmp	r0, #0
 8007a04:	d06f      	beq.n	8007ae6 <_strtod_l+0xa4e>
 8007a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d17c      	bne.n	8007b06 <_strtod_l+0xa6e>
 8007a0c:	f1b8 0f00 	cmp.w	r8, #0
 8007a10:	d159      	bne.n	8007ac6 <_strtod_l+0xa2e>
 8007a12:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d17b      	bne.n	8007b12 <_strtod_l+0xa7a>
 8007a1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a1e:	2200      	movs	r2, #0
 8007a20:	4b62      	ldr	r3, [pc, #392]	; (8007bac <_strtod_l+0xb14>)
 8007a22:	f7f8 ffd5 	bl	80009d0 <__aeabi_dcmplt>
 8007a26:	2800      	cmp	r0, #0
 8007a28:	d15a      	bne.n	8007ae0 <_strtod_l+0xa48>
 8007a2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a2e:	2200      	movs	r2, #0
 8007a30:	4b5f      	ldr	r3, [pc, #380]	; (8007bb0 <_strtod_l+0xb18>)
 8007a32:	f7f8 fd5b 	bl	80004ec <__aeabi_dmul>
 8007a36:	4605      	mov	r5, r0
 8007a38:	460f      	mov	r7, r1
 8007a3a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007a3e:	9506      	str	r5, [sp, #24]
 8007a40:	9307      	str	r3, [sp, #28]
 8007a42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a46:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007a4a:	4b56      	ldr	r3, [pc, #344]	; (8007ba4 <_strtod_l+0xb0c>)
 8007a4c:	4a55      	ldr	r2, [pc, #340]	; (8007ba4 <_strtod_l+0xb0c>)
 8007a4e:	ea0a 0303 	and.w	r3, sl, r3
 8007a52:	9313      	str	r3, [sp, #76]	; 0x4c
 8007a54:	4b57      	ldr	r3, [pc, #348]	; (8007bb4 <_strtod_l+0xb1c>)
 8007a56:	ea0a 0202 	and.w	r2, sl, r2
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	f040 80b0 	bne.w	8007bc0 <_strtod_l+0xb28>
 8007a60:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007a64:	4640      	mov	r0, r8
 8007a66:	4649      	mov	r1, r9
 8007a68:	f002 fe32 	bl	800a6d0 <__ulp>
 8007a6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a70:	f7f8 fd3c 	bl	80004ec <__aeabi_dmul>
 8007a74:	4642      	mov	r2, r8
 8007a76:	464b      	mov	r3, r9
 8007a78:	f7f8 fb82 	bl	8000180 <__adddf3>
 8007a7c:	f8df a124 	ldr.w	sl, [pc, #292]	; 8007ba4 <_strtod_l+0xb0c>
 8007a80:	4a4d      	ldr	r2, [pc, #308]	; (8007bb8 <_strtod_l+0xb20>)
 8007a82:	ea01 0a0a 	and.w	sl, r1, sl
 8007a86:	4592      	cmp	sl, r2
 8007a88:	4680      	mov	r8, r0
 8007a8a:	d948      	bls.n	8007b1e <_strtod_l+0xa86>
 8007a8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a8e:	4b46      	ldr	r3, [pc, #280]	; (8007ba8 <_strtod_l+0xb10>)
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d103      	bne.n	8007a9c <_strtod_l+0xa04>
 8007a94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a96:	3301      	adds	r3, #1
 8007a98:	f43f ad3c 	beq.w	8007514 <_strtod_l+0x47c>
 8007a9c:	f04f 38ff 	mov.w	r8, #4294967295
 8007aa0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8007ba8 <_strtod_l+0xb10>
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007aa8:	f002 fae6 	bl	800a078 <_Bfree>
 8007aac:	4620      	mov	r0, r4
 8007aae:	9908      	ldr	r1, [sp, #32]
 8007ab0:	f002 fae2 	bl	800a078 <_Bfree>
 8007ab4:	4659      	mov	r1, fp
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	f002 fade 	bl	800a078 <_Bfree>
 8007abc:	4631      	mov	r1, r6
 8007abe:	4620      	mov	r0, r4
 8007ac0:	f002 fada 	bl	800a078 <_Bfree>
 8007ac4:	e605      	b.n	80076d2 <_strtod_l+0x63a>
 8007ac6:	f1b8 0f01 	cmp.w	r8, #1
 8007aca:	d103      	bne.n	8007ad4 <_strtod_l+0xa3c>
 8007acc:	f1b9 0f00 	cmp.w	r9, #0
 8007ad0:	f43f ad91 	beq.w	80075f6 <_strtod_l+0x55e>
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	4b39      	ldr	r3, [pc, #228]	; (8007bbc <_strtod_l+0xb24>)
 8007ad8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007ada:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007ade:	e016      	b.n	8007b0e <_strtod_l+0xa76>
 8007ae0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007ae2:	4f33      	ldr	r7, [pc, #204]	; (8007bb0 <_strtod_l+0xb18>)
 8007ae4:	e7a9      	b.n	8007a3a <_strtod_l+0x9a2>
 8007ae6:	4b32      	ldr	r3, [pc, #200]	; (8007bb0 <_strtod_l+0xb18>)
 8007ae8:	2200      	movs	r2, #0
 8007aea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007aee:	f7f8 fcfd 	bl	80004ec <__aeabi_dmul>
 8007af2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007af4:	4605      	mov	r5, r0
 8007af6:	460f      	mov	r7, r1
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d09e      	beq.n	8007a3a <_strtod_l+0x9a2>
 8007afc:	4602      	mov	r2, r0
 8007afe:	460b      	mov	r3, r1
 8007b00:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007b04:	e79d      	b.n	8007a42 <_strtod_l+0x9aa>
 8007b06:	2200      	movs	r2, #0
 8007b08:	4b28      	ldr	r3, [pc, #160]	; (8007bac <_strtod_l+0xb14>)
 8007b0a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007b0e:	4f27      	ldr	r7, [pc, #156]	; (8007bac <_strtod_l+0xb14>)
 8007b10:	e797      	b.n	8007a42 <_strtod_l+0x9aa>
 8007b12:	2200      	movs	r2, #0
 8007b14:	4b29      	ldr	r3, [pc, #164]	; (8007bbc <_strtod_l+0xb24>)
 8007b16:	4645      	mov	r5, r8
 8007b18:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007b1c:	e7f7      	b.n	8007b0e <_strtod_l+0xa76>
 8007b1e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8007b22:	9b05      	ldr	r3, [sp, #20]
 8007b24:	46ca      	mov	sl, r9
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1bc      	bne.n	8007aa4 <_strtod_l+0xa0c>
 8007b2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b2e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007b30:	0d1b      	lsrs	r3, r3, #20
 8007b32:	051b      	lsls	r3, r3, #20
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d1b5      	bne.n	8007aa4 <_strtod_l+0xa0c>
 8007b38:	4628      	mov	r0, r5
 8007b3a:	4639      	mov	r1, r7
 8007b3c:	f7f9 faa2 	bl	8001084 <__aeabi_d2lz>
 8007b40:	f7f8 fca6 	bl	8000490 <__aeabi_l2d>
 8007b44:	4602      	mov	r2, r0
 8007b46:	460b      	mov	r3, r1
 8007b48:	4628      	mov	r0, r5
 8007b4a:	4639      	mov	r1, r7
 8007b4c:	f7f8 fb16 	bl	800017c <__aeabi_dsub>
 8007b50:	460b      	mov	r3, r1
 8007b52:	4602      	mov	r2, r0
 8007b54:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8007b58:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b5e:	ea4a 0a08 	orr.w	sl, sl, r8
 8007b62:	ea5a 0a03 	orrs.w	sl, sl, r3
 8007b66:	d06c      	beq.n	8007c42 <_strtod_l+0xbaa>
 8007b68:	a309      	add	r3, pc, #36	; (adr r3, 8007b90 <_strtod_l+0xaf8>)
 8007b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6e:	f7f8 ff2f 	bl	80009d0 <__aeabi_dcmplt>
 8007b72:	2800      	cmp	r0, #0
 8007b74:	f47f acd8 	bne.w	8007528 <_strtod_l+0x490>
 8007b78:	a307      	add	r3, pc, #28	; (adr r3, 8007b98 <_strtod_l+0xb00>)
 8007b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b82:	f7f8 ff43 	bl	8000a0c <__aeabi_dcmpgt>
 8007b86:	2800      	cmp	r0, #0
 8007b88:	d08c      	beq.n	8007aa4 <_strtod_l+0xa0c>
 8007b8a:	e4cd      	b.n	8007528 <_strtod_l+0x490>
 8007b8c:	f3af 8000 	nop.w
 8007b90:	94a03595 	.word	0x94a03595
 8007b94:	3fdfffff 	.word	0x3fdfffff
 8007b98:	35afe535 	.word	0x35afe535
 8007b9c:	3fe00000 	.word	0x3fe00000
 8007ba0:	000fffff 	.word	0x000fffff
 8007ba4:	7ff00000 	.word	0x7ff00000
 8007ba8:	7fefffff 	.word	0x7fefffff
 8007bac:	3ff00000 	.word	0x3ff00000
 8007bb0:	3fe00000 	.word	0x3fe00000
 8007bb4:	7fe00000 	.word	0x7fe00000
 8007bb8:	7c9fffff 	.word	0x7c9fffff
 8007bbc:	bff00000 	.word	0xbff00000
 8007bc0:	9b05      	ldr	r3, [sp, #20]
 8007bc2:	b333      	cbz	r3, 8007c12 <_strtod_l+0xb7a>
 8007bc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007bc6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007bca:	d822      	bhi.n	8007c12 <_strtod_l+0xb7a>
 8007bcc:	a328      	add	r3, pc, #160	; (adr r3, 8007c70 <_strtod_l+0xbd8>)
 8007bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd2:	4628      	mov	r0, r5
 8007bd4:	4639      	mov	r1, r7
 8007bd6:	f7f8 ff05 	bl	80009e4 <__aeabi_dcmple>
 8007bda:	b1a0      	cbz	r0, 8007c06 <_strtod_l+0xb6e>
 8007bdc:	4639      	mov	r1, r7
 8007bde:	4628      	mov	r0, r5
 8007be0:	f7f8 ff5c 	bl	8000a9c <__aeabi_d2uiz>
 8007be4:	2801      	cmp	r0, #1
 8007be6:	bf38      	it	cc
 8007be8:	2001      	movcc	r0, #1
 8007bea:	f7f8 fc05 	bl	80003f8 <__aeabi_ui2d>
 8007bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bf0:	4605      	mov	r5, r0
 8007bf2:	460f      	mov	r7, r1
 8007bf4:	bb03      	cbnz	r3, 8007c38 <_strtod_l+0xba0>
 8007bf6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007bfa:	9014      	str	r0, [sp, #80]	; 0x50
 8007bfc:	9315      	str	r3, [sp, #84]	; 0x54
 8007bfe:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007c02:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007c06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007c0a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007c0e:	1a9b      	subs	r3, r3, r2
 8007c10:	9311      	str	r3, [sp, #68]	; 0x44
 8007c12:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007c14:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007c16:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8007c1a:	f002 fd59 	bl	800a6d0 <__ulp>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	460b      	mov	r3, r1
 8007c22:	4640      	mov	r0, r8
 8007c24:	4649      	mov	r1, r9
 8007c26:	f7f8 fc61 	bl	80004ec <__aeabi_dmul>
 8007c2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c2e:	f7f8 faa7 	bl	8000180 <__adddf3>
 8007c32:	4680      	mov	r8, r0
 8007c34:	4689      	mov	r9, r1
 8007c36:	e774      	b.n	8007b22 <_strtod_l+0xa8a>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007c40:	e7dd      	b.n	8007bfe <_strtod_l+0xb66>
 8007c42:	a30d      	add	r3, pc, #52	; (adr r3, 8007c78 <_strtod_l+0xbe0>)
 8007c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c48:	f7f8 fec2 	bl	80009d0 <__aeabi_dcmplt>
 8007c4c:	e79b      	b.n	8007b86 <_strtod_l+0xaee>
 8007c4e:	2300      	movs	r3, #0
 8007c50:	930e      	str	r3, [sp, #56]	; 0x38
 8007c52:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c54:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007c56:	6013      	str	r3, [r2, #0]
 8007c58:	f7ff ba5b 	b.w	8007112 <_strtod_l+0x7a>
 8007c5c:	2a65      	cmp	r2, #101	; 0x65
 8007c5e:	f43f ab52 	beq.w	8007306 <_strtod_l+0x26e>
 8007c62:	2a45      	cmp	r2, #69	; 0x45
 8007c64:	f43f ab4f 	beq.w	8007306 <_strtod_l+0x26e>
 8007c68:	2301      	movs	r3, #1
 8007c6a:	f7ff bb87 	b.w	800737c <_strtod_l+0x2e4>
 8007c6e:	bf00      	nop
 8007c70:	ffc00000 	.word	0xffc00000
 8007c74:	41dfffff 	.word	0x41dfffff
 8007c78:	94a03595 	.word	0x94a03595
 8007c7c:	3fcfffff 	.word	0x3fcfffff

08007c80 <strtod>:
 8007c80:	460a      	mov	r2, r1
 8007c82:	4601      	mov	r1, r0
 8007c84:	4802      	ldr	r0, [pc, #8]	; (8007c90 <strtod+0x10>)
 8007c86:	4b03      	ldr	r3, [pc, #12]	; (8007c94 <strtod+0x14>)
 8007c88:	6800      	ldr	r0, [r0, #0]
 8007c8a:	f7ff ba05 	b.w	8007098 <_strtod_l>
 8007c8e:	bf00      	nop
 8007c90:	200001dc 	.word	0x200001dc
 8007c94:	20000024 	.word	0x20000024

08007c98 <_strtol_l.constprop.0>:
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c9e:	4686      	mov	lr, r0
 8007ca0:	4690      	mov	r8, r2
 8007ca2:	d001      	beq.n	8007ca8 <_strtol_l.constprop.0+0x10>
 8007ca4:	2b24      	cmp	r3, #36	; 0x24
 8007ca6:	d906      	bls.n	8007cb6 <_strtol_l.constprop.0+0x1e>
 8007ca8:	f000 fe7e 	bl	80089a8 <__errno>
 8007cac:	2316      	movs	r3, #22
 8007cae:	6003      	str	r3, [r0, #0]
 8007cb0:	2000      	movs	r0, #0
 8007cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cb6:	460d      	mov	r5, r1
 8007cb8:	4835      	ldr	r0, [pc, #212]	; (8007d90 <_strtol_l.constprop.0+0xf8>)
 8007cba:	462a      	mov	r2, r5
 8007cbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cc0:	5d06      	ldrb	r6, [r0, r4]
 8007cc2:	f016 0608 	ands.w	r6, r6, #8
 8007cc6:	d1f8      	bne.n	8007cba <_strtol_l.constprop.0+0x22>
 8007cc8:	2c2d      	cmp	r4, #45	; 0x2d
 8007cca:	d12e      	bne.n	8007d2a <_strtol_l.constprop.0+0x92>
 8007ccc:	2601      	movs	r6, #1
 8007cce:	782c      	ldrb	r4, [r5, #0]
 8007cd0:	1c95      	adds	r5, r2, #2
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d057      	beq.n	8007d86 <_strtol_l.constprop.0+0xee>
 8007cd6:	2b10      	cmp	r3, #16
 8007cd8:	d109      	bne.n	8007cee <_strtol_l.constprop.0+0x56>
 8007cda:	2c30      	cmp	r4, #48	; 0x30
 8007cdc:	d107      	bne.n	8007cee <_strtol_l.constprop.0+0x56>
 8007cde:	782a      	ldrb	r2, [r5, #0]
 8007ce0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007ce4:	2a58      	cmp	r2, #88	; 0x58
 8007ce6:	d149      	bne.n	8007d7c <_strtol_l.constprop.0+0xe4>
 8007ce8:	2310      	movs	r3, #16
 8007cea:	786c      	ldrb	r4, [r5, #1]
 8007cec:	3502      	adds	r5, #2
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8007cf4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007cf8:	fbbc f9f3 	udiv	r9, ip, r3
 8007cfc:	4610      	mov	r0, r2
 8007cfe:	fb03 ca19 	mls	sl, r3, r9, ip
 8007d02:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007d06:	2f09      	cmp	r7, #9
 8007d08:	d814      	bhi.n	8007d34 <_strtol_l.constprop.0+0x9c>
 8007d0a:	463c      	mov	r4, r7
 8007d0c:	42a3      	cmp	r3, r4
 8007d0e:	dd20      	ble.n	8007d52 <_strtol_l.constprop.0+0xba>
 8007d10:	1c57      	adds	r7, r2, #1
 8007d12:	d007      	beq.n	8007d24 <_strtol_l.constprop.0+0x8c>
 8007d14:	4581      	cmp	r9, r0
 8007d16:	d319      	bcc.n	8007d4c <_strtol_l.constprop.0+0xb4>
 8007d18:	d101      	bne.n	8007d1e <_strtol_l.constprop.0+0x86>
 8007d1a:	45a2      	cmp	sl, r4
 8007d1c:	db16      	blt.n	8007d4c <_strtol_l.constprop.0+0xb4>
 8007d1e:	2201      	movs	r2, #1
 8007d20:	fb00 4003 	mla	r0, r0, r3, r4
 8007d24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d28:	e7eb      	b.n	8007d02 <_strtol_l.constprop.0+0x6a>
 8007d2a:	2c2b      	cmp	r4, #43	; 0x2b
 8007d2c:	bf04      	itt	eq
 8007d2e:	782c      	ldrbeq	r4, [r5, #0]
 8007d30:	1c95      	addeq	r5, r2, #2
 8007d32:	e7ce      	b.n	8007cd2 <_strtol_l.constprop.0+0x3a>
 8007d34:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007d38:	2f19      	cmp	r7, #25
 8007d3a:	d801      	bhi.n	8007d40 <_strtol_l.constprop.0+0xa8>
 8007d3c:	3c37      	subs	r4, #55	; 0x37
 8007d3e:	e7e5      	b.n	8007d0c <_strtol_l.constprop.0+0x74>
 8007d40:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007d44:	2f19      	cmp	r7, #25
 8007d46:	d804      	bhi.n	8007d52 <_strtol_l.constprop.0+0xba>
 8007d48:	3c57      	subs	r4, #87	; 0x57
 8007d4a:	e7df      	b.n	8007d0c <_strtol_l.constprop.0+0x74>
 8007d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d50:	e7e8      	b.n	8007d24 <_strtol_l.constprop.0+0x8c>
 8007d52:	1c53      	adds	r3, r2, #1
 8007d54:	d108      	bne.n	8007d68 <_strtol_l.constprop.0+0xd0>
 8007d56:	2322      	movs	r3, #34	; 0x22
 8007d58:	4660      	mov	r0, ip
 8007d5a:	f8ce 3000 	str.w	r3, [lr]
 8007d5e:	f1b8 0f00 	cmp.w	r8, #0
 8007d62:	d0a6      	beq.n	8007cb2 <_strtol_l.constprop.0+0x1a>
 8007d64:	1e69      	subs	r1, r5, #1
 8007d66:	e006      	b.n	8007d76 <_strtol_l.constprop.0+0xde>
 8007d68:	b106      	cbz	r6, 8007d6c <_strtol_l.constprop.0+0xd4>
 8007d6a:	4240      	negs	r0, r0
 8007d6c:	f1b8 0f00 	cmp.w	r8, #0
 8007d70:	d09f      	beq.n	8007cb2 <_strtol_l.constprop.0+0x1a>
 8007d72:	2a00      	cmp	r2, #0
 8007d74:	d1f6      	bne.n	8007d64 <_strtol_l.constprop.0+0xcc>
 8007d76:	f8c8 1000 	str.w	r1, [r8]
 8007d7a:	e79a      	b.n	8007cb2 <_strtol_l.constprop.0+0x1a>
 8007d7c:	2430      	movs	r4, #48	; 0x30
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d1b5      	bne.n	8007cee <_strtol_l.constprop.0+0x56>
 8007d82:	2308      	movs	r3, #8
 8007d84:	e7b3      	b.n	8007cee <_strtol_l.constprop.0+0x56>
 8007d86:	2c30      	cmp	r4, #48	; 0x30
 8007d88:	d0a9      	beq.n	8007cde <_strtol_l.constprop.0+0x46>
 8007d8a:	230a      	movs	r3, #10
 8007d8c:	e7af      	b.n	8007cee <_strtol_l.constprop.0+0x56>
 8007d8e:	bf00      	nop
 8007d90:	0800d3a9 	.word	0x0800d3a9

08007d94 <strtol>:
 8007d94:	4613      	mov	r3, r2
 8007d96:	460a      	mov	r2, r1
 8007d98:	4601      	mov	r1, r0
 8007d9a:	4802      	ldr	r0, [pc, #8]	; (8007da4 <strtol+0x10>)
 8007d9c:	6800      	ldr	r0, [r0, #0]
 8007d9e:	f7ff bf7b 	b.w	8007c98 <_strtol_l.constprop.0>
 8007da2:	bf00      	nop
 8007da4:	200001dc 	.word	0x200001dc

08007da8 <__cvt>:
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dae:	461f      	mov	r7, r3
 8007db0:	bfbb      	ittet	lt
 8007db2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007db6:	461f      	movlt	r7, r3
 8007db8:	2300      	movge	r3, #0
 8007dba:	232d      	movlt	r3, #45	; 0x2d
 8007dbc:	b088      	sub	sp, #32
 8007dbe:	4614      	mov	r4, r2
 8007dc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007dc2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007dc4:	7013      	strb	r3, [r2, #0]
 8007dc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007dc8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007dcc:	f023 0820 	bic.w	r8, r3, #32
 8007dd0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007dd4:	d005      	beq.n	8007de2 <__cvt+0x3a>
 8007dd6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007dda:	d100      	bne.n	8007dde <__cvt+0x36>
 8007ddc:	3501      	adds	r5, #1
 8007dde:	2302      	movs	r3, #2
 8007de0:	e000      	b.n	8007de4 <__cvt+0x3c>
 8007de2:	2303      	movs	r3, #3
 8007de4:	aa07      	add	r2, sp, #28
 8007de6:	9204      	str	r2, [sp, #16]
 8007de8:	aa06      	add	r2, sp, #24
 8007dea:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007dee:	e9cd 3500 	strd	r3, r5, [sp]
 8007df2:	4622      	mov	r2, r4
 8007df4:	463b      	mov	r3, r7
 8007df6:	f000 feb3 	bl	8008b60 <_dtoa_r>
 8007dfa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007dfe:	4606      	mov	r6, r0
 8007e00:	d102      	bne.n	8007e08 <__cvt+0x60>
 8007e02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e04:	07db      	lsls	r3, r3, #31
 8007e06:	d522      	bpl.n	8007e4e <__cvt+0xa6>
 8007e08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e0c:	eb06 0905 	add.w	r9, r6, r5
 8007e10:	d110      	bne.n	8007e34 <__cvt+0x8c>
 8007e12:	7833      	ldrb	r3, [r6, #0]
 8007e14:	2b30      	cmp	r3, #48	; 0x30
 8007e16:	d10a      	bne.n	8007e2e <__cvt+0x86>
 8007e18:	2200      	movs	r2, #0
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	4639      	mov	r1, r7
 8007e20:	f7f8 fdcc 	bl	80009bc <__aeabi_dcmpeq>
 8007e24:	b918      	cbnz	r0, 8007e2e <__cvt+0x86>
 8007e26:	f1c5 0501 	rsb	r5, r5, #1
 8007e2a:	f8ca 5000 	str.w	r5, [sl]
 8007e2e:	f8da 3000 	ldr.w	r3, [sl]
 8007e32:	4499      	add	r9, r3
 8007e34:	2200      	movs	r2, #0
 8007e36:	2300      	movs	r3, #0
 8007e38:	4620      	mov	r0, r4
 8007e3a:	4639      	mov	r1, r7
 8007e3c:	f7f8 fdbe 	bl	80009bc <__aeabi_dcmpeq>
 8007e40:	b108      	cbz	r0, 8007e46 <__cvt+0x9e>
 8007e42:	f8cd 901c 	str.w	r9, [sp, #28]
 8007e46:	2230      	movs	r2, #48	; 0x30
 8007e48:	9b07      	ldr	r3, [sp, #28]
 8007e4a:	454b      	cmp	r3, r9
 8007e4c:	d307      	bcc.n	8007e5e <__cvt+0xb6>
 8007e4e:	4630      	mov	r0, r6
 8007e50:	9b07      	ldr	r3, [sp, #28]
 8007e52:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007e54:	1b9b      	subs	r3, r3, r6
 8007e56:	6013      	str	r3, [r2, #0]
 8007e58:	b008      	add	sp, #32
 8007e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e5e:	1c59      	adds	r1, r3, #1
 8007e60:	9107      	str	r1, [sp, #28]
 8007e62:	701a      	strb	r2, [r3, #0]
 8007e64:	e7f0      	b.n	8007e48 <__cvt+0xa0>

08007e66 <__exponent>:
 8007e66:	4603      	mov	r3, r0
 8007e68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e6a:	2900      	cmp	r1, #0
 8007e6c:	f803 2b02 	strb.w	r2, [r3], #2
 8007e70:	bfb6      	itet	lt
 8007e72:	222d      	movlt	r2, #45	; 0x2d
 8007e74:	222b      	movge	r2, #43	; 0x2b
 8007e76:	4249      	neglt	r1, r1
 8007e78:	2909      	cmp	r1, #9
 8007e7a:	7042      	strb	r2, [r0, #1]
 8007e7c:	dd2a      	ble.n	8007ed4 <__exponent+0x6e>
 8007e7e:	f10d 0207 	add.w	r2, sp, #7
 8007e82:	4617      	mov	r7, r2
 8007e84:	260a      	movs	r6, #10
 8007e86:	fb91 f5f6 	sdiv	r5, r1, r6
 8007e8a:	4694      	mov	ip, r2
 8007e8c:	fb06 1415 	mls	r4, r6, r5, r1
 8007e90:	3430      	adds	r4, #48	; 0x30
 8007e92:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007e96:	460c      	mov	r4, r1
 8007e98:	2c63      	cmp	r4, #99	; 0x63
 8007e9a:	4629      	mov	r1, r5
 8007e9c:	f102 32ff 	add.w	r2, r2, #4294967295
 8007ea0:	dcf1      	bgt.n	8007e86 <__exponent+0x20>
 8007ea2:	3130      	adds	r1, #48	; 0x30
 8007ea4:	f1ac 0402 	sub.w	r4, ip, #2
 8007ea8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007eac:	4622      	mov	r2, r4
 8007eae:	1c41      	adds	r1, r0, #1
 8007eb0:	42ba      	cmp	r2, r7
 8007eb2:	d30a      	bcc.n	8007eca <__exponent+0x64>
 8007eb4:	f10d 0209 	add.w	r2, sp, #9
 8007eb8:	eba2 020c 	sub.w	r2, r2, ip
 8007ebc:	42bc      	cmp	r4, r7
 8007ebe:	bf88      	it	hi
 8007ec0:	2200      	movhi	r2, #0
 8007ec2:	4413      	add	r3, r2
 8007ec4:	1a18      	subs	r0, r3, r0
 8007ec6:	b003      	add	sp, #12
 8007ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eca:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007ece:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007ed2:	e7ed      	b.n	8007eb0 <__exponent+0x4a>
 8007ed4:	2330      	movs	r3, #48	; 0x30
 8007ed6:	3130      	adds	r1, #48	; 0x30
 8007ed8:	7083      	strb	r3, [r0, #2]
 8007eda:	70c1      	strb	r1, [r0, #3]
 8007edc:	1d03      	adds	r3, r0, #4
 8007ede:	e7f1      	b.n	8007ec4 <__exponent+0x5e>

08007ee0 <_printf_float>:
 8007ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee4:	b091      	sub	sp, #68	; 0x44
 8007ee6:	460c      	mov	r4, r1
 8007ee8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007eec:	4616      	mov	r6, r2
 8007eee:	461f      	mov	r7, r3
 8007ef0:	4605      	mov	r5, r0
 8007ef2:	f000 fd0f 	bl	8008914 <_localeconv_r>
 8007ef6:	6803      	ldr	r3, [r0, #0]
 8007ef8:	4618      	mov	r0, r3
 8007efa:	9309      	str	r3, [sp, #36]	; 0x24
 8007efc:	f7f8 f932 	bl	8000164 <strlen>
 8007f00:	2300      	movs	r3, #0
 8007f02:	930e      	str	r3, [sp, #56]	; 0x38
 8007f04:	f8d8 3000 	ldr.w	r3, [r8]
 8007f08:	900a      	str	r0, [sp, #40]	; 0x28
 8007f0a:	3307      	adds	r3, #7
 8007f0c:	f023 0307 	bic.w	r3, r3, #7
 8007f10:	f103 0208 	add.w	r2, r3, #8
 8007f14:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007f18:	f8d4 b000 	ldr.w	fp, [r4]
 8007f1c:	f8c8 2000 	str.w	r2, [r8]
 8007f20:	e9d3 a800 	ldrd	sl, r8, [r3]
 8007f24:	4652      	mov	r2, sl
 8007f26:	4643      	mov	r3, r8
 8007f28:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007f2c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8007f30:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f32:	f04f 32ff 	mov.w	r2, #4294967295
 8007f36:	4650      	mov	r0, sl
 8007f38:	4b9c      	ldr	r3, [pc, #624]	; (80081ac <_printf_float+0x2cc>)
 8007f3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f3c:	f7f8 fd70 	bl	8000a20 <__aeabi_dcmpun>
 8007f40:	bb70      	cbnz	r0, 8007fa0 <_printf_float+0xc0>
 8007f42:	f04f 32ff 	mov.w	r2, #4294967295
 8007f46:	4650      	mov	r0, sl
 8007f48:	4b98      	ldr	r3, [pc, #608]	; (80081ac <_printf_float+0x2cc>)
 8007f4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f4c:	f7f8 fd4a 	bl	80009e4 <__aeabi_dcmple>
 8007f50:	bb30      	cbnz	r0, 8007fa0 <_printf_float+0xc0>
 8007f52:	2200      	movs	r2, #0
 8007f54:	2300      	movs	r3, #0
 8007f56:	4650      	mov	r0, sl
 8007f58:	4641      	mov	r1, r8
 8007f5a:	f7f8 fd39 	bl	80009d0 <__aeabi_dcmplt>
 8007f5e:	b110      	cbz	r0, 8007f66 <_printf_float+0x86>
 8007f60:	232d      	movs	r3, #45	; 0x2d
 8007f62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f66:	4a92      	ldr	r2, [pc, #584]	; (80081b0 <_printf_float+0x2d0>)
 8007f68:	4b92      	ldr	r3, [pc, #584]	; (80081b4 <_printf_float+0x2d4>)
 8007f6a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007f6e:	bf94      	ite	ls
 8007f70:	4690      	movls	r8, r2
 8007f72:	4698      	movhi	r8, r3
 8007f74:	2303      	movs	r3, #3
 8007f76:	f04f 0a00 	mov.w	sl, #0
 8007f7a:	6123      	str	r3, [r4, #16]
 8007f7c:	f02b 0304 	bic.w	r3, fp, #4
 8007f80:	6023      	str	r3, [r4, #0]
 8007f82:	4633      	mov	r3, r6
 8007f84:	4621      	mov	r1, r4
 8007f86:	4628      	mov	r0, r5
 8007f88:	9700      	str	r7, [sp, #0]
 8007f8a:	aa0f      	add	r2, sp, #60	; 0x3c
 8007f8c:	f000 f9d6 	bl	800833c <_printf_common>
 8007f90:	3001      	adds	r0, #1
 8007f92:	f040 8090 	bne.w	80080b6 <_printf_float+0x1d6>
 8007f96:	f04f 30ff 	mov.w	r0, #4294967295
 8007f9a:	b011      	add	sp, #68	; 0x44
 8007f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa0:	4652      	mov	r2, sl
 8007fa2:	4643      	mov	r3, r8
 8007fa4:	4650      	mov	r0, sl
 8007fa6:	4641      	mov	r1, r8
 8007fa8:	f7f8 fd3a 	bl	8000a20 <__aeabi_dcmpun>
 8007fac:	b148      	cbz	r0, 8007fc2 <_printf_float+0xe2>
 8007fae:	f1b8 0f00 	cmp.w	r8, #0
 8007fb2:	bfb8      	it	lt
 8007fb4:	232d      	movlt	r3, #45	; 0x2d
 8007fb6:	4a80      	ldr	r2, [pc, #512]	; (80081b8 <_printf_float+0x2d8>)
 8007fb8:	bfb8      	it	lt
 8007fba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007fbe:	4b7f      	ldr	r3, [pc, #508]	; (80081bc <_printf_float+0x2dc>)
 8007fc0:	e7d3      	b.n	8007f6a <_printf_float+0x8a>
 8007fc2:	6863      	ldr	r3, [r4, #4]
 8007fc4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007fc8:	1c5a      	adds	r2, r3, #1
 8007fca:	d142      	bne.n	8008052 <_printf_float+0x172>
 8007fcc:	2306      	movs	r3, #6
 8007fce:	6063      	str	r3, [r4, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	9206      	str	r2, [sp, #24]
 8007fd4:	aa0e      	add	r2, sp, #56	; 0x38
 8007fd6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007fda:	aa0d      	add	r2, sp, #52	; 0x34
 8007fdc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007fe0:	9203      	str	r2, [sp, #12]
 8007fe2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007fe6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007fea:	6023      	str	r3, [r4, #0]
 8007fec:	6863      	ldr	r3, [r4, #4]
 8007fee:	4652      	mov	r2, sl
 8007ff0:	9300      	str	r3, [sp, #0]
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	4643      	mov	r3, r8
 8007ff6:	910b      	str	r1, [sp, #44]	; 0x2c
 8007ff8:	f7ff fed6 	bl	8007da8 <__cvt>
 8007ffc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ffe:	4680      	mov	r8, r0
 8008000:	2947      	cmp	r1, #71	; 0x47
 8008002:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008004:	d108      	bne.n	8008018 <_printf_float+0x138>
 8008006:	1cc8      	adds	r0, r1, #3
 8008008:	db02      	blt.n	8008010 <_printf_float+0x130>
 800800a:	6863      	ldr	r3, [r4, #4]
 800800c:	4299      	cmp	r1, r3
 800800e:	dd40      	ble.n	8008092 <_printf_float+0x1b2>
 8008010:	f1a9 0902 	sub.w	r9, r9, #2
 8008014:	fa5f f989 	uxtb.w	r9, r9
 8008018:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800801c:	d81f      	bhi.n	800805e <_printf_float+0x17e>
 800801e:	464a      	mov	r2, r9
 8008020:	3901      	subs	r1, #1
 8008022:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008026:	910d      	str	r1, [sp, #52]	; 0x34
 8008028:	f7ff ff1d 	bl	8007e66 <__exponent>
 800802c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800802e:	4682      	mov	sl, r0
 8008030:	1813      	adds	r3, r2, r0
 8008032:	2a01      	cmp	r2, #1
 8008034:	6123      	str	r3, [r4, #16]
 8008036:	dc02      	bgt.n	800803e <_printf_float+0x15e>
 8008038:	6822      	ldr	r2, [r4, #0]
 800803a:	07d2      	lsls	r2, r2, #31
 800803c:	d501      	bpl.n	8008042 <_printf_float+0x162>
 800803e:	3301      	adds	r3, #1
 8008040:	6123      	str	r3, [r4, #16]
 8008042:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008046:	2b00      	cmp	r3, #0
 8008048:	d09b      	beq.n	8007f82 <_printf_float+0xa2>
 800804a:	232d      	movs	r3, #45	; 0x2d
 800804c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008050:	e797      	b.n	8007f82 <_printf_float+0xa2>
 8008052:	2947      	cmp	r1, #71	; 0x47
 8008054:	d1bc      	bne.n	8007fd0 <_printf_float+0xf0>
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1ba      	bne.n	8007fd0 <_printf_float+0xf0>
 800805a:	2301      	movs	r3, #1
 800805c:	e7b7      	b.n	8007fce <_printf_float+0xee>
 800805e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008062:	d118      	bne.n	8008096 <_printf_float+0x1b6>
 8008064:	2900      	cmp	r1, #0
 8008066:	6863      	ldr	r3, [r4, #4]
 8008068:	dd0b      	ble.n	8008082 <_printf_float+0x1a2>
 800806a:	6121      	str	r1, [r4, #16]
 800806c:	b913      	cbnz	r3, 8008074 <_printf_float+0x194>
 800806e:	6822      	ldr	r2, [r4, #0]
 8008070:	07d0      	lsls	r0, r2, #31
 8008072:	d502      	bpl.n	800807a <_printf_float+0x19a>
 8008074:	3301      	adds	r3, #1
 8008076:	440b      	add	r3, r1
 8008078:	6123      	str	r3, [r4, #16]
 800807a:	f04f 0a00 	mov.w	sl, #0
 800807e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008080:	e7df      	b.n	8008042 <_printf_float+0x162>
 8008082:	b913      	cbnz	r3, 800808a <_printf_float+0x1aa>
 8008084:	6822      	ldr	r2, [r4, #0]
 8008086:	07d2      	lsls	r2, r2, #31
 8008088:	d501      	bpl.n	800808e <_printf_float+0x1ae>
 800808a:	3302      	adds	r3, #2
 800808c:	e7f4      	b.n	8008078 <_printf_float+0x198>
 800808e:	2301      	movs	r3, #1
 8008090:	e7f2      	b.n	8008078 <_printf_float+0x198>
 8008092:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008096:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008098:	4299      	cmp	r1, r3
 800809a:	db05      	blt.n	80080a8 <_printf_float+0x1c8>
 800809c:	6823      	ldr	r3, [r4, #0]
 800809e:	6121      	str	r1, [r4, #16]
 80080a0:	07d8      	lsls	r0, r3, #31
 80080a2:	d5ea      	bpl.n	800807a <_printf_float+0x19a>
 80080a4:	1c4b      	adds	r3, r1, #1
 80080a6:	e7e7      	b.n	8008078 <_printf_float+0x198>
 80080a8:	2900      	cmp	r1, #0
 80080aa:	bfcc      	ite	gt
 80080ac:	2201      	movgt	r2, #1
 80080ae:	f1c1 0202 	rsble	r2, r1, #2
 80080b2:	4413      	add	r3, r2
 80080b4:	e7e0      	b.n	8008078 <_printf_float+0x198>
 80080b6:	6823      	ldr	r3, [r4, #0]
 80080b8:	055a      	lsls	r2, r3, #21
 80080ba:	d407      	bmi.n	80080cc <_printf_float+0x1ec>
 80080bc:	6923      	ldr	r3, [r4, #16]
 80080be:	4642      	mov	r2, r8
 80080c0:	4631      	mov	r1, r6
 80080c2:	4628      	mov	r0, r5
 80080c4:	47b8      	blx	r7
 80080c6:	3001      	adds	r0, #1
 80080c8:	d12b      	bne.n	8008122 <_printf_float+0x242>
 80080ca:	e764      	b.n	8007f96 <_printf_float+0xb6>
 80080cc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80080d0:	f240 80dd 	bls.w	800828e <_printf_float+0x3ae>
 80080d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80080d8:	2200      	movs	r2, #0
 80080da:	2300      	movs	r3, #0
 80080dc:	f7f8 fc6e 	bl	80009bc <__aeabi_dcmpeq>
 80080e0:	2800      	cmp	r0, #0
 80080e2:	d033      	beq.n	800814c <_printf_float+0x26c>
 80080e4:	2301      	movs	r3, #1
 80080e6:	4631      	mov	r1, r6
 80080e8:	4628      	mov	r0, r5
 80080ea:	4a35      	ldr	r2, [pc, #212]	; (80081c0 <_printf_float+0x2e0>)
 80080ec:	47b8      	blx	r7
 80080ee:	3001      	adds	r0, #1
 80080f0:	f43f af51 	beq.w	8007f96 <_printf_float+0xb6>
 80080f4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80080f8:	429a      	cmp	r2, r3
 80080fa:	db02      	blt.n	8008102 <_printf_float+0x222>
 80080fc:	6823      	ldr	r3, [r4, #0]
 80080fe:	07d8      	lsls	r0, r3, #31
 8008100:	d50f      	bpl.n	8008122 <_printf_float+0x242>
 8008102:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008106:	4631      	mov	r1, r6
 8008108:	4628      	mov	r0, r5
 800810a:	47b8      	blx	r7
 800810c:	3001      	adds	r0, #1
 800810e:	f43f af42 	beq.w	8007f96 <_printf_float+0xb6>
 8008112:	f04f 0800 	mov.w	r8, #0
 8008116:	f104 091a 	add.w	r9, r4, #26
 800811a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800811c:	3b01      	subs	r3, #1
 800811e:	4543      	cmp	r3, r8
 8008120:	dc09      	bgt.n	8008136 <_printf_float+0x256>
 8008122:	6823      	ldr	r3, [r4, #0]
 8008124:	079b      	lsls	r3, r3, #30
 8008126:	f100 8104 	bmi.w	8008332 <_printf_float+0x452>
 800812a:	68e0      	ldr	r0, [r4, #12]
 800812c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800812e:	4298      	cmp	r0, r3
 8008130:	bfb8      	it	lt
 8008132:	4618      	movlt	r0, r3
 8008134:	e731      	b.n	8007f9a <_printf_float+0xba>
 8008136:	2301      	movs	r3, #1
 8008138:	464a      	mov	r2, r9
 800813a:	4631      	mov	r1, r6
 800813c:	4628      	mov	r0, r5
 800813e:	47b8      	blx	r7
 8008140:	3001      	adds	r0, #1
 8008142:	f43f af28 	beq.w	8007f96 <_printf_float+0xb6>
 8008146:	f108 0801 	add.w	r8, r8, #1
 800814a:	e7e6      	b.n	800811a <_printf_float+0x23a>
 800814c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800814e:	2b00      	cmp	r3, #0
 8008150:	dc38      	bgt.n	80081c4 <_printf_float+0x2e4>
 8008152:	2301      	movs	r3, #1
 8008154:	4631      	mov	r1, r6
 8008156:	4628      	mov	r0, r5
 8008158:	4a19      	ldr	r2, [pc, #100]	; (80081c0 <_printf_float+0x2e0>)
 800815a:	47b8      	blx	r7
 800815c:	3001      	adds	r0, #1
 800815e:	f43f af1a 	beq.w	8007f96 <_printf_float+0xb6>
 8008162:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008166:	4313      	orrs	r3, r2
 8008168:	d102      	bne.n	8008170 <_printf_float+0x290>
 800816a:	6823      	ldr	r3, [r4, #0]
 800816c:	07d9      	lsls	r1, r3, #31
 800816e:	d5d8      	bpl.n	8008122 <_printf_float+0x242>
 8008170:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008174:	4631      	mov	r1, r6
 8008176:	4628      	mov	r0, r5
 8008178:	47b8      	blx	r7
 800817a:	3001      	adds	r0, #1
 800817c:	f43f af0b 	beq.w	8007f96 <_printf_float+0xb6>
 8008180:	f04f 0900 	mov.w	r9, #0
 8008184:	f104 0a1a 	add.w	sl, r4, #26
 8008188:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800818a:	425b      	negs	r3, r3
 800818c:	454b      	cmp	r3, r9
 800818e:	dc01      	bgt.n	8008194 <_printf_float+0x2b4>
 8008190:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008192:	e794      	b.n	80080be <_printf_float+0x1de>
 8008194:	2301      	movs	r3, #1
 8008196:	4652      	mov	r2, sl
 8008198:	4631      	mov	r1, r6
 800819a:	4628      	mov	r0, r5
 800819c:	47b8      	blx	r7
 800819e:	3001      	adds	r0, #1
 80081a0:	f43f aef9 	beq.w	8007f96 <_printf_float+0xb6>
 80081a4:	f109 0901 	add.w	r9, r9, #1
 80081a8:	e7ee      	b.n	8008188 <_printf_float+0x2a8>
 80081aa:	bf00      	nop
 80081ac:	7fefffff 	.word	0x7fefffff
 80081b0:	0800d4a9 	.word	0x0800d4a9
 80081b4:	0800d4ad 	.word	0x0800d4ad
 80081b8:	0800d4b1 	.word	0x0800d4b1
 80081bc:	0800d4b5 	.word	0x0800d4b5
 80081c0:	0800d4b9 	.word	0x0800d4b9
 80081c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081c8:	429a      	cmp	r2, r3
 80081ca:	bfa8      	it	ge
 80081cc:	461a      	movge	r2, r3
 80081ce:	2a00      	cmp	r2, #0
 80081d0:	4691      	mov	r9, r2
 80081d2:	dc37      	bgt.n	8008244 <_printf_float+0x364>
 80081d4:	f04f 0b00 	mov.w	fp, #0
 80081d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081dc:	f104 021a 	add.w	r2, r4, #26
 80081e0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80081e4:	ebaa 0309 	sub.w	r3, sl, r9
 80081e8:	455b      	cmp	r3, fp
 80081ea:	dc33      	bgt.n	8008254 <_printf_float+0x374>
 80081ec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80081f0:	429a      	cmp	r2, r3
 80081f2:	db3b      	blt.n	800826c <_printf_float+0x38c>
 80081f4:	6823      	ldr	r3, [r4, #0]
 80081f6:	07da      	lsls	r2, r3, #31
 80081f8:	d438      	bmi.n	800826c <_printf_float+0x38c>
 80081fa:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80081fe:	eba2 0903 	sub.w	r9, r2, r3
 8008202:	eba2 020a 	sub.w	r2, r2, sl
 8008206:	4591      	cmp	r9, r2
 8008208:	bfa8      	it	ge
 800820a:	4691      	movge	r9, r2
 800820c:	f1b9 0f00 	cmp.w	r9, #0
 8008210:	dc34      	bgt.n	800827c <_printf_float+0x39c>
 8008212:	f04f 0800 	mov.w	r8, #0
 8008216:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800821a:	f104 0a1a 	add.w	sl, r4, #26
 800821e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008222:	1a9b      	subs	r3, r3, r2
 8008224:	eba3 0309 	sub.w	r3, r3, r9
 8008228:	4543      	cmp	r3, r8
 800822a:	f77f af7a 	ble.w	8008122 <_printf_float+0x242>
 800822e:	2301      	movs	r3, #1
 8008230:	4652      	mov	r2, sl
 8008232:	4631      	mov	r1, r6
 8008234:	4628      	mov	r0, r5
 8008236:	47b8      	blx	r7
 8008238:	3001      	adds	r0, #1
 800823a:	f43f aeac 	beq.w	8007f96 <_printf_float+0xb6>
 800823e:	f108 0801 	add.w	r8, r8, #1
 8008242:	e7ec      	b.n	800821e <_printf_float+0x33e>
 8008244:	4613      	mov	r3, r2
 8008246:	4631      	mov	r1, r6
 8008248:	4642      	mov	r2, r8
 800824a:	4628      	mov	r0, r5
 800824c:	47b8      	blx	r7
 800824e:	3001      	adds	r0, #1
 8008250:	d1c0      	bne.n	80081d4 <_printf_float+0x2f4>
 8008252:	e6a0      	b.n	8007f96 <_printf_float+0xb6>
 8008254:	2301      	movs	r3, #1
 8008256:	4631      	mov	r1, r6
 8008258:	4628      	mov	r0, r5
 800825a:	920b      	str	r2, [sp, #44]	; 0x2c
 800825c:	47b8      	blx	r7
 800825e:	3001      	adds	r0, #1
 8008260:	f43f ae99 	beq.w	8007f96 <_printf_float+0xb6>
 8008264:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008266:	f10b 0b01 	add.w	fp, fp, #1
 800826a:	e7b9      	b.n	80081e0 <_printf_float+0x300>
 800826c:	4631      	mov	r1, r6
 800826e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008272:	4628      	mov	r0, r5
 8008274:	47b8      	blx	r7
 8008276:	3001      	adds	r0, #1
 8008278:	d1bf      	bne.n	80081fa <_printf_float+0x31a>
 800827a:	e68c      	b.n	8007f96 <_printf_float+0xb6>
 800827c:	464b      	mov	r3, r9
 800827e:	4631      	mov	r1, r6
 8008280:	4628      	mov	r0, r5
 8008282:	eb08 020a 	add.w	r2, r8, sl
 8008286:	47b8      	blx	r7
 8008288:	3001      	adds	r0, #1
 800828a:	d1c2      	bne.n	8008212 <_printf_float+0x332>
 800828c:	e683      	b.n	8007f96 <_printf_float+0xb6>
 800828e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008290:	2a01      	cmp	r2, #1
 8008292:	dc01      	bgt.n	8008298 <_printf_float+0x3b8>
 8008294:	07db      	lsls	r3, r3, #31
 8008296:	d539      	bpl.n	800830c <_printf_float+0x42c>
 8008298:	2301      	movs	r3, #1
 800829a:	4642      	mov	r2, r8
 800829c:	4631      	mov	r1, r6
 800829e:	4628      	mov	r0, r5
 80082a0:	47b8      	blx	r7
 80082a2:	3001      	adds	r0, #1
 80082a4:	f43f ae77 	beq.w	8007f96 <_printf_float+0xb6>
 80082a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082ac:	4631      	mov	r1, r6
 80082ae:	4628      	mov	r0, r5
 80082b0:	47b8      	blx	r7
 80082b2:	3001      	adds	r0, #1
 80082b4:	f43f ae6f 	beq.w	8007f96 <_printf_float+0xb6>
 80082b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082bc:	2200      	movs	r2, #0
 80082be:	2300      	movs	r3, #0
 80082c0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80082c4:	f7f8 fb7a 	bl	80009bc <__aeabi_dcmpeq>
 80082c8:	b9d8      	cbnz	r0, 8008302 <_printf_float+0x422>
 80082ca:	f109 33ff 	add.w	r3, r9, #4294967295
 80082ce:	f108 0201 	add.w	r2, r8, #1
 80082d2:	4631      	mov	r1, r6
 80082d4:	4628      	mov	r0, r5
 80082d6:	47b8      	blx	r7
 80082d8:	3001      	adds	r0, #1
 80082da:	d10e      	bne.n	80082fa <_printf_float+0x41a>
 80082dc:	e65b      	b.n	8007f96 <_printf_float+0xb6>
 80082de:	2301      	movs	r3, #1
 80082e0:	464a      	mov	r2, r9
 80082e2:	4631      	mov	r1, r6
 80082e4:	4628      	mov	r0, r5
 80082e6:	47b8      	blx	r7
 80082e8:	3001      	adds	r0, #1
 80082ea:	f43f ae54 	beq.w	8007f96 <_printf_float+0xb6>
 80082ee:	f108 0801 	add.w	r8, r8, #1
 80082f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082f4:	3b01      	subs	r3, #1
 80082f6:	4543      	cmp	r3, r8
 80082f8:	dcf1      	bgt.n	80082de <_printf_float+0x3fe>
 80082fa:	4653      	mov	r3, sl
 80082fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008300:	e6de      	b.n	80080c0 <_printf_float+0x1e0>
 8008302:	f04f 0800 	mov.w	r8, #0
 8008306:	f104 091a 	add.w	r9, r4, #26
 800830a:	e7f2      	b.n	80082f2 <_printf_float+0x412>
 800830c:	2301      	movs	r3, #1
 800830e:	4642      	mov	r2, r8
 8008310:	e7df      	b.n	80082d2 <_printf_float+0x3f2>
 8008312:	2301      	movs	r3, #1
 8008314:	464a      	mov	r2, r9
 8008316:	4631      	mov	r1, r6
 8008318:	4628      	mov	r0, r5
 800831a:	47b8      	blx	r7
 800831c:	3001      	adds	r0, #1
 800831e:	f43f ae3a 	beq.w	8007f96 <_printf_float+0xb6>
 8008322:	f108 0801 	add.w	r8, r8, #1
 8008326:	68e3      	ldr	r3, [r4, #12]
 8008328:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800832a:	1a5b      	subs	r3, r3, r1
 800832c:	4543      	cmp	r3, r8
 800832e:	dcf0      	bgt.n	8008312 <_printf_float+0x432>
 8008330:	e6fb      	b.n	800812a <_printf_float+0x24a>
 8008332:	f04f 0800 	mov.w	r8, #0
 8008336:	f104 0919 	add.w	r9, r4, #25
 800833a:	e7f4      	b.n	8008326 <_printf_float+0x446>

0800833c <_printf_common>:
 800833c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008340:	4616      	mov	r6, r2
 8008342:	4699      	mov	r9, r3
 8008344:	688a      	ldr	r2, [r1, #8]
 8008346:	690b      	ldr	r3, [r1, #16]
 8008348:	4607      	mov	r7, r0
 800834a:	4293      	cmp	r3, r2
 800834c:	bfb8      	it	lt
 800834e:	4613      	movlt	r3, r2
 8008350:	6033      	str	r3, [r6, #0]
 8008352:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008356:	460c      	mov	r4, r1
 8008358:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800835c:	b10a      	cbz	r2, 8008362 <_printf_common+0x26>
 800835e:	3301      	adds	r3, #1
 8008360:	6033      	str	r3, [r6, #0]
 8008362:	6823      	ldr	r3, [r4, #0]
 8008364:	0699      	lsls	r1, r3, #26
 8008366:	bf42      	ittt	mi
 8008368:	6833      	ldrmi	r3, [r6, #0]
 800836a:	3302      	addmi	r3, #2
 800836c:	6033      	strmi	r3, [r6, #0]
 800836e:	6825      	ldr	r5, [r4, #0]
 8008370:	f015 0506 	ands.w	r5, r5, #6
 8008374:	d106      	bne.n	8008384 <_printf_common+0x48>
 8008376:	f104 0a19 	add.w	sl, r4, #25
 800837a:	68e3      	ldr	r3, [r4, #12]
 800837c:	6832      	ldr	r2, [r6, #0]
 800837e:	1a9b      	subs	r3, r3, r2
 8008380:	42ab      	cmp	r3, r5
 8008382:	dc2b      	bgt.n	80083dc <_printf_common+0xa0>
 8008384:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008388:	1e13      	subs	r3, r2, #0
 800838a:	6822      	ldr	r2, [r4, #0]
 800838c:	bf18      	it	ne
 800838e:	2301      	movne	r3, #1
 8008390:	0692      	lsls	r2, r2, #26
 8008392:	d430      	bmi.n	80083f6 <_printf_common+0xba>
 8008394:	4649      	mov	r1, r9
 8008396:	4638      	mov	r0, r7
 8008398:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800839c:	47c0      	blx	r8
 800839e:	3001      	adds	r0, #1
 80083a0:	d023      	beq.n	80083ea <_printf_common+0xae>
 80083a2:	6823      	ldr	r3, [r4, #0]
 80083a4:	6922      	ldr	r2, [r4, #16]
 80083a6:	f003 0306 	and.w	r3, r3, #6
 80083aa:	2b04      	cmp	r3, #4
 80083ac:	bf14      	ite	ne
 80083ae:	2500      	movne	r5, #0
 80083b0:	6833      	ldreq	r3, [r6, #0]
 80083b2:	f04f 0600 	mov.w	r6, #0
 80083b6:	bf08      	it	eq
 80083b8:	68e5      	ldreq	r5, [r4, #12]
 80083ba:	f104 041a 	add.w	r4, r4, #26
 80083be:	bf08      	it	eq
 80083c0:	1aed      	subeq	r5, r5, r3
 80083c2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80083c6:	bf08      	it	eq
 80083c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083cc:	4293      	cmp	r3, r2
 80083ce:	bfc4      	itt	gt
 80083d0:	1a9b      	subgt	r3, r3, r2
 80083d2:	18ed      	addgt	r5, r5, r3
 80083d4:	42b5      	cmp	r5, r6
 80083d6:	d11a      	bne.n	800840e <_printf_common+0xd2>
 80083d8:	2000      	movs	r0, #0
 80083da:	e008      	b.n	80083ee <_printf_common+0xb2>
 80083dc:	2301      	movs	r3, #1
 80083de:	4652      	mov	r2, sl
 80083e0:	4649      	mov	r1, r9
 80083e2:	4638      	mov	r0, r7
 80083e4:	47c0      	blx	r8
 80083e6:	3001      	adds	r0, #1
 80083e8:	d103      	bne.n	80083f2 <_printf_common+0xb6>
 80083ea:	f04f 30ff 	mov.w	r0, #4294967295
 80083ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083f2:	3501      	adds	r5, #1
 80083f4:	e7c1      	b.n	800837a <_printf_common+0x3e>
 80083f6:	2030      	movs	r0, #48	; 0x30
 80083f8:	18e1      	adds	r1, r4, r3
 80083fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083fe:	1c5a      	adds	r2, r3, #1
 8008400:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008404:	4422      	add	r2, r4
 8008406:	3302      	adds	r3, #2
 8008408:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800840c:	e7c2      	b.n	8008394 <_printf_common+0x58>
 800840e:	2301      	movs	r3, #1
 8008410:	4622      	mov	r2, r4
 8008412:	4649      	mov	r1, r9
 8008414:	4638      	mov	r0, r7
 8008416:	47c0      	blx	r8
 8008418:	3001      	adds	r0, #1
 800841a:	d0e6      	beq.n	80083ea <_printf_common+0xae>
 800841c:	3601      	adds	r6, #1
 800841e:	e7d9      	b.n	80083d4 <_printf_common+0x98>

08008420 <_printf_i>:
 8008420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008424:	7e0f      	ldrb	r7, [r1, #24]
 8008426:	4691      	mov	r9, r2
 8008428:	2f78      	cmp	r7, #120	; 0x78
 800842a:	4680      	mov	r8, r0
 800842c:	460c      	mov	r4, r1
 800842e:	469a      	mov	sl, r3
 8008430:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008432:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008436:	d807      	bhi.n	8008448 <_printf_i+0x28>
 8008438:	2f62      	cmp	r7, #98	; 0x62
 800843a:	d80a      	bhi.n	8008452 <_printf_i+0x32>
 800843c:	2f00      	cmp	r7, #0
 800843e:	f000 80d5 	beq.w	80085ec <_printf_i+0x1cc>
 8008442:	2f58      	cmp	r7, #88	; 0x58
 8008444:	f000 80c1 	beq.w	80085ca <_printf_i+0x1aa>
 8008448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800844c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008450:	e03a      	b.n	80084c8 <_printf_i+0xa8>
 8008452:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008456:	2b15      	cmp	r3, #21
 8008458:	d8f6      	bhi.n	8008448 <_printf_i+0x28>
 800845a:	a101      	add	r1, pc, #4	; (adr r1, 8008460 <_printf_i+0x40>)
 800845c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008460:	080084b9 	.word	0x080084b9
 8008464:	080084cd 	.word	0x080084cd
 8008468:	08008449 	.word	0x08008449
 800846c:	08008449 	.word	0x08008449
 8008470:	08008449 	.word	0x08008449
 8008474:	08008449 	.word	0x08008449
 8008478:	080084cd 	.word	0x080084cd
 800847c:	08008449 	.word	0x08008449
 8008480:	08008449 	.word	0x08008449
 8008484:	08008449 	.word	0x08008449
 8008488:	08008449 	.word	0x08008449
 800848c:	080085d3 	.word	0x080085d3
 8008490:	080084f9 	.word	0x080084f9
 8008494:	0800858d 	.word	0x0800858d
 8008498:	08008449 	.word	0x08008449
 800849c:	08008449 	.word	0x08008449
 80084a0:	080085f5 	.word	0x080085f5
 80084a4:	08008449 	.word	0x08008449
 80084a8:	080084f9 	.word	0x080084f9
 80084ac:	08008449 	.word	0x08008449
 80084b0:	08008449 	.word	0x08008449
 80084b4:	08008595 	.word	0x08008595
 80084b8:	682b      	ldr	r3, [r5, #0]
 80084ba:	1d1a      	adds	r2, r3, #4
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	602a      	str	r2, [r5, #0]
 80084c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084c8:	2301      	movs	r3, #1
 80084ca:	e0a0      	b.n	800860e <_printf_i+0x1ee>
 80084cc:	6820      	ldr	r0, [r4, #0]
 80084ce:	682b      	ldr	r3, [r5, #0]
 80084d0:	0607      	lsls	r7, r0, #24
 80084d2:	f103 0104 	add.w	r1, r3, #4
 80084d6:	6029      	str	r1, [r5, #0]
 80084d8:	d501      	bpl.n	80084de <_printf_i+0xbe>
 80084da:	681e      	ldr	r6, [r3, #0]
 80084dc:	e003      	b.n	80084e6 <_printf_i+0xc6>
 80084de:	0646      	lsls	r6, r0, #25
 80084e0:	d5fb      	bpl.n	80084da <_printf_i+0xba>
 80084e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80084e6:	2e00      	cmp	r6, #0
 80084e8:	da03      	bge.n	80084f2 <_printf_i+0xd2>
 80084ea:	232d      	movs	r3, #45	; 0x2d
 80084ec:	4276      	negs	r6, r6
 80084ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084f2:	230a      	movs	r3, #10
 80084f4:	4859      	ldr	r0, [pc, #356]	; (800865c <_printf_i+0x23c>)
 80084f6:	e012      	b.n	800851e <_printf_i+0xfe>
 80084f8:	682b      	ldr	r3, [r5, #0]
 80084fa:	6820      	ldr	r0, [r4, #0]
 80084fc:	1d19      	adds	r1, r3, #4
 80084fe:	6029      	str	r1, [r5, #0]
 8008500:	0605      	lsls	r5, r0, #24
 8008502:	d501      	bpl.n	8008508 <_printf_i+0xe8>
 8008504:	681e      	ldr	r6, [r3, #0]
 8008506:	e002      	b.n	800850e <_printf_i+0xee>
 8008508:	0641      	lsls	r1, r0, #25
 800850a:	d5fb      	bpl.n	8008504 <_printf_i+0xe4>
 800850c:	881e      	ldrh	r6, [r3, #0]
 800850e:	2f6f      	cmp	r7, #111	; 0x6f
 8008510:	bf0c      	ite	eq
 8008512:	2308      	moveq	r3, #8
 8008514:	230a      	movne	r3, #10
 8008516:	4851      	ldr	r0, [pc, #324]	; (800865c <_printf_i+0x23c>)
 8008518:	2100      	movs	r1, #0
 800851a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800851e:	6865      	ldr	r5, [r4, #4]
 8008520:	2d00      	cmp	r5, #0
 8008522:	bfa8      	it	ge
 8008524:	6821      	ldrge	r1, [r4, #0]
 8008526:	60a5      	str	r5, [r4, #8]
 8008528:	bfa4      	itt	ge
 800852a:	f021 0104 	bicge.w	r1, r1, #4
 800852e:	6021      	strge	r1, [r4, #0]
 8008530:	b90e      	cbnz	r6, 8008536 <_printf_i+0x116>
 8008532:	2d00      	cmp	r5, #0
 8008534:	d04b      	beq.n	80085ce <_printf_i+0x1ae>
 8008536:	4615      	mov	r5, r2
 8008538:	fbb6 f1f3 	udiv	r1, r6, r3
 800853c:	fb03 6711 	mls	r7, r3, r1, r6
 8008540:	5dc7      	ldrb	r7, [r0, r7]
 8008542:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008546:	4637      	mov	r7, r6
 8008548:	42bb      	cmp	r3, r7
 800854a:	460e      	mov	r6, r1
 800854c:	d9f4      	bls.n	8008538 <_printf_i+0x118>
 800854e:	2b08      	cmp	r3, #8
 8008550:	d10b      	bne.n	800856a <_printf_i+0x14a>
 8008552:	6823      	ldr	r3, [r4, #0]
 8008554:	07de      	lsls	r6, r3, #31
 8008556:	d508      	bpl.n	800856a <_printf_i+0x14a>
 8008558:	6923      	ldr	r3, [r4, #16]
 800855a:	6861      	ldr	r1, [r4, #4]
 800855c:	4299      	cmp	r1, r3
 800855e:	bfde      	ittt	le
 8008560:	2330      	movle	r3, #48	; 0x30
 8008562:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008566:	f105 35ff 	addle.w	r5, r5, #4294967295
 800856a:	1b52      	subs	r2, r2, r5
 800856c:	6122      	str	r2, [r4, #16]
 800856e:	464b      	mov	r3, r9
 8008570:	4621      	mov	r1, r4
 8008572:	4640      	mov	r0, r8
 8008574:	f8cd a000 	str.w	sl, [sp]
 8008578:	aa03      	add	r2, sp, #12
 800857a:	f7ff fedf 	bl	800833c <_printf_common>
 800857e:	3001      	adds	r0, #1
 8008580:	d14a      	bne.n	8008618 <_printf_i+0x1f8>
 8008582:	f04f 30ff 	mov.w	r0, #4294967295
 8008586:	b004      	add	sp, #16
 8008588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800858c:	6823      	ldr	r3, [r4, #0]
 800858e:	f043 0320 	orr.w	r3, r3, #32
 8008592:	6023      	str	r3, [r4, #0]
 8008594:	2778      	movs	r7, #120	; 0x78
 8008596:	4832      	ldr	r0, [pc, #200]	; (8008660 <_printf_i+0x240>)
 8008598:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800859c:	6823      	ldr	r3, [r4, #0]
 800859e:	6829      	ldr	r1, [r5, #0]
 80085a0:	061f      	lsls	r7, r3, #24
 80085a2:	f851 6b04 	ldr.w	r6, [r1], #4
 80085a6:	d402      	bmi.n	80085ae <_printf_i+0x18e>
 80085a8:	065f      	lsls	r7, r3, #25
 80085aa:	bf48      	it	mi
 80085ac:	b2b6      	uxthmi	r6, r6
 80085ae:	07df      	lsls	r7, r3, #31
 80085b0:	bf48      	it	mi
 80085b2:	f043 0320 	orrmi.w	r3, r3, #32
 80085b6:	6029      	str	r1, [r5, #0]
 80085b8:	bf48      	it	mi
 80085ba:	6023      	strmi	r3, [r4, #0]
 80085bc:	b91e      	cbnz	r6, 80085c6 <_printf_i+0x1a6>
 80085be:	6823      	ldr	r3, [r4, #0]
 80085c0:	f023 0320 	bic.w	r3, r3, #32
 80085c4:	6023      	str	r3, [r4, #0]
 80085c6:	2310      	movs	r3, #16
 80085c8:	e7a6      	b.n	8008518 <_printf_i+0xf8>
 80085ca:	4824      	ldr	r0, [pc, #144]	; (800865c <_printf_i+0x23c>)
 80085cc:	e7e4      	b.n	8008598 <_printf_i+0x178>
 80085ce:	4615      	mov	r5, r2
 80085d0:	e7bd      	b.n	800854e <_printf_i+0x12e>
 80085d2:	682b      	ldr	r3, [r5, #0]
 80085d4:	6826      	ldr	r6, [r4, #0]
 80085d6:	1d18      	adds	r0, r3, #4
 80085d8:	6961      	ldr	r1, [r4, #20]
 80085da:	6028      	str	r0, [r5, #0]
 80085dc:	0635      	lsls	r5, r6, #24
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	d501      	bpl.n	80085e6 <_printf_i+0x1c6>
 80085e2:	6019      	str	r1, [r3, #0]
 80085e4:	e002      	b.n	80085ec <_printf_i+0x1cc>
 80085e6:	0670      	lsls	r0, r6, #25
 80085e8:	d5fb      	bpl.n	80085e2 <_printf_i+0x1c2>
 80085ea:	8019      	strh	r1, [r3, #0]
 80085ec:	2300      	movs	r3, #0
 80085ee:	4615      	mov	r5, r2
 80085f0:	6123      	str	r3, [r4, #16]
 80085f2:	e7bc      	b.n	800856e <_printf_i+0x14e>
 80085f4:	682b      	ldr	r3, [r5, #0]
 80085f6:	2100      	movs	r1, #0
 80085f8:	1d1a      	adds	r2, r3, #4
 80085fa:	602a      	str	r2, [r5, #0]
 80085fc:	681d      	ldr	r5, [r3, #0]
 80085fe:	6862      	ldr	r2, [r4, #4]
 8008600:	4628      	mov	r0, r5
 8008602:	f000 f9fe 	bl	8008a02 <memchr>
 8008606:	b108      	cbz	r0, 800860c <_printf_i+0x1ec>
 8008608:	1b40      	subs	r0, r0, r5
 800860a:	6060      	str	r0, [r4, #4]
 800860c:	6863      	ldr	r3, [r4, #4]
 800860e:	6123      	str	r3, [r4, #16]
 8008610:	2300      	movs	r3, #0
 8008612:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008616:	e7aa      	b.n	800856e <_printf_i+0x14e>
 8008618:	462a      	mov	r2, r5
 800861a:	4649      	mov	r1, r9
 800861c:	4640      	mov	r0, r8
 800861e:	6923      	ldr	r3, [r4, #16]
 8008620:	47d0      	blx	sl
 8008622:	3001      	adds	r0, #1
 8008624:	d0ad      	beq.n	8008582 <_printf_i+0x162>
 8008626:	6823      	ldr	r3, [r4, #0]
 8008628:	079b      	lsls	r3, r3, #30
 800862a:	d413      	bmi.n	8008654 <_printf_i+0x234>
 800862c:	68e0      	ldr	r0, [r4, #12]
 800862e:	9b03      	ldr	r3, [sp, #12]
 8008630:	4298      	cmp	r0, r3
 8008632:	bfb8      	it	lt
 8008634:	4618      	movlt	r0, r3
 8008636:	e7a6      	b.n	8008586 <_printf_i+0x166>
 8008638:	2301      	movs	r3, #1
 800863a:	4632      	mov	r2, r6
 800863c:	4649      	mov	r1, r9
 800863e:	4640      	mov	r0, r8
 8008640:	47d0      	blx	sl
 8008642:	3001      	adds	r0, #1
 8008644:	d09d      	beq.n	8008582 <_printf_i+0x162>
 8008646:	3501      	adds	r5, #1
 8008648:	68e3      	ldr	r3, [r4, #12]
 800864a:	9903      	ldr	r1, [sp, #12]
 800864c:	1a5b      	subs	r3, r3, r1
 800864e:	42ab      	cmp	r3, r5
 8008650:	dcf2      	bgt.n	8008638 <_printf_i+0x218>
 8008652:	e7eb      	b.n	800862c <_printf_i+0x20c>
 8008654:	2500      	movs	r5, #0
 8008656:	f104 0619 	add.w	r6, r4, #25
 800865a:	e7f5      	b.n	8008648 <_printf_i+0x228>
 800865c:	0800d4bb 	.word	0x0800d4bb
 8008660:	0800d4cc 	.word	0x0800d4cc

08008664 <std>:
 8008664:	2300      	movs	r3, #0
 8008666:	b510      	push	{r4, lr}
 8008668:	4604      	mov	r4, r0
 800866a:	e9c0 3300 	strd	r3, r3, [r0]
 800866e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008672:	6083      	str	r3, [r0, #8]
 8008674:	8181      	strh	r1, [r0, #12]
 8008676:	6643      	str	r3, [r0, #100]	; 0x64
 8008678:	81c2      	strh	r2, [r0, #14]
 800867a:	6183      	str	r3, [r0, #24]
 800867c:	4619      	mov	r1, r3
 800867e:	2208      	movs	r2, #8
 8008680:	305c      	adds	r0, #92	; 0x5c
 8008682:	f000 f914 	bl	80088ae <memset>
 8008686:	4b0d      	ldr	r3, [pc, #52]	; (80086bc <std+0x58>)
 8008688:	6224      	str	r4, [r4, #32]
 800868a:	6263      	str	r3, [r4, #36]	; 0x24
 800868c:	4b0c      	ldr	r3, [pc, #48]	; (80086c0 <std+0x5c>)
 800868e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008690:	4b0c      	ldr	r3, [pc, #48]	; (80086c4 <std+0x60>)
 8008692:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008694:	4b0c      	ldr	r3, [pc, #48]	; (80086c8 <std+0x64>)
 8008696:	6323      	str	r3, [r4, #48]	; 0x30
 8008698:	4b0c      	ldr	r3, [pc, #48]	; (80086cc <std+0x68>)
 800869a:	429c      	cmp	r4, r3
 800869c:	d006      	beq.n	80086ac <std+0x48>
 800869e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80086a2:	4294      	cmp	r4, r2
 80086a4:	d002      	beq.n	80086ac <std+0x48>
 80086a6:	33d0      	adds	r3, #208	; 0xd0
 80086a8:	429c      	cmp	r4, r3
 80086aa:	d105      	bne.n	80086b8 <std+0x54>
 80086ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80086b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086b4:	f000 b9a2 	b.w	80089fc <__retarget_lock_init_recursive>
 80086b8:	bd10      	pop	{r4, pc}
 80086ba:	bf00      	nop
 80086bc:	08008829 	.word	0x08008829
 80086c0:	0800884b 	.word	0x0800884b
 80086c4:	08008883 	.word	0x08008883
 80086c8:	080088a7 	.word	0x080088a7
 80086cc:	20000b7c 	.word	0x20000b7c

080086d0 <stdio_exit_handler>:
 80086d0:	4a02      	ldr	r2, [pc, #8]	; (80086dc <stdio_exit_handler+0xc>)
 80086d2:	4903      	ldr	r1, [pc, #12]	; (80086e0 <stdio_exit_handler+0x10>)
 80086d4:	4803      	ldr	r0, [pc, #12]	; (80086e4 <stdio_exit_handler+0x14>)
 80086d6:	f000 b869 	b.w	80087ac <_fwalk_sglue>
 80086da:	bf00      	nop
 80086dc:	20000018 	.word	0x20000018
 80086e0:	0800ad01 	.word	0x0800ad01
 80086e4:	20000190 	.word	0x20000190

080086e8 <cleanup_stdio>:
 80086e8:	6841      	ldr	r1, [r0, #4]
 80086ea:	4b0c      	ldr	r3, [pc, #48]	; (800871c <cleanup_stdio+0x34>)
 80086ec:	b510      	push	{r4, lr}
 80086ee:	4299      	cmp	r1, r3
 80086f0:	4604      	mov	r4, r0
 80086f2:	d001      	beq.n	80086f8 <cleanup_stdio+0x10>
 80086f4:	f002 fb04 	bl	800ad00 <_fflush_r>
 80086f8:	68a1      	ldr	r1, [r4, #8]
 80086fa:	4b09      	ldr	r3, [pc, #36]	; (8008720 <cleanup_stdio+0x38>)
 80086fc:	4299      	cmp	r1, r3
 80086fe:	d002      	beq.n	8008706 <cleanup_stdio+0x1e>
 8008700:	4620      	mov	r0, r4
 8008702:	f002 fafd 	bl	800ad00 <_fflush_r>
 8008706:	68e1      	ldr	r1, [r4, #12]
 8008708:	4b06      	ldr	r3, [pc, #24]	; (8008724 <cleanup_stdio+0x3c>)
 800870a:	4299      	cmp	r1, r3
 800870c:	d004      	beq.n	8008718 <cleanup_stdio+0x30>
 800870e:	4620      	mov	r0, r4
 8008710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008714:	f002 baf4 	b.w	800ad00 <_fflush_r>
 8008718:	bd10      	pop	{r4, pc}
 800871a:	bf00      	nop
 800871c:	20000b7c 	.word	0x20000b7c
 8008720:	20000be4 	.word	0x20000be4
 8008724:	20000c4c 	.word	0x20000c4c

08008728 <global_stdio_init.part.0>:
 8008728:	b510      	push	{r4, lr}
 800872a:	4b0b      	ldr	r3, [pc, #44]	; (8008758 <global_stdio_init.part.0+0x30>)
 800872c:	4c0b      	ldr	r4, [pc, #44]	; (800875c <global_stdio_init.part.0+0x34>)
 800872e:	4a0c      	ldr	r2, [pc, #48]	; (8008760 <global_stdio_init.part.0+0x38>)
 8008730:	4620      	mov	r0, r4
 8008732:	601a      	str	r2, [r3, #0]
 8008734:	2104      	movs	r1, #4
 8008736:	2200      	movs	r2, #0
 8008738:	f7ff ff94 	bl	8008664 <std>
 800873c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008740:	2201      	movs	r2, #1
 8008742:	2109      	movs	r1, #9
 8008744:	f7ff ff8e 	bl	8008664 <std>
 8008748:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800874c:	2202      	movs	r2, #2
 800874e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008752:	2112      	movs	r1, #18
 8008754:	f7ff bf86 	b.w	8008664 <std>
 8008758:	20000cb4 	.word	0x20000cb4
 800875c:	20000b7c 	.word	0x20000b7c
 8008760:	080086d1 	.word	0x080086d1

08008764 <__sfp_lock_acquire>:
 8008764:	4801      	ldr	r0, [pc, #4]	; (800876c <__sfp_lock_acquire+0x8>)
 8008766:	f000 b94a 	b.w	80089fe <__retarget_lock_acquire_recursive>
 800876a:	bf00      	nop
 800876c:	20000cbd 	.word	0x20000cbd

08008770 <__sfp_lock_release>:
 8008770:	4801      	ldr	r0, [pc, #4]	; (8008778 <__sfp_lock_release+0x8>)
 8008772:	f000 b945 	b.w	8008a00 <__retarget_lock_release_recursive>
 8008776:	bf00      	nop
 8008778:	20000cbd 	.word	0x20000cbd

0800877c <__sinit>:
 800877c:	b510      	push	{r4, lr}
 800877e:	4604      	mov	r4, r0
 8008780:	f7ff fff0 	bl	8008764 <__sfp_lock_acquire>
 8008784:	6a23      	ldr	r3, [r4, #32]
 8008786:	b11b      	cbz	r3, 8008790 <__sinit+0x14>
 8008788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800878c:	f7ff bff0 	b.w	8008770 <__sfp_lock_release>
 8008790:	4b04      	ldr	r3, [pc, #16]	; (80087a4 <__sinit+0x28>)
 8008792:	6223      	str	r3, [r4, #32]
 8008794:	4b04      	ldr	r3, [pc, #16]	; (80087a8 <__sinit+0x2c>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1f5      	bne.n	8008788 <__sinit+0xc>
 800879c:	f7ff ffc4 	bl	8008728 <global_stdio_init.part.0>
 80087a0:	e7f2      	b.n	8008788 <__sinit+0xc>
 80087a2:	bf00      	nop
 80087a4:	080086e9 	.word	0x080086e9
 80087a8:	20000cb4 	.word	0x20000cb4

080087ac <_fwalk_sglue>:
 80087ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087b0:	4607      	mov	r7, r0
 80087b2:	4688      	mov	r8, r1
 80087b4:	4614      	mov	r4, r2
 80087b6:	2600      	movs	r6, #0
 80087b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80087bc:	f1b9 0901 	subs.w	r9, r9, #1
 80087c0:	d505      	bpl.n	80087ce <_fwalk_sglue+0x22>
 80087c2:	6824      	ldr	r4, [r4, #0]
 80087c4:	2c00      	cmp	r4, #0
 80087c6:	d1f7      	bne.n	80087b8 <_fwalk_sglue+0xc>
 80087c8:	4630      	mov	r0, r6
 80087ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ce:	89ab      	ldrh	r3, [r5, #12]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d907      	bls.n	80087e4 <_fwalk_sglue+0x38>
 80087d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80087d8:	3301      	adds	r3, #1
 80087da:	d003      	beq.n	80087e4 <_fwalk_sglue+0x38>
 80087dc:	4629      	mov	r1, r5
 80087de:	4638      	mov	r0, r7
 80087e0:	47c0      	blx	r8
 80087e2:	4306      	orrs	r6, r0
 80087e4:	3568      	adds	r5, #104	; 0x68
 80087e6:	e7e9      	b.n	80087bc <_fwalk_sglue+0x10>

080087e8 <siprintf>:
 80087e8:	b40e      	push	{r1, r2, r3}
 80087ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80087ee:	b500      	push	{lr}
 80087f0:	b09c      	sub	sp, #112	; 0x70
 80087f2:	ab1d      	add	r3, sp, #116	; 0x74
 80087f4:	9002      	str	r0, [sp, #8]
 80087f6:	9006      	str	r0, [sp, #24]
 80087f8:	9107      	str	r1, [sp, #28]
 80087fa:	9104      	str	r1, [sp, #16]
 80087fc:	4808      	ldr	r0, [pc, #32]	; (8008820 <siprintf+0x38>)
 80087fe:	4909      	ldr	r1, [pc, #36]	; (8008824 <siprintf+0x3c>)
 8008800:	f853 2b04 	ldr.w	r2, [r3], #4
 8008804:	9105      	str	r1, [sp, #20]
 8008806:	6800      	ldr	r0, [r0, #0]
 8008808:	a902      	add	r1, sp, #8
 800880a:	9301      	str	r3, [sp, #4]
 800880c:	f002 f8f8 	bl	800aa00 <_svfiprintf_r>
 8008810:	2200      	movs	r2, #0
 8008812:	9b02      	ldr	r3, [sp, #8]
 8008814:	701a      	strb	r2, [r3, #0]
 8008816:	b01c      	add	sp, #112	; 0x70
 8008818:	f85d eb04 	ldr.w	lr, [sp], #4
 800881c:	b003      	add	sp, #12
 800881e:	4770      	bx	lr
 8008820:	200001dc 	.word	0x200001dc
 8008824:	ffff0208 	.word	0xffff0208

08008828 <__sread>:
 8008828:	b510      	push	{r4, lr}
 800882a:	460c      	mov	r4, r1
 800882c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008830:	f000 f896 	bl	8008960 <_read_r>
 8008834:	2800      	cmp	r0, #0
 8008836:	bfab      	itete	ge
 8008838:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800883a:	89a3      	ldrhlt	r3, [r4, #12]
 800883c:	181b      	addge	r3, r3, r0
 800883e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008842:	bfac      	ite	ge
 8008844:	6563      	strge	r3, [r4, #84]	; 0x54
 8008846:	81a3      	strhlt	r3, [r4, #12]
 8008848:	bd10      	pop	{r4, pc}

0800884a <__swrite>:
 800884a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800884e:	461f      	mov	r7, r3
 8008850:	898b      	ldrh	r3, [r1, #12]
 8008852:	4605      	mov	r5, r0
 8008854:	05db      	lsls	r3, r3, #23
 8008856:	460c      	mov	r4, r1
 8008858:	4616      	mov	r6, r2
 800885a:	d505      	bpl.n	8008868 <__swrite+0x1e>
 800885c:	2302      	movs	r3, #2
 800885e:	2200      	movs	r2, #0
 8008860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008864:	f000 f86a 	bl	800893c <_lseek_r>
 8008868:	89a3      	ldrh	r3, [r4, #12]
 800886a:	4632      	mov	r2, r6
 800886c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008870:	81a3      	strh	r3, [r4, #12]
 8008872:	4628      	mov	r0, r5
 8008874:	463b      	mov	r3, r7
 8008876:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800887a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800887e:	f000 b881 	b.w	8008984 <_write_r>

08008882 <__sseek>:
 8008882:	b510      	push	{r4, lr}
 8008884:	460c      	mov	r4, r1
 8008886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800888a:	f000 f857 	bl	800893c <_lseek_r>
 800888e:	1c43      	adds	r3, r0, #1
 8008890:	89a3      	ldrh	r3, [r4, #12]
 8008892:	bf15      	itete	ne
 8008894:	6560      	strne	r0, [r4, #84]	; 0x54
 8008896:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800889a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800889e:	81a3      	strheq	r3, [r4, #12]
 80088a0:	bf18      	it	ne
 80088a2:	81a3      	strhne	r3, [r4, #12]
 80088a4:	bd10      	pop	{r4, pc}

080088a6 <__sclose>:
 80088a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088aa:	f000 b837 	b.w	800891c <_close_r>

080088ae <memset>:
 80088ae:	4603      	mov	r3, r0
 80088b0:	4402      	add	r2, r0
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d100      	bne.n	80088b8 <memset+0xa>
 80088b6:	4770      	bx	lr
 80088b8:	f803 1b01 	strb.w	r1, [r3], #1
 80088bc:	e7f9      	b.n	80088b2 <memset+0x4>

080088be <strncmp>:
 80088be:	b510      	push	{r4, lr}
 80088c0:	b16a      	cbz	r2, 80088de <strncmp+0x20>
 80088c2:	3901      	subs	r1, #1
 80088c4:	1884      	adds	r4, r0, r2
 80088c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088ca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d103      	bne.n	80088da <strncmp+0x1c>
 80088d2:	42a0      	cmp	r0, r4
 80088d4:	d001      	beq.n	80088da <strncmp+0x1c>
 80088d6:	2a00      	cmp	r2, #0
 80088d8:	d1f5      	bne.n	80088c6 <strncmp+0x8>
 80088da:	1ad0      	subs	r0, r2, r3
 80088dc:	bd10      	pop	{r4, pc}
 80088de:	4610      	mov	r0, r2
 80088e0:	e7fc      	b.n	80088dc <strncmp+0x1e>

080088e2 <strpbrk>:
 80088e2:	b570      	push	{r4, r5, r6, lr}
 80088e4:	4603      	mov	r3, r0
 80088e6:	7800      	ldrb	r0, [r0, #0]
 80088e8:	b190      	cbz	r0, 8008910 <strpbrk+0x2e>
 80088ea:	460c      	mov	r4, r1
 80088ec:	4618      	mov	r0, r3
 80088ee:	f813 5b01 	ldrb.w	r5, [r3], #1
 80088f2:	b14d      	cbz	r5, 8008908 <strpbrk+0x26>
 80088f4:	460a      	mov	r2, r1
 80088f6:	e001      	b.n	80088fc <strpbrk+0x1a>
 80088f8:	42ae      	cmp	r6, r5
 80088fa:	d009      	beq.n	8008910 <strpbrk+0x2e>
 80088fc:	4614      	mov	r4, r2
 80088fe:	f812 6b01 	ldrb.w	r6, [r2], #1
 8008902:	2e00      	cmp	r6, #0
 8008904:	d1f8      	bne.n	80088f8 <strpbrk+0x16>
 8008906:	e7f1      	b.n	80088ec <strpbrk+0xa>
 8008908:	7823      	ldrb	r3, [r4, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	bf08      	it	eq
 800890e:	2000      	moveq	r0, #0
 8008910:	bd70      	pop	{r4, r5, r6, pc}
	...

08008914 <_localeconv_r>:
 8008914:	4800      	ldr	r0, [pc, #0]	; (8008918 <_localeconv_r+0x4>)
 8008916:	4770      	bx	lr
 8008918:	20000114 	.word	0x20000114

0800891c <_close_r>:
 800891c:	b538      	push	{r3, r4, r5, lr}
 800891e:	2300      	movs	r3, #0
 8008920:	4d05      	ldr	r5, [pc, #20]	; (8008938 <_close_r+0x1c>)
 8008922:	4604      	mov	r4, r0
 8008924:	4608      	mov	r0, r1
 8008926:	602b      	str	r3, [r5, #0]
 8008928:	f7fa fe4c 	bl	80035c4 <_close>
 800892c:	1c43      	adds	r3, r0, #1
 800892e:	d102      	bne.n	8008936 <_close_r+0x1a>
 8008930:	682b      	ldr	r3, [r5, #0]
 8008932:	b103      	cbz	r3, 8008936 <_close_r+0x1a>
 8008934:	6023      	str	r3, [r4, #0]
 8008936:	bd38      	pop	{r3, r4, r5, pc}
 8008938:	20000cb8 	.word	0x20000cb8

0800893c <_lseek_r>:
 800893c:	b538      	push	{r3, r4, r5, lr}
 800893e:	4604      	mov	r4, r0
 8008940:	4608      	mov	r0, r1
 8008942:	4611      	mov	r1, r2
 8008944:	2200      	movs	r2, #0
 8008946:	4d05      	ldr	r5, [pc, #20]	; (800895c <_lseek_r+0x20>)
 8008948:	602a      	str	r2, [r5, #0]
 800894a:	461a      	mov	r2, r3
 800894c:	f7fa fe5e 	bl	800360c <_lseek>
 8008950:	1c43      	adds	r3, r0, #1
 8008952:	d102      	bne.n	800895a <_lseek_r+0x1e>
 8008954:	682b      	ldr	r3, [r5, #0]
 8008956:	b103      	cbz	r3, 800895a <_lseek_r+0x1e>
 8008958:	6023      	str	r3, [r4, #0]
 800895a:	bd38      	pop	{r3, r4, r5, pc}
 800895c:	20000cb8 	.word	0x20000cb8

08008960 <_read_r>:
 8008960:	b538      	push	{r3, r4, r5, lr}
 8008962:	4604      	mov	r4, r0
 8008964:	4608      	mov	r0, r1
 8008966:	4611      	mov	r1, r2
 8008968:	2200      	movs	r2, #0
 800896a:	4d05      	ldr	r5, [pc, #20]	; (8008980 <_read_r+0x20>)
 800896c:	602a      	str	r2, [r5, #0]
 800896e:	461a      	mov	r2, r3
 8008970:	f7fa fdef 	bl	8003552 <_read>
 8008974:	1c43      	adds	r3, r0, #1
 8008976:	d102      	bne.n	800897e <_read_r+0x1e>
 8008978:	682b      	ldr	r3, [r5, #0]
 800897a:	b103      	cbz	r3, 800897e <_read_r+0x1e>
 800897c:	6023      	str	r3, [r4, #0]
 800897e:	bd38      	pop	{r3, r4, r5, pc}
 8008980:	20000cb8 	.word	0x20000cb8

08008984 <_write_r>:
 8008984:	b538      	push	{r3, r4, r5, lr}
 8008986:	4604      	mov	r4, r0
 8008988:	4608      	mov	r0, r1
 800898a:	4611      	mov	r1, r2
 800898c:	2200      	movs	r2, #0
 800898e:	4d05      	ldr	r5, [pc, #20]	; (80089a4 <_write_r+0x20>)
 8008990:	602a      	str	r2, [r5, #0]
 8008992:	461a      	mov	r2, r3
 8008994:	f7fa fdfa 	bl	800358c <_write>
 8008998:	1c43      	adds	r3, r0, #1
 800899a:	d102      	bne.n	80089a2 <_write_r+0x1e>
 800899c:	682b      	ldr	r3, [r5, #0]
 800899e:	b103      	cbz	r3, 80089a2 <_write_r+0x1e>
 80089a0:	6023      	str	r3, [r4, #0]
 80089a2:	bd38      	pop	{r3, r4, r5, pc}
 80089a4:	20000cb8 	.word	0x20000cb8

080089a8 <__errno>:
 80089a8:	4b01      	ldr	r3, [pc, #4]	; (80089b0 <__errno+0x8>)
 80089aa:	6818      	ldr	r0, [r3, #0]
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop
 80089b0:	200001dc 	.word	0x200001dc

080089b4 <__libc_init_array>:
 80089b4:	b570      	push	{r4, r5, r6, lr}
 80089b6:	2600      	movs	r6, #0
 80089b8:	4d0c      	ldr	r5, [pc, #48]	; (80089ec <__libc_init_array+0x38>)
 80089ba:	4c0d      	ldr	r4, [pc, #52]	; (80089f0 <__libc_init_array+0x3c>)
 80089bc:	1b64      	subs	r4, r4, r5
 80089be:	10a4      	asrs	r4, r4, #2
 80089c0:	42a6      	cmp	r6, r4
 80089c2:	d109      	bne.n	80089d8 <__libc_init_array+0x24>
 80089c4:	f004 f8a4 	bl	800cb10 <_init>
 80089c8:	2600      	movs	r6, #0
 80089ca:	4d0a      	ldr	r5, [pc, #40]	; (80089f4 <__libc_init_array+0x40>)
 80089cc:	4c0a      	ldr	r4, [pc, #40]	; (80089f8 <__libc_init_array+0x44>)
 80089ce:	1b64      	subs	r4, r4, r5
 80089d0:	10a4      	asrs	r4, r4, #2
 80089d2:	42a6      	cmp	r6, r4
 80089d4:	d105      	bne.n	80089e2 <__libc_init_array+0x2e>
 80089d6:	bd70      	pop	{r4, r5, r6, pc}
 80089d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80089dc:	4798      	blx	r3
 80089de:	3601      	adds	r6, #1
 80089e0:	e7ee      	b.n	80089c0 <__libc_init_array+0xc>
 80089e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80089e6:	4798      	blx	r3
 80089e8:	3601      	adds	r6, #1
 80089ea:	e7f2      	b.n	80089d2 <__libc_init_array+0x1e>
 80089ec:	0800d9c8 	.word	0x0800d9c8
 80089f0:	0800d9c8 	.word	0x0800d9c8
 80089f4:	0800d9c8 	.word	0x0800d9c8
 80089f8:	0800d9cc 	.word	0x0800d9cc

080089fc <__retarget_lock_init_recursive>:
 80089fc:	4770      	bx	lr

080089fe <__retarget_lock_acquire_recursive>:
 80089fe:	4770      	bx	lr

08008a00 <__retarget_lock_release_recursive>:
 8008a00:	4770      	bx	lr

08008a02 <memchr>:
 8008a02:	4603      	mov	r3, r0
 8008a04:	b510      	push	{r4, lr}
 8008a06:	b2c9      	uxtb	r1, r1
 8008a08:	4402      	add	r2, r0
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	d101      	bne.n	8008a14 <memchr+0x12>
 8008a10:	2000      	movs	r0, #0
 8008a12:	e003      	b.n	8008a1c <memchr+0x1a>
 8008a14:	7804      	ldrb	r4, [r0, #0]
 8008a16:	3301      	adds	r3, #1
 8008a18:	428c      	cmp	r4, r1
 8008a1a:	d1f6      	bne.n	8008a0a <memchr+0x8>
 8008a1c:	bd10      	pop	{r4, pc}

08008a1e <memcpy>:
 8008a1e:	440a      	add	r2, r1
 8008a20:	4291      	cmp	r1, r2
 8008a22:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a26:	d100      	bne.n	8008a2a <memcpy+0xc>
 8008a28:	4770      	bx	lr
 8008a2a:	b510      	push	{r4, lr}
 8008a2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a30:	4291      	cmp	r1, r2
 8008a32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a36:	d1f9      	bne.n	8008a2c <memcpy+0xe>
 8008a38:	bd10      	pop	{r4, pc}
	...

08008a3c <nan>:
 8008a3c:	2000      	movs	r0, #0
 8008a3e:	4901      	ldr	r1, [pc, #4]	; (8008a44 <nan+0x8>)
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	7ff80000 	.word	0x7ff80000

08008a48 <quorem>:
 8008a48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a4c:	6903      	ldr	r3, [r0, #16]
 8008a4e:	690c      	ldr	r4, [r1, #16]
 8008a50:	4607      	mov	r7, r0
 8008a52:	42a3      	cmp	r3, r4
 8008a54:	db7f      	blt.n	8008b56 <quorem+0x10e>
 8008a56:	3c01      	subs	r4, #1
 8008a58:	f100 0514 	add.w	r5, r0, #20
 8008a5c:	f101 0814 	add.w	r8, r1, #20
 8008a60:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a64:	9301      	str	r3, [sp, #4]
 8008a66:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	429a      	cmp	r2, r3
 8008a72:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a76:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a7a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a7e:	d331      	bcc.n	8008ae4 <quorem+0x9c>
 8008a80:	f04f 0e00 	mov.w	lr, #0
 8008a84:	4640      	mov	r0, r8
 8008a86:	46ac      	mov	ip, r5
 8008a88:	46f2      	mov	sl, lr
 8008a8a:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a8e:	b293      	uxth	r3, r2
 8008a90:	fb06 e303 	mla	r3, r6, r3, lr
 8008a94:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a98:	0c1a      	lsrs	r2, r3, #16
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	fb06 220e 	mla	r2, r6, lr, r2
 8008aa0:	ebaa 0303 	sub.w	r3, sl, r3
 8008aa4:	f8dc a000 	ldr.w	sl, [ip]
 8008aa8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008aac:	fa1f fa8a 	uxth.w	sl, sl
 8008ab0:	4453      	add	r3, sl
 8008ab2:	f8dc a000 	ldr.w	sl, [ip]
 8008ab6:	b292      	uxth	r2, r2
 8008ab8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008abc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ac6:	4581      	cmp	r9, r0
 8008ac8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008acc:	f84c 3b04 	str.w	r3, [ip], #4
 8008ad0:	d2db      	bcs.n	8008a8a <quorem+0x42>
 8008ad2:	f855 300b 	ldr.w	r3, [r5, fp]
 8008ad6:	b92b      	cbnz	r3, 8008ae4 <quorem+0x9c>
 8008ad8:	9b01      	ldr	r3, [sp, #4]
 8008ada:	3b04      	subs	r3, #4
 8008adc:	429d      	cmp	r5, r3
 8008ade:	461a      	mov	r2, r3
 8008ae0:	d32d      	bcc.n	8008b3e <quorem+0xf6>
 8008ae2:	613c      	str	r4, [r7, #16]
 8008ae4:	4638      	mov	r0, r7
 8008ae6:	f001 fd4b 	bl	800a580 <__mcmp>
 8008aea:	2800      	cmp	r0, #0
 8008aec:	db23      	blt.n	8008b36 <quorem+0xee>
 8008aee:	4629      	mov	r1, r5
 8008af0:	2000      	movs	r0, #0
 8008af2:	3601      	adds	r6, #1
 8008af4:	f858 2b04 	ldr.w	r2, [r8], #4
 8008af8:	f8d1 c000 	ldr.w	ip, [r1]
 8008afc:	b293      	uxth	r3, r2
 8008afe:	1ac3      	subs	r3, r0, r3
 8008b00:	0c12      	lsrs	r2, r2, #16
 8008b02:	fa1f f08c 	uxth.w	r0, ip
 8008b06:	4403      	add	r3, r0
 8008b08:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008b0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b16:	45c1      	cmp	r9, r8
 8008b18:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008b1c:	f841 3b04 	str.w	r3, [r1], #4
 8008b20:	d2e8      	bcs.n	8008af4 <quorem+0xac>
 8008b22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b2a:	b922      	cbnz	r2, 8008b36 <quorem+0xee>
 8008b2c:	3b04      	subs	r3, #4
 8008b2e:	429d      	cmp	r5, r3
 8008b30:	461a      	mov	r2, r3
 8008b32:	d30a      	bcc.n	8008b4a <quorem+0x102>
 8008b34:	613c      	str	r4, [r7, #16]
 8008b36:	4630      	mov	r0, r6
 8008b38:	b003      	add	sp, #12
 8008b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b3e:	6812      	ldr	r2, [r2, #0]
 8008b40:	3b04      	subs	r3, #4
 8008b42:	2a00      	cmp	r2, #0
 8008b44:	d1cd      	bne.n	8008ae2 <quorem+0x9a>
 8008b46:	3c01      	subs	r4, #1
 8008b48:	e7c8      	b.n	8008adc <quorem+0x94>
 8008b4a:	6812      	ldr	r2, [r2, #0]
 8008b4c:	3b04      	subs	r3, #4
 8008b4e:	2a00      	cmp	r2, #0
 8008b50:	d1f0      	bne.n	8008b34 <quorem+0xec>
 8008b52:	3c01      	subs	r4, #1
 8008b54:	e7eb      	b.n	8008b2e <quorem+0xe6>
 8008b56:	2000      	movs	r0, #0
 8008b58:	e7ee      	b.n	8008b38 <quorem+0xf0>
 8008b5a:	0000      	movs	r0, r0
 8008b5c:	0000      	movs	r0, r0
	...

08008b60 <_dtoa_r>:
 8008b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b64:	4616      	mov	r6, r2
 8008b66:	461f      	mov	r7, r3
 8008b68:	69c4      	ldr	r4, [r0, #28]
 8008b6a:	b099      	sub	sp, #100	; 0x64
 8008b6c:	4605      	mov	r5, r0
 8008b6e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008b72:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008b76:	b974      	cbnz	r4, 8008b96 <_dtoa_r+0x36>
 8008b78:	2010      	movs	r0, #16
 8008b7a:	f001 f977 	bl	8009e6c <malloc>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	61e8      	str	r0, [r5, #28]
 8008b82:	b920      	cbnz	r0, 8008b8e <_dtoa_r+0x2e>
 8008b84:	21ef      	movs	r1, #239	; 0xef
 8008b86:	4bac      	ldr	r3, [pc, #688]	; (8008e38 <_dtoa_r+0x2d8>)
 8008b88:	48ac      	ldr	r0, [pc, #688]	; (8008e3c <_dtoa_r+0x2dc>)
 8008b8a:	f002 f90b 	bl	800ada4 <__assert_func>
 8008b8e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b92:	6004      	str	r4, [r0, #0]
 8008b94:	60c4      	str	r4, [r0, #12]
 8008b96:	69eb      	ldr	r3, [r5, #28]
 8008b98:	6819      	ldr	r1, [r3, #0]
 8008b9a:	b151      	cbz	r1, 8008bb2 <_dtoa_r+0x52>
 8008b9c:	685a      	ldr	r2, [r3, #4]
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	4093      	lsls	r3, r2
 8008ba2:	604a      	str	r2, [r1, #4]
 8008ba4:	608b      	str	r3, [r1, #8]
 8008ba6:	4628      	mov	r0, r5
 8008ba8:	f001 fa66 	bl	800a078 <_Bfree>
 8008bac:	2200      	movs	r2, #0
 8008bae:	69eb      	ldr	r3, [r5, #28]
 8008bb0:	601a      	str	r2, [r3, #0]
 8008bb2:	1e3b      	subs	r3, r7, #0
 8008bb4:	bfaf      	iteee	ge
 8008bb6:	2300      	movge	r3, #0
 8008bb8:	2201      	movlt	r2, #1
 8008bba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008bbe:	9305      	strlt	r3, [sp, #20]
 8008bc0:	bfa8      	it	ge
 8008bc2:	f8c8 3000 	strge.w	r3, [r8]
 8008bc6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008bca:	4b9d      	ldr	r3, [pc, #628]	; (8008e40 <_dtoa_r+0x2e0>)
 8008bcc:	bfb8      	it	lt
 8008bce:	f8c8 2000 	strlt.w	r2, [r8]
 8008bd2:	ea33 0309 	bics.w	r3, r3, r9
 8008bd6:	d119      	bne.n	8008c0c <_dtoa_r+0xac>
 8008bd8:	f242 730f 	movw	r3, #9999	; 0x270f
 8008bdc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008bde:	6013      	str	r3, [r2, #0]
 8008be0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008be4:	4333      	orrs	r3, r6
 8008be6:	f000 8589 	beq.w	80096fc <_dtoa_r+0xb9c>
 8008bea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008bec:	b953      	cbnz	r3, 8008c04 <_dtoa_r+0xa4>
 8008bee:	4b95      	ldr	r3, [pc, #596]	; (8008e44 <_dtoa_r+0x2e4>)
 8008bf0:	e023      	b.n	8008c3a <_dtoa_r+0xda>
 8008bf2:	4b95      	ldr	r3, [pc, #596]	; (8008e48 <_dtoa_r+0x2e8>)
 8008bf4:	9303      	str	r3, [sp, #12]
 8008bf6:	3308      	adds	r3, #8
 8008bf8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008bfa:	6013      	str	r3, [r2, #0]
 8008bfc:	9803      	ldr	r0, [sp, #12]
 8008bfe:	b019      	add	sp, #100	; 0x64
 8008c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c04:	4b8f      	ldr	r3, [pc, #572]	; (8008e44 <_dtoa_r+0x2e4>)
 8008c06:	9303      	str	r3, [sp, #12]
 8008c08:	3303      	adds	r3, #3
 8008c0a:	e7f5      	b.n	8008bf8 <_dtoa_r+0x98>
 8008c0c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008c10:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008c14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c18:	2200      	movs	r2, #0
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	f7f7 fece 	bl	80009bc <__aeabi_dcmpeq>
 8008c20:	4680      	mov	r8, r0
 8008c22:	b160      	cbz	r0, 8008c3e <_dtoa_r+0xde>
 8008c24:	2301      	movs	r3, #1
 8008c26:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008c28:	6013      	str	r3, [r2, #0]
 8008c2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f000 8562 	beq.w	80096f6 <_dtoa_r+0xb96>
 8008c32:	4b86      	ldr	r3, [pc, #536]	; (8008e4c <_dtoa_r+0x2ec>)
 8008c34:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008c36:	6013      	str	r3, [r2, #0]
 8008c38:	3b01      	subs	r3, #1
 8008c3a:	9303      	str	r3, [sp, #12]
 8008c3c:	e7de      	b.n	8008bfc <_dtoa_r+0x9c>
 8008c3e:	ab16      	add	r3, sp, #88	; 0x58
 8008c40:	9301      	str	r3, [sp, #4]
 8008c42:	ab17      	add	r3, sp, #92	; 0x5c
 8008c44:	9300      	str	r3, [sp, #0]
 8008c46:	4628      	mov	r0, r5
 8008c48:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008c4c:	f001 fda8 	bl	800a7a0 <__d2b>
 8008c50:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008c54:	4682      	mov	sl, r0
 8008c56:	2c00      	cmp	r4, #0
 8008c58:	d07e      	beq.n	8008d58 <_dtoa_r+0x1f8>
 8008c5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c60:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008c64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c68:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008c6c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008c70:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008c74:	4619      	mov	r1, r3
 8008c76:	2200      	movs	r2, #0
 8008c78:	4b75      	ldr	r3, [pc, #468]	; (8008e50 <_dtoa_r+0x2f0>)
 8008c7a:	f7f7 fa7f 	bl	800017c <__aeabi_dsub>
 8008c7e:	a368      	add	r3, pc, #416	; (adr r3, 8008e20 <_dtoa_r+0x2c0>)
 8008c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c84:	f7f7 fc32 	bl	80004ec <__aeabi_dmul>
 8008c88:	a367      	add	r3, pc, #412	; (adr r3, 8008e28 <_dtoa_r+0x2c8>)
 8008c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8e:	f7f7 fa77 	bl	8000180 <__adddf3>
 8008c92:	4606      	mov	r6, r0
 8008c94:	4620      	mov	r0, r4
 8008c96:	460f      	mov	r7, r1
 8008c98:	f7f7 fbbe 	bl	8000418 <__aeabi_i2d>
 8008c9c:	a364      	add	r3, pc, #400	; (adr r3, 8008e30 <_dtoa_r+0x2d0>)
 8008c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca2:	f7f7 fc23 	bl	80004ec <__aeabi_dmul>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	460b      	mov	r3, r1
 8008caa:	4630      	mov	r0, r6
 8008cac:	4639      	mov	r1, r7
 8008cae:	f7f7 fa67 	bl	8000180 <__adddf3>
 8008cb2:	4606      	mov	r6, r0
 8008cb4:	460f      	mov	r7, r1
 8008cb6:	f7f7 fec9 	bl	8000a4c <__aeabi_d2iz>
 8008cba:	2200      	movs	r2, #0
 8008cbc:	4683      	mov	fp, r0
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	4639      	mov	r1, r7
 8008cc4:	f7f7 fe84 	bl	80009d0 <__aeabi_dcmplt>
 8008cc8:	b148      	cbz	r0, 8008cde <_dtoa_r+0x17e>
 8008cca:	4658      	mov	r0, fp
 8008ccc:	f7f7 fba4 	bl	8000418 <__aeabi_i2d>
 8008cd0:	4632      	mov	r2, r6
 8008cd2:	463b      	mov	r3, r7
 8008cd4:	f7f7 fe72 	bl	80009bc <__aeabi_dcmpeq>
 8008cd8:	b908      	cbnz	r0, 8008cde <_dtoa_r+0x17e>
 8008cda:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008cde:	f1bb 0f16 	cmp.w	fp, #22
 8008ce2:	d857      	bhi.n	8008d94 <_dtoa_r+0x234>
 8008ce4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008ce8:	4b5a      	ldr	r3, [pc, #360]	; (8008e54 <_dtoa_r+0x2f4>)
 8008cea:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf2:	f7f7 fe6d 	bl	80009d0 <__aeabi_dcmplt>
 8008cf6:	2800      	cmp	r0, #0
 8008cf8:	d04e      	beq.n	8008d98 <_dtoa_r+0x238>
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008d00:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d02:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008d04:	1b1b      	subs	r3, r3, r4
 8008d06:	1e5a      	subs	r2, r3, #1
 8008d08:	bf46      	itte	mi
 8008d0a:	f1c3 0901 	rsbmi	r9, r3, #1
 8008d0e:	2300      	movmi	r3, #0
 8008d10:	f04f 0900 	movpl.w	r9, #0
 8008d14:	9209      	str	r2, [sp, #36]	; 0x24
 8008d16:	bf48      	it	mi
 8008d18:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008d1a:	f1bb 0f00 	cmp.w	fp, #0
 8008d1e:	db3d      	blt.n	8008d9c <_dtoa_r+0x23c>
 8008d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d22:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8008d26:	445b      	add	r3, fp
 8008d28:	9309      	str	r3, [sp, #36]	; 0x24
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	930a      	str	r3, [sp, #40]	; 0x28
 8008d2e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d30:	2b09      	cmp	r3, #9
 8008d32:	d867      	bhi.n	8008e04 <_dtoa_r+0x2a4>
 8008d34:	2b05      	cmp	r3, #5
 8008d36:	bfc4      	itt	gt
 8008d38:	3b04      	subgt	r3, #4
 8008d3a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008d3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d3e:	bfc8      	it	gt
 8008d40:	2400      	movgt	r4, #0
 8008d42:	f1a3 0302 	sub.w	r3, r3, #2
 8008d46:	bfd8      	it	le
 8008d48:	2401      	movle	r4, #1
 8008d4a:	2b03      	cmp	r3, #3
 8008d4c:	f200 8086 	bhi.w	8008e5c <_dtoa_r+0x2fc>
 8008d50:	e8df f003 	tbb	[pc, r3]
 8008d54:	5637392c 	.word	0x5637392c
 8008d58:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008d5c:	441c      	add	r4, r3
 8008d5e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008d62:	2b20      	cmp	r3, #32
 8008d64:	bfc1      	itttt	gt
 8008d66:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d6a:	fa09 f903 	lslgt.w	r9, r9, r3
 8008d6e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8008d72:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008d76:	bfd6      	itet	le
 8008d78:	f1c3 0320 	rsble	r3, r3, #32
 8008d7c:	ea49 0003 	orrgt.w	r0, r9, r3
 8008d80:	fa06 f003 	lslle.w	r0, r6, r3
 8008d84:	f7f7 fb38 	bl	80003f8 <__aeabi_ui2d>
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008d8e:	3c01      	subs	r4, #1
 8008d90:	9213      	str	r2, [sp, #76]	; 0x4c
 8008d92:	e76f      	b.n	8008c74 <_dtoa_r+0x114>
 8008d94:	2301      	movs	r3, #1
 8008d96:	e7b3      	b.n	8008d00 <_dtoa_r+0x1a0>
 8008d98:	900f      	str	r0, [sp, #60]	; 0x3c
 8008d9a:	e7b2      	b.n	8008d02 <_dtoa_r+0x1a2>
 8008d9c:	f1cb 0300 	rsb	r3, fp, #0
 8008da0:	930a      	str	r3, [sp, #40]	; 0x28
 8008da2:	2300      	movs	r3, #0
 8008da4:	eba9 090b 	sub.w	r9, r9, fp
 8008da8:	930e      	str	r3, [sp, #56]	; 0x38
 8008daa:	e7c0      	b.n	8008d2e <_dtoa_r+0x1ce>
 8008dac:	2300      	movs	r3, #0
 8008dae:	930b      	str	r3, [sp, #44]	; 0x2c
 8008db0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	dc55      	bgt.n	8008e62 <_dtoa_r+0x302>
 8008db6:	2301      	movs	r3, #1
 8008db8:	461a      	mov	r2, r3
 8008dba:	9306      	str	r3, [sp, #24]
 8008dbc:	9308      	str	r3, [sp, #32]
 8008dbe:	9223      	str	r2, [sp, #140]	; 0x8c
 8008dc0:	e00b      	b.n	8008dda <_dtoa_r+0x27a>
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e7f3      	b.n	8008dae <_dtoa_r+0x24e>
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008dcc:	445b      	add	r3, fp
 8008dce:	9306      	str	r3, [sp, #24]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	9308      	str	r3, [sp, #32]
 8008dd6:	bfb8      	it	lt
 8008dd8:	2301      	movlt	r3, #1
 8008dda:	2100      	movs	r1, #0
 8008ddc:	2204      	movs	r2, #4
 8008dde:	69e8      	ldr	r0, [r5, #28]
 8008de0:	f102 0614 	add.w	r6, r2, #20
 8008de4:	429e      	cmp	r6, r3
 8008de6:	d940      	bls.n	8008e6a <_dtoa_r+0x30a>
 8008de8:	6041      	str	r1, [r0, #4]
 8008dea:	4628      	mov	r0, r5
 8008dec:	f001 f904 	bl	8009ff8 <_Balloc>
 8008df0:	9003      	str	r0, [sp, #12]
 8008df2:	2800      	cmp	r0, #0
 8008df4:	d13c      	bne.n	8008e70 <_dtoa_r+0x310>
 8008df6:	4602      	mov	r2, r0
 8008df8:	f240 11af 	movw	r1, #431	; 0x1af
 8008dfc:	4b16      	ldr	r3, [pc, #88]	; (8008e58 <_dtoa_r+0x2f8>)
 8008dfe:	e6c3      	b.n	8008b88 <_dtoa_r+0x28>
 8008e00:	2301      	movs	r3, #1
 8008e02:	e7e1      	b.n	8008dc8 <_dtoa_r+0x268>
 8008e04:	2401      	movs	r4, #1
 8008e06:	2300      	movs	r3, #0
 8008e08:	940b      	str	r4, [sp, #44]	; 0x2c
 8008e0a:	9322      	str	r3, [sp, #136]	; 0x88
 8008e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e10:	2200      	movs	r2, #0
 8008e12:	9306      	str	r3, [sp, #24]
 8008e14:	9308      	str	r3, [sp, #32]
 8008e16:	2312      	movs	r3, #18
 8008e18:	e7d1      	b.n	8008dbe <_dtoa_r+0x25e>
 8008e1a:	bf00      	nop
 8008e1c:	f3af 8000 	nop.w
 8008e20:	636f4361 	.word	0x636f4361
 8008e24:	3fd287a7 	.word	0x3fd287a7
 8008e28:	8b60c8b3 	.word	0x8b60c8b3
 8008e2c:	3fc68a28 	.word	0x3fc68a28
 8008e30:	509f79fb 	.word	0x509f79fb
 8008e34:	3fd34413 	.word	0x3fd34413
 8008e38:	0800d4f2 	.word	0x0800d4f2
 8008e3c:	0800d509 	.word	0x0800d509
 8008e40:	7ff00000 	.word	0x7ff00000
 8008e44:	0800d4ee 	.word	0x0800d4ee
 8008e48:	0800d4e5 	.word	0x0800d4e5
 8008e4c:	0800d4ba 	.word	0x0800d4ba
 8008e50:	3ff80000 	.word	0x3ff80000
 8008e54:	0800d658 	.word	0x0800d658
 8008e58:	0800d561 	.word	0x0800d561
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e60:	e7d4      	b.n	8008e0c <_dtoa_r+0x2ac>
 8008e62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008e64:	9306      	str	r3, [sp, #24]
 8008e66:	9308      	str	r3, [sp, #32]
 8008e68:	e7b7      	b.n	8008dda <_dtoa_r+0x27a>
 8008e6a:	3101      	adds	r1, #1
 8008e6c:	0052      	lsls	r2, r2, #1
 8008e6e:	e7b7      	b.n	8008de0 <_dtoa_r+0x280>
 8008e70:	69eb      	ldr	r3, [r5, #28]
 8008e72:	9a03      	ldr	r2, [sp, #12]
 8008e74:	601a      	str	r2, [r3, #0]
 8008e76:	9b08      	ldr	r3, [sp, #32]
 8008e78:	2b0e      	cmp	r3, #14
 8008e7a:	f200 80a8 	bhi.w	8008fce <_dtoa_r+0x46e>
 8008e7e:	2c00      	cmp	r4, #0
 8008e80:	f000 80a5 	beq.w	8008fce <_dtoa_r+0x46e>
 8008e84:	f1bb 0f00 	cmp.w	fp, #0
 8008e88:	dd34      	ble.n	8008ef4 <_dtoa_r+0x394>
 8008e8a:	4b9a      	ldr	r3, [pc, #616]	; (80090f4 <_dtoa_r+0x594>)
 8008e8c:	f00b 020f 	and.w	r2, fp, #15
 8008e90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e94:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008e98:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e9c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008ea0:	ea4f 142b 	mov.w	r4, fp, asr #4
 8008ea4:	d016      	beq.n	8008ed4 <_dtoa_r+0x374>
 8008ea6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008eaa:	4b93      	ldr	r3, [pc, #588]	; (80090f8 <_dtoa_r+0x598>)
 8008eac:	2703      	movs	r7, #3
 8008eae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008eb2:	f7f7 fc45 	bl	8000740 <__aeabi_ddiv>
 8008eb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008eba:	f004 040f 	and.w	r4, r4, #15
 8008ebe:	4e8e      	ldr	r6, [pc, #568]	; (80090f8 <_dtoa_r+0x598>)
 8008ec0:	b954      	cbnz	r4, 8008ed8 <_dtoa_r+0x378>
 8008ec2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008ec6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008eca:	f7f7 fc39 	bl	8000740 <__aeabi_ddiv>
 8008ece:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ed2:	e029      	b.n	8008f28 <_dtoa_r+0x3c8>
 8008ed4:	2702      	movs	r7, #2
 8008ed6:	e7f2      	b.n	8008ebe <_dtoa_r+0x35e>
 8008ed8:	07e1      	lsls	r1, r4, #31
 8008eda:	d508      	bpl.n	8008eee <_dtoa_r+0x38e>
 8008edc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008ee0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ee4:	f7f7 fb02 	bl	80004ec <__aeabi_dmul>
 8008ee8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008eec:	3701      	adds	r7, #1
 8008eee:	1064      	asrs	r4, r4, #1
 8008ef0:	3608      	adds	r6, #8
 8008ef2:	e7e5      	b.n	8008ec0 <_dtoa_r+0x360>
 8008ef4:	f000 80a5 	beq.w	8009042 <_dtoa_r+0x4e2>
 8008ef8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008efc:	f1cb 0400 	rsb	r4, fp, #0
 8008f00:	4b7c      	ldr	r3, [pc, #496]	; (80090f4 <_dtoa_r+0x594>)
 8008f02:	f004 020f 	and.w	r2, r4, #15
 8008f06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0e:	f7f7 faed 	bl	80004ec <__aeabi_dmul>
 8008f12:	2702      	movs	r7, #2
 8008f14:	2300      	movs	r3, #0
 8008f16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f1a:	4e77      	ldr	r6, [pc, #476]	; (80090f8 <_dtoa_r+0x598>)
 8008f1c:	1124      	asrs	r4, r4, #4
 8008f1e:	2c00      	cmp	r4, #0
 8008f20:	f040 8084 	bne.w	800902c <_dtoa_r+0x4cc>
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d1d2      	bne.n	8008ece <_dtoa_r+0x36e>
 8008f28:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008f2c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008f30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	f000 8087 	beq.w	8009046 <_dtoa_r+0x4e6>
 8008f38:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	4b6f      	ldr	r3, [pc, #444]	; (80090fc <_dtoa_r+0x59c>)
 8008f40:	f7f7 fd46 	bl	80009d0 <__aeabi_dcmplt>
 8008f44:	2800      	cmp	r0, #0
 8008f46:	d07e      	beq.n	8009046 <_dtoa_r+0x4e6>
 8008f48:	9b08      	ldr	r3, [sp, #32]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d07b      	beq.n	8009046 <_dtoa_r+0x4e6>
 8008f4e:	9b06      	ldr	r3, [sp, #24]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	dd38      	ble.n	8008fc6 <_dtoa_r+0x466>
 8008f54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008f58:	2200      	movs	r2, #0
 8008f5a:	4b69      	ldr	r3, [pc, #420]	; (8009100 <_dtoa_r+0x5a0>)
 8008f5c:	f7f7 fac6 	bl	80004ec <__aeabi_dmul>
 8008f60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f64:	9c06      	ldr	r4, [sp, #24]
 8008f66:	f10b 38ff 	add.w	r8, fp, #4294967295
 8008f6a:	3701      	adds	r7, #1
 8008f6c:	4638      	mov	r0, r7
 8008f6e:	f7f7 fa53 	bl	8000418 <__aeabi_i2d>
 8008f72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f76:	f7f7 fab9 	bl	80004ec <__aeabi_dmul>
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	4b61      	ldr	r3, [pc, #388]	; (8009104 <_dtoa_r+0x5a4>)
 8008f7e:	f7f7 f8ff 	bl	8000180 <__adddf3>
 8008f82:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008f86:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008f8a:	9611      	str	r6, [sp, #68]	; 0x44
 8008f8c:	2c00      	cmp	r4, #0
 8008f8e:	d15d      	bne.n	800904c <_dtoa_r+0x4ec>
 8008f90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f94:	2200      	movs	r2, #0
 8008f96:	4b5c      	ldr	r3, [pc, #368]	; (8009108 <_dtoa_r+0x5a8>)
 8008f98:	f7f7 f8f0 	bl	800017c <__aeabi_dsub>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008fa4:	4633      	mov	r3, r6
 8008fa6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008fa8:	f7f7 fd30 	bl	8000a0c <__aeabi_dcmpgt>
 8008fac:	2800      	cmp	r0, #0
 8008fae:	f040 8295 	bne.w	80094dc <_dtoa_r+0x97c>
 8008fb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fb6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008fb8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008fbc:	f7f7 fd08 	bl	80009d0 <__aeabi_dcmplt>
 8008fc0:	2800      	cmp	r0, #0
 8008fc2:	f040 8289 	bne.w	80094d8 <_dtoa_r+0x978>
 8008fc6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008fca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008fce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f2c0 8151 	blt.w	8009278 <_dtoa_r+0x718>
 8008fd6:	f1bb 0f0e 	cmp.w	fp, #14
 8008fda:	f300 814d 	bgt.w	8009278 <_dtoa_r+0x718>
 8008fde:	4b45      	ldr	r3, [pc, #276]	; (80090f4 <_dtoa_r+0x594>)
 8008fe0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008fe4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008fe8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008fec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	f280 80da 	bge.w	80091a8 <_dtoa_r+0x648>
 8008ff4:	9b08      	ldr	r3, [sp, #32]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	f300 80d6 	bgt.w	80091a8 <_dtoa_r+0x648>
 8008ffc:	f040 826b 	bne.w	80094d6 <_dtoa_r+0x976>
 8009000:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009004:	2200      	movs	r2, #0
 8009006:	4b40      	ldr	r3, [pc, #256]	; (8009108 <_dtoa_r+0x5a8>)
 8009008:	f7f7 fa70 	bl	80004ec <__aeabi_dmul>
 800900c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009010:	f7f7 fcf2 	bl	80009f8 <__aeabi_dcmpge>
 8009014:	9c08      	ldr	r4, [sp, #32]
 8009016:	4626      	mov	r6, r4
 8009018:	2800      	cmp	r0, #0
 800901a:	f040 8241 	bne.w	80094a0 <_dtoa_r+0x940>
 800901e:	2331      	movs	r3, #49	; 0x31
 8009020:	9f03      	ldr	r7, [sp, #12]
 8009022:	f10b 0b01 	add.w	fp, fp, #1
 8009026:	f807 3b01 	strb.w	r3, [r7], #1
 800902a:	e23d      	b.n	80094a8 <_dtoa_r+0x948>
 800902c:	07e2      	lsls	r2, r4, #31
 800902e:	d505      	bpl.n	800903c <_dtoa_r+0x4dc>
 8009030:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009034:	f7f7 fa5a 	bl	80004ec <__aeabi_dmul>
 8009038:	2301      	movs	r3, #1
 800903a:	3701      	adds	r7, #1
 800903c:	1064      	asrs	r4, r4, #1
 800903e:	3608      	adds	r6, #8
 8009040:	e76d      	b.n	8008f1e <_dtoa_r+0x3be>
 8009042:	2702      	movs	r7, #2
 8009044:	e770      	b.n	8008f28 <_dtoa_r+0x3c8>
 8009046:	46d8      	mov	r8, fp
 8009048:	9c08      	ldr	r4, [sp, #32]
 800904a:	e78f      	b.n	8008f6c <_dtoa_r+0x40c>
 800904c:	9903      	ldr	r1, [sp, #12]
 800904e:	4b29      	ldr	r3, [pc, #164]	; (80090f4 <_dtoa_r+0x594>)
 8009050:	4421      	add	r1, r4
 8009052:	9112      	str	r1, [sp, #72]	; 0x48
 8009054:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009056:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800905a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800905e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009062:	2900      	cmp	r1, #0
 8009064:	d054      	beq.n	8009110 <_dtoa_r+0x5b0>
 8009066:	2000      	movs	r0, #0
 8009068:	4928      	ldr	r1, [pc, #160]	; (800910c <_dtoa_r+0x5ac>)
 800906a:	f7f7 fb69 	bl	8000740 <__aeabi_ddiv>
 800906e:	463b      	mov	r3, r7
 8009070:	4632      	mov	r2, r6
 8009072:	f7f7 f883 	bl	800017c <__aeabi_dsub>
 8009076:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800907a:	9f03      	ldr	r7, [sp, #12]
 800907c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009080:	f7f7 fce4 	bl	8000a4c <__aeabi_d2iz>
 8009084:	4604      	mov	r4, r0
 8009086:	f7f7 f9c7 	bl	8000418 <__aeabi_i2d>
 800908a:	4602      	mov	r2, r0
 800908c:	460b      	mov	r3, r1
 800908e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009092:	f7f7 f873 	bl	800017c <__aeabi_dsub>
 8009096:	4602      	mov	r2, r0
 8009098:	460b      	mov	r3, r1
 800909a:	3430      	adds	r4, #48	; 0x30
 800909c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80090a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80090a4:	f807 4b01 	strb.w	r4, [r7], #1
 80090a8:	f7f7 fc92 	bl	80009d0 <__aeabi_dcmplt>
 80090ac:	2800      	cmp	r0, #0
 80090ae:	d173      	bne.n	8009198 <_dtoa_r+0x638>
 80090b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090b4:	2000      	movs	r0, #0
 80090b6:	4911      	ldr	r1, [pc, #68]	; (80090fc <_dtoa_r+0x59c>)
 80090b8:	f7f7 f860 	bl	800017c <__aeabi_dsub>
 80090bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80090c0:	f7f7 fc86 	bl	80009d0 <__aeabi_dcmplt>
 80090c4:	2800      	cmp	r0, #0
 80090c6:	f040 80b6 	bne.w	8009236 <_dtoa_r+0x6d6>
 80090ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80090cc:	429f      	cmp	r7, r3
 80090ce:	f43f af7a 	beq.w	8008fc6 <_dtoa_r+0x466>
 80090d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80090d6:	2200      	movs	r2, #0
 80090d8:	4b09      	ldr	r3, [pc, #36]	; (8009100 <_dtoa_r+0x5a0>)
 80090da:	f7f7 fa07 	bl	80004ec <__aeabi_dmul>
 80090de:	2200      	movs	r2, #0
 80090e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80090e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090e8:	4b05      	ldr	r3, [pc, #20]	; (8009100 <_dtoa_r+0x5a0>)
 80090ea:	f7f7 f9ff 	bl	80004ec <__aeabi_dmul>
 80090ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090f2:	e7c3      	b.n	800907c <_dtoa_r+0x51c>
 80090f4:	0800d658 	.word	0x0800d658
 80090f8:	0800d630 	.word	0x0800d630
 80090fc:	3ff00000 	.word	0x3ff00000
 8009100:	40240000 	.word	0x40240000
 8009104:	401c0000 	.word	0x401c0000
 8009108:	40140000 	.word	0x40140000
 800910c:	3fe00000 	.word	0x3fe00000
 8009110:	4630      	mov	r0, r6
 8009112:	4639      	mov	r1, r7
 8009114:	f7f7 f9ea 	bl	80004ec <__aeabi_dmul>
 8009118:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800911a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800911e:	9c03      	ldr	r4, [sp, #12]
 8009120:	9314      	str	r3, [sp, #80]	; 0x50
 8009122:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009126:	f7f7 fc91 	bl	8000a4c <__aeabi_d2iz>
 800912a:	9015      	str	r0, [sp, #84]	; 0x54
 800912c:	f7f7 f974 	bl	8000418 <__aeabi_i2d>
 8009130:	4602      	mov	r2, r0
 8009132:	460b      	mov	r3, r1
 8009134:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009138:	f7f7 f820 	bl	800017c <__aeabi_dsub>
 800913c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800913e:	4606      	mov	r6, r0
 8009140:	3330      	adds	r3, #48	; 0x30
 8009142:	f804 3b01 	strb.w	r3, [r4], #1
 8009146:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009148:	460f      	mov	r7, r1
 800914a:	429c      	cmp	r4, r3
 800914c:	f04f 0200 	mov.w	r2, #0
 8009150:	d124      	bne.n	800919c <_dtoa_r+0x63c>
 8009152:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009156:	4baf      	ldr	r3, [pc, #700]	; (8009414 <_dtoa_r+0x8b4>)
 8009158:	f7f7 f812 	bl	8000180 <__adddf3>
 800915c:	4602      	mov	r2, r0
 800915e:	460b      	mov	r3, r1
 8009160:	4630      	mov	r0, r6
 8009162:	4639      	mov	r1, r7
 8009164:	f7f7 fc52 	bl	8000a0c <__aeabi_dcmpgt>
 8009168:	2800      	cmp	r0, #0
 800916a:	d163      	bne.n	8009234 <_dtoa_r+0x6d4>
 800916c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009170:	2000      	movs	r0, #0
 8009172:	49a8      	ldr	r1, [pc, #672]	; (8009414 <_dtoa_r+0x8b4>)
 8009174:	f7f7 f802 	bl	800017c <__aeabi_dsub>
 8009178:	4602      	mov	r2, r0
 800917a:	460b      	mov	r3, r1
 800917c:	4630      	mov	r0, r6
 800917e:	4639      	mov	r1, r7
 8009180:	f7f7 fc26 	bl	80009d0 <__aeabi_dcmplt>
 8009184:	2800      	cmp	r0, #0
 8009186:	f43f af1e 	beq.w	8008fc6 <_dtoa_r+0x466>
 800918a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800918c:	1e7b      	subs	r3, r7, #1
 800918e:	9314      	str	r3, [sp, #80]	; 0x50
 8009190:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009194:	2b30      	cmp	r3, #48	; 0x30
 8009196:	d0f8      	beq.n	800918a <_dtoa_r+0x62a>
 8009198:	46c3      	mov	fp, r8
 800919a:	e03b      	b.n	8009214 <_dtoa_r+0x6b4>
 800919c:	4b9e      	ldr	r3, [pc, #632]	; (8009418 <_dtoa_r+0x8b8>)
 800919e:	f7f7 f9a5 	bl	80004ec <__aeabi_dmul>
 80091a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80091a6:	e7bc      	b.n	8009122 <_dtoa_r+0x5c2>
 80091a8:	9f03      	ldr	r7, [sp, #12]
 80091aa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80091ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80091b2:	4640      	mov	r0, r8
 80091b4:	4649      	mov	r1, r9
 80091b6:	f7f7 fac3 	bl	8000740 <__aeabi_ddiv>
 80091ba:	f7f7 fc47 	bl	8000a4c <__aeabi_d2iz>
 80091be:	4604      	mov	r4, r0
 80091c0:	f7f7 f92a 	bl	8000418 <__aeabi_i2d>
 80091c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80091c8:	f7f7 f990 	bl	80004ec <__aeabi_dmul>
 80091cc:	4602      	mov	r2, r0
 80091ce:	460b      	mov	r3, r1
 80091d0:	4640      	mov	r0, r8
 80091d2:	4649      	mov	r1, r9
 80091d4:	f7f6 ffd2 	bl	800017c <__aeabi_dsub>
 80091d8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80091dc:	f807 6b01 	strb.w	r6, [r7], #1
 80091e0:	9e03      	ldr	r6, [sp, #12]
 80091e2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80091e6:	1bbe      	subs	r6, r7, r6
 80091e8:	45b4      	cmp	ip, r6
 80091ea:	4602      	mov	r2, r0
 80091ec:	460b      	mov	r3, r1
 80091ee:	d136      	bne.n	800925e <_dtoa_r+0x6fe>
 80091f0:	f7f6 ffc6 	bl	8000180 <__adddf3>
 80091f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80091f8:	4680      	mov	r8, r0
 80091fa:	4689      	mov	r9, r1
 80091fc:	f7f7 fc06 	bl	8000a0c <__aeabi_dcmpgt>
 8009200:	bb58      	cbnz	r0, 800925a <_dtoa_r+0x6fa>
 8009202:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009206:	4640      	mov	r0, r8
 8009208:	4649      	mov	r1, r9
 800920a:	f7f7 fbd7 	bl	80009bc <__aeabi_dcmpeq>
 800920e:	b108      	cbz	r0, 8009214 <_dtoa_r+0x6b4>
 8009210:	07e3      	lsls	r3, r4, #31
 8009212:	d422      	bmi.n	800925a <_dtoa_r+0x6fa>
 8009214:	4651      	mov	r1, sl
 8009216:	4628      	mov	r0, r5
 8009218:	f000 ff2e 	bl	800a078 <_Bfree>
 800921c:	2300      	movs	r3, #0
 800921e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009220:	703b      	strb	r3, [r7, #0]
 8009222:	f10b 0301 	add.w	r3, fp, #1
 8009226:	6013      	str	r3, [r2, #0]
 8009228:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800922a:	2b00      	cmp	r3, #0
 800922c:	f43f ace6 	beq.w	8008bfc <_dtoa_r+0x9c>
 8009230:	601f      	str	r7, [r3, #0]
 8009232:	e4e3      	b.n	8008bfc <_dtoa_r+0x9c>
 8009234:	4627      	mov	r7, r4
 8009236:	463b      	mov	r3, r7
 8009238:	461f      	mov	r7, r3
 800923a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800923e:	2a39      	cmp	r2, #57	; 0x39
 8009240:	d107      	bne.n	8009252 <_dtoa_r+0x6f2>
 8009242:	9a03      	ldr	r2, [sp, #12]
 8009244:	429a      	cmp	r2, r3
 8009246:	d1f7      	bne.n	8009238 <_dtoa_r+0x6d8>
 8009248:	2230      	movs	r2, #48	; 0x30
 800924a:	9903      	ldr	r1, [sp, #12]
 800924c:	f108 0801 	add.w	r8, r8, #1
 8009250:	700a      	strb	r2, [r1, #0]
 8009252:	781a      	ldrb	r2, [r3, #0]
 8009254:	3201      	adds	r2, #1
 8009256:	701a      	strb	r2, [r3, #0]
 8009258:	e79e      	b.n	8009198 <_dtoa_r+0x638>
 800925a:	46d8      	mov	r8, fp
 800925c:	e7eb      	b.n	8009236 <_dtoa_r+0x6d6>
 800925e:	2200      	movs	r2, #0
 8009260:	4b6d      	ldr	r3, [pc, #436]	; (8009418 <_dtoa_r+0x8b8>)
 8009262:	f7f7 f943 	bl	80004ec <__aeabi_dmul>
 8009266:	2200      	movs	r2, #0
 8009268:	2300      	movs	r3, #0
 800926a:	4680      	mov	r8, r0
 800926c:	4689      	mov	r9, r1
 800926e:	f7f7 fba5 	bl	80009bc <__aeabi_dcmpeq>
 8009272:	2800      	cmp	r0, #0
 8009274:	d09b      	beq.n	80091ae <_dtoa_r+0x64e>
 8009276:	e7cd      	b.n	8009214 <_dtoa_r+0x6b4>
 8009278:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800927a:	2a00      	cmp	r2, #0
 800927c:	f000 80c4 	beq.w	8009408 <_dtoa_r+0x8a8>
 8009280:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009282:	2a01      	cmp	r2, #1
 8009284:	f300 80a8 	bgt.w	80093d8 <_dtoa_r+0x878>
 8009288:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800928a:	2a00      	cmp	r2, #0
 800928c:	f000 80a0 	beq.w	80093d0 <_dtoa_r+0x870>
 8009290:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009294:	464f      	mov	r7, r9
 8009296:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009298:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800929a:	2101      	movs	r1, #1
 800929c:	441a      	add	r2, r3
 800929e:	4628      	mov	r0, r5
 80092a0:	4499      	add	r9, r3
 80092a2:	9209      	str	r2, [sp, #36]	; 0x24
 80092a4:	f000 ffe8 	bl	800a278 <__i2b>
 80092a8:	4606      	mov	r6, r0
 80092aa:	b15f      	cbz	r7, 80092c4 <_dtoa_r+0x764>
 80092ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	dd08      	ble.n	80092c4 <_dtoa_r+0x764>
 80092b2:	42bb      	cmp	r3, r7
 80092b4:	bfa8      	it	ge
 80092b6:	463b      	movge	r3, r7
 80092b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092ba:	eba9 0903 	sub.w	r9, r9, r3
 80092be:	1aff      	subs	r7, r7, r3
 80092c0:	1ad3      	subs	r3, r2, r3
 80092c2:	9309      	str	r3, [sp, #36]	; 0x24
 80092c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092c6:	b1f3      	cbz	r3, 8009306 <_dtoa_r+0x7a6>
 80092c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	f000 80a0 	beq.w	8009410 <_dtoa_r+0x8b0>
 80092d0:	2c00      	cmp	r4, #0
 80092d2:	dd10      	ble.n	80092f6 <_dtoa_r+0x796>
 80092d4:	4631      	mov	r1, r6
 80092d6:	4622      	mov	r2, r4
 80092d8:	4628      	mov	r0, r5
 80092da:	f001 f88b 	bl	800a3f4 <__pow5mult>
 80092de:	4652      	mov	r2, sl
 80092e0:	4601      	mov	r1, r0
 80092e2:	4606      	mov	r6, r0
 80092e4:	4628      	mov	r0, r5
 80092e6:	f000 ffdd 	bl	800a2a4 <__multiply>
 80092ea:	4680      	mov	r8, r0
 80092ec:	4651      	mov	r1, sl
 80092ee:	4628      	mov	r0, r5
 80092f0:	f000 fec2 	bl	800a078 <_Bfree>
 80092f4:	46c2      	mov	sl, r8
 80092f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092f8:	1b1a      	subs	r2, r3, r4
 80092fa:	d004      	beq.n	8009306 <_dtoa_r+0x7a6>
 80092fc:	4651      	mov	r1, sl
 80092fe:	4628      	mov	r0, r5
 8009300:	f001 f878 	bl	800a3f4 <__pow5mult>
 8009304:	4682      	mov	sl, r0
 8009306:	2101      	movs	r1, #1
 8009308:	4628      	mov	r0, r5
 800930a:	f000 ffb5 	bl	800a278 <__i2b>
 800930e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009310:	4604      	mov	r4, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	f340 8082 	ble.w	800941c <_dtoa_r+0x8bc>
 8009318:	461a      	mov	r2, r3
 800931a:	4601      	mov	r1, r0
 800931c:	4628      	mov	r0, r5
 800931e:	f001 f869 	bl	800a3f4 <__pow5mult>
 8009322:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009324:	4604      	mov	r4, r0
 8009326:	2b01      	cmp	r3, #1
 8009328:	dd7b      	ble.n	8009422 <_dtoa_r+0x8c2>
 800932a:	f04f 0800 	mov.w	r8, #0
 800932e:	6923      	ldr	r3, [r4, #16]
 8009330:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009334:	6918      	ldr	r0, [r3, #16]
 8009336:	f000 ff51 	bl	800a1dc <__hi0bits>
 800933a:	f1c0 0020 	rsb	r0, r0, #32
 800933e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009340:	4418      	add	r0, r3
 8009342:	f010 001f 	ands.w	r0, r0, #31
 8009346:	f000 8092 	beq.w	800946e <_dtoa_r+0x90e>
 800934a:	f1c0 0320 	rsb	r3, r0, #32
 800934e:	2b04      	cmp	r3, #4
 8009350:	f340 8085 	ble.w	800945e <_dtoa_r+0x8fe>
 8009354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009356:	f1c0 001c 	rsb	r0, r0, #28
 800935a:	4403      	add	r3, r0
 800935c:	4481      	add	r9, r0
 800935e:	4407      	add	r7, r0
 8009360:	9309      	str	r3, [sp, #36]	; 0x24
 8009362:	f1b9 0f00 	cmp.w	r9, #0
 8009366:	dd05      	ble.n	8009374 <_dtoa_r+0x814>
 8009368:	4651      	mov	r1, sl
 800936a:	464a      	mov	r2, r9
 800936c:	4628      	mov	r0, r5
 800936e:	f001 f89b 	bl	800a4a8 <__lshift>
 8009372:	4682      	mov	sl, r0
 8009374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009376:	2b00      	cmp	r3, #0
 8009378:	dd05      	ble.n	8009386 <_dtoa_r+0x826>
 800937a:	4621      	mov	r1, r4
 800937c:	461a      	mov	r2, r3
 800937e:	4628      	mov	r0, r5
 8009380:	f001 f892 	bl	800a4a8 <__lshift>
 8009384:	4604      	mov	r4, r0
 8009386:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009388:	2b00      	cmp	r3, #0
 800938a:	d072      	beq.n	8009472 <_dtoa_r+0x912>
 800938c:	4621      	mov	r1, r4
 800938e:	4650      	mov	r0, sl
 8009390:	f001 f8f6 	bl	800a580 <__mcmp>
 8009394:	2800      	cmp	r0, #0
 8009396:	da6c      	bge.n	8009472 <_dtoa_r+0x912>
 8009398:	2300      	movs	r3, #0
 800939a:	4651      	mov	r1, sl
 800939c:	220a      	movs	r2, #10
 800939e:	4628      	mov	r0, r5
 80093a0:	f000 fe8c 	bl	800a0bc <__multadd>
 80093a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093a6:	4682      	mov	sl, r0
 80093a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	f000 81ac 	beq.w	800970a <_dtoa_r+0xbaa>
 80093b2:	2300      	movs	r3, #0
 80093b4:	4631      	mov	r1, r6
 80093b6:	220a      	movs	r2, #10
 80093b8:	4628      	mov	r0, r5
 80093ba:	f000 fe7f 	bl	800a0bc <__multadd>
 80093be:	9b06      	ldr	r3, [sp, #24]
 80093c0:	4606      	mov	r6, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	f300 8093 	bgt.w	80094ee <_dtoa_r+0x98e>
 80093c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	dc59      	bgt.n	8009482 <_dtoa_r+0x922>
 80093ce:	e08e      	b.n	80094ee <_dtoa_r+0x98e>
 80093d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80093d2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80093d6:	e75d      	b.n	8009294 <_dtoa_r+0x734>
 80093d8:	9b08      	ldr	r3, [sp, #32]
 80093da:	1e5c      	subs	r4, r3, #1
 80093dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093de:	42a3      	cmp	r3, r4
 80093e0:	bfbf      	itttt	lt
 80093e2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80093e4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80093e6:	1ae3      	sublt	r3, r4, r3
 80093e8:	18d2      	addlt	r2, r2, r3
 80093ea:	bfa8      	it	ge
 80093ec:	1b1c      	subge	r4, r3, r4
 80093ee:	9b08      	ldr	r3, [sp, #32]
 80093f0:	bfbe      	ittt	lt
 80093f2:	940a      	strlt	r4, [sp, #40]	; 0x28
 80093f4:	920e      	strlt	r2, [sp, #56]	; 0x38
 80093f6:	2400      	movlt	r4, #0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	bfb5      	itete	lt
 80093fc:	eba9 0703 	sublt.w	r7, r9, r3
 8009400:	464f      	movge	r7, r9
 8009402:	2300      	movlt	r3, #0
 8009404:	9b08      	ldrge	r3, [sp, #32]
 8009406:	e747      	b.n	8009298 <_dtoa_r+0x738>
 8009408:	464f      	mov	r7, r9
 800940a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800940c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800940e:	e74c      	b.n	80092aa <_dtoa_r+0x74a>
 8009410:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009412:	e773      	b.n	80092fc <_dtoa_r+0x79c>
 8009414:	3fe00000 	.word	0x3fe00000
 8009418:	40240000 	.word	0x40240000
 800941c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800941e:	2b01      	cmp	r3, #1
 8009420:	dc18      	bgt.n	8009454 <_dtoa_r+0x8f4>
 8009422:	9b04      	ldr	r3, [sp, #16]
 8009424:	b9b3      	cbnz	r3, 8009454 <_dtoa_r+0x8f4>
 8009426:	9b05      	ldr	r3, [sp, #20]
 8009428:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800942c:	b993      	cbnz	r3, 8009454 <_dtoa_r+0x8f4>
 800942e:	9b05      	ldr	r3, [sp, #20]
 8009430:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009434:	0d1b      	lsrs	r3, r3, #20
 8009436:	051b      	lsls	r3, r3, #20
 8009438:	b17b      	cbz	r3, 800945a <_dtoa_r+0x8fa>
 800943a:	f04f 0801 	mov.w	r8, #1
 800943e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009440:	f109 0901 	add.w	r9, r9, #1
 8009444:	3301      	adds	r3, #1
 8009446:	9309      	str	r3, [sp, #36]	; 0x24
 8009448:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800944a:	2b00      	cmp	r3, #0
 800944c:	f47f af6f 	bne.w	800932e <_dtoa_r+0x7ce>
 8009450:	2001      	movs	r0, #1
 8009452:	e774      	b.n	800933e <_dtoa_r+0x7de>
 8009454:	f04f 0800 	mov.w	r8, #0
 8009458:	e7f6      	b.n	8009448 <_dtoa_r+0x8e8>
 800945a:	4698      	mov	r8, r3
 800945c:	e7f4      	b.n	8009448 <_dtoa_r+0x8e8>
 800945e:	d080      	beq.n	8009362 <_dtoa_r+0x802>
 8009460:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009462:	331c      	adds	r3, #28
 8009464:	441a      	add	r2, r3
 8009466:	4499      	add	r9, r3
 8009468:	441f      	add	r7, r3
 800946a:	9209      	str	r2, [sp, #36]	; 0x24
 800946c:	e779      	b.n	8009362 <_dtoa_r+0x802>
 800946e:	4603      	mov	r3, r0
 8009470:	e7f6      	b.n	8009460 <_dtoa_r+0x900>
 8009472:	9b08      	ldr	r3, [sp, #32]
 8009474:	2b00      	cmp	r3, #0
 8009476:	dc34      	bgt.n	80094e2 <_dtoa_r+0x982>
 8009478:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800947a:	2b02      	cmp	r3, #2
 800947c:	dd31      	ble.n	80094e2 <_dtoa_r+0x982>
 800947e:	9b08      	ldr	r3, [sp, #32]
 8009480:	9306      	str	r3, [sp, #24]
 8009482:	9b06      	ldr	r3, [sp, #24]
 8009484:	b963      	cbnz	r3, 80094a0 <_dtoa_r+0x940>
 8009486:	4621      	mov	r1, r4
 8009488:	2205      	movs	r2, #5
 800948a:	4628      	mov	r0, r5
 800948c:	f000 fe16 	bl	800a0bc <__multadd>
 8009490:	4601      	mov	r1, r0
 8009492:	4604      	mov	r4, r0
 8009494:	4650      	mov	r0, sl
 8009496:	f001 f873 	bl	800a580 <__mcmp>
 800949a:	2800      	cmp	r0, #0
 800949c:	f73f adbf 	bgt.w	800901e <_dtoa_r+0x4be>
 80094a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80094a2:	9f03      	ldr	r7, [sp, #12]
 80094a4:	ea6f 0b03 	mvn.w	fp, r3
 80094a8:	f04f 0800 	mov.w	r8, #0
 80094ac:	4621      	mov	r1, r4
 80094ae:	4628      	mov	r0, r5
 80094b0:	f000 fde2 	bl	800a078 <_Bfree>
 80094b4:	2e00      	cmp	r6, #0
 80094b6:	f43f aead 	beq.w	8009214 <_dtoa_r+0x6b4>
 80094ba:	f1b8 0f00 	cmp.w	r8, #0
 80094be:	d005      	beq.n	80094cc <_dtoa_r+0x96c>
 80094c0:	45b0      	cmp	r8, r6
 80094c2:	d003      	beq.n	80094cc <_dtoa_r+0x96c>
 80094c4:	4641      	mov	r1, r8
 80094c6:	4628      	mov	r0, r5
 80094c8:	f000 fdd6 	bl	800a078 <_Bfree>
 80094cc:	4631      	mov	r1, r6
 80094ce:	4628      	mov	r0, r5
 80094d0:	f000 fdd2 	bl	800a078 <_Bfree>
 80094d4:	e69e      	b.n	8009214 <_dtoa_r+0x6b4>
 80094d6:	2400      	movs	r4, #0
 80094d8:	4626      	mov	r6, r4
 80094da:	e7e1      	b.n	80094a0 <_dtoa_r+0x940>
 80094dc:	46c3      	mov	fp, r8
 80094de:	4626      	mov	r6, r4
 80094e0:	e59d      	b.n	800901e <_dtoa_r+0x4be>
 80094e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	f000 80c8 	beq.w	800967a <_dtoa_r+0xb1a>
 80094ea:	9b08      	ldr	r3, [sp, #32]
 80094ec:	9306      	str	r3, [sp, #24]
 80094ee:	2f00      	cmp	r7, #0
 80094f0:	dd05      	ble.n	80094fe <_dtoa_r+0x99e>
 80094f2:	4631      	mov	r1, r6
 80094f4:	463a      	mov	r2, r7
 80094f6:	4628      	mov	r0, r5
 80094f8:	f000 ffd6 	bl	800a4a8 <__lshift>
 80094fc:	4606      	mov	r6, r0
 80094fe:	f1b8 0f00 	cmp.w	r8, #0
 8009502:	d05b      	beq.n	80095bc <_dtoa_r+0xa5c>
 8009504:	4628      	mov	r0, r5
 8009506:	6871      	ldr	r1, [r6, #4]
 8009508:	f000 fd76 	bl	8009ff8 <_Balloc>
 800950c:	4607      	mov	r7, r0
 800950e:	b928      	cbnz	r0, 800951c <_dtoa_r+0x9bc>
 8009510:	4602      	mov	r2, r0
 8009512:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009516:	4b81      	ldr	r3, [pc, #516]	; (800971c <_dtoa_r+0xbbc>)
 8009518:	f7ff bb36 	b.w	8008b88 <_dtoa_r+0x28>
 800951c:	6932      	ldr	r2, [r6, #16]
 800951e:	f106 010c 	add.w	r1, r6, #12
 8009522:	3202      	adds	r2, #2
 8009524:	0092      	lsls	r2, r2, #2
 8009526:	300c      	adds	r0, #12
 8009528:	f7ff fa79 	bl	8008a1e <memcpy>
 800952c:	2201      	movs	r2, #1
 800952e:	4639      	mov	r1, r7
 8009530:	4628      	mov	r0, r5
 8009532:	f000 ffb9 	bl	800a4a8 <__lshift>
 8009536:	46b0      	mov	r8, r6
 8009538:	4606      	mov	r6, r0
 800953a:	9b03      	ldr	r3, [sp, #12]
 800953c:	9a03      	ldr	r2, [sp, #12]
 800953e:	3301      	adds	r3, #1
 8009540:	9308      	str	r3, [sp, #32]
 8009542:	9b06      	ldr	r3, [sp, #24]
 8009544:	4413      	add	r3, r2
 8009546:	930b      	str	r3, [sp, #44]	; 0x2c
 8009548:	9b04      	ldr	r3, [sp, #16]
 800954a:	f003 0301 	and.w	r3, r3, #1
 800954e:	930a      	str	r3, [sp, #40]	; 0x28
 8009550:	9b08      	ldr	r3, [sp, #32]
 8009552:	4621      	mov	r1, r4
 8009554:	3b01      	subs	r3, #1
 8009556:	4650      	mov	r0, sl
 8009558:	9304      	str	r3, [sp, #16]
 800955a:	f7ff fa75 	bl	8008a48 <quorem>
 800955e:	4641      	mov	r1, r8
 8009560:	9006      	str	r0, [sp, #24]
 8009562:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009566:	4650      	mov	r0, sl
 8009568:	f001 f80a 	bl	800a580 <__mcmp>
 800956c:	4632      	mov	r2, r6
 800956e:	9009      	str	r0, [sp, #36]	; 0x24
 8009570:	4621      	mov	r1, r4
 8009572:	4628      	mov	r0, r5
 8009574:	f001 f820 	bl	800a5b8 <__mdiff>
 8009578:	68c2      	ldr	r2, [r0, #12]
 800957a:	4607      	mov	r7, r0
 800957c:	bb02      	cbnz	r2, 80095c0 <_dtoa_r+0xa60>
 800957e:	4601      	mov	r1, r0
 8009580:	4650      	mov	r0, sl
 8009582:	f000 fffd 	bl	800a580 <__mcmp>
 8009586:	4602      	mov	r2, r0
 8009588:	4639      	mov	r1, r7
 800958a:	4628      	mov	r0, r5
 800958c:	920c      	str	r2, [sp, #48]	; 0x30
 800958e:	f000 fd73 	bl	800a078 <_Bfree>
 8009592:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009594:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009596:	9f08      	ldr	r7, [sp, #32]
 8009598:	ea43 0102 	orr.w	r1, r3, r2
 800959c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800959e:	4319      	orrs	r1, r3
 80095a0:	d110      	bne.n	80095c4 <_dtoa_r+0xa64>
 80095a2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80095a6:	d029      	beq.n	80095fc <_dtoa_r+0xa9c>
 80095a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	dd02      	ble.n	80095b4 <_dtoa_r+0xa54>
 80095ae:	9b06      	ldr	r3, [sp, #24]
 80095b0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80095b4:	9b04      	ldr	r3, [sp, #16]
 80095b6:	f883 9000 	strb.w	r9, [r3]
 80095ba:	e777      	b.n	80094ac <_dtoa_r+0x94c>
 80095bc:	4630      	mov	r0, r6
 80095be:	e7ba      	b.n	8009536 <_dtoa_r+0x9d6>
 80095c0:	2201      	movs	r2, #1
 80095c2:	e7e1      	b.n	8009588 <_dtoa_r+0xa28>
 80095c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	db04      	blt.n	80095d4 <_dtoa_r+0xa74>
 80095ca:	9922      	ldr	r1, [sp, #136]	; 0x88
 80095cc:	430b      	orrs	r3, r1
 80095ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80095d0:	430b      	orrs	r3, r1
 80095d2:	d120      	bne.n	8009616 <_dtoa_r+0xab6>
 80095d4:	2a00      	cmp	r2, #0
 80095d6:	dded      	ble.n	80095b4 <_dtoa_r+0xa54>
 80095d8:	4651      	mov	r1, sl
 80095da:	2201      	movs	r2, #1
 80095dc:	4628      	mov	r0, r5
 80095de:	f000 ff63 	bl	800a4a8 <__lshift>
 80095e2:	4621      	mov	r1, r4
 80095e4:	4682      	mov	sl, r0
 80095e6:	f000 ffcb 	bl	800a580 <__mcmp>
 80095ea:	2800      	cmp	r0, #0
 80095ec:	dc03      	bgt.n	80095f6 <_dtoa_r+0xa96>
 80095ee:	d1e1      	bne.n	80095b4 <_dtoa_r+0xa54>
 80095f0:	f019 0f01 	tst.w	r9, #1
 80095f4:	d0de      	beq.n	80095b4 <_dtoa_r+0xa54>
 80095f6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80095fa:	d1d8      	bne.n	80095ae <_dtoa_r+0xa4e>
 80095fc:	2339      	movs	r3, #57	; 0x39
 80095fe:	9a04      	ldr	r2, [sp, #16]
 8009600:	7013      	strb	r3, [r2, #0]
 8009602:	463b      	mov	r3, r7
 8009604:	461f      	mov	r7, r3
 8009606:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800960a:	3b01      	subs	r3, #1
 800960c:	2a39      	cmp	r2, #57	; 0x39
 800960e:	d06b      	beq.n	80096e8 <_dtoa_r+0xb88>
 8009610:	3201      	adds	r2, #1
 8009612:	701a      	strb	r2, [r3, #0]
 8009614:	e74a      	b.n	80094ac <_dtoa_r+0x94c>
 8009616:	2a00      	cmp	r2, #0
 8009618:	dd07      	ble.n	800962a <_dtoa_r+0xaca>
 800961a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800961e:	d0ed      	beq.n	80095fc <_dtoa_r+0xa9c>
 8009620:	9a04      	ldr	r2, [sp, #16]
 8009622:	f109 0301 	add.w	r3, r9, #1
 8009626:	7013      	strb	r3, [r2, #0]
 8009628:	e740      	b.n	80094ac <_dtoa_r+0x94c>
 800962a:	9b08      	ldr	r3, [sp, #32]
 800962c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800962e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009632:	4293      	cmp	r3, r2
 8009634:	d042      	beq.n	80096bc <_dtoa_r+0xb5c>
 8009636:	4651      	mov	r1, sl
 8009638:	2300      	movs	r3, #0
 800963a:	220a      	movs	r2, #10
 800963c:	4628      	mov	r0, r5
 800963e:	f000 fd3d 	bl	800a0bc <__multadd>
 8009642:	45b0      	cmp	r8, r6
 8009644:	4682      	mov	sl, r0
 8009646:	f04f 0300 	mov.w	r3, #0
 800964a:	f04f 020a 	mov.w	r2, #10
 800964e:	4641      	mov	r1, r8
 8009650:	4628      	mov	r0, r5
 8009652:	d107      	bne.n	8009664 <_dtoa_r+0xb04>
 8009654:	f000 fd32 	bl	800a0bc <__multadd>
 8009658:	4680      	mov	r8, r0
 800965a:	4606      	mov	r6, r0
 800965c:	9b08      	ldr	r3, [sp, #32]
 800965e:	3301      	adds	r3, #1
 8009660:	9308      	str	r3, [sp, #32]
 8009662:	e775      	b.n	8009550 <_dtoa_r+0x9f0>
 8009664:	f000 fd2a 	bl	800a0bc <__multadd>
 8009668:	4631      	mov	r1, r6
 800966a:	4680      	mov	r8, r0
 800966c:	2300      	movs	r3, #0
 800966e:	220a      	movs	r2, #10
 8009670:	4628      	mov	r0, r5
 8009672:	f000 fd23 	bl	800a0bc <__multadd>
 8009676:	4606      	mov	r6, r0
 8009678:	e7f0      	b.n	800965c <_dtoa_r+0xafc>
 800967a:	9b08      	ldr	r3, [sp, #32]
 800967c:	9306      	str	r3, [sp, #24]
 800967e:	9f03      	ldr	r7, [sp, #12]
 8009680:	4621      	mov	r1, r4
 8009682:	4650      	mov	r0, sl
 8009684:	f7ff f9e0 	bl	8008a48 <quorem>
 8009688:	9b03      	ldr	r3, [sp, #12]
 800968a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800968e:	f807 9b01 	strb.w	r9, [r7], #1
 8009692:	1afa      	subs	r2, r7, r3
 8009694:	9b06      	ldr	r3, [sp, #24]
 8009696:	4293      	cmp	r3, r2
 8009698:	dd07      	ble.n	80096aa <_dtoa_r+0xb4a>
 800969a:	4651      	mov	r1, sl
 800969c:	2300      	movs	r3, #0
 800969e:	220a      	movs	r2, #10
 80096a0:	4628      	mov	r0, r5
 80096a2:	f000 fd0b 	bl	800a0bc <__multadd>
 80096a6:	4682      	mov	sl, r0
 80096a8:	e7ea      	b.n	8009680 <_dtoa_r+0xb20>
 80096aa:	9b06      	ldr	r3, [sp, #24]
 80096ac:	f04f 0800 	mov.w	r8, #0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	bfcc      	ite	gt
 80096b4:	461f      	movgt	r7, r3
 80096b6:	2701      	movle	r7, #1
 80096b8:	9b03      	ldr	r3, [sp, #12]
 80096ba:	441f      	add	r7, r3
 80096bc:	4651      	mov	r1, sl
 80096be:	2201      	movs	r2, #1
 80096c0:	4628      	mov	r0, r5
 80096c2:	f000 fef1 	bl	800a4a8 <__lshift>
 80096c6:	4621      	mov	r1, r4
 80096c8:	4682      	mov	sl, r0
 80096ca:	f000 ff59 	bl	800a580 <__mcmp>
 80096ce:	2800      	cmp	r0, #0
 80096d0:	dc97      	bgt.n	8009602 <_dtoa_r+0xaa2>
 80096d2:	d102      	bne.n	80096da <_dtoa_r+0xb7a>
 80096d4:	f019 0f01 	tst.w	r9, #1
 80096d8:	d193      	bne.n	8009602 <_dtoa_r+0xaa2>
 80096da:	463b      	mov	r3, r7
 80096dc:	461f      	mov	r7, r3
 80096de:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096e2:	2a30      	cmp	r2, #48	; 0x30
 80096e4:	d0fa      	beq.n	80096dc <_dtoa_r+0xb7c>
 80096e6:	e6e1      	b.n	80094ac <_dtoa_r+0x94c>
 80096e8:	9a03      	ldr	r2, [sp, #12]
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d18a      	bne.n	8009604 <_dtoa_r+0xaa4>
 80096ee:	2331      	movs	r3, #49	; 0x31
 80096f0:	f10b 0b01 	add.w	fp, fp, #1
 80096f4:	e797      	b.n	8009626 <_dtoa_r+0xac6>
 80096f6:	4b0a      	ldr	r3, [pc, #40]	; (8009720 <_dtoa_r+0xbc0>)
 80096f8:	f7ff ba9f 	b.w	8008c3a <_dtoa_r+0xda>
 80096fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80096fe:	2b00      	cmp	r3, #0
 8009700:	f47f aa77 	bne.w	8008bf2 <_dtoa_r+0x92>
 8009704:	4b07      	ldr	r3, [pc, #28]	; (8009724 <_dtoa_r+0xbc4>)
 8009706:	f7ff ba98 	b.w	8008c3a <_dtoa_r+0xda>
 800970a:	9b06      	ldr	r3, [sp, #24]
 800970c:	2b00      	cmp	r3, #0
 800970e:	dcb6      	bgt.n	800967e <_dtoa_r+0xb1e>
 8009710:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009712:	2b02      	cmp	r3, #2
 8009714:	f73f aeb5 	bgt.w	8009482 <_dtoa_r+0x922>
 8009718:	e7b1      	b.n	800967e <_dtoa_r+0xb1e>
 800971a:	bf00      	nop
 800971c:	0800d561 	.word	0x0800d561
 8009720:	0800d4b9 	.word	0x0800d4b9
 8009724:	0800d4e5 	.word	0x0800d4e5

08009728 <_free_r>:
 8009728:	b538      	push	{r3, r4, r5, lr}
 800972a:	4605      	mov	r5, r0
 800972c:	2900      	cmp	r1, #0
 800972e:	d040      	beq.n	80097b2 <_free_r+0x8a>
 8009730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009734:	1f0c      	subs	r4, r1, #4
 8009736:	2b00      	cmp	r3, #0
 8009738:	bfb8      	it	lt
 800973a:	18e4      	addlt	r4, r4, r3
 800973c:	f000 fc50 	bl	8009fe0 <__malloc_lock>
 8009740:	4a1c      	ldr	r2, [pc, #112]	; (80097b4 <_free_r+0x8c>)
 8009742:	6813      	ldr	r3, [r2, #0]
 8009744:	b933      	cbnz	r3, 8009754 <_free_r+0x2c>
 8009746:	6063      	str	r3, [r4, #4]
 8009748:	6014      	str	r4, [r2, #0]
 800974a:	4628      	mov	r0, r5
 800974c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009750:	f000 bc4c 	b.w	8009fec <__malloc_unlock>
 8009754:	42a3      	cmp	r3, r4
 8009756:	d908      	bls.n	800976a <_free_r+0x42>
 8009758:	6820      	ldr	r0, [r4, #0]
 800975a:	1821      	adds	r1, r4, r0
 800975c:	428b      	cmp	r3, r1
 800975e:	bf01      	itttt	eq
 8009760:	6819      	ldreq	r1, [r3, #0]
 8009762:	685b      	ldreq	r3, [r3, #4]
 8009764:	1809      	addeq	r1, r1, r0
 8009766:	6021      	streq	r1, [r4, #0]
 8009768:	e7ed      	b.n	8009746 <_free_r+0x1e>
 800976a:	461a      	mov	r2, r3
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	b10b      	cbz	r3, 8009774 <_free_r+0x4c>
 8009770:	42a3      	cmp	r3, r4
 8009772:	d9fa      	bls.n	800976a <_free_r+0x42>
 8009774:	6811      	ldr	r1, [r2, #0]
 8009776:	1850      	adds	r0, r2, r1
 8009778:	42a0      	cmp	r0, r4
 800977a:	d10b      	bne.n	8009794 <_free_r+0x6c>
 800977c:	6820      	ldr	r0, [r4, #0]
 800977e:	4401      	add	r1, r0
 8009780:	1850      	adds	r0, r2, r1
 8009782:	4283      	cmp	r3, r0
 8009784:	6011      	str	r1, [r2, #0]
 8009786:	d1e0      	bne.n	800974a <_free_r+0x22>
 8009788:	6818      	ldr	r0, [r3, #0]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	4408      	add	r0, r1
 800978e:	6010      	str	r0, [r2, #0]
 8009790:	6053      	str	r3, [r2, #4]
 8009792:	e7da      	b.n	800974a <_free_r+0x22>
 8009794:	d902      	bls.n	800979c <_free_r+0x74>
 8009796:	230c      	movs	r3, #12
 8009798:	602b      	str	r3, [r5, #0]
 800979a:	e7d6      	b.n	800974a <_free_r+0x22>
 800979c:	6820      	ldr	r0, [r4, #0]
 800979e:	1821      	adds	r1, r4, r0
 80097a0:	428b      	cmp	r3, r1
 80097a2:	bf01      	itttt	eq
 80097a4:	6819      	ldreq	r1, [r3, #0]
 80097a6:	685b      	ldreq	r3, [r3, #4]
 80097a8:	1809      	addeq	r1, r1, r0
 80097aa:	6021      	streq	r1, [r4, #0]
 80097ac:	6063      	str	r3, [r4, #4]
 80097ae:	6054      	str	r4, [r2, #4]
 80097b0:	e7cb      	b.n	800974a <_free_r+0x22>
 80097b2:	bd38      	pop	{r3, r4, r5, pc}
 80097b4:	20000cc0 	.word	0x20000cc0

080097b8 <rshift>:
 80097b8:	6903      	ldr	r3, [r0, #16]
 80097ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80097be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80097c2:	f100 0414 	add.w	r4, r0, #20
 80097c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80097ca:	dd46      	ble.n	800985a <rshift+0xa2>
 80097cc:	f011 011f 	ands.w	r1, r1, #31
 80097d0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80097d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80097d8:	d10c      	bne.n	80097f4 <rshift+0x3c>
 80097da:	4629      	mov	r1, r5
 80097dc:	f100 0710 	add.w	r7, r0, #16
 80097e0:	42b1      	cmp	r1, r6
 80097e2:	d335      	bcc.n	8009850 <rshift+0x98>
 80097e4:	1a9b      	subs	r3, r3, r2
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	1eea      	subs	r2, r5, #3
 80097ea:	4296      	cmp	r6, r2
 80097ec:	bf38      	it	cc
 80097ee:	2300      	movcc	r3, #0
 80097f0:	4423      	add	r3, r4
 80097f2:	e015      	b.n	8009820 <rshift+0x68>
 80097f4:	46a1      	mov	r9, r4
 80097f6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80097fa:	f1c1 0820 	rsb	r8, r1, #32
 80097fe:	40cf      	lsrs	r7, r1
 8009800:	f105 0e04 	add.w	lr, r5, #4
 8009804:	4576      	cmp	r6, lr
 8009806:	46f4      	mov	ip, lr
 8009808:	d816      	bhi.n	8009838 <rshift+0x80>
 800980a:	1a9a      	subs	r2, r3, r2
 800980c:	0092      	lsls	r2, r2, #2
 800980e:	3a04      	subs	r2, #4
 8009810:	3501      	adds	r5, #1
 8009812:	42ae      	cmp	r6, r5
 8009814:	bf38      	it	cc
 8009816:	2200      	movcc	r2, #0
 8009818:	18a3      	adds	r3, r4, r2
 800981a:	50a7      	str	r7, [r4, r2]
 800981c:	b107      	cbz	r7, 8009820 <rshift+0x68>
 800981e:	3304      	adds	r3, #4
 8009820:	42a3      	cmp	r3, r4
 8009822:	eba3 0204 	sub.w	r2, r3, r4
 8009826:	bf08      	it	eq
 8009828:	2300      	moveq	r3, #0
 800982a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800982e:	6102      	str	r2, [r0, #16]
 8009830:	bf08      	it	eq
 8009832:	6143      	streq	r3, [r0, #20]
 8009834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009838:	f8dc c000 	ldr.w	ip, [ip]
 800983c:	fa0c fc08 	lsl.w	ip, ip, r8
 8009840:	ea4c 0707 	orr.w	r7, ip, r7
 8009844:	f849 7b04 	str.w	r7, [r9], #4
 8009848:	f85e 7b04 	ldr.w	r7, [lr], #4
 800984c:	40cf      	lsrs	r7, r1
 800984e:	e7d9      	b.n	8009804 <rshift+0x4c>
 8009850:	f851 cb04 	ldr.w	ip, [r1], #4
 8009854:	f847 cf04 	str.w	ip, [r7, #4]!
 8009858:	e7c2      	b.n	80097e0 <rshift+0x28>
 800985a:	4623      	mov	r3, r4
 800985c:	e7e0      	b.n	8009820 <rshift+0x68>

0800985e <__hexdig_fun>:
 800985e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009862:	2b09      	cmp	r3, #9
 8009864:	d802      	bhi.n	800986c <__hexdig_fun+0xe>
 8009866:	3820      	subs	r0, #32
 8009868:	b2c0      	uxtb	r0, r0
 800986a:	4770      	bx	lr
 800986c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009870:	2b05      	cmp	r3, #5
 8009872:	d801      	bhi.n	8009878 <__hexdig_fun+0x1a>
 8009874:	3847      	subs	r0, #71	; 0x47
 8009876:	e7f7      	b.n	8009868 <__hexdig_fun+0xa>
 8009878:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800987c:	2b05      	cmp	r3, #5
 800987e:	d801      	bhi.n	8009884 <__hexdig_fun+0x26>
 8009880:	3827      	subs	r0, #39	; 0x27
 8009882:	e7f1      	b.n	8009868 <__hexdig_fun+0xa>
 8009884:	2000      	movs	r0, #0
 8009886:	4770      	bx	lr

08009888 <__gethex>:
 8009888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800988c:	4681      	mov	r9, r0
 800988e:	468a      	mov	sl, r1
 8009890:	4617      	mov	r7, r2
 8009892:	680a      	ldr	r2, [r1, #0]
 8009894:	b085      	sub	sp, #20
 8009896:	f102 0b02 	add.w	fp, r2, #2
 800989a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800989e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80098a2:	9302      	str	r3, [sp, #8]
 80098a4:	32fe      	adds	r2, #254	; 0xfe
 80098a6:	eb02 030b 	add.w	r3, r2, fp
 80098aa:	46d8      	mov	r8, fp
 80098ac:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80098b0:	9301      	str	r3, [sp, #4]
 80098b2:	2830      	cmp	r0, #48	; 0x30
 80098b4:	d0f7      	beq.n	80098a6 <__gethex+0x1e>
 80098b6:	f7ff ffd2 	bl	800985e <__hexdig_fun>
 80098ba:	4604      	mov	r4, r0
 80098bc:	2800      	cmp	r0, #0
 80098be:	d138      	bne.n	8009932 <__gethex+0xaa>
 80098c0:	2201      	movs	r2, #1
 80098c2:	4640      	mov	r0, r8
 80098c4:	49a7      	ldr	r1, [pc, #668]	; (8009b64 <__gethex+0x2dc>)
 80098c6:	f7fe fffa 	bl	80088be <strncmp>
 80098ca:	4606      	mov	r6, r0
 80098cc:	2800      	cmp	r0, #0
 80098ce:	d169      	bne.n	80099a4 <__gethex+0x11c>
 80098d0:	f898 0001 	ldrb.w	r0, [r8, #1]
 80098d4:	465d      	mov	r5, fp
 80098d6:	f7ff ffc2 	bl	800985e <__hexdig_fun>
 80098da:	2800      	cmp	r0, #0
 80098dc:	d064      	beq.n	80099a8 <__gethex+0x120>
 80098de:	465a      	mov	r2, fp
 80098e0:	7810      	ldrb	r0, [r2, #0]
 80098e2:	4690      	mov	r8, r2
 80098e4:	2830      	cmp	r0, #48	; 0x30
 80098e6:	f102 0201 	add.w	r2, r2, #1
 80098ea:	d0f9      	beq.n	80098e0 <__gethex+0x58>
 80098ec:	f7ff ffb7 	bl	800985e <__hexdig_fun>
 80098f0:	2301      	movs	r3, #1
 80098f2:	fab0 f480 	clz	r4, r0
 80098f6:	465e      	mov	r6, fp
 80098f8:	0964      	lsrs	r4, r4, #5
 80098fa:	9301      	str	r3, [sp, #4]
 80098fc:	4642      	mov	r2, r8
 80098fe:	4615      	mov	r5, r2
 8009900:	7828      	ldrb	r0, [r5, #0]
 8009902:	3201      	adds	r2, #1
 8009904:	f7ff ffab 	bl	800985e <__hexdig_fun>
 8009908:	2800      	cmp	r0, #0
 800990a:	d1f8      	bne.n	80098fe <__gethex+0x76>
 800990c:	2201      	movs	r2, #1
 800990e:	4628      	mov	r0, r5
 8009910:	4994      	ldr	r1, [pc, #592]	; (8009b64 <__gethex+0x2dc>)
 8009912:	f7fe ffd4 	bl	80088be <strncmp>
 8009916:	b978      	cbnz	r0, 8009938 <__gethex+0xb0>
 8009918:	b946      	cbnz	r6, 800992c <__gethex+0xa4>
 800991a:	1c6e      	adds	r6, r5, #1
 800991c:	4632      	mov	r2, r6
 800991e:	4615      	mov	r5, r2
 8009920:	7828      	ldrb	r0, [r5, #0]
 8009922:	3201      	adds	r2, #1
 8009924:	f7ff ff9b 	bl	800985e <__hexdig_fun>
 8009928:	2800      	cmp	r0, #0
 800992a:	d1f8      	bne.n	800991e <__gethex+0x96>
 800992c:	1b73      	subs	r3, r6, r5
 800992e:	009e      	lsls	r6, r3, #2
 8009930:	e004      	b.n	800993c <__gethex+0xb4>
 8009932:	2400      	movs	r4, #0
 8009934:	4626      	mov	r6, r4
 8009936:	e7e1      	b.n	80098fc <__gethex+0x74>
 8009938:	2e00      	cmp	r6, #0
 800993a:	d1f7      	bne.n	800992c <__gethex+0xa4>
 800993c:	782b      	ldrb	r3, [r5, #0]
 800993e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009942:	2b50      	cmp	r3, #80	; 0x50
 8009944:	d13d      	bne.n	80099c2 <__gethex+0x13a>
 8009946:	786b      	ldrb	r3, [r5, #1]
 8009948:	2b2b      	cmp	r3, #43	; 0x2b
 800994a:	d02f      	beq.n	80099ac <__gethex+0x124>
 800994c:	2b2d      	cmp	r3, #45	; 0x2d
 800994e:	d031      	beq.n	80099b4 <__gethex+0x12c>
 8009950:	f04f 0b00 	mov.w	fp, #0
 8009954:	1c69      	adds	r1, r5, #1
 8009956:	7808      	ldrb	r0, [r1, #0]
 8009958:	f7ff ff81 	bl	800985e <__hexdig_fun>
 800995c:	1e42      	subs	r2, r0, #1
 800995e:	b2d2      	uxtb	r2, r2
 8009960:	2a18      	cmp	r2, #24
 8009962:	d82e      	bhi.n	80099c2 <__gethex+0x13a>
 8009964:	f1a0 0210 	sub.w	r2, r0, #16
 8009968:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800996c:	f7ff ff77 	bl	800985e <__hexdig_fun>
 8009970:	f100 3cff 	add.w	ip, r0, #4294967295
 8009974:	fa5f fc8c 	uxtb.w	ip, ip
 8009978:	f1bc 0f18 	cmp.w	ip, #24
 800997c:	d91d      	bls.n	80099ba <__gethex+0x132>
 800997e:	f1bb 0f00 	cmp.w	fp, #0
 8009982:	d000      	beq.n	8009986 <__gethex+0xfe>
 8009984:	4252      	negs	r2, r2
 8009986:	4416      	add	r6, r2
 8009988:	f8ca 1000 	str.w	r1, [sl]
 800998c:	b1dc      	cbz	r4, 80099c6 <__gethex+0x13e>
 800998e:	9b01      	ldr	r3, [sp, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	bf14      	ite	ne
 8009994:	f04f 0800 	movne.w	r8, #0
 8009998:	f04f 0806 	moveq.w	r8, #6
 800999c:	4640      	mov	r0, r8
 800999e:	b005      	add	sp, #20
 80099a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099a4:	4645      	mov	r5, r8
 80099a6:	4626      	mov	r6, r4
 80099a8:	2401      	movs	r4, #1
 80099aa:	e7c7      	b.n	800993c <__gethex+0xb4>
 80099ac:	f04f 0b00 	mov.w	fp, #0
 80099b0:	1ca9      	adds	r1, r5, #2
 80099b2:	e7d0      	b.n	8009956 <__gethex+0xce>
 80099b4:	f04f 0b01 	mov.w	fp, #1
 80099b8:	e7fa      	b.n	80099b0 <__gethex+0x128>
 80099ba:	230a      	movs	r3, #10
 80099bc:	fb03 0002 	mla	r0, r3, r2, r0
 80099c0:	e7d0      	b.n	8009964 <__gethex+0xdc>
 80099c2:	4629      	mov	r1, r5
 80099c4:	e7e0      	b.n	8009988 <__gethex+0x100>
 80099c6:	4621      	mov	r1, r4
 80099c8:	eba5 0308 	sub.w	r3, r5, r8
 80099cc:	3b01      	subs	r3, #1
 80099ce:	2b07      	cmp	r3, #7
 80099d0:	dc0a      	bgt.n	80099e8 <__gethex+0x160>
 80099d2:	4648      	mov	r0, r9
 80099d4:	f000 fb10 	bl	8009ff8 <_Balloc>
 80099d8:	4604      	mov	r4, r0
 80099da:	b940      	cbnz	r0, 80099ee <__gethex+0x166>
 80099dc:	4602      	mov	r2, r0
 80099de:	21e4      	movs	r1, #228	; 0xe4
 80099e0:	4b61      	ldr	r3, [pc, #388]	; (8009b68 <__gethex+0x2e0>)
 80099e2:	4862      	ldr	r0, [pc, #392]	; (8009b6c <__gethex+0x2e4>)
 80099e4:	f001 f9de 	bl	800ada4 <__assert_func>
 80099e8:	3101      	adds	r1, #1
 80099ea:	105b      	asrs	r3, r3, #1
 80099ec:	e7ef      	b.n	80099ce <__gethex+0x146>
 80099ee:	2300      	movs	r3, #0
 80099f0:	469b      	mov	fp, r3
 80099f2:	f100 0a14 	add.w	sl, r0, #20
 80099f6:	f8cd a004 	str.w	sl, [sp, #4]
 80099fa:	45a8      	cmp	r8, r5
 80099fc:	d344      	bcc.n	8009a88 <__gethex+0x200>
 80099fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009a02:	4658      	mov	r0, fp
 8009a04:	f848 bb04 	str.w	fp, [r8], #4
 8009a08:	eba8 080a 	sub.w	r8, r8, sl
 8009a0c:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8009a10:	6122      	str	r2, [r4, #16]
 8009a12:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8009a16:	f000 fbe1 	bl	800a1dc <__hi0bits>
 8009a1a:	683d      	ldr	r5, [r7, #0]
 8009a1c:	eba8 0800 	sub.w	r8, r8, r0
 8009a20:	45a8      	cmp	r8, r5
 8009a22:	dd59      	ble.n	8009ad8 <__gethex+0x250>
 8009a24:	eba8 0805 	sub.w	r8, r8, r5
 8009a28:	4641      	mov	r1, r8
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	f000 ff5f 	bl	800a8ee <__any_on>
 8009a30:	4683      	mov	fp, r0
 8009a32:	b1b8      	cbz	r0, 8009a64 <__gethex+0x1dc>
 8009a34:	f04f 0b01 	mov.w	fp, #1
 8009a38:	f108 33ff 	add.w	r3, r8, #4294967295
 8009a3c:	1159      	asrs	r1, r3, #5
 8009a3e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009a42:	f003 021f 	and.w	r2, r3, #31
 8009a46:	fa0b f202 	lsl.w	r2, fp, r2
 8009a4a:	420a      	tst	r2, r1
 8009a4c:	d00a      	beq.n	8009a64 <__gethex+0x1dc>
 8009a4e:	455b      	cmp	r3, fp
 8009a50:	dd06      	ble.n	8009a60 <__gethex+0x1d8>
 8009a52:	4620      	mov	r0, r4
 8009a54:	f1a8 0102 	sub.w	r1, r8, #2
 8009a58:	f000 ff49 	bl	800a8ee <__any_on>
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	d138      	bne.n	8009ad2 <__gethex+0x24a>
 8009a60:	f04f 0b02 	mov.w	fp, #2
 8009a64:	4641      	mov	r1, r8
 8009a66:	4620      	mov	r0, r4
 8009a68:	f7ff fea6 	bl	80097b8 <rshift>
 8009a6c:	4446      	add	r6, r8
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	42b3      	cmp	r3, r6
 8009a72:	da41      	bge.n	8009af8 <__gethex+0x270>
 8009a74:	4621      	mov	r1, r4
 8009a76:	4648      	mov	r0, r9
 8009a78:	f000 fafe 	bl	800a078 <_Bfree>
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a80:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009a84:	6013      	str	r3, [r2, #0]
 8009a86:	e789      	b.n	800999c <__gethex+0x114>
 8009a88:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009a8c:	2a2e      	cmp	r2, #46	; 0x2e
 8009a8e:	d014      	beq.n	8009aba <__gethex+0x232>
 8009a90:	2b20      	cmp	r3, #32
 8009a92:	d106      	bne.n	8009aa2 <__gethex+0x21a>
 8009a94:	9b01      	ldr	r3, [sp, #4]
 8009a96:	f843 bb04 	str.w	fp, [r3], #4
 8009a9a:	f04f 0b00 	mov.w	fp, #0
 8009a9e:	9301      	str	r3, [sp, #4]
 8009aa0:	465b      	mov	r3, fp
 8009aa2:	7828      	ldrb	r0, [r5, #0]
 8009aa4:	9303      	str	r3, [sp, #12]
 8009aa6:	f7ff feda 	bl	800985e <__hexdig_fun>
 8009aaa:	9b03      	ldr	r3, [sp, #12]
 8009aac:	f000 000f 	and.w	r0, r0, #15
 8009ab0:	4098      	lsls	r0, r3
 8009ab2:	ea4b 0b00 	orr.w	fp, fp, r0
 8009ab6:	3304      	adds	r3, #4
 8009ab8:	e79f      	b.n	80099fa <__gethex+0x172>
 8009aba:	45a8      	cmp	r8, r5
 8009abc:	d8e8      	bhi.n	8009a90 <__gethex+0x208>
 8009abe:	2201      	movs	r2, #1
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	4928      	ldr	r1, [pc, #160]	; (8009b64 <__gethex+0x2dc>)
 8009ac4:	9303      	str	r3, [sp, #12]
 8009ac6:	f7fe fefa 	bl	80088be <strncmp>
 8009aca:	9b03      	ldr	r3, [sp, #12]
 8009acc:	2800      	cmp	r0, #0
 8009ace:	d1df      	bne.n	8009a90 <__gethex+0x208>
 8009ad0:	e793      	b.n	80099fa <__gethex+0x172>
 8009ad2:	f04f 0b03 	mov.w	fp, #3
 8009ad6:	e7c5      	b.n	8009a64 <__gethex+0x1dc>
 8009ad8:	da0b      	bge.n	8009af2 <__gethex+0x26a>
 8009ada:	eba5 0808 	sub.w	r8, r5, r8
 8009ade:	4621      	mov	r1, r4
 8009ae0:	4642      	mov	r2, r8
 8009ae2:	4648      	mov	r0, r9
 8009ae4:	f000 fce0 	bl	800a4a8 <__lshift>
 8009ae8:	4604      	mov	r4, r0
 8009aea:	eba6 0608 	sub.w	r6, r6, r8
 8009aee:	f100 0a14 	add.w	sl, r0, #20
 8009af2:	f04f 0b00 	mov.w	fp, #0
 8009af6:	e7ba      	b.n	8009a6e <__gethex+0x1e6>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	42b3      	cmp	r3, r6
 8009afc:	dd74      	ble.n	8009be8 <__gethex+0x360>
 8009afe:	1b9e      	subs	r6, r3, r6
 8009b00:	42b5      	cmp	r5, r6
 8009b02:	dc35      	bgt.n	8009b70 <__gethex+0x2e8>
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	d023      	beq.n	8009b52 <__gethex+0x2ca>
 8009b0a:	2b03      	cmp	r3, #3
 8009b0c:	d025      	beq.n	8009b5a <__gethex+0x2d2>
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d115      	bne.n	8009b3e <__gethex+0x2b6>
 8009b12:	42b5      	cmp	r5, r6
 8009b14:	d113      	bne.n	8009b3e <__gethex+0x2b6>
 8009b16:	2d01      	cmp	r5, #1
 8009b18:	d10b      	bne.n	8009b32 <__gethex+0x2aa>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	9a02      	ldr	r2, [sp, #8]
 8009b1e:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009b22:	6013      	str	r3, [r2, #0]
 8009b24:	2301      	movs	r3, #1
 8009b26:	6123      	str	r3, [r4, #16]
 8009b28:	f8ca 3000 	str.w	r3, [sl]
 8009b2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b2e:	601c      	str	r4, [r3, #0]
 8009b30:	e734      	b.n	800999c <__gethex+0x114>
 8009b32:	4620      	mov	r0, r4
 8009b34:	1e69      	subs	r1, r5, #1
 8009b36:	f000 feda 	bl	800a8ee <__any_on>
 8009b3a:	2800      	cmp	r0, #0
 8009b3c:	d1ed      	bne.n	8009b1a <__gethex+0x292>
 8009b3e:	4621      	mov	r1, r4
 8009b40:	4648      	mov	r0, r9
 8009b42:	f000 fa99 	bl	800a078 <_Bfree>
 8009b46:	2300      	movs	r3, #0
 8009b48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b4a:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009b4e:	6013      	str	r3, [r2, #0]
 8009b50:	e724      	b.n	800999c <__gethex+0x114>
 8009b52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d1f2      	bne.n	8009b3e <__gethex+0x2b6>
 8009b58:	e7df      	b.n	8009b1a <__gethex+0x292>
 8009b5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d1dc      	bne.n	8009b1a <__gethex+0x292>
 8009b60:	e7ed      	b.n	8009b3e <__gethex+0x2b6>
 8009b62:	bf00      	nop
 8009b64:	0800d356 	.word	0x0800d356
 8009b68:	0800d561 	.word	0x0800d561
 8009b6c:	0800d572 	.word	0x0800d572
 8009b70:	f106 38ff 	add.w	r8, r6, #4294967295
 8009b74:	f1bb 0f00 	cmp.w	fp, #0
 8009b78:	d133      	bne.n	8009be2 <__gethex+0x35a>
 8009b7a:	f1b8 0f00 	cmp.w	r8, #0
 8009b7e:	d004      	beq.n	8009b8a <__gethex+0x302>
 8009b80:	4641      	mov	r1, r8
 8009b82:	4620      	mov	r0, r4
 8009b84:	f000 feb3 	bl	800a8ee <__any_on>
 8009b88:	4683      	mov	fp, r0
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009b90:	f008 081f 	and.w	r8, r8, #31
 8009b94:	fa03 f308 	lsl.w	r3, r3, r8
 8009b98:	f04f 0802 	mov.w	r8, #2
 8009b9c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009ba0:	4631      	mov	r1, r6
 8009ba2:	4213      	tst	r3, r2
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	bf18      	it	ne
 8009ba8:	f04b 0b02 	orrne.w	fp, fp, #2
 8009bac:	1bad      	subs	r5, r5, r6
 8009bae:	f7ff fe03 	bl	80097b8 <rshift>
 8009bb2:	687e      	ldr	r6, [r7, #4]
 8009bb4:	f1bb 0f00 	cmp.w	fp, #0
 8009bb8:	d04a      	beq.n	8009c50 <__gethex+0x3c8>
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2b02      	cmp	r3, #2
 8009bbe:	d016      	beq.n	8009bee <__gethex+0x366>
 8009bc0:	2b03      	cmp	r3, #3
 8009bc2:	d018      	beq.n	8009bf6 <__gethex+0x36e>
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d109      	bne.n	8009bdc <__gethex+0x354>
 8009bc8:	f01b 0f02 	tst.w	fp, #2
 8009bcc:	d006      	beq.n	8009bdc <__gethex+0x354>
 8009bce:	f8da 3000 	ldr.w	r3, [sl]
 8009bd2:	ea4b 0b03 	orr.w	fp, fp, r3
 8009bd6:	f01b 0f01 	tst.w	fp, #1
 8009bda:	d10f      	bne.n	8009bfc <__gethex+0x374>
 8009bdc:	f048 0810 	orr.w	r8, r8, #16
 8009be0:	e036      	b.n	8009c50 <__gethex+0x3c8>
 8009be2:	f04f 0b01 	mov.w	fp, #1
 8009be6:	e7d0      	b.n	8009b8a <__gethex+0x302>
 8009be8:	f04f 0801 	mov.w	r8, #1
 8009bec:	e7e2      	b.n	8009bb4 <__gethex+0x32c>
 8009bee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bf0:	f1c3 0301 	rsb	r3, r3, #1
 8009bf4:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d0ef      	beq.n	8009bdc <__gethex+0x354>
 8009bfc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009c00:	f104 0214 	add.w	r2, r4, #20
 8009c04:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009c08:	9301      	str	r3, [sp, #4]
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009c10:	4694      	mov	ip, r2
 8009c12:	f852 1b04 	ldr.w	r1, [r2], #4
 8009c16:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009c1a:	d01e      	beq.n	8009c5a <__gethex+0x3d2>
 8009c1c:	3101      	adds	r1, #1
 8009c1e:	f8cc 1000 	str.w	r1, [ip]
 8009c22:	f1b8 0f02 	cmp.w	r8, #2
 8009c26:	f104 0214 	add.w	r2, r4, #20
 8009c2a:	d13d      	bne.n	8009ca8 <__gethex+0x420>
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	3b01      	subs	r3, #1
 8009c30:	42ab      	cmp	r3, r5
 8009c32:	d10b      	bne.n	8009c4c <__gethex+0x3c4>
 8009c34:	2301      	movs	r3, #1
 8009c36:	1169      	asrs	r1, r5, #5
 8009c38:	f005 051f 	and.w	r5, r5, #31
 8009c3c:	fa03 f505 	lsl.w	r5, r3, r5
 8009c40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c44:	421d      	tst	r5, r3
 8009c46:	bf18      	it	ne
 8009c48:	f04f 0801 	movne.w	r8, #1
 8009c4c:	f048 0820 	orr.w	r8, r8, #32
 8009c50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c52:	601c      	str	r4, [r3, #0]
 8009c54:	9b02      	ldr	r3, [sp, #8]
 8009c56:	601e      	str	r6, [r3, #0]
 8009c58:	e6a0      	b.n	800999c <__gethex+0x114>
 8009c5a:	4290      	cmp	r0, r2
 8009c5c:	f842 3c04 	str.w	r3, [r2, #-4]
 8009c60:	d8d6      	bhi.n	8009c10 <__gethex+0x388>
 8009c62:	68a2      	ldr	r2, [r4, #8]
 8009c64:	4593      	cmp	fp, r2
 8009c66:	db17      	blt.n	8009c98 <__gethex+0x410>
 8009c68:	6861      	ldr	r1, [r4, #4]
 8009c6a:	4648      	mov	r0, r9
 8009c6c:	3101      	adds	r1, #1
 8009c6e:	f000 f9c3 	bl	8009ff8 <_Balloc>
 8009c72:	4682      	mov	sl, r0
 8009c74:	b918      	cbnz	r0, 8009c7e <__gethex+0x3f6>
 8009c76:	4602      	mov	r2, r0
 8009c78:	2184      	movs	r1, #132	; 0x84
 8009c7a:	4b1a      	ldr	r3, [pc, #104]	; (8009ce4 <__gethex+0x45c>)
 8009c7c:	e6b1      	b.n	80099e2 <__gethex+0x15a>
 8009c7e:	6922      	ldr	r2, [r4, #16]
 8009c80:	f104 010c 	add.w	r1, r4, #12
 8009c84:	3202      	adds	r2, #2
 8009c86:	0092      	lsls	r2, r2, #2
 8009c88:	300c      	adds	r0, #12
 8009c8a:	f7fe fec8 	bl	8008a1e <memcpy>
 8009c8e:	4621      	mov	r1, r4
 8009c90:	4648      	mov	r0, r9
 8009c92:	f000 f9f1 	bl	800a078 <_Bfree>
 8009c96:	4654      	mov	r4, sl
 8009c98:	6922      	ldr	r2, [r4, #16]
 8009c9a:	1c51      	adds	r1, r2, #1
 8009c9c:	6121      	str	r1, [r4, #16]
 8009c9e:	2101      	movs	r1, #1
 8009ca0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009ca4:	6151      	str	r1, [r2, #20]
 8009ca6:	e7bc      	b.n	8009c22 <__gethex+0x39a>
 8009ca8:	6921      	ldr	r1, [r4, #16]
 8009caa:	4559      	cmp	r1, fp
 8009cac:	dd0b      	ble.n	8009cc6 <__gethex+0x43e>
 8009cae:	2101      	movs	r1, #1
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	f7ff fd81 	bl	80097b8 <rshift>
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	3601      	adds	r6, #1
 8009cba:	42b3      	cmp	r3, r6
 8009cbc:	f6ff aeda 	blt.w	8009a74 <__gethex+0x1ec>
 8009cc0:	f04f 0801 	mov.w	r8, #1
 8009cc4:	e7c2      	b.n	8009c4c <__gethex+0x3c4>
 8009cc6:	f015 051f 	ands.w	r5, r5, #31
 8009cca:	d0f9      	beq.n	8009cc0 <__gethex+0x438>
 8009ccc:	9b01      	ldr	r3, [sp, #4]
 8009cce:	f1c5 0520 	rsb	r5, r5, #32
 8009cd2:	441a      	add	r2, r3
 8009cd4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009cd8:	f000 fa80 	bl	800a1dc <__hi0bits>
 8009cdc:	42a8      	cmp	r0, r5
 8009cde:	dbe6      	blt.n	8009cae <__gethex+0x426>
 8009ce0:	e7ee      	b.n	8009cc0 <__gethex+0x438>
 8009ce2:	bf00      	nop
 8009ce4:	0800d561 	.word	0x0800d561

08009ce8 <L_shift>:
 8009ce8:	f1c2 0208 	rsb	r2, r2, #8
 8009cec:	0092      	lsls	r2, r2, #2
 8009cee:	b570      	push	{r4, r5, r6, lr}
 8009cf0:	f1c2 0620 	rsb	r6, r2, #32
 8009cf4:	6843      	ldr	r3, [r0, #4]
 8009cf6:	6804      	ldr	r4, [r0, #0]
 8009cf8:	fa03 f506 	lsl.w	r5, r3, r6
 8009cfc:	432c      	orrs	r4, r5
 8009cfe:	40d3      	lsrs	r3, r2
 8009d00:	6004      	str	r4, [r0, #0]
 8009d02:	f840 3f04 	str.w	r3, [r0, #4]!
 8009d06:	4288      	cmp	r0, r1
 8009d08:	d3f4      	bcc.n	8009cf4 <L_shift+0xc>
 8009d0a:	bd70      	pop	{r4, r5, r6, pc}

08009d0c <__match>:
 8009d0c:	b530      	push	{r4, r5, lr}
 8009d0e:	6803      	ldr	r3, [r0, #0]
 8009d10:	3301      	adds	r3, #1
 8009d12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d16:	b914      	cbnz	r4, 8009d1e <__match+0x12>
 8009d18:	6003      	str	r3, [r0, #0]
 8009d1a:	2001      	movs	r0, #1
 8009d1c:	bd30      	pop	{r4, r5, pc}
 8009d1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d22:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009d26:	2d19      	cmp	r5, #25
 8009d28:	bf98      	it	ls
 8009d2a:	3220      	addls	r2, #32
 8009d2c:	42a2      	cmp	r2, r4
 8009d2e:	d0f0      	beq.n	8009d12 <__match+0x6>
 8009d30:	2000      	movs	r0, #0
 8009d32:	e7f3      	b.n	8009d1c <__match+0x10>

08009d34 <__hexnan>:
 8009d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d38:	2500      	movs	r5, #0
 8009d3a:	680b      	ldr	r3, [r1, #0]
 8009d3c:	4682      	mov	sl, r0
 8009d3e:	115e      	asrs	r6, r3, #5
 8009d40:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009d44:	f013 031f 	ands.w	r3, r3, #31
 8009d48:	bf18      	it	ne
 8009d4a:	3604      	addne	r6, #4
 8009d4c:	1f37      	subs	r7, r6, #4
 8009d4e:	4690      	mov	r8, r2
 8009d50:	46b9      	mov	r9, r7
 8009d52:	463c      	mov	r4, r7
 8009d54:	46ab      	mov	fp, r5
 8009d56:	b087      	sub	sp, #28
 8009d58:	6801      	ldr	r1, [r0, #0]
 8009d5a:	9301      	str	r3, [sp, #4]
 8009d5c:	f846 5c04 	str.w	r5, [r6, #-4]
 8009d60:	9502      	str	r5, [sp, #8]
 8009d62:	784a      	ldrb	r2, [r1, #1]
 8009d64:	1c4b      	adds	r3, r1, #1
 8009d66:	9303      	str	r3, [sp, #12]
 8009d68:	b342      	cbz	r2, 8009dbc <__hexnan+0x88>
 8009d6a:	4610      	mov	r0, r2
 8009d6c:	9105      	str	r1, [sp, #20]
 8009d6e:	9204      	str	r2, [sp, #16]
 8009d70:	f7ff fd75 	bl	800985e <__hexdig_fun>
 8009d74:	2800      	cmp	r0, #0
 8009d76:	d14f      	bne.n	8009e18 <__hexnan+0xe4>
 8009d78:	9a04      	ldr	r2, [sp, #16]
 8009d7a:	9905      	ldr	r1, [sp, #20]
 8009d7c:	2a20      	cmp	r2, #32
 8009d7e:	d818      	bhi.n	8009db2 <__hexnan+0x7e>
 8009d80:	9b02      	ldr	r3, [sp, #8]
 8009d82:	459b      	cmp	fp, r3
 8009d84:	dd13      	ble.n	8009dae <__hexnan+0x7a>
 8009d86:	454c      	cmp	r4, r9
 8009d88:	d206      	bcs.n	8009d98 <__hexnan+0x64>
 8009d8a:	2d07      	cmp	r5, #7
 8009d8c:	dc04      	bgt.n	8009d98 <__hexnan+0x64>
 8009d8e:	462a      	mov	r2, r5
 8009d90:	4649      	mov	r1, r9
 8009d92:	4620      	mov	r0, r4
 8009d94:	f7ff ffa8 	bl	8009ce8 <L_shift>
 8009d98:	4544      	cmp	r4, r8
 8009d9a:	d950      	bls.n	8009e3e <__hexnan+0x10a>
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	f1a4 0904 	sub.w	r9, r4, #4
 8009da2:	f844 3c04 	str.w	r3, [r4, #-4]
 8009da6:	461d      	mov	r5, r3
 8009da8:	464c      	mov	r4, r9
 8009daa:	f8cd b008 	str.w	fp, [sp, #8]
 8009dae:	9903      	ldr	r1, [sp, #12]
 8009db0:	e7d7      	b.n	8009d62 <__hexnan+0x2e>
 8009db2:	2a29      	cmp	r2, #41	; 0x29
 8009db4:	d155      	bne.n	8009e62 <__hexnan+0x12e>
 8009db6:	3102      	adds	r1, #2
 8009db8:	f8ca 1000 	str.w	r1, [sl]
 8009dbc:	f1bb 0f00 	cmp.w	fp, #0
 8009dc0:	d04f      	beq.n	8009e62 <__hexnan+0x12e>
 8009dc2:	454c      	cmp	r4, r9
 8009dc4:	d206      	bcs.n	8009dd4 <__hexnan+0xa0>
 8009dc6:	2d07      	cmp	r5, #7
 8009dc8:	dc04      	bgt.n	8009dd4 <__hexnan+0xa0>
 8009dca:	462a      	mov	r2, r5
 8009dcc:	4649      	mov	r1, r9
 8009dce:	4620      	mov	r0, r4
 8009dd0:	f7ff ff8a 	bl	8009ce8 <L_shift>
 8009dd4:	4544      	cmp	r4, r8
 8009dd6:	d934      	bls.n	8009e42 <__hexnan+0x10e>
 8009dd8:	4623      	mov	r3, r4
 8009dda:	f1a8 0204 	sub.w	r2, r8, #4
 8009dde:	f853 1b04 	ldr.w	r1, [r3], #4
 8009de2:	429f      	cmp	r7, r3
 8009de4:	f842 1f04 	str.w	r1, [r2, #4]!
 8009de8:	d2f9      	bcs.n	8009dde <__hexnan+0xaa>
 8009dea:	1b3b      	subs	r3, r7, r4
 8009dec:	f023 0303 	bic.w	r3, r3, #3
 8009df0:	3304      	adds	r3, #4
 8009df2:	3e03      	subs	r6, #3
 8009df4:	3401      	adds	r4, #1
 8009df6:	42a6      	cmp	r6, r4
 8009df8:	bf38      	it	cc
 8009dfa:	2304      	movcc	r3, #4
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	4443      	add	r3, r8
 8009e00:	f843 2b04 	str.w	r2, [r3], #4
 8009e04:	429f      	cmp	r7, r3
 8009e06:	d2fb      	bcs.n	8009e00 <__hexnan+0xcc>
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	b91b      	cbnz	r3, 8009e14 <__hexnan+0xe0>
 8009e0c:	4547      	cmp	r7, r8
 8009e0e:	d126      	bne.n	8009e5e <__hexnan+0x12a>
 8009e10:	2301      	movs	r3, #1
 8009e12:	603b      	str	r3, [r7, #0]
 8009e14:	2005      	movs	r0, #5
 8009e16:	e025      	b.n	8009e64 <__hexnan+0x130>
 8009e18:	3501      	adds	r5, #1
 8009e1a:	2d08      	cmp	r5, #8
 8009e1c:	f10b 0b01 	add.w	fp, fp, #1
 8009e20:	dd06      	ble.n	8009e30 <__hexnan+0xfc>
 8009e22:	4544      	cmp	r4, r8
 8009e24:	d9c3      	bls.n	8009dae <__hexnan+0x7a>
 8009e26:	2300      	movs	r3, #0
 8009e28:	2501      	movs	r5, #1
 8009e2a:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e2e:	3c04      	subs	r4, #4
 8009e30:	6822      	ldr	r2, [r4, #0]
 8009e32:	f000 000f 	and.w	r0, r0, #15
 8009e36:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009e3a:	6020      	str	r0, [r4, #0]
 8009e3c:	e7b7      	b.n	8009dae <__hexnan+0x7a>
 8009e3e:	2508      	movs	r5, #8
 8009e40:	e7b5      	b.n	8009dae <__hexnan+0x7a>
 8009e42:	9b01      	ldr	r3, [sp, #4]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d0df      	beq.n	8009e08 <__hexnan+0xd4>
 8009e48:	f04f 32ff 	mov.w	r2, #4294967295
 8009e4c:	f1c3 0320 	rsb	r3, r3, #32
 8009e50:	40da      	lsrs	r2, r3
 8009e52:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009e56:	4013      	ands	r3, r2
 8009e58:	f846 3c04 	str.w	r3, [r6, #-4]
 8009e5c:	e7d4      	b.n	8009e08 <__hexnan+0xd4>
 8009e5e:	3f04      	subs	r7, #4
 8009e60:	e7d2      	b.n	8009e08 <__hexnan+0xd4>
 8009e62:	2004      	movs	r0, #4
 8009e64:	b007      	add	sp, #28
 8009e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08009e6c <malloc>:
 8009e6c:	4b02      	ldr	r3, [pc, #8]	; (8009e78 <malloc+0xc>)
 8009e6e:	4601      	mov	r1, r0
 8009e70:	6818      	ldr	r0, [r3, #0]
 8009e72:	f000 b823 	b.w	8009ebc <_malloc_r>
 8009e76:	bf00      	nop
 8009e78:	200001dc 	.word	0x200001dc

08009e7c <sbrk_aligned>:
 8009e7c:	b570      	push	{r4, r5, r6, lr}
 8009e7e:	4e0e      	ldr	r6, [pc, #56]	; (8009eb8 <sbrk_aligned+0x3c>)
 8009e80:	460c      	mov	r4, r1
 8009e82:	6831      	ldr	r1, [r6, #0]
 8009e84:	4605      	mov	r5, r0
 8009e86:	b911      	cbnz	r1, 8009e8e <sbrk_aligned+0x12>
 8009e88:	f000 ff7c 	bl	800ad84 <_sbrk_r>
 8009e8c:	6030      	str	r0, [r6, #0]
 8009e8e:	4621      	mov	r1, r4
 8009e90:	4628      	mov	r0, r5
 8009e92:	f000 ff77 	bl	800ad84 <_sbrk_r>
 8009e96:	1c43      	adds	r3, r0, #1
 8009e98:	d00a      	beq.n	8009eb0 <sbrk_aligned+0x34>
 8009e9a:	1cc4      	adds	r4, r0, #3
 8009e9c:	f024 0403 	bic.w	r4, r4, #3
 8009ea0:	42a0      	cmp	r0, r4
 8009ea2:	d007      	beq.n	8009eb4 <sbrk_aligned+0x38>
 8009ea4:	1a21      	subs	r1, r4, r0
 8009ea6:	4628      	mov	r0, r5
 8009ea8:	f000 ff6c 	bl	800ad84 <_sbrk_r>
 8009eac:	3001      	adds	r0, #1
 8009eae:	d101      	bne.n	8009eb4 <sbrk_aligned+0x38>
 8009eb0:	f04f 34ff 	mov.w	r4, #4294967295
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	bd70      	pop	{r4, r5, r6, pc}
 8009eb8:	20000cc4 	.word	0x20000cc4

08009ebc <_malloc_r>:
 8009ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ec0:	1ccd      	adds	r5, r1, #3
 8009ec2:	f025 0503 	bic.w	r5, r5, #3
 8009ec6:	3508      	adds	r5, #8
 8009ec8:	2d0c      	cmp	r5, #12
 8009eca:	bf38      	it	cc
 8009ecc:	250c      	movcc	r5, #12
 8009ece:	2d00      	cmp	r5, #0
 8009ed0:	4607      	mov	r7, r0
 8009ed2:	db01      	blt.n	8009ed8 <_malloc_r+0x1c>
 8009ed4:	42a9      	cmp	r1, r5
 8009ed6:	d905      	bls.n	8009ee4 <_malloc_r+0x28>
 8009ed8:	230c      	movs	r3, #12
 8009eda:	2600      	movs	r6, #0
 8009edc:	603b      	str	r3, [r7, #0]
 8009ede:	4630      	mov	r0, r6
 8009ee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ee4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009fb8 <_malloc_r+0xfc>
 8009ee8:	f000 f87a 	bl	8009fe0 <__malloc_lock>
 8009eec:	f8d8 3000 	ldr.w	r3, [r8]
 8009ef0:	461c      	mov	r4, r3
 8009ef2:	bb5c      	cbnz	r4, 8009f4c <_malloc_r+0x90>
 8009ef4:	4629      	mov	r1, r5
 8009ef6:	4638      	mov	r0, r7
 8009ef8:	f7ff ffc0 	bl	8009e7c <sbrk_aligned>
 8009efc:	1c43      	adds	r3, r0, #1
 8009efe:	4604      	mov	r4, r0
 8009f00:	d155      	bne.n	8009fae <_malloc_r+0xf2>
 8009f02:	f8d8 4000 	ldr.w	r4, [r8]
 8009f06:	4626      	mov	r6, r4
 8009f08:	2e00      	cmp	r6, #0
 8009f0a:	d145      	bne.n	8009f98 <_malloc_r+0xdc>
 8009f0c:	2c00      	cmp	r4, #0
 8009f0e:	d048      	beq.n	8009fa2 <_malloc_r+0xe6>
 8009f10:	6823      	ldr	r3, [r4, #0]
 8009f12:	4631      	mov	r1, r6
 8009f14:	4638      	mov	r0, r7
 8009f16:	eb04 0903 	add.w	r9, r4, r3
 8009f1a:	f000 ff33 	bl	800ad84 <_sbrk_r>
 8009f1e:	4581      	cmp	r9, r0
 8009f20:	d13f      	bne.n	8009fa2 <_malloc_r+0xe6>
 8009f22:	6821      	ldr	r1, [r4, #0]
 8009f24:	4638      	mov	r0, r7
 8009f26:	1a6d      	subs	r5, r5, r1
 8009f28:	4629      	mov	r1, r5
 8009f2a:	f7ff ffa7 	bl	8009e7c <sbrk_aligned>
 8009f2e:	3001      	adds	r0, #1
 8009f30:	d037      	beq.n	8009fa2 <_malloc_r+0xe6>
 8009f32:	6823      	ldr	r3, [r4, #0]
 8009f34:	442b      	add	r3, r5
 8009f36:	6023      	str	r3, [r4, #0]
 8009f38:	f8d8 3000 	ldr.w	r3, [r8]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d038      	beq.n	8009fb2 <_malloc_r+0xf6>
 8009f40:	685a      	ldr	r2, [r3, #4]
 8009f42:	42a2      	cmp	r2, r4
 8009f44:	d12b      	bne.n	8009f9e <_malloc_r+0xe2>
 8009f46:	2200      	movs	r2, #0
 8009f48:	605a      	str	r2, [r3, #4]
 8009f4a:	e00f      	b.n	8009f6c <_malloc_r+0xb0>
 8009f4c:	6822      	ldr	r2, [r4, #0]
 8009f4e:	1b52      	subs	r2, r2, r5
 8009f50:	d41f      	bmi.n	8009f92 <_malloc_r+0xd6>
 8009f52:	2a0b      	cmp	r2, #11
 8009f54:	d917      	bls.n	8009f86 <_malloc_r+0xca>
 8009f56:	1961      	adds	r1, r4, r5
 8009f58:	42a3      	cmp	r3, r4
 8009f5a:	6025      	str	r5, [r4, #0]
 8009f5c:	bf18      	it	ne
 8009f5e:	6059      	strne	r1, [r3, #4]
 8009f60:	6863      	ldr	r3, [r4, #4]
 8009f62:	bf08      	it	eq
 8009f64:	f8c8 1000 	streq.w	r1, [r8]
 8009f68:	5162      	str	r2, [r4, r5]
 8009f6a:	604b      	str	r3, [r1, #4]
 8009f6c:	4638      	mov	r0, r7
 8009f6e:	f104 060b 	add.w	r6, r4, #11
 8009f72:	f000 f83b 	bl	8009fec <__malloc_unlock>
 8009f76:	f026 0607 	bic.w	r6, r6, #7
 8009f7a:	1d23      	adds	r3, r4, #4
 8009f7c:	1af2      	subs	r2, r6, r3
 8009f7e:	d0ae      	beq.n	8009ede <_malloc_r+0x22>
 8009f80:	1b9b      	subs	r3, r3, r6
 8009f82:	50a3      	str	r3, [r4, r2]
 8009f84:	e7ab      	b.n	8009ede <_malloc_r+0x22>
 8009f86:	42a3      	cmp	r3, r4
 8009f88:	6862      	ldr	r2, [r4, #4]
 8009f8a:	d1dd      	bne.n	8009f48 <_malloc_r+0x8c>
 8009f8c:	f8c8 2000 	str.w	r2, [r8]
 8009f90:	e7ec      	b.n	8009f6c <_malloc_r+0xb0>
 8009f92:	4623      	mov	r3, r4
 8009f94:	6864      	ldr	r4, [r4, #4]
 8009f96:	e7ac      	b.n	8009ef2 <_malloc_r+0x36>
 8009f98:	4634      	mov	r4, r6
 8009f9a:	6876      	ldr	r6, [r6, #4]
 8009f9c:	e7b4      	b.n	8009f08 <_malloc_r+0x4c>
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	e7cc      	b.n	8009f3c <_malloc_r+0x80>
 8009fa2:	230c      	movs	r3, #12
 8009fa4:	4638      	mov	r0, r7
 8009fa6:	603b      	str	r3, [r7, #0]
 8009fa8:	f000 f820 	bl	8009fec <__malloc_unlock>
 8009fac:	e797      	b.n	8009ede <_malloc_r+0x22>
 8009fae:	6025      	str	r5, [r4, #0]
 8009fb0:	e7dc      	b.n	8009f6c <_malloc_r+0xb0>
 8009fb2:	605b      	str	r3, [r3, #4]
 8009fb4:	deff      	udf	#255	; 0xff
 8009fb6:	bf00      	nop
 8009fb8:	20000cc0 	.word	0x20000cc0

08009fbc <__ascii_mbtowc>:
 8009fbc:	b082      	sub	sp, #8
 8009fbe:	b901      	cbnz	r1, 8009fc2 <__ascii_mbtowc+0x6>
 8009fc0:	a901      	add	r1, sp, #4
 8009fc2:	b142      	cbz	r2, 8009fd6 <__ascii_mbtowc+0x1a>
 8009fc4:	b14b      	cbz	r3, 8009fda <__ascii_mbtowc+0x1e>
 8009fc6:	7813      	ldrb	r3, [r2, #0]
 8009fc8:	600b      	str	r3, [r1, #0]
 8009fca:	7812      	ldrb	r2, [r2, #0]
 8009fcc:	1e10      	subs	r0, r2, #0
 8009fce:	bf18      	it	ne
 8009fd0:	2001      	movne	r0, #1
 8009fd2:	b002      	add	sp, #8
 8009fd4:	4770      	bx	lr
 8009fd6:	4610      	mov	r0, r2
 8009fd8:	e7fb      	b.n	8009fd2 <__ascii_mbtowc+0x16>
 8009fda:	f06f 0001 	mvn.w	r0, #1
 8009fde:	e7f8      	b.n	8009fd2 <__ascii_mbtowc+0x16>

08009fe0 <__malloc_lock>:
 8009fe0:	4801      	ldr	r0, [pc, #4]	; (8009fe8 <__malloc_lock+0x8>)
 8009fe2:	f7fe bd0c 	b.w	80089fe <__retarget_lock_acquire_recursive>
 8009fe6:	bf00      	nop
 8009fe8:	20000cbc 	.word	0x20000cbc

08009fec <__malloc_unlock>:
 8009fec:	4801      	ldr	r0, [pc, #4]	; (8009ff4 <__malloc_unlock+0x8>)
 8009fee:	f7fe bd07 	b.w	8008a00 <__retarget_lock_release_recursive>
 8009ff2:	bf00      	nop
 8009ff4:	20000cbc 	.word	0x20000cbc

08009ff8 <_Balloc>:
 8009ff8:	b570      	push	{r4, r5, r6, lr}
 8009ffa:	69c6      	ldr	r6, [r0, #28]
 8009ffc:	4604      	mov	r4, r0
 8009ffe:	460d      	mov	r5, r1
 800a000:	b976      	cbnz	r6, 800a020 <_Balloc+0x28>
 800a002:	2010      	movs	r0, #16
 800a004:	f7ff ff32 	bl	8009e6c <malloc>
 800a008:	4602      	mov	r2, r0
 800a00a:	61e0      	str	r0, [r4, #28]
 800a00c:	b920      	cbnz	r0, 800a018 <_Balloc+0x20>
 800a00e:	216b      	movs	r1, #107	; 0x6b
 800a010:	4b17      	ldr	r3, [pc, #92]	; (800a070 <_Balloc+0x78>)
 800a012:	4818      	ldr	r0, [pc, #96]	; (800a074 <_Balloc+0x7c>)
 800a014:	f000 fec6 	bl	800ada4 <__assert_func>
 800a018:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a01c:	6006      	str	r6, [r0, #0]
 800a01e:	60c6      	str	r6, [r0, #12]
 800a020:	69e6      	ldr	r6, [r4, #28]
 800a022:	68f3      	ldr	r3, [r6, #12]
 800a024:	b183      	cbz	r3, 800a048 <_Balloc+0x50>
 800a026:	69e3      	ldr	r3, [r4, #28]
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a02e:	b9b8      	cbnz	r0, 800a060 <_Balloc+0x68>
 800a030:	2101      	movs	r1, #1
 800a032:	fa01 f605 	lsl.w	r6, r1, r5
 800a036:	1d72      	adds	r2, r6, #5
 800a038:	4620      	mov	r0, r4
 800a03a:	0092      	lsls	r2, r2, #2
 800a03c:	f000 fed0 	bl	800ade0 <_calloc_r>
 800a040:	b160      	cbz	r0, 800a05c <_Balloc+0x64>
 800a042:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a046:	e00e      	b.n	800a066 <_Balloc+0x6e>
 800a048:	2221      	movs	r2, #33	; 0x21
 800a04a:	2104      	movs	r1, #4
 800a04c:	4620      	mov	r0, r4
 800a04e:	f000 fec7 	bl	800ade0 <_calloc_r>
 800a052:	69e3      	ldr	r3, [r4, #28]
 800a054:	60f0      	str	r0, [r6, #12]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d1e4      	bne.n	800a026 <_Balloc+0x2e>
 800a05c:	2000      	movs	r0, #0
 800a05e:	bd70      	pop	{r4, r5, r6, pc}
 800a060:	6802      	ldr	r2, [r0, #0]
 800a062:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a066:	2300      	movs	r3, #0
 800a068:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a06c:	e7f7      	b.n	800a05e <_Balloc+0x66>
 800a06e:	bf00      	nop
 800a070:	0800d4f2 	.word	0x0800d4f2
 800a074:	0800d5d2 	.word	0x0800d5d2

0800a078 <_Bfree>:
 800a078:	b570      	push	{r4, r5, r6, lr}
 800a07a:	69c6      	ldr	r6, [r0, #28]
 800a07c:	4605      	mov	r5, r0
 800a07e:	460c      	mov	r4, r1
 800a080:	b976      	cbnz	r6, 800a0a0 <_Bfree+0x28>
 800a082:	2010      	movs	r0, #16
 800a084:	f7ff fef2 	bl	8009e6c <malloc>
 800a088:	4602      	mov	r2, r0
 800a08a:	61e8      	str	r0, [r5, #28]
 800a08c:	b920      	cbnz	r0, 800a098 <_Bfree+0x20>
 800a08e:	218f      	movs	r1, #143	; 0x8f
 800a090:	4b08      	ldr	r3, [pc, #32]	; (800a0b4 <_Bfree+0x3c>)
 800a092:	4809      	ldr	r0, [pc, #36]	; (800a0b8 <_Bfree+0x40>)
 800a094:	f000 fe86 	bl	800ada4 <__assert_func>
 800a098:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a09c:	6006      	str	r6, [r0, #0]
 800a09e:	60c6      	str	r6, [r0, #12]
 800a0a0:	b13c      	cbz	r4, 800a0b2 <_Bfree+0x3a>
 800a0a2:	69eb      	ldr	r3, [r5, #28]
 800a0a4:	6862      	ldr	r2, [r4, #4]
 800a0a6:	68db      	ldr	r3, [r3, #12]
 800a0a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a0ac:	6021      	str	r1, [r4, #0]
 800a0ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a0b2:	bd70      	pop	{r4, r5, r6, pc}
 800a0b4:	0800d4f2 	.word	0x0800d4f2
 800a0b8:	0800d5d2 	.word	0x0800d5d2

0800a0bc <__multadd>:
 800a0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0c0:	4607      	mov	r7, r0
 800a0c2:	460c      	mov	r4, r1
 800a0c4:	461e      	mov	r6, r3
 800a0c6:	2000      	movs	r0, #0
 800a0c8:	690d      	ldr	r5, [r1, #16]
 800a0ca:	f101 0c14 	add.w	ip, r1, #20
 800a0ce:	f8dc 3000 	ldr.w	r3, [ip]
 800a0d2:	3001      	adds	r0, #1
 800a0d4:	b299      	uxth	r1, r3
 800a0d6:	fb02 6101 	mla	r1, r2, r1, r6
 800a0da:	0c1e      	lsrs	r6, r3, #16
 800a0dc:	0c0b      	lsrs	r3, r1, #16
 800a0de:	fb02 3306 	mla	r3, r2, r6, r3
 800a0e2:	b289      	uxth	r1, r1
 800a0e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a0e8:	4285      	cmp	r5, r0
 800a0ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a0ee:	f84c 1b04 	str.w	r1, [ip], #4
 800a0f2:	dcec      	bgt.n	800a0ce <__multadd+0x12>
 800a0f4:	b30e      	cbz	r6, 800a13a <__multadd+0x7e>
 800a0f6:	68a3      	ldr	r3, [r4, #8]
 800a0f8:	42ab      	cmp	r3, r5
 800a0fa:	dc19      	bgt.n	800a130 <__multadd+0x74>
 800a0fc:	6861      	ldr	r1, [r4, #4]
 800a0fe:	4638      	mov	r0, r7
 800a100:	3101      	adds	r1, #1
 800a102:	f7ff ff79 	bl	8009ff8 <_Balloc>
 800a106:	4680      	mov	r8, r0
 800a108:	b928      	cbnz	r0, 800a116 <__multadd+0x5a>
 800a10a:	4602      	mov	r2, r0
 800a10c:	21ba      	movs	r1, #186	; 0xba
 800a10e:	4b0c      	ldr	r3, [pc, #48]	; (800a140 <__multadd+0x84>)
 800a110:	480c      	ldr	r0, [pc, #48]	; (800a144 <__multadd+0x88>)
 800a112:	f000 fe47 	bl	800ada4 <__assert_func>
 800a116:	6922      	ldr	r2, [r4, #16]
 800a118:	f104 010c 	add.w	r1, r4, #12
 800a11c:	3202      	adds	r2, #2
 800a11e:	0092      	lsls	r2, r2, #2
 800a120:	300c      	adds	r0, #12
 800a122:	f7fe fc7c 	bl	8008a1e <memcpy>
 800a126:	4621      	mov	r1, r4
 800a128:	4638      	mov	r0, r7
 800a12a:	f7ff ffa5 	bl	800a078 <_Bfree>
 800a12e:	4644      	mov	r4, r8
 800a130:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a134:	3501      	adds	r5, #1
 800a136:	615e      	str	r6, [r3, #20]
 800a138:	6125      	str	r5, [r4, #16]
 800a13a:	4620      	mov	r0, r4
 800a13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a140:	0800d561 	.word	0x0800d561
 800a144:	0800d5d2 	.word	0x0800d5d2

0800a148 <__s2b>:
 800a148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a14c:	4615      	mov	r5, r2
 800a14e:	2209      	movs	r2, #9
 800a150:	461f      	mov	r7, r3
 800a152:	3308      	adds	r3, #8
 800a154:	460c      	mov	r4, r1
 800a156:	fb93 f3f2 	sdiv	r3, r3, r2
 800a15a:	4606      	mov	r6, r0
 800a15c:	2201      	movs	r2, #1
 800a15e:	2100      	movs	r1, #0
 800a160:	429a      	cmp	r2, r3
 800a162:	db09      	blt.n	800a178 <__s2b+0x30>
 800a164:	4630      	mov	r0, r6
 800a166:	f7ff ff47 	bl	8009ff8 <_Balloc>
 800a16a:	b940      	cbnz	r0, 800a17e <__s2b+0x36>
 800a16c:	4602      	mov	r2, r0
 800a16e:	21d3      	movs	r1, #211	; 0xd3
 800a170:	4b18      	ldr	r3, [pc, #96]	; (800a1d4 <__s2b+0x8c>)
 800a172:	4819      	ldr	r0, [pc, #100]	; (800a1d8 <__s2b+0x90>)
 800a174:	f000 fe16 	bl	800ada4 <__assert_func>
 800a178:	0052      	lsls	r2, r2, #1
 800a17a:	3101      	adds	r1, #1
 800a17c:	e7f0      	b.n	800a160 <__s2b+0x18>
 800a17e:	9b08      	ldr	r3, [sp, #32]
 800a180:	2d09      	cmp	r5, #9
 800a182:	6143      	str	r3, [r0, #20]
 800a184:	f04f 0301 	mov.w	r3, #1
 800a188:	6103      	str	r3, [r0, #16]
 800a18a:	dd16      	ble.n	800a1ba <__s2b+0x72>
 800a18c:	f104 0909 	add.w	r9, r4, #9
 800a190:	46c8      	mov	r8, r9
 800a192:	442c      	add	r4, r5
 800a194:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a198:	4601      	mov	r1, r0
 800a19a:	220a      	movs	r2, #10
 800a19c:	4630      	mov	r0, r6
 800a19e:	3b30      	subs	r3, #48	; 0x30
 800a1a0:	f7ff ff8c 	bl	800a0bc <__multadd>
 800a1a4:	45a0      	cmp	r8, r4
 800a1a6:	d1f5      	bne.n	800a194 <__s2b+0x4c>
 800a1a8:	f1a5 0408 	sub.w	r4, r5, #8
 800a1ac:	444c      	add	r4, r9
 800a1ae:	1b2d      	subs	r5, r5, r4
 800a1b0:	1963      	adds	r3, r4, r5
 800a1b2:	42bb      	cmp	r3, r7
 800a1b4:	db04      	blt.n	800a1c0 <__s2b+0x78>
 800a1b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1ba:	2509      	movs	r5, #9
 800a1bc:	340a      	adds	r4, #10
 800a1be:	e7f6      	b.n	800a1ae <__s2b+0x66>
 800a1c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a1c4:	4601      	mov	r1, r0
 800a1c6:	220a      	movs	r2, #10
 800a1c8:	4630      	mov	r0, r6
 800a1ca:	3b30      	subs	r3, #48	; 0x30
 800a1cc:	f7ff ff76 	bl	800a0bc <__multadd>
 800a1d0:	e7ee      	b.n	800a1b0 <__s2b+0x68>
 800a1d2:	bf00      	nop
 800a1d4:	0800d561 	.word	0x0800d561
 800a1d8:	0800d5d2 	.word	0x0800d5d2

0800a1dc <__hi0bits>:
 800a1dc:	0c02      	lsrs	r2, r0, #16
 800a1de:	0412      	lsls	r2, r2, #16
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	b9ca      	cbnz	r2, 800a218 <__hi0bits+0x3c>
 800a1e4:	0403      	lsls	r3, r0, #16
 800a1e6:	2010      	movs	r0, #16
 800a1e8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a1ec:	bf04      	itt	eq
 800a1ee:	021b      	lsleq	r3, r3, #8
 800a1f0:	3008      	addeq	r0, #8
 800a1f2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a1f6:	bf04      	itt	eq
 800a1f8:	011b      	lsleq	r3, r3, #4
 800a1fa:	3004      	addeq	r0, #4
 800a1fc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a200:	bf04      	itt	eq
 800a202:	009b      	lsleq	r3, r3, #2
 800a204:	3002      	addeq	r0, #2
 800a206:	2b00      	cmp	r3, #0
 800a208:	db05      	blt.n	800a216 <__hi0bits+0x3a>
 800a20a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a20e:	f100 0001 	add.w	r0, r0, #1
 800a212:	bf08      	it	eq
 800a214:	2020      	moveq	r0, #32
 800a216:	4770      	bx	lr
 800a218:	2000      	movs	r0, #0
 800a21a:	e7e5      	b.n	800a1e8 <__hi0bits+0xc>

0800a21c <__lo0bits>:
 800a21c:	6803      	ldr	r3, [r0, #0]
 800a21e:	4602      	mov	r2, r0
 800a220:	f013 0007 	ands.w	r0, r3, #7
 800a224:	d00b      	beq.n	800a23e <__lo0bits+0x22>
 800a226:	07d9      	lsls	r1, r3, #31
 800a228:	d421      	bmi.n	800a26e <__lo0bits+0x52>
 800a22a:	0798      	lsls	r0, r3, #30
 800a22c:	bf49      	itett	mi
 800a22e:	085b      	lsrmi	r3, r3, #1
 800a230:	089b      	lsrpl	r3, r3, #2
 800a232:	2001      	movmi	r0, #1
 800a234:	6013      	strmi	r3, [r2, #0]
 800a236:	bf5c      	itt	pl
 800a238:	2002      	movpl	r0, #2
 800a23a:	6013      	strpl	r3, [r2, #0]
 800a23c:	4770      	bx	lr
 800a23e:	b299      	uxth	r1, r3
 800a240:	b909      	cbnz	r1, 800a246 <__lo0bits+0x2a>
 800a242:	2010      	movs	r0, #16
 800a244:	0c1b      	lsrs	r3, r3, #16
 800a246:	b2d9      	uxtb	r1, r3
 800a248:	b909      	cbnz	r1, 800a24e <__lo0bits+0x32>
 800a24a:	3008      	adds	r0, #8
 800a24c:	0a1b      	lsrs	r3, r3, #8
 800a24e:	0719      	lsls	r1, r3, #28
 800a250:	bf04      	itt	eq
 800a252:	091b      	lsreq	r3, r3, #4
 800a254:	3004      	addeq	r0, #4
 800a256:	0799      	lsls	r1, r3, #30
 800a258:	bf04      	itt	eq
 800a25a:	089b      	lsreq	r3, r3, #2
 800a25c:	3002      	addeq	r0, #2
 800a25e:	07d9      	lsls	r1, r3, #31
 800a260:	d403      	bmi.n	800a26a <__lo0bits+0x4e>
 800a262:	085b      	lsrs	r3, r3, #1
 800a264:	f100 0001 	add.w	r0, r0, #1
 800a268:	d003      	beq.n	800a272 <__lo0bits+0x56>
 800a26a:	6013      	str	r3, [r2, #0]
 800a26c:	4770      	bx	lr
 800a26e:	2000      	movs	r0, #0
 800a270:	4770      	bx	lr
 800a272:	2020      	movs	r0, #32
 800a274:	4770      	bx	lr
	...

0800a278 <__i2b>:
 800a278:	b510      	push	{r4, lr}
 800a27a:	460c      	mov	r4, r1
 800a27c:	2101      	movs	r1, #1
 800a27e:	f7ff febb 	bl	8009ff8 <_Balloc>
 800a282:	4602      	mov	r2, r0
 800a284:	b928      	cbnz	r0, 800a292 <__i2b+0x1a>
 800a286:	f240 1145 	movw	r1, #325	; 0x145
 800a28a:	4b04      	ldr	r3, [pc, #16]	; (800a29c <__i2b+0x24>)
 800a28c:	4804      	ldr	r0, [pc, #16]	; (800a2a0 <__i2b+0x28>)
 800a28e:	f000 fd89 	bl	800ada4 <__assert_func>
 800a292:	2301      	movs	r3, #1
 800a294:	6144      	str	r4, [r0, #20]
 800a296:	6103      	str	r3, [r0, #16]
 800a298:	bd10      	pop	{r4, pc}
 800a29a:	bf00      	nop
 800a29c:	0800d561 	.word	0x0800d561
 800a2a0:	0800d5d2 	.word	0x0800d5d2

0800a2a4 <__multiply>:
 800a2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a8:	4691      	mov	r9, r2
 800a2aa:	690a      	ldr	r2, [r1, #16]
 800a2ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a2b0:	460c      	mov	r4, r1
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	bfbe      	ittt	lt
 800a2b6:	460b      	movlt	r3, r1
 800a2b8:	464c      	movlt	r4, r9
 800a2ba:	4699      	movlt	r9, r3
 800a2bc:	6927      	ldr	r7, [r4, #16]
 800a2be:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a2c2:	68a3      	ldr	r3, [r4, #8]
 800a2c4:	6861      	ldr	r1, [r4, #4]
 800a2c6:	eb07 060a 	add.w	r6, r7, sl
 800a2ca:	42b3      	cmp	r3, r6
 800a2cc:	b085      	sub	sp, #20
 800a2ce:	bfb8      	it	lt
 800a2d0:	3101      	addlt	r1, #1
 800a2d2:	f7ff fe91 	bl	8009ff8 <_Balloc>
 800a2d6:	b930      	cbnz	r0, 800a2e6 <__multiply+0x42>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a2de:	4b43      	ldr	r3, [pc, #268]	; (800a3ec <__multiply+0x148>)
 800a2e0:	4843      	ldr	r0, [pc, #268]	; (800a3f0 <__multiply+0x14c>)
 800a2e2:	f000 fd5f 	bl	800ada4 <__assert_func>
 800a2e6:	f100 0514 	add.w	r5, r0, #20
 800a2ea:	462b      	mov	r3, r5
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a2f2:	4543      	cmp	r3, r8
 800a2f4:	d321      	bcc.n	800a33a <__multiply+0x96>
 800a2f6:	f104 0314 	add.w	r3, r4, #20
 800a2fa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a2fe:	f109 0314 	add.w	r3, r9, #20
 800a302:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a306:	9202      	str	r2, [sp, #8]
 800a308:	1b3a      	subs	r2, r7, r4
 800a30a:	3a15      	subs	r2, #21
 800a30c:	f022 0203 	bic.w	r2, r2, #3
 800a310:	3204      	adds	r2, #4
 800a312:	f104 0115 	add.w	r1, r4, #21
 800a316:	428f      	cmp	r7, r1
 800a318:	bf38      	it	cc
 800a31a:	2204      	movcc	r2, #4
 800a31c:	9201      	str	r2, [sp, #4]
 800a31e:	9a02      	ldr	r2, [sp, #8]
 800a320:	9303      	str	r3, [sp, #12]
 800a322:	429a      	cmp	r2, r3
 800a324:	d80c      	bhi.n	800a340 <__multiply+0x9c>
 800a326:	2e00      	cmp	r6, #0
 800a328:	dd03      	ble.n	800a332 <__multiply+0x8e>
 800a32a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d05a      	beq.n	800a3e8 <__multiply+0x144>
 800a332:	6106      	str	r6, [r0, #16]
 800a334:	b005      	add	sp, #20
 800a336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a33a:	f843 2b04 	str.w	r2, [r3], #4
 800a33e:	e7d8      	b.n	800a2f2 <__multiply+0x4e>
 800a340:	f8b3 a000 	ldrh.w	sl, [r3]
 800a344:	f1ba 0f00 	cmp.w	sl, #0
 800a348:	d023      	beq.n	800a392 <__multiply+0xee>
 800a34a:	46a9      	mov	r9, r5
 800a34c:	f04f 0c00 	mov.w	ip, #0
 800a350:	f104 0e14 	add.w	lr, r4, #20
 800a354:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a358:	f8d9 1000 	ldr.w	r1, [r9]
 800a35c:	fa1f fb82 	uxth.w	fp, r2
 800a360:	b289      	uxth	r1, r1
 800a362:	fb0a 110b 	mla	r1, sl, fp, r1
 800a366:	4461      	add	r1, ip
 800a368:	f8d9 c000 	ldr.w	ip, [r9]
 800a36c:	0c12      	lsrs	r2, r2, #16
 800a36e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a372:	fb0a c202 	mla	r2, sl, r2, ip
 800a376:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a37a:	b289      	uxth	r1, r1
 800a37c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a380:	4577      	cmp	r7, lr
 800a382:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a386:	f849 1b04 	str.w	r1, [r9], #4
 800a38a:	d8e3      	bhi.n	800a354 <__multiply+0xb0>
 800a38c:	9a01      	ldr	r2, [sp, #4]
 800a38e:	f845 c002 	str.w	ip, [r5, r2]
 800a392:	9a03      	ldr	r2, [sp, #12]
 800a394:	3304      	adds	r3, #4
 800a396:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a39a:	f1b9 0f00 	cmp.w	r9, #0
 800a39e:	d021      	beq.n	800a3e4 <__multiply+0x140>
 800a3a0:	46ae      	mov	lr, r5
 800a3a2:	f04f 0a00 	mov.w	sl, #0
 800a3a6:	6829      	ldr	r1, [r5, #0]
 800a3a8:	f104 0c14 	add.w	ip, r4, #20
 800a3ac:	f8bc b000 	ldrh.w	fp, [ip]
 800a3b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a3b4:	b289      	uxth	r1, r1
 800a3b6:	fb09 220b 	mla	r2, r9, fp, r2
 800a3ba:	4452      	add	r2, sl
 800a3bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a3c0:	f84e 1b04 	str.w	r1, [lr], #4
 800a3c4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a3c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a3cc:	f8be 1000 	ldrh.w	r1, [lr]
 800a3d0:	4567      	cmp	r7, ip
 800a3d2:	fb09 110a 	mla	r1, r9, sl, r1
 800a3d6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a3da:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a3de:	d8e5      	bhi.n	800a3ac <__multiply+0x108>
 800a3e0:	9a01      	ldr	r2, [sp, #4]
 800a3e2:	50a9      	str	r1, [r5, r2]
 800a3e4:	3504      	adds	r5, #4
 800a3e6:	e79a      	b.n	800a31e <__multiply+0x7a>
 800a3e8:	3e01      	subs	r6, #1
 800a3ea:	e79c      	b.n	800a326 <__multiply+0x82>
 800a3ec:	0800d561 	.word	0x0800d561
 800a3f0:	0800d5d2 	.word	0x0800d5d2

0800a3f4 <__pow5mult>:
 800a3f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3f8:	4615      	mov	r5, r2
 800a3fa:	f012 0203 	ands.w	r2, r2, #3
 800a3fe:	4606      	mov	r6, r0
 800a400:	460f      	mov	r7, r1
 800a402:	d007      	beq.n	800a414 <__pow5mult+0x20>
 800a404:	4c25      	ldr	r4, [pc, #148]	; (800a49c <__pow5mult+0xa8>)
 800a406:	3a01      	subs	r2, #1
 800a408:	2300      	movs	r3, #0
 800a40a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a40e:	f7ff fe55 	bl	800a0bc <__multadd>
 800a412:	4607      	mov	r7, r0
 800a414:	10ad      	asrs	r5, r5, #2
 800a416:	d03d      	beq.n	800a494 <__pow5mult+0xa0>
 800a418:	69f4      	ldr	r4, [r6, #28]
 800a41a:	b97c      	cbnz	r4, 800a43c <__pow5mult+0x48>
 800a41c:	2010      	movs	r0, #16
 800a41e:	f7ff fd25 	bl	8009e6c <malloc>
 800a422:	4602      	mov	r2, r0
 800a424:	61f0      	str	r0, [r6, #28]
 800a426:	b928      	cbnz	r0, 800a434 <__pow5mult+0x40>
 800a428:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a42c:	4b1c      	ldr	r3, [pc, #112]	; (800a4a0 <__pow5mult+0xac>)
 800a42e:	481d      	ldr	r0, [pc, #116]	; (800a4a4 <__pow5mult+0xb0>)
 800a430:	f000 fcb8 	bl	800ada4 <__assert_func>
 800a434:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a438:	6004      	str	r4, [r0, #0]
 800a43a:	60c4      	str	r4, [r0, #12]
 800a43c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a440:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a444:	b94c      	cbnz	r4, 800a45a <__pow5mult+0x66>
 800a446:	f240 2171 	movw	r1, #625	; 0x271
 800a44a:	4630      	mov	r0, r6
 800a44c:	f7ff ff14 	bl	800a278 <__i2b>
 800a450:	2300      	movs	r3, #0
 800a452:	4604      	mov	r4, r0
 800a454:	f8c8 0008 	str.w	r0, [r8, #8]
 800a458:	6003      	str	r3, [r0, #0]
 800a45a:	f04f 0900 	mov.w	r9, #0
 800a45e:	07eb      	lsls	r3, r5, #31
 800a460:	d50a      	bpl.n	800a478 <__pow5mult+0x84>
 800a462:	4639      	mov	r1, r7
 800a464:	4622      	mov	r2, r4
 800a466:	4630      	mov	r0, r6
 800a468:	f7ff ff1c 	bl	800a2a4 <__multiply>
 800a46c:	4680      	mov	r8, r0
 800a46e:	4639      	mov	r1, r7
 800a470:	4630      	mov	r0, r6
 800a472:	f7ff fe01 	bl	800a078 <_Bfree>
 800a476:	4647      	mov	r7, r8
 800a478:	106d      	asrs	r5, r5, #1
 800a47a:	d00b      	beq.n	800a494 <__pow5mult+0xa0>
 800a47c:	6820      	ldr	r0, [r4, #0]
 800a47e:	b938      	cbnz	r0, 800a490 <__pow5mult+0x9c>
 800a480:	4622      	mov	r2, r4
 800a482:	4621      	mov	r1, r4
 800a484:	4630      	mov	r0, r6
 800a486:	f7ff ff0d 	bl	800a2a4 <__multiply>
 800a48a:	6020      	str	r0, [r4, #0]
 800a48c:	f8c0 9000 	str.w	r9, [r0]
 800a490:	4604      	mov	r4, r0
 800a492:	e7e4      	b.n	800a45e <__pow5mult+0x6a>
 800a494:	4638      	mov	r0, r7
 800a496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a49a:	bf00      	nop
 800a49c:	0800d720 	.word	0x0800d720
 800a4a0:	0800d4f2 	.word	0x0800d4f2
 800a4a4:	0800d5d2 	.word	0x0800d5d2

0800a4a8 <__lshift>:
 800a4a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4ac:	460c      	mov	r4, r1
 800a4ae:	4607      	mov	r7, r0
 800a4b0:	4691      	mov	r9, r2
 800a4b2:	6923      	ldr	r3, [r4, #16]
 800a4b4:	6849      	ldr	r1, [r1, #4]
 800a4b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a4ba:	68a3      	ldr	r3, [r4, #8]
 800a4bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a4c0:	f108 0601 	add.w	r6, r8, #1
 800a4c4:	42b3      	cmp	r3, r6
 800a4c6:	db0b      	blt.n	800a4e0 <__lshift+0x38>
 800a4c8:	4638      	mov	r0, r7
 800a4ca:	f7ff fd95 	bl	8009ff8 <_Balloc>
 800a4ce:	4605      	mov	r5, r0
 800a4d0:	b948      	cbnz	r0, 800a4e6 <__lshift+0x3e>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a4d8:	4b27      	ldr	r3, [pc, #156]	; (800a578 <__lshift+0xd0>)
 800a4da:	4828      	ldr	r0, [pc, #160]	; (800a57c <__lshift+0xd4>)
 800a4dc:	f000 fc62 	bl	800ada4 <__assert_func>
 800a4e0:	3101      	adds	r1, #1
 800a4e2:	005b      	lsls	r3, r3, #1
 800a4e4:	e7ee      	b.n	800a4c4 <__lshift+0x1c>
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	f100 0114 	add.w	r1, r0, #20
 800a4ec:	f100 0210 	add.w	r2, r0, #16
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	4553      	cmp	r3, sl
 800a4f4:	db33      	blt.n	800a55e <__lshift+0xb6>
 800a4f6:	6920      	ldr	r0, [r4, #16]
 800a4f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a4fc:	f104 0314 	add.w	r3, r4, #20
 800a500:	f019 091f 	ands.w	r9, r9, #31
 800a504:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a508:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a50c:	d02b      	beq.n	800a566 <__lshift+0xbe>
 800a50e:	468a      	mov	sl, r1
 800a510:	2200      	movs	r2, #0
 800a512:	f1c9 0e20 	rsb	lr, r9, #32
 800a516:	6818      	ldr	r0, [r3, #0]
 800a518:	fa00 f009 	lsl.w	r0, r0, r9
 800a51c:	4310      	orrs	r0, r2
 800a51e:	f84a 0b04 	str.w	r0, [sl], #4
 800a522:	f853 2b04 	ldr.w	r2, [r3], #4
 800a526:	459c      	cmp	ip, r3
 800a528:	fa22 f20e 	lsr.w	r2, r2, lr
 800a52c:	d8f3      	bhi.n	800a516 <__lshift+0x6e>
 800a52e:	ebac 0304 	sub.w	r3, ip, r4
 800a532:	3b15      	subs	r3, #21
 800a534:	f023 0303 	bic.w	r3, r3, #3
 800a538:	3304      	adds	r3, #4
 800a53a:	f104 0015 	add.w	r0, r4, #21
 800a53e:	4584      	cmp	ip, r0
 800a540:	bf38      	it	cc
 800a542:	2304      	movcc	r3, #4
 800a544:	50ca      	str	r2, [r1, r3]
 800a546:	b10a      	cbz	r2, 800a54c <__lshift+0xa4>
 800a548:	f108 0602 	add.w	r6, r8, #2
 800a54c:	3e01      	subs	r6, #1
 800a54e:	4638      	mov	r0, r7
 800a550:	4621      	mov	r1, r4
 800a552:	612e      	str	r6, [r5, #16]
 800a554:	f7ff fd90 	bl	800a078 <_Bfree>
 800a558:	4628      	mov	r0, r5
 800a55a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a55e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a562:	3301      	adds	r3, #1
 800a564:	e7c5      	b.n	800a4f2 <__lshift+0x4a>
 800a566:	3904      	subs	r1, #4
 800a568:	f853 2b04 	ldr.w	r2, [r3], #4
 800a56c:	459c      	cmp	ip, r3
 800a56e:	f841 2f04 	str.w	r2, [r1, #4]!
 800a572:	d8f9      	bhi.n	800a568 <__lshift+0xc0>
 800a574:	e7ea      	b.n	800a54c <__lshift+0xa4>
 800a576:	bf00      	nop
 800a578:	0800d561 	.word	0x0800d561
 800a57c:	0800d5d2 	.word	0x0800d5d2

0800a580 <__mcmp>:
 800a580:	4603      	mov	r3, r0
 800a582:	690a      	ldr	r2, [r1, #16]
 800a584:	6900      	ldr	r0, [r0, #16]
 800a586:	b530      	push	{r4, r5, lr}
 800a588:	1a80      	subs	r0, r0, r2
 800a58a:	d10d      	bne.n	800a5a8 <__mcmp+0x28>
 800a58c:	3314      	adds	r3, #20
 800a58e:	3114      	adds	r1, #20
 800a590:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a594:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a598:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a59c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a5a0:	4295      	cmp	r5, r2
 800a5a2:	d002      	beq.n	800a5aa <__mcmp+0x2a>
 800a5a4:	d304      	bcc.n	800a5b0 <__mcmp+0x30>
 800a5a6:	2001      	movs	r0, #1
 800a5a8:	bd30      	pop	{r4, r5, pc}
 800a5aa:	42a3      	cmp	r3, r4
 800a5ac:	d3f4      	bcc.n	800a598 <__mcmp+0x18>
 800a5ae:	e7fb      	b.n	800a5a8 <__mcmp+0x28>
 800a5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b4:	e7f8      	b.n	800a5a8 <__mcmp+0x28>
	...

0800a5b8 <__mdiff>:
 800a5b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5bc:	460d      	mov	r5, r1
 800a5be:	4607      	mov	r7, r0
 800a5c0:	4611      	mov	r1, r2
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	4614      	mov	r4, r2
 800a5c6:	f7ff ffdb 	bl	800a580 <__mcmp>
 800a5ca:	1e06      	subs	r6, r0, #0
 800a5cc:	d111      	bne.n	800a5f2 <__mdiff+0x3a>
 800a5ce:	4631      	mov	r1, r6
 800a5d0:	4638      	mov	r0, r7
 800a5d2:	f7ff fd11 	bl	8009ff8 <_Balloc>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	b928      	cbnz	r0, 800a5e6 <__mdiff+0x2e>
 800a5da:	f240 2137 	movw	r1, #567	; 0x237
 800a5de:	4b3a      	ldr	r3, [pc, #232]	; (800a6c8 <__mdiff+0x110>)
 800a5e0:	483a      	ldr	r0, [pc, #232]	; (800a6cc <__mdiff+0x114>)
 800a5e2:	f000 fbdf 	bl	800ada4 <__assert_func>
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a5ec:	4610      	mov	r0, r2
 800a5ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5f2:	bfa4      	itt	ge
 800a5f4:	4623      	movge	r3, r4
 800a5f6:	462c      	movge	r4, r5
 800a5f8:	4638      	mov	r0, r7
 800a5fa:	6861      	ldr	r1, [r4, #4]
 800a5fc:	bfa6      	itte	ge
 800a5fe:	461d      	movge	r5, r3
 800a600:	2600      	movge	r6, #0
 800a602:	2601      	movlt	r6, #1
 800a604:	f7ff fcf8 	bl	8009ff8 <_Balloc>
 800a608:	4602      	mov	r2, r0
 800a60a:	b918      	cbnz	r0, 800a614 <__mdiff+0x5c>
 800a60c:	f240 2145 	movw	r1, #581	; 0x245
 800a610:	4b2d      	ldr	r3, [pc, #180]	; (800a6c8 <__mdiff+0x110>)
 800a612:	e7e5      	b.n	800a5e0 <__mdiff+0x28>
 800a614:	f102 0814 	add.w	r8, r2, #20
 800a618:	46c2      	mov	sl, r8
 800a61a:	f04f 0c00 	mov.w	ip, #0
 800a61e:	6927      	ldr	r7, [r4, #16]
 800a620:	60c6      	str	r6, [r0, #12]
 800a622:	692e      	ldr	r6, [r5, #16]
 800a624:	f104 0014 	add.w	r0, r4, #20
 800a628:	f105 0914 	add.w	r9, r5, #20
 800a62c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a630:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a634:	3410      	adds	r4, #16
 800a636:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a63a:	f859 3b04 	ldr.w	r3, [r9], #4
 800a63e:	fa1f f18b 	uxth.w	r1, fp
 800a642:	4461      	add	r1, ip
 800a644:	fa1f fc83 	uxth.w	ip, r3
 800a648:	0c1b      	lsrs	r3, r3, #16
 800a64a:	eba1 010c 	sub.w	r1, r1, ip
 800a64e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a652:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a656:	b289      	uxth	r1, r1
 800a658:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800a65c:	454e      	cmp	r6, r9
 800a65e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a662:	f84a 1b04 	str.w	r1, [sl], #4
 800a666:	d8e6      	bhi.n	800a636 <__mdiff+0x7e>
 800a668:	1b73      	subs	r3, r6, r5
 800a66a:	3b15      	subs	r3, #21
 800a66c:	f023 0303 	bic.w	r3, r3, #3
 800a670:	3515      	adds	r5, #21
 800a672:	3304      	adds	r3, #4
 800a674:	42ae      	cmp	r6, r5
 800a676:	bf38      	it	cc
 800a678:	2304      	movcc	r3, #4
 800a67a:	4418      	add	r0, r3
 800a67c:	4443      	add	r3, r8
 800a67e:	461e      	mov	r6, r3
 800a680:	4605      	mov	r5, r0
 800a682:	4575      	cmp	r5, lr
 800a684:	d30e      	bcc.n	800a6a4 <__mdiff+0xec>
 800a686:	f10e 0103 	add.w	r1, lr, #3
 800a68a:	1a09      	subs	r1, r1, r0
 800a68c:	f021 0103 	bic.w	r1, r1, #3
 800a690:	3803      	subs	r0, #3
 800a692:	4586      	cmp	lr, r0
 800a694:	bf38      	it	cc
 800a696:	2100      	movcc	r1, #0
 800a698:	440b      	add	r3, r1
 800a69a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a69e:	b189      	cbz	r1, 800a6c4 <__mdiff+0x10c>
 800a6a0:	6117      	str	r7, [r2, #16]
 800a6a2:	e7a3      	b.n	800a5ec <__mdiff+0x34>
 800a6a4:	f855 8b04 	ldr.w	r8, [r5], #4
 800a6a8:	fa1f f188 	uxth.w	r1, r8
 800a6ac:	4461      	add	r1, ip
 800a6ae:	140c      	asrs	r4, r1, #16
 800a6b0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a6b4:	b289      	uxth	r1, r1
 800a6b6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a6ba:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a6be:	f846 1b04 	str.w	r1, [r6], #4
 800a6c2:	e7de      	b.n	800a682 <__mdiff+0xca>
 800a6c4:	3f01      	subs	r7, #1
 800a6c6:	e7e8      	b.n	800a69a <__mdiff+0xe2>
 800a6c8:	0800d561 	.word	0x0800d561
 800a6cc:	0800d5d2 	.word	0x0800d5d2

0800a6d0 <__ulp>:
 800a6d0:	4b0e      	ldr	r3, [pc, #56]	; (800a70c <__ulp+0x3c>)
 800a6d2:	400b      	ands	r3, r1
 800a6d4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	dc08      	bgt.n	800a6ee <__ulp+0x1e>
 800a6dc:	425b      	negs	r3, r3
 800a6de:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a6e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a6e6:	da04      	bge.n	800a6f2 <__ulp+0x22>
 800a6e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a6ec:	4113      	asrs	r3, r2
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	e008      	b.n	800a704 <__ulp+0x34>
 800a6f2:	f1a2 0314 	sub.w	r3, r2, #20
 800a6f6:	2b1e      	cmp	r3, #30
 800a6f8:	bfd6      	itet	le
 800a6fa:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a6fe:	2201      	movgt	r2, #1
 800a700:	40da      	lsrle	r2, r3
 800a702:	2300      	movs	r3, #0
 800a704:	4619      	mov	r1, r3
 800a706:	4610      	mov	r0, r2
 800a708:	4770      	bx	lr
 800a70a:	bf00      	nop
 800a70c:	7ff00000 	.word	0x7ff00000

0800a710 <__b2d>:
 800a710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a712:	6905      	ldr	r5, [r0, #16]
 800a714:	f100 0714 	add.w	r7, r0, #20
 800a718:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a71c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a720:	1f2e      	subs	r6, r5, #4
 800a722:	4620      	mov	r0, r4
 800a724:	f7ff fd5a 	bl	800a1dc <__hi0bits>
 800a728:	f1c0 0220 	rsb	r2, r0, #32
 800a72c:	280a      	cmp	r0, #10
 800a72e:	4603      	mov	r3, r0
 800a730:	f8df c068 	ldr.w	ip, [pc, #104]	; 800a79c <__b2d+0x8c>
 800a734:	600a      	str	r2, [r1, #0]
 800a736:	dc12      	bgt.n	800a75e <__b2d+0x4e>
 800a738:	f1c0 0e0b 	rsb	lr, r0, #11
 800a73c:	fa24 f20e 	lsr.w	r2, r4, lr
 800a740:	42b7      	cmp	r7, r6
 800a742:	ea42 010c 	orr.w	r1, r2, ip
 800a746:	bf2c      	ite	cs
 800a748:	2200      	movcs	r2, #0
 800a74a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800a74e:	3315      	adds	r3, #21
 800a750:	fa04 f303 	lsl.w	r3, r4, r3
 800a754:	fa22 f20e 	lsr.w	r2, r2, lr
 800a758:	431a      	orrs	r2, r3
 800a75a:	4610      	mov	r0, r2
 800a75c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a75e:	42b7      	cmp	r7, r6
 800a760:	bf2e      	itee	cs
 800a762:	2200      	movcs	r2, #0
 800a764:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800a768:	f1a5 0608 	subcc.w	r6, r5, #8
 800a76c:	3b0b      	subs	r3, #11
 800a76e:	d012      	beq.n	800a796 <__b2d+0x86>
 800a770:	f1c3 0520 	rsb	r5, r3, #32
 800a774:	fa22 f105 	lsr.w	r1, r2, r5
 800a778:	409c      	lsls	r4, r3
 800a77a:	430c      	orrs	r4, r1
 800a77c:	42be      	cmp	r6, r7
 800a77e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800a782:	bf94      	ite	ls
 800a784:	2400      	movls	r4, #0
 800a786:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a78a:	409a      	lsls	r2, r3
 800a78c:	40ec      	lsrs	r4, r5
 800a78e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a792:	4322      	orrs	r2, r4
 800a794:	e7e1      	b.n	800a75a <__b2d+0x4a>
 800a796:	ea44 010c 	orr.w	r1, r4, ip
 800a79a:	e7de      	b.n	800a75a <__b2d+0x4a>
 800a79c:	3ff00000 	.word	0x3ff00000

0800a7a0 <__d2b>:
 800a7a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7a2:	2101      	movs	r1, #1
 800a7a4:	4617      	mov	r7, r2
 800a7a6:	461c      	mov	r4, r3
 800a7a8:	9e08      	ldr	r6, [sp, #32]
 800a7aa:	f7ff fc25 	bl	8009ff8 <_Balloc>
 800a7ae:	4605      	mov	r5, r0
 800a7b0:	b930      	cbnz	r0, 800a7c0 <__d2b+0x20>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	f240 310f 	movw	r1, #783	; 0x30f
 800a7b8:	4b22      	ldr	r3, [pc, #136]	; (800a844 <__d2b+0xa4>)
 800a7ba:	4823      	ldr	r0, [pc, #140]	; (800a848 <__d2b+0xa8>)
 800a7bc:	f000 faf2 	bl	800ada4 <__assert_func>
 800a7c0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a7c4:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800a7c8:	bb24      	cbnz	r4, 800a814 <__d2b+0x74>
 800a7ca:	2f00      	cmp	r7, #0
 800a7cc:	9301      	str	r3, [sp, #4]
 800a7ce:	d026      	beq.n	800a81e <__d2b+0x7e>
 800a7d0:	4668      	mov	r0, sp
 800a7d2:	9700      	str	r7, [sp, #0]
 800a7d4:	f7ff fd22 	bl	800a21c <__lo0bits>
 800a7d8:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a7dc:	b1e8      	cbz	r0, 800a81a <__d2b+0x7a>
 800a7de:	f1c0 0320 	rsb	r3, r0, #32
 800a7e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a7e6:	430b      	orrs	r3, r1
 800a7e8:	40c2      	lsrs	r2, r0
 800a7ea:	616b      	str	r3, [r5, #20]
 800a7ec:	9201      	str	r2, [sp, #4]
 800a7ee:	9b01      	ldr	r3, [sp, #4]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	bf14      	ite	ne
 800a7f4:	2102      	movne	r1, #2
 800a7f6:	2101      	moveq	r1, #1
 800a7f8:	61ab      	str	r3, [r5, #24]
 800a7fa:	6129      	str	r1, [r5, #16]
 800a7fc:	b1bc      	cbz	r4, 800a82e <__d2b+0x8e>
 800a7fe:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a802:	4404      	add	r4, r0
 800a804:	6034      	str	r4, [r6, #0]
 800a806:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a80a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a80c:	6018      	str	r0, [r3, #0]
 800a80e:	4628      	mov	r0, r5
 800a810:	b003      	add	sp, #12
 800a812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a814:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a818:	e7d7      	b.n	800a7ca <__d2b+0x2a>
 800a81a:	6169      	str	r1, [r5, #20]
 800a81c:	e7e7      	b.n	800a7ee <__d2b+0x4e>
 800a81e:	a801      	add	r0, sp, #4
 800a820:	f7ff fcfc 	bl	800a21c <__lo0bits>
 800a824:	9b01      	ldr	r3, [sp, #4]
 800a826:	2101      	movs	r1, #1
 800a828:	616b      	str	r3, [r5, #20]
 800a82a:	3020      	adds	r0, #32
 800a82c:	e7e5      	b.n	800a7fa <__d2b+0x5a>
 800a82e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a832:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800a836:	6030      	str	r0, [r6, #0]
 800a838:	6918      	ldr	r0, [r3, #16]
 800a83a:	f7ff fccf 	bl	800a1dc <__hi0bits>
 800a83e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a842:	e7e2      	b.n	800a80a <__d2b+0x6a>
 800a844:	0800d561 	.word	0x0800d561
 800a848:	0800d5d2 	.word	0x0800d5d2

0800a84c <__ratio>:
 800a84c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a850:	4688      	mov	r8, r1
 800a852:	4669      	mov	r1, sp
 800a854:	4681      	mov	r9, r0
 800a856:	f7ff ff5b 	bl	800a710 <__b2d>
 800a85a:	460f      	mov	r7, r1
 800a85c:	4604      	mov	r4, r0
 800a85e:	460d      	mov	r5, r1
 800a860:	4640      	mov	r0, r8
 800a862:	a901      	add	r1, sp, #4
 800a864:	f7ff ff54 	bl	800a710 <__b2d>
 800a868:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a86c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a870:	468b      	mov	fp, r1
 800a872:	eba3 0c02 	sub.w	ip, r3, r2
 800a876:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a87a:	1a9b      	subs	r3, r3, r2
 800a87c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a880:	2b00      	cmp	r3, #0
 800a882:	bfd5      	itete	le
 800a884:	460a      	movle	r2, r1
 800a886:	462a      	movgt	r2, r5
 800a888:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a88c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a890:	bfd8      	it	le
 800a892:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a896:	465b      	mov	r3, fp
 800a898:	4602      	mov	r2, r0
 800a89a:	4639      	mov	r1, r7
 800a89c:	4620      	mov	r0, r4
 800a89e:	f7f5 ff4f 	bl	8000740 <__aeabi_ddiv>
 800a8a2:	b003      	add	sp, #12
 800a8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a8a8 <__copybits>:
 800a8a8:	3901      	subs	r1, #1
 800a8aa:	b570      	push	{r4, r5, r6, lr}
 800a8ac:	1149      	asrs	r1, r1, #5
 800a8ae:	6914      	ldr	r4, [r2, #16]
 800a8b0:	3101      	adds	r1, #1
 800a8b2:	f102 0314 	add.w	r3, r2, #20
 800a8b6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a8ba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a8be:	1f05      	subs	r5, r0, #4
 800a8c0:	42a3      	cmp	r3, r4
 800a8c2:	d30c      	bcc.n	800a8de <__copybits+0x36>
 800a8c4:	1aa3      	subs	r3, r4, r2
 800a8c6:	3b11      	subs	r3, #17
 800a8c8:	f023 0303 	bic.w	r3, r3, #3
 800a8cc:	3211      	adds	r2, #17
 800a8ce:	42a2      	cmp	r2, r4
 800a8d0:	bf88      	it	hi
 800a8d2:	2300      	movhi	r3, #0
 800a8d4:	4418      	add	r0, r3
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	4288      	cmp	r0, r1
 800a8da:	d305      	bcc.n	800a8e8 <__copybits+0x40>
 800a8dc:	bd70      	pop	{r4, r5, r6, pc}
 800a8de:	f853 6b04 	ldr.w	r6, [r3], #4
 800a8e2:	f845 6f04 	str.w	r6, [r5, #4]!
 800a8e6:	e7eb      	b.n	800a8c0 <__copybits+0x18>
 800a8e8:	f840 3b04 	str.w	r3, [r0], #4
 800a8ec:	e7f4      	b.n	800a8d8 <__copybits+0x30>

0800a8ee <__any_on>:
 800a8ee:	f100 0214 	add.w	r2, r0, #20
 800a8f2:	6900      	ldr	r0, [r0, #16]
 800a8f4:	114b      	asrs	r3, r1, #5
 800a8f6:	4298      	cmp	r0, r3
 800a8f8:	b510      	push	{r4, lr}
 800a8fa:	db11      	blt.n	800a920 <__any_on+0x32>
 800a8fc:	dd0a      	ble.n	800a914 <__any_on+0x26>
 800a8fe:	f011 011f 	ands.w	r1, r1, #31
 800a902:	d007      	beq.n	800a914 <__any_on+0x26>
 800a904:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a908:	fa24 f001 	lsr.w	r0, r4, r1
 800a90c:	fa00 f101 	lsl.w	r1, r0, r1
 800a910:	428c      	cmp	r4, r1
 800a912:	d10b      	bne.n	800a92c <__any_on+0x3e>
 800a914:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a918:	4293      	cmp	r3, r2
 800a91a:	d803      	bhi.n	800a924 <__any_on+0x36>
 800a91c:	2000      	movs	r0, #0
 800a91e:	bd10      	pop	{r4, pc}
 800a920:	4603      	mov	r3, r0
 800a922:	e7f7      	b.n	800a914 <__any_on+0x26>
 800a924:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a928:	2900      	cmp	r1, #0
 800a92a:	d0f5      	beq.n	800a918 <__any_on+0x2a>
 800a92c:	2001      	movs	r0, #1
 800a92e:	e7f6      	b.n	800a91e <__any_on+0x30>

0800a930 <__ascii_wctomb>:
 800a930:	4603      	mov	r3, r0
 800a932:	4608      	mov	r0, r1
 800a934:	b141      	cbz	r1, 800a948 <__ascii_wctomb+0x18>
 800a936:	2aff      	cmp	r2, #255	; 0xff
 800a938:	d904      	bls.n	800a944 <__ascii_wctomb+0x14>
 800a93a:	228a      	movs	r2, #138	; 0x8a
 800a93c:	f04f 30ff 	mov.w	r0, #4294967295
 800a940:	601a      	str	r2, [r3, #0]
 800a942:	4770      	bx	lr
 800a944:	2001      	movs	r0, #1
 800a946:	700a      	strb	r2, [r1, #0]
 800a948:	4770      	bx	lr

0800a94a <__ssputs_r>:
 800a94a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a94e:	461f      	mov	r7, r3
 800a950:	688e      	ldr	r6, [r1, #8]
 800a952:	4682      	mov	sl, r0
 800a954:	42be      	cmp	r6, r7
 800a956:	460c      	mov	r4, r1
 800a958:	4690      	mov	r8, r2
 800a95a:	680b      	ldr	r3, [r1, #0]
 800a95c:	d82c      	bhi.n	800a9b8 <__ssputs_r+0x6e>
 800a95e:	898a      	ldrh	r2, [r1, #12]
 800a960:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a964:	d026      	beq.n	800a9b4 <__ssputs_r+0x6a>
 800a966:	6965      	ldr	r5, [r4, #20]
 800a968:	6909      	ldr	r1, [r1, #16]
 800a96a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a96e:	eba3 0901 	sub.w	r9, r3, r1
 800a972:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a976:	1c7b      	adds	r3, r7, #1
 800a978:	444b      	add	r3, r9
 800a97a:	106d      	asrs	r5, r5, #1
 800a97c:	429d      	cmp	r5, r3
 800a97e:	bf38      	it	cc
 800a980:	461d      	movcc	r5, r3
 800a982:	0553      	lsls	r3, r2, #21
 800a984:	d527      	bpl.n	800a9d6 <__ssputs_r+0x8c>
 800a986:	4629      	mov	r1, r5
 800a988:	f7ff fa98 	bl	8009ebc <_malloc_r>
 800a98c:	4606      	mov	r6, r0
 800a98e:	b360      	cbz	r0, 800a9ea <__ssputs_r+0xa0>
 800a990:	464a      	mov	r2, r9
 800a992:	6921      	ldr	r1, [r4, #16]
 800a994:	f7fe f843 	bl	8008a1e <memcpy>
 800a998:	89a3      	ldrh	r3, [r4, #12]
 800a99a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a99e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9a2:	81a3      	strh	r3, [r4, #12]
 800a9a4:	6126      	str	r6, [r4, #16]
 800a9a6:	444e      	add	r6, r9
 800a9a8:	6026      	str	r6, [r4, #0]
 800a9aa:	463e      	mov	r6, r7
 800a9ac:	6165      	str	r5, [r4, #20]
 800a9ae:	eba5 0509 	sub.w	r5, r5, r9
 800a9b2:	60a5      	str	r5, [r4, #8]
 800a9b4:	42be      	cmp	r6, r7
 800a9b6:	d900      	bls.n	800a9ba <__ssputs_r+0x70>
 800a9b8:	463e      	mov	r6, r7
 800a9ba:	4632      	mov	r2, r6
 800a9bc:	4641      	mov	r1, r8
 800a9be:	6820      	ldr	r0, [r4, #0]
 800a9c0:	f000 f9c6 	bl	800ad50 <memmove>
 800a9c4:	2000      	movs	r0, #0
 800a9c6:	68a3      	ldr	r3, [r4, #8]
 800a9c8:	1b9b      	subs	r3, r3, r6
 800a9ca:	60a3      	str	r3, [r4, #8]
 800a9cc:	6823      	ldr	r3, [r4, #0]
 800a9ce:	4433      	add	r3, r6
 800a9d0:	6023      	str	r3, [r4, #0]
 800a9d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9d6:	462a      	mov	r2, r5
 800a9d8:	f000 fa16 	bl	800ae08 <_realloc_r>
 800a9dc:	4606      	mov	r6, r0
 800a9de:	2800      	cmp	r0, #0
 800a9e0:	d1e0      	bne.n	800a9a4 <__ssputs_r+0x5a>
 800a9e2:	4650      	mov	r0, sl
 800a9e4:	6921      	ldr	r1, [r4, #16]
 800a9e6:	f7fe fe9f 	bl	8009728 <_free_r>
 800a9ea:	230c      	movs	r3, #12
 800a9ec:	f8ca 3000 	str.w	r3, [sl]
 800a9f0:	89a3      	ldrh	r3, [r4, #12]
 800a9f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a9f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9fa:	81a3      	strh	r3, [r4, #12]
 800a9fc:	e7e9      	b.n	800a9d2 <__ssputs_r+0x88>
	...

0800aa00 <_svfiprintf_r>:
 800aa00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa04:	4698      	mov	r8, r3
 800aa06:	898b      	ldrh	r3, [r1, #12]
 800aa08:	4607      	mov	r7, r0
 800aa0a:	061b      	lsls	r3, r3, #24
 800aa0c:	460d      	mov	r5, r1
 800aa0e:	4614      	mov	r4, r2
 800aa10:	b09d      	sub	sp, #116	; 0x74
 800aa12:	d50e      	bpl.n	800aa32 <_svfiprintf_r+0x32>
 800aa14:	690b      	ldr	r3, [r1, #16]
 800aa16:	b963      	cbnz	r3, 800aa32 <_svfiprintf_r+0x32>
 800aa18:	2140      	movs	r1, #64	; 0x40
 800aa1a:	f7ff fa4f 	bl	8009ebc <_malloc_r>
 800aa1e:	6028      	str	r0, [r5, #0]
 800aa20:	6128      	str	r0, [r5, #16]
 800aa22:	b920      	cbnz	r0, 800aa2e <_svfiprintf_r+0x2e>
 800aa24:	230c      	movs	r3, #12
 800aa26:	603b      	str	r3, [r7, #0]
 800aa28:	f04f 30ff 	mov.w	r0, #4294967295
 800aa2c:	e0d0      	b.n	800abd0 <_svfiprintf_r+0x1d0>
 800aa2e:	2340      	movs	r3, #64	; 0x40
 800aa30:	616b      	str	r3, [r5, #20]
 800aa32:	2300      	movs	r3, #0
 800aa34:	9309      	str	r3, [sp, #36]	; 0x24
 800aa36:	2320      	movs	r3, #32
 800aa38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa3c:	2330      	movs	r3, #48	; 0x30
 800aa3e:	f04f 0901 	mov.w	r9, #1
 800aa42:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa46:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800abe8 <_svfiprintf_r+0x1e8>
 800aa4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa4e:	4623      	mov	r3, r4
 800aa50:	469a      	mov	sl, r3
 800aa52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa56:	b10a      	cbz	r2, 800aa5c <_svfiprintf_r+0x5c>
 800aa58:	2a25      	cmp	r2, #37	; 0x25
 800aa5a:	d1f9      	bne.n	800aa50 <_svfiprintf_r+0x50>
 800aa5c:	ebba 0b04 	subs.w	fp, sl, r4
 800aa60:	d00b      	beq.n	800aa7a <_svfiprintf_r+0x7a>
 800aa62:	465b      	mov	r3, fp
 800aa64:	4622      	mov	r2, r4
 800aa66:	4629      	mov	r1, r5
 800aa68:	4638      	mov	r0, r7
 800aa6a:	f7ff ff6e 	bl	800a94a <__ssputs_r>
 800aa6e:	3001      	adds	r0, #1
 800aa70:	f000 80a9 	beq.w	800abc6 <_svfiprintf_r+0x1c6>
 800aa74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa76:	445a      	add	r2, fp
 800aa78:	9209      	str	r2, [sp, #36]	; 0x24
 800aa7a:	f89a 3000 	ldrb.w	r3, [sl]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	f000 80a1 	beq.w	800abc6 <_svfiprintf_r+0x1c6>
 800aa84:	2300      	movs	r3, #0
 800aa86:	f04f 32ff 	mov.w	r2, #4294967295
 800aa8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa8e:	f10a 0a01 	add.w	sl, sl, #1
 800aa92:	9304      	str	r3, [sp, #16]
 800aa94:	9307      	str	r3, [sp, #28]
 800aa96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa9a:	931a      	str	r3, [sp, #104]	; 0x68
 800aa9c:	4654      	mov	r4, sl
 800aa9e:	2205      	movs	r2, #5
 800aaa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaa4:	4850      	ldr	r0, [pc, #320]	; (800abe8 <_svfiprintf_r+0x1e8>)
 800aaa6:	f7fd ffac 	bl	8008a02 <memchr>
 800aaaa:	9a04      	ldr	r2, [sp, #16]
 800aaac:	b9d8      	cbnz	r0, 800aae6 <_svfiprintf_r+0xe6>
 800aaae:	06d0      	lsls	r0, r2, #27
 800aab0:	bf44      	itt	mi
 800aab2:	2320      	movmi	r3, #32
 800aab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aab8:	0711      	lsls	r1, r2, #28
 800aaba:	bf44      	itt	mi
 800aabc:	232b      	movmi	r3, #43	; 0x2b
 800aabe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aac2:	f89a 3000 	ldrb.w	r3, [sl]
 800aac6:	2b2a      	cmp	r3, #42	; 0x2a
 800aac8:	d015      	beq.n	800aaf6 <_svfiprintf_r+0xf6>
 800aaca:	4654      	mov	r4, sl
 800aacc:	2000      	movs	r0, #0
 800aace:	f04f 0c0a 	mov.w	ip, #10
 800aad2:	9a07      	ldr	r2, [sp, #28]
 800aad4:	4621      	mov	r1, r4
 800aad6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aada:	3b30      	subs	r3, #48	; 0x30
 800aadc:	2b09      	cmp	r3, #9
 800aade:	d94d      	bls.n	800ab7c <_svfiprintf_r+0x17c>
 800aae0:	b1b0      	cbz	r0, 800ab10 <_svfiprintf_r+0x110>
 800aae2:	9207      	str	r2, [sp, #28]
 800aae4:	e014      	b.n	800ab10 <_svfiprintf_r+0x110>
 800aae6:	eba0 0308 	sub.w	r3, r0, r8
 800aaea:	fa09 f303 	lsl.w	r3, r9, r3
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	46a2      	mov	sl, r4
 800aaf2:	9304      	str	r3, [sp, #16]
 800aaf4:	e7d2      	b.n	800aa9c <_svfiprintf_r+0x9c>
 800aaf6:	9b03      	ldr	r3, [sp, #12]
 800aaf8:	1d19      	adds	r1, r3, #4
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	9103      	str	r1, [sp, #12]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	bfbb      	ittet	lt
 800ab02:	425b      	neglt	r3, r3
 800ab04:	f042 0202 	orrlt.w	r2, r2, #2
 800ab08:	9307      	strge	r3, [sp, #28]
 800ab0a:	9307      	strlt	r3, [sp, #28]
 800ab0c:	bfb8      	it	lt
 800ab0e:	9204      	strlt	r2, [sp, #16]
 800ab10:	7823      	ldrb	r3, [r4, #0]
 800ab12:	2b2e      	cmp	r3, #46	; 0x2e
 800ab14:	d10c      	bne.n	800ab30 <_svfiprintf_r+0x130>
 800ab16:	7863      	ldrb	r3, [r4, #1]
 800ab18:	2b2a      	cmp	r3, #42	; 0x2a
 800ab1a:	d134      	bne.n	800ab86 <_svfiprintf_r+0x186>
 800ab1c:	9b03      	ldr	r3, [sp, #12]
 800ab1e:	3402      	adds	r4, #2
 800ab20:	1d1a      	adds	r2, r3, #4
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	9203      	str	r2, [sp, #12]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	bfb8      	it	lt
 800ab2a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab2e:	9305      	str	r3, [sp, #20]
 800ab30:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800abec <_svfiprintf_r+0x1ec>
 800ab34:	2203      	movs	r2, #3
 800ab36:	4650      	mov	r0, sl
 800ab38:	7821      	ldrb	r1, [r4, #0]
 800ab3a:	f7fd ff62 	bl	8008a02 <memchr>
 800ab3e:	b138      	cbz	r0, 800ab50 <_svfiprintf_r+0x150>
 800ab40:	2240      	movs	r2, #64	; 0x40
 800ab42:	9b04      	ldr	r3, [sp, #16]
 800ab44:	eba0 000a 	sub.w	r0, r0, sl
 800ab48:	4082      	lsls	r2, r0
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	3401      	adds	r4, #1
 800ab4e:	9304      	str	r3, [sp, #16]
 800ab50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab54:	2206      	movs	r2, #6
 800ab56:	4826      	ldr	r0, [pc, #152]	; (800abf0 <_svfiprintf_r+0x1f0>)
 800ab58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab5c:	f7fd ff51 	bl	8008a02 <memchr>
 800ab60:	2800      	cmp	r0, #0
 800ab62:	d038      	beq.n	800abd6 <_svfiprintf_r+0x1d6>
 800ab64:	4b23      	ldr	r3, [pc, #140]	; (800abf4 <_svfiprintf_r+0x1f4>)
 800ab66:	bb1b      	cbnz	r3, 800abb0 <_svfiprintf_r+0x1b0>
 800ab68:	9b03      	ldr	r3, [sp, #12]
 800ab6a:	3307      	adds	r3, #7
 800ab6c:	f023 0307 	bic.w	r3, r3, #7
 800ab70:	3308      	adds	r3, #8
 800ab72:	9303      	str	r3, [sp, #12]
 800ab74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab76:	4433      	add	r3, r6
 800ab78:	9309      	str	r3, [sp, #36]	; 0x24
 800ab7a:	e768      	b.n	800aa4e <_svfiprintf_r+0x4e>
 800ab7c:	460c      	mov	r4, r1
 800ab7e:	2001      	movs	r0, #1
 800ab80:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab84:	e7a6      	b.n	800aad4 <_svfiprintf_r+0xd4>
 800ab86:	2300      	movs	r3, #0
 800ab88:	f04f 0c0a 	mov.w	ip, #10
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	3401      	adds	r4, #1
 800ab90:	9305      	str	r3, [sp, #20]
 800ab92:	4620      	mov	r0, r4
 800ab94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab98:	3a30      	subs	r2, #48	; 0x30
 800ab9a:	2a09      	cmp	r2, #9
 800ab9c:	d903      	bls.n	800aba6 <_svfiprintf_r+0x1a6>
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d0c6      	beq.n	800ab30 <_svfiprintf_r+0x130>
 800aba2:	9105      	str	r1, [sp, #20]
 800aba4:	e7c4      	b.n	800ab30 <_svfiprintf_r+0x130>
 800aba6:	4604      	mov	r4, r0
 800aba8:	2301      	movs	r3, #1
 800abaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800abae:	e7f0      	b.n	800ab92 <_svfiprintf_r+0x192>
 800abb0:	ab03      	add	r3, sp, #12
 800abb2:	9300      	str	r3, [sp, #0]
 800abb4:	462a      	mov	r2, r5
 800abb6:	4638      	mov	r0, r7
 800abb8:	4b0f      	ldr	r3, [pc, #60]	; (800abf8 <_svfiprintf_r+0x1f8>)
 800abba:	a904      	add	r1, sp, #16
 800abbc:	f7fd f990 	bl	8007ee0 <_printf_float>
 800abc0:	1c42      	adds	r2, r0, #1
 800abc2:	4606      	mov	r6, r0
 800abc4:	d1d6      	bne.n	800ab74 <_svfiprintf_r+0x174>
 800abc6:	89ab      	ldrh	r3, [r5, #12]
 800abc8:	065b      	lsls	r3, r3, #25
 800abca:	f53f af2d 	bmi.w	800aa28 <_svfiprintf_r+0x28>
 800abce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abd0:	b01d      	add	sp, #116	; 0x74
 800abd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abd6:	ab03      	add	r3, sp, #12
 800abd8:	9300      	str	r3, [sp, #0]
 800abda:	462a      	mov	r2, r5
 800abdc:	4638      	mov	r0, r7
 800abde:	4b06      	ldr	r3, [pc, #24]	; (800abf8 <_svfiprintf_r+0x1f8>)
 800abe0:	a904      	add	r1, sp, #16
 800abe2:	f7fd fc1d 	bl	8008420 <_printf_i>
 800abe6:	e7eb      	b.n	800abc0 <_svfiprintf_r+0x1c0>
 800abe8:	0800d72c 	.word	0x0800d72c
 800abec:	0800d732 	.word	0x0800d732
 800abf0:	0800d736 	.word	0x0800d736
 800abf4:	08007ee1 	.word	0x08007ee1
 800abf8:	0800a94b 	.word	0x0800a94b

0800abfc <__sflush_r>:
 800abfc:	898a      	ldrh	r2, [r1, #12]
 800abfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac00:	4605      	mov	r5, r0
 800ac02:	0710      	lsls	r0, r2, #28
 800ac04:	460c      	mov	r4, r1
 800ac06:	d457      	bmi.n	800acb8 <__sflush_r+0xbc>
 800ac08:	684b      	ldr	r3, [r1, #4]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	dc04      	bgt.n	800ac18 <__sflush_r+0x1c>
 800ac0e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	dc01      	bgt.n	800ac18 <__sflush_r+0x1c>
 800ac14:	2000      	movs	r0, #0
 800ac16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac1a:	2e00      	cmp	r6, #0
 800ac1c:	d0fa      	beq.n	800ac14 <__sflush_r+0x18>
 800ac1e:	2300      	movs	r3, #0
 800ac20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac24:	682f      	ldr	r7, [r5, #0]
 800ac26:	6a21      	ldr	r1, [r4, #32]
 800ac28:	602b      	str	r3, [r5, #0]
 800ac2a:	d032      	beq.n	800ac92 <__sflush_r+0x96>
 800ac2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac2e:	89a3      	ldrh	r3, [r4, #12]
 800ac30:	075a      	lsls	r2, r3, #29
 800ac32:	d505      	bpl.n	800ac40 <__sflush_r+0x44>
 800ac34:	6863      	ldr	r3, [r4, #4]
 800ac36:	1ac0      	subs	r0, r0, r3
 800ac38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac3a:	b10b      	cbz	r3, 800ac40 <__sflush_r+0x44>
 800ac3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac3e:	1ac0      	subs	r0, r0, r3
 800ac40:	2300      	movs	r3, #0
 800ac42:	4602      	mov	r2, r0
 800ac44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac46:	4628      	mov	r0, r5
 800ac48:	6a21      	ldr	r1, [r4, #32]
 800ac4a:	47b0      	blx	r6
 800ac4c:	1c43      	adds	r3, r0, #1
 800ac4e:	89a3      	ldrh	r3, [r4, #12]
 800ac50:	d106      	bne.n	800ac60 <__sflush_r+0x64>
 800ac52:	6829      	ldr	r1, [r5, #0]
 800ac54:	291d      	cmp	r1, #29
 800ac56:	d82b      	bhi.n	800acb0 <__sflush_r+0xb4>
 800ac58:	4a28      	ldr	r2, [pc, #160]	; (800acfc <__sflush_r+0x100>)
 800ac5a:	410a      	asrs	r2, r1
 800ac5c:	07d6      	lsls	r6, r2, #31
 800ac5e:	d427      	bmi.n	800acb0 <__sflush_r+0xb4>
 800ac60:	2200      	movs	r2, #0
 800ac62:	6062      	str	r2, [r4, #4]
 800ac64:	6922      	ldr	r2, [r4, #16]
 800ac66:	04d9      	lsls	r1, r3, #19
 800ac68:	6022      	str	r2, [r4, #0]
 800ac6a:	d504      	bpl.n	800ac76 <__sflush_r+0x7a>
 800ac6c:	1c42      	adds	r2, r0, #1
 800ac6e:	d101      	bne.n	800ac74 <__sflush_r+0x78>
 800ac70:	682b      	ldr	r3, [r5, #0]
 800ac72:	b903      	cbnz	r3, 800ac76 <__sflush_r+0x7a>
 800ac74:	6560      	str	r0, [r4, #84]	; 0x54
 800ac76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac78:	602f      	str	r7, [r5, #0]
 800ac7a:	2900      	cmp	r1, #0
 800ac7c:	d0ca      	beq.n	800ac14 <__sflush_r+0x18>
 800ac7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac82:	4299      	cmp	r1, r3
 800ac84:	d002      	beq.n	800ac8c <__sflush_r+0x90>
 800ac86:	4628      	mov	r0, r5
 800ac88:	f7fe fd4e 	bl	8009728 <_free_r>
 800ac8c:	2000      	movs	r0, #0
 800ac8e:	6360      	str	r0, [r4, #52]	; 0x34
 800ac90:	e7c1      	b.n	800ac16 <__sflush_r+0x1a>
 800ac92:	2301      	movs	r3, #1
 800ac94:	4628      	mov	r0, r5
 800ac96:	47b0      	blx	r6
 800ac98:	1c41      	adds	r1, r0, #1
 800ac9a:	d1c8      	bne.n	800ac2e <__sflush_r+0x32>
 800ac9c:	682b      	ldr	r3, [r5, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d0c5      	beq.n	800ac2e <__sflush_r+0x32>
 800aca2:	2b1d      	cmp	r3, #29
 800aca4:	d001      	beq.n	800acaa <__sflush_r+0xae>
 800aca6:	2b16      	cmp	r3, #22
 800aca8:	d101      	bne.n	800acae <__sflush_r+0xb2>
 800acaa:	602f      	str	r7, [r5, #0]
 800acac:	e7b2      	b.n	800ac14 <__sflush_r+0x18>
 800acae:	89a3      	ldrh	r3, [r4, #12]
 800acb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acb4:	81a3      	strh	r3, [r4, #12]
 800acb6:	e7ae      	b.n	800ac16 <__sflush_r+0x1a>
 800acb8:	690f      	ldr	r7, [r1, #16]
 800acba:	2f00      	cmp	r7, #0
 800acbc:	d0aa      	beq.n	800ac14 <__sflush_r+0x18>
 800acbe:	0793      	lsls	r3, r2, #30
 800acc0:	bf18      	it	ne
 800acc2:	2300      	movne	r3, #0
 800acc4:	680e      	ldr	r6, [r1, #0]
 800acc6:	bf08      	it	eq
 800acc8:	694b      	ldreq	r3, [r1, #20]
 800acca:	1bf6      	subs	r6, r6, r7
 800accc:	600f      	str	r7, [r1, #0]
 800acce:	608b      	str	r3, [r1, #8]
 800acd0:	2e00      	cmp	r6, #0
 800acd2:	dd9f      	ble.n	800ac14 <__sflush_r+0x18>
 800acd4:	4633      	mov	r3, r6
 800acd6:	463a      	mov	r2, r7
 800acd8:	4628      	mov	r0, r5
 800acda:	6a21      	ldr	r1, [r4, #32]
 800acdc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ace0:	47e0      	blx	ip
 800ace2:	2800      	cmp	r0, #0
 800ace4:	dc06      	bgt.n	800acf4 <__sflush_r+0xf8>
 800ace6:	89a3      	ldrh	r3, [r4, #12]
 800ace8:	f04f 30ff 	mov.w	r0, #4294967295
 800acec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acf0:	81a3      	strh	r3, [r4, #12]
 800acf2:	e790      	b.n	800ac16 <__sflush_r+0x1a>
 800acf4:	4407      	add	r7, r0
 800acf6:	1a36      	subs	r6, r6, r0
 800acf8:	e7ea      	b.n	800acd0 <__sflush_r+0xd4>
 800acfa:	bf00      	nop
 800acfc:	dfbffffe 	.word	0xdfbffffe

0800ad00 <_fflush_r>:
 800ad00:	b538      	push	{r3, r4, r5, lr}
 800ad02:	690b      	ldr	r3, [r1, #16]
 800ad04:	4605      	mov	r5, r0
 800ad06:	460c      	mov	r4, r1
 800ad08:	b913      	cbnz	r3, 800ad10 <_fflush_r+0x10>
 800ad0a:	2500      	movs	r5, #0
 800ad0c:	4628      	mov	r0, r5
 800ad0e:	bd38      	pop	{r3, r4, r5, pc}
 800ad10:	b118      	cbz	r0, 800ad1a <_fflush_r+0x1a>
 800ad12:	6a03      	ldr	r3, [r0, #32]
 800ad14:	b90b      	cbnz	r3, 800ad1a <_fflush_r+0x1a>
 800ad16:	f7fd fd31 	bl	800877c <__sinit>
 800ad1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d0f3      	beq.n	800ad0a <_fflush_r+0xa>
 800ad22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad24:	07d0      	lsls	r0, r2, #31
 800ad26:	d404      	bmi.n	800ad32 <_fflush_r+0x32>
 800ad28:	0599      	lsls	r1, r3, #22
 800ad2a:	d402      	bmi.n	800ad32 <_fflush_r+0x32>
 800ad2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad2e:	f7fd fe66 	bl	80089fe <__retarget_lock_acquire_recursive>
 800ad32:	4628      	mov	r0, r5
 800ad34:	4621      	mov	r1, r4
 800ad36:	f7ff ff61 	bl	800abfc <__sflush_r>
 800ad3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad3c:	4605      	mov	r5, r0
 800ad3e:	07da      	lsls	r2, r3, #31
 800ad40:	d4e4      	bmi.n	800ad0c <_fflush_r+0xc>
 800ad42:	89a3      	ldrh	r3, [r4, #12]
 800ad44:	059b      	lsls	r3, r3, #22
 800ad46:	d4e1      	bmi.n	800ad0c <_fflush_r+0xc>
 800ad48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad4a:	f7fd fe59 	bl	8008a00 <__retarget_lock_release_recursive>
 800ad4e:	e7dd      	b.n	800ad0c <_fflush_r+0xc>

0800ad50 <memmove>:
 800ad50:	4288      	cmp	r0, r1
 800ad52:	b510      	push	{r4, lr}
 800ad54:	eb01 0402 	add.w	r4, r1, r2
 800ad58:	d902      	bls.n	800ad60 <memmove+0x10>
 800ad5a:	4284      	cmp	r4, r0
 800ad5c:	4623      	mov	r3, r4
 800ad5e:	d807      	bhi.n	800ad70 <memmove+0x20>
 800ad60:	1e43      	subs	r3, r0, #1
 800ad62:	42a1      	cmp	r1, r4
 800ad64:	d008      	beq.n	800ad78 <memmove+0x28>
 800ad66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad6e:	e7f8      	b.n	800ad62 <memmove+0x12>
 800ad70:	4601      	mov	r1, r0
 800ad72:	4402      	add	r2, r0
 800ad74:	428a      	cmp	r2, r1
 800ad76:	d100      	bne.n	800ad7a <memmove+0x2a>
 800ad78:	bd10      	pop	{r4, pc}
 800ad7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad82:	e7f7      	b.n	800ad74 <memmove+0x24>

0800ad84 <_sbrk_r>:
 800ad84:	b538      	push	{r3, r4, r5, lr}
 800ad86:	2300      	movs	r3, #0
 800ad88:	4d05      	ldr	r5, [pc, #20]	; (800ada0 <_sbrk_r+0x1c>)
 800ad8a:	4604      	mov	r4, r0
 800ad8c:	4608      	mov	r0, r1
 800ad8e:	602b      	str	r3, [r5, #0]
 800ad90:	f7f8 fc48 	bl	8003624 <_sbrk>
 800ad94:	1c43      	adds	r3, r0, #1
 800ad96:	d102      	bne.n	800ad9e <_sbrk_r+0x1a>
 800ad98:	682b      	ldr	r3, [r5, #0]
 800ad9a:	b103      	cbz	r3, 800ad9e <_sbrk_r+0x1a>
 800ad9c:	6023      	str	r3, [r4, #0]
 800ad9e:	bd38      	pop	{r3, r4, r5, pc}
 800ada0:	20000cb8 	.word	0x20000cb8

0800ada4 <__assert_func>:
 800ada4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ada6:	4614      	mov	r4, r2
 800ada8:	461a      	mov	r2, r3
 800adaa:	4b09      	ldr	r3, [pc, #36]	; (800add0 <__assert_func+0x2c>)
 800adac:	4605      	mov	r5, r0
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	68d8      	ldr	r0, [r3, #12]
 800adb2:	b14c      	cbz	r4, 800adc8 <__assert_func+0x24>
 800adb4:	4b07      	ldr	r3, [pc, #28]	; (800add4 <__assert_func+0x30>)
 800adb6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800adba:	9100      	str	r1, [sp, #0]
 800adbc:	462b      	mov	r3, r5
 800adbe:	4906      	ldr	r1, [pc, #24]	; (800add8 <__assert_func+0x34>)
 800adc0:	f000 f852 	bl	800ae68 <fiprintf>
 800adc4:	f000 f862 	bl	800ae8c <abort>
 800adc8:	4b04      	ldr	r3, [pc, #16]	; (800addc <__assert_func+0x38>)
 800adca:	461c      	mov	r4, r3
 800adcc:	e7f3      	b.n	800adb6 <__assert_func+0x12>
 800adce:	bf00      	nop
 800add0:	200001dc 	.word	0x200001dc
 800add4:	0800d73d 	.word	0x0800d73d
 800add8:	0800d74a 	.word	0x0800d74a
 800addc:	0800d778 	.word	0x0800d778

0800ade0 <_calloc_r>:
 800ade0:	b570      	push	{r4, r5, r6, lr}
 800ade2:	fba1 5402 	umull	r5, r4, r1, r2
 800ade6:	b934      	cbnz	r4, 800adf6 <_calloc_r+0x16>
 800ade8:	4629      	mov	r1, r5
 800adea:	f7ff f867 	bl	8009ebc <_malloc_r>
 800adee:	4606      	mov	r6, r0
 800adf0:	b928      	cbnz	r0, 800adfe <_calloc_r+0x1e>
 800adf2:	4630      	mov	r0, r6
 800adf4:	bd70      	pop	{r4, r5, r6, pc}
 800adf6:	220c      	movs	r2, #12
 800adf8:	2600      	movs	r6, #0
 800adfa:	6002      	str	r2, [r0, #0]
 800adfc:	e7f9      	b.n	800adf2 <_calloc_r+0x12>
 800adfe:	462a      	mov	r2, r5
 800ae00:	4621      	mov	r1, r4
 800ae02:	f7fd fd54 	bl	80088ae <memset>
 800ae06:	e7f4      	b.n	800adf2 <_calloc_r+0x12>

0800ae08 <_realloc_r>:
 800ae08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae0c:	4680      	mov	r8, r0
 800ae0e:	4614      	mov	r4, r2
 800ae10:	460e      	mov	r6, r1
 800ae12:	b921      	cbnz	r1, 800ae1e <_realloc_r+0x16>
 800ae14:	4611      	mov	r1, r2
 800ae16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae1a:	f7ff b84f 	b.w	8009ebc <_malloc_r>
 800ae1e:	b92a      	cbnz	r2, 800ae2c <_realloc_r+0x24>
 800ae20:	f7fe fc82 	bl	8009728 <_free_r>
 800ae24:	4625      	mov	r5, r4
 800ae26:	4628      	mov	r0, r5
 800ae28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae2c:	f000 f835 	bl	800ae9a <_malloc_usable_size_r>
 800ae30:	4284      	cmp	r4, r0
 800ae32:	4607      	mov	r7, r0
 800ae34:	d802      	bhi.n	800ae3c <_realloc_r+0x34>
 800ae36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae3a:	d812      	bhi.n	800ae62 <_realloc_r+0x5a>
 800ae3c:	4621      	mov	r1, r4
 800ae3e:	4640      	mov	r0, r8
 800ae40:	f7ff f83c 	bl	8009ebc <_malloc_r>
 800ae44:	4605      	mov	r5, r0
 800ae46:	2800      	cmp	r0, #0
 800ae48:	d0ed      	beq.n	800ae26 <_realloc_r+0x1e>
 800ae4a:	42bc      	cmp	r4, r7
 800ae4c:	4622      	mov	r2, r4
 800ae4e:	4631      	mov	r1, r6
 800ae50:	bf28      	it	cs
 800ae52:	463a      	movcs	r2, r7
 800ae54:	f7fd fde3 	bl	8008a1e <memcpy>
 800ae58:	4631      	mov	r1, r6
 800ae5a:	4640      	mov	r0, r8
 800ae5c:	f7fe fc64 	bl	8009728 <_free_r>
 800ae60:	e7e1      	b.n	800ae26 <_realloc_r+0x1e>
 800ae62:	4635      	mov	r5, r6
 800ae64:	e7df      	b.n	800ae26 <_realloc_r+0x1e>
	...

0800ae68 <fiprintf>:
 800ae68:	b40e      	push	{r1, r2, r3}
 800ae6a:	b503      	push	{r0, r1, lr}
 800ae6c:	4601      	mov	r1, r0
 800ae6e:	ab03      	add	r3, sp, #12
 800ae70:	4805      	ldr	r0, [pc, #20]	; (800ae88 <fiprintf+0x20>)
 800ae72:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae76:	6800      	ldr	r0, [r0, #0]
 800ae78:	9301      	str	r3, [sp, #4]
 800ae7a:	f000 f83d 	bl	800aef8 <_vfiprintf_r>
 800ae7e:	b002      	add	sp, #8
 800ae80:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae84:	b003      	add	sp, #12
 800ae86:	4770      	bx	lr
 800ae88:	200001dc 	.word	0x200001dc

0800ae8c <abort>:
 800ae8c:	2006      	movs	r0, #6
 800ae8e:	b508      	push	{r3, lr}
 800ae90:	f000 fa0a 	bl	800b2a8 <raise>
 800ae94:	2001      	movs	r0, #1
 800ae96:	f7f8 fb52 	bl	800353e <_exit>

0800ae9a <_malloc_usable_size_r>:
 800ae9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae9e:	1f18      	subs	r0, r3, #4
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	bfbc      	itt	lt
 800aea4:	580b      	ldrlt	r3, [r1, r0]
 800aea6:	18c0      	addlt	r0, r0, r3
 800aea8:	4770      	bx	lr

0800aeaa <__sfputc_r>:
 800aeaa:	6893      	ldr	r3, [r2, #8]
 800aeac:	b410      	push	{r4}
 800aeae:	3b01      	subs	r3, #1
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	6093      	str	r3, [r2, #8]
 800aeb4:	da07      	bge.n	800aec6 <__sfputc_r+0x1c>
 800aeb6:	6994      	ldr	r4, [r2, #24]
 800aeb8:	42a3      	cmp	r3, r4
 800aeba:	db01      	blt.n	800aec0 <__sfputc_r+0x16>
 800aebc:	290a      	cmp	r1, #10
 800aebe:	d102      	bne.n	800aec6 <__sfputc_r+0x1c>
 800aec0:	bc10      	pop	{r4}
 800aec2:	f000 b933 	b.w	800b12c <__swbuf_r>
 800aec6:	6813      	ldr	r3, [r2, #0]
 800aec8:	1c58      	adds	r0, r3, #1
 800aeca:	6010      	str	r0, [r2, #0]
 800aecc:	7019      	strb	r1, [r3, #0]
 800aece:	4608      	mov	r0, r1
 800aed0:	bc10      	pop	{r4}
 800aed2:	4770      	bx	lr

0800aed4 <__sfputs_r>:
 800aed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aed6:	4606      	mov	r6, r0
 800aed8:	460f      	mov	r7, r1
 800aeda:	4614      	mov	r4, r2
 800aedc:	18d5      	adds	r5, r2, r3
 800aede:	42ac      	cmp	r4, r5
 800aee0:	d101      	bne.n	800aee6 <__sfputs_r+0x12>
 800aee2:	2000      	movs	r0, #0
 800aee4:	e007      	b.n	800aef6 <__sfputs_r+0x22>
 800aee6:	463a      	mov	r2, r7
 800aee8:	4630      	mov	r0, r6
 800aeea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeee:	f7ff ffdc 	bl	800aeaa <__sfputc_r>
 800aef2:	1c43      	adds	r3, r0, #1
 800aef4:	d1f3      	bne.n	800aede <__sfputs_r+0xa>
 800aef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aef8 <_vfiprintf_r>:
 800aef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aefc:	460d      	mov	r5, r1
 800aefe:	4614      	mov	r4, r2
 800af00:	4698      	mov	r8, r3
 800af02:	4606      	mov	r6, r0
 800af04:	b09d      	sub	sp, #116	; 0x74
 800af06:	b118      	cbz	r0, 800af10 <_vfiprintf_r+0x18>
 800af08:	6a03      	ldr	r3, [r0, #32]
 800af0a:	b90b      	cbnz	r3, 800af10 <_vfiprintf_r+0x18>
 800af0c:	f7fd fc36 	bl	800877c <__sinit>
 800af10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af12:	07d9      	lsls	r1, r3, #31
 800af14:	d405      	bmi.n	800af22 <_vfiprintf_r+0x2a>
 800af16:	89ab      	ldrh	r3, [r5, #12]
 800af18:	059a      	lsls	r2, r3, #22
 800af1a:	d402      	bmi.n	800af22 <_vfiprintf_r+0x2a>
 800af1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af1e:	f7fd fd6e 	bl	80089fe <__retarget_lock_acquire_recursive>
 800af22:	89ab      	ldrh	r3, [r5, #12]
 800af24:	071b      	lsls	r3, r3, #28
 800af26:	d501      	bpl.n	800af2c <_vfiprintf_r+0x34>
 800af28:	692b      	ldr	r3, [r5, #16]
 800af2a:	b99b      	cbnz	r3, 800af54 <_vfiprintf_r+0x5c>
 800af2c:	4629      	mov	r1, r5
 800af2e:	4630      	mov	r0, r6
 800af30:	f000 f93a 	bl	800b1a8 <__swsetup_r>
 800af34:	b170      	cbz	r0, 800af54 <_vfiprintf_r+0x5c>
 800af36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af38:	07dc      	lsls	r4, r3, #31
 800af3a:	d504      	bpl.n	800af46 <_vfiprintf_r+0x4e>
 800af3c:	f04f 30ff 	mov.w	r0, #4294967295
 800af40:	b01d      	add	sp, #116	; 0x74
 800af42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af46:	89ab      	ldrh	r3, [r5, #12]
 800af48:	0598      	lsls	r0, r3, #22
 800af4a:	d4f7      	bmi.n	800af3c <_vfiprintf_r+0x44>
 800af4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af4e:	f7fd fd57 	bl	8008a00 <__retarget_lock_release_recursive>
 800af52:	e7f3      	b.n	800af3c <_vfiprintf_r+0x44>
 800af54:	2300      	movs	r3, #0
 800af56:	9309      	str	r3, [sp, #36]	; 0x24
 800af58:	2320      	movs	r3, #32
 800af5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af5e:	2330      	movs	r3, #48	; 0x30
 800af60:	f04f 0901 	mov.w	r9, #1
 800af64:	f8cd 800c 	str.w	r8, [sp, #12]
 800af68:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800b118 <_vfiprintf_r+0x220>
 800af6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af70:	4623      	mov	r3, r4
 800af72:	469a      	mov	sl, r3
 800af74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af78:	b10a      	cbz	r2, 800af7e <_vfiprintf_r+0x86>
 800af7a:	2a25      	cmp	r2, #37	; 0x25
 800af7c:	d1f9      	bne.n	800af72 <_vfiprintf_r+0x7a>
 800af7e:	ebba 0b04 	subs.w	fp, sl, r4
 800af82:	d00b      	beq.n	800af9c <_vfiprintf_r+0xa4>
 800af84:	465b      	mov	r3, fp
 800af86:	4622      	mov	r2, r4
 800af88:	4629      	mov	r1, r5
 800af8a:	4630      	mov	r0, r6
 800af8c:	f7ff ffa2 	bl	800aed4 <__sfputs_r>
 800af90:	3001      	adds	r0, #1
 800af92:	f000 80a9 	beq.w	800b0e8 <_vfiprintf_r+0x1f0>
 800af96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af98:	445a      	add	r2, fp
 800af9a:	9209      	str	r2, [sp, #36]	; 0x24
 800af9c:	f89a 3000 	ldrb.w	r3, [sl]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	f000 80a1 	beq.w	800b0e8 <_vfiprintf_r+0x1f0>
 800afa6:	2300      	movs	r3, #0
 800afa8:	f04f 32ff 	mov.w	r2, #4294967295
 800afac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afb0:	f10a 0a01 	add.w	sl, sl, #1
 800afb4:	9304      	str	r3, [sp, #16]
 800afb6:	9307      	str	r3, [sp, #28]
 800afb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afbc:	931a      	str	r3, [sp, #104]	; 0x68
 800afbe:	4654      	mov	r4, sl
 800afc0:	2205      	movs	r2, #5
 800afc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afc6:	4854      	ldr	r0, [pc, #336]	; (800b118 <_vfiprintf_r+0x220>)
 800afc8:	f7fd fd1b 	bl	8008a02 <memchr>
 800afcc:	9a04      	ldr	r2, [sp, #16]
 800afce:	b9d8      	cbnz	r0, 800b008 <_vfiprintf_r+0x110>
 800afd0:	06d1      	lsls	r1, r2, #27
 800afd2:	bf44      	itt	mi
 800afd4:	2320      	movmi	r3, #32
 800afd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afda:	0713      	lsls	r3, r2, #28
 800afdc:	bf44      	itt	mi
 800afde:	232b      	movmi	r3, #43	; 0x2b
 800afe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afe4:	f89a 3000 	ldrb.w	r3, [sl]
 800afe8:	2b2a      	cmp	r3, #42	; 0x2a
 800afea:	d015      	beq.n	800b018 <_vfiprintf_r+0x120>
 800afec:	4654      	mov	r4, sl
 800afee:	2000      	movs	r0, #0
 800aff0:	f04f 0c0a 	mov.w	ip, #10
 800aff4:	9a07      	ldr	r2, [sp, #28]
 800aff6:	4621      	mov	r1, r4
 800aff8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800affc:	3b30      	subs	r3, #48	; 0x30
 800affe:	2b09      	cmp	r3, #9
 800b000:	d94d      	bls.n	800b09e <_vfiprintf_r+0x1a6>
 800b002:	b1b0      	cbz	r0, 800b032 <_vfiprintf_r+0x13a>
 800b004:	9207      	str	r2, [sp, #28]
 800b006:	e014      	b.n	800b032 <_vfiprintf_r+0x13a>
 800b008:	eba0 0308 	sub.w	r3, r0, r8
 800b00c:	fa09 f303 	lsl.w	r3, r9, r3
 800b010:	4313      	orrs	r3, r2
 800b012:	46a2      	mov	sl, r4
 800b014:	9304      	str	r3, [sp, #16]
 800b016:	e7d2      	b.n	800afbe <_vfiprintf_r+0xc6>
 800b018:	9b03      	ldr	r3, [sp, #12]
 800b01a:	1d19      	adds	r1, r3, #4
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	9103      	str	r1, [sp, #12]
 800b020:	2b00      	cmp	r3, #0
 800b022:	bfbb      	ittet	lt
 800b024:	425b      	neglt	r3, r3
 800b026:	f042 0202 	orrlt.w	r2, r2, #2
 800b02a:	9307      	strge	r3, [sp, #28]
 800b02c:	9307      	strlt	r3, [sp, #28]
 800b02e:	bfb8      	it	lt
 800b030:	9204      	strlt	r2, [sp, #16]
 800b032:	7823      	ldrb	r3, [r4, #0]
 800b034:	2b2e      	cmp	r3, #46	; 0x2e
 800b036:	d10c      	bne.n	800b052 <_vfiprintf_r+0x15a>
 800b038:	7863      	ldrb	r3, [r4, #1]
 800b03a:	2b2a      	cmp	r3, #42	; 0x2a
 800b03c:	d134      	bne.n	800b0a8 <_vfiprintf_r+0x1b0>
 800b03e:	9b03      	ldr	r3, [sp, #12]
 800b040:	3402      	adds	r4, #2
 800b042:	1d1a      	adds	r2, r3, #4
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	9203      	str	r2, [sp, #12]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	bfb8      	it	lt
 800b04c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b050:	9305      	str	r3, [sp, #20]
 800b052:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b11c <_vfiprintf_r+0x224>
 800b056:	2203      	movs	r2, #3
 800b058:	4650      	mov	r0, sl
 800b05a:	7821      	ldrb	r1, [r4, #0]
 800b05c:	f7fd fcd1 	bl	8008a02 <memchr>
 800b060:	b138      	cbz	r0, 800b072 <_vfiprintf_r+0x17a>
 800b062:	2240      	movs	r2, #64	; 0x40
 800b064:	9b04      	ldr	r3, [sp, #16]
 800b066:	eba0 000a 	sub.w	r0, r0, sl
 800b06a:	4082      	lsls	r2, r0
 800b06c:	4313      	orrs	r3, r2
 800b06e:	3401      	adds	r4, #1
 800b070:	9304      	str	r3, [sp, #16]
 800b072:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b076:	2206      	movs	r2, #6
 800b078:	4829      	ldr	r0, [pc, #164]	; (800b120 <_vfiprintf_r+0x228>)
 800b07a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b07e:	f7fd fcc0 	bl	8008a02 <memchr>
 800b082:	2800      	cmp	r0, #0
 800b084:	d03f      	beq.n	800b106 <_vfiprintf_r+0x20e>
 800b086:	4b27      	ldr	r3, [pc, #156]	; (800b124 <_vfiprintf_r+0x22c>)
 800b088:	bb1b      	cbnz	r3, 800b0d2 <_vfiprintf_r+0x1da>
 800b08a:	9b03      	ldr	r3, [sp, #12]
 800b08c:	3307      	adds	r3, #7
 800b08e:	f023 0307 	bic.w	r3, r3, #7
 800b092:	3308      	adds	r3, #8
 800b094:	9303      	str	r3, [sp, #12]
 800b096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b098:	443b      	add	r3, r7
 800b09a:	9309      	str	r3, [sp, #36]	; 0x24
 800b09c:	e768      	b.n	800af70 <_vfiprintf_r+0x78>
 800b09e:	460c      	mov	r4, r1
 800b0a0:	2001      	movs	r0, #1
 800b0a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0a6:	e7a6      	b.n	800aff6 <_vfiprintf_r+0xfe>
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	f04f 0c0a 	mov.w	ip, #10
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	3401      	adds	r4, #1
 800b0b2:	9305      	str	r3, [sp, #20]
 800b0b4:	4620      	mov	r0, r4
 800b0b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0ba:	3a30      	subs	r2, #48	; 0x30
 800b0bc:	2a09      	cmp	r2, #9
 800b0be:	d903      	bls.n	800b0c8 <_vfiprintf_r+0x1d0>
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d0c6      	beq.n	800b052 <_vfiprintf_r+0x15a>
 800b0c4:	9105      	str	r1, [sp, #20]
 800b0c6:	e7c4      	b.n	800b052 <_vfiprintf_r+0x15a>
 800b0c8:	4604      	mov	r4, r0
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0d0:	e7f0      	b.n	800b0b4 <_vfiprintf_r+0x1bc>
 800b0d2:	ab03      	add	r3, sp, #12
 800b0d4:	9300      	str	r3, [sp, #0]
 800b0d6:	462a      	mov	r2, r5
 800b0d8:	4630      	mov	r0, r6
 800b0da:	4b13      	ldr	r3, [pc, #76]	; (800b128 <_vfiprintf_r+0x230>)
 800b0dc:	a904      	add	r1, sp, #16
 800b0de:	f7fc feff 	bl	8007ee0 <_printf_float>
 800b0e2:	4607      	mov	r7, r0
 800b0e4:	1c78      	adds	r0, r7, #1
 800b0e6:	d1d6      	bne.n	800b096 <_vfiprintf_r+0x19e>
 800b0e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0ea:	07d9      	lsls	r1, r3, #31
 800b0ec:	d405      	bmi.n	800b0fa <_vfiprintf_r+0x202>
 800b0ee:	89ab      	ldrh	r3, [r5, #12]
 800b0f0:	059a      	lsls	r2, r3, #22
 800b0f2:	d402      	bmi.n	800b0fa <_vfiprintf_r+0x202>
 800b0f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0f6:	f7fd fc83 	bl	8008a00 <__retarget_lock_release_recursive>
 800b0fa:	89ab      	ldrh	r3, [r5, #12]
 800b0fc:	065b      	lsls	r3, r3, #25
 800b0fe:	f53f af1d 	bmi.w	800af3c <_vfiprintf_r+0x44>
 800b102:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b104:	e71c      	b.n	800af40 <_vfiprintf_r+0x48>
 800b106:	ab03      	add	r3, sp, #12
 800b108:	9300      	str	r3, [sp, #0]
 800b10a:	462a      	mov	r2, r5
 800b10c:	4630      	mov	r0, r6
 800b10e:	4b06      	ldr	r3, [pc, #24]	; (800b128 <_vfiprintf_r+0x230>)
 800b110:	a904      	add	r1, sp, #16
 800b112:	f7fd f985 	bl	8008420 <_printf_i>
 800b116:	e7e4      	b.n	800b0e2 <_vfiprintf_r+0x1ea>
 800b118:	0800d72c 	.word	0x0800d72c
 800b11c:	0800d732 	.word	0x0800d732
 800b120:	0800d736 	.word	0x0800d736
 800b124:	08007ee1 	.word	0x08007ee1
 800b128:	0800aed5 	.word	0x0800aed5

0800b12c <__swbuf_r>:
 800b12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b12e:	460e      	mov	r6, r1
 800b130:	4614      	mov	r4, r2
 800b132:	4605      	mov	r5, r0
 800b134:	b118      	cbz	r0, 800b13e <__swbuf_r+0x12>
 800b136:	6a03      	ldr	r3, [r0, #32]
 800b138:	b90b      	cbnz	r3, 800b13e <__swbuf_r+0x12>
 800b13a:	f7fd fb1f 	bl	800877c <__sinit>
 800b13e:	69a3      	ldr	r3, [r4, #24]
 800b140:	60a3      	str	r3, [r4, #8]
 800b142:	89a3      	ldrh	r3, [r4, #12]
 800b144:	071a      	lsls	r2, r3, #28
 800b146:	d525      	bpl.n	800b194 <__swbuf_r+0x68>
 800b148:	6923      	ldr	r3, [r4, #16]
 800b14a:	b31b      	cbz	r3, 800b194 <__swbuf_r+0x68>
 800b14c:	6823      	ldr	r3, [r4, #0]
 800b14e:	6922      	ldr	r2, [r4, #16]
 800b150:	b2f6      	uxtb	r6, r6
 800b152:	1a98      	subs	r0, r3, r2
 800b154:	6963      	ldr	r3, [r4, #20]
 800b156:	4637      	mov	r7, r6
 800b158:	4283      	cmp	r3, r0
 800b15a:	dc04      	bgt.n	800b166 <__swbuf_r+0x3a>
 800b15c:	4621      	mov	r1, r4
 800b15e:	4628      	mov	r0, r5
 800b160:	f7ff fdce 	bl	800ad00 <_fflush_r>
 800b164:	b9e0      	cbnz	r0, 800b1a0 <__swbuf_r+0x74>
 800b166:	68a3      	ldr	r3, [r4, #8]
 800b168:	3b01      	subs	r3, #1
 800b16a:	60a3      	str	r3, [r4, #8]
 800b16c:	6823      	ldr	r3, [r4, #0]
 800b16e:	1c5a      	adds	r2, r3, #1
 800b170:	6022      	str	r2, [r4, #0]
 800b172:	701e      	strb	r6, [r3, #0]
 800b174:	6962      	ldr	r2, [r4, #20]
 800b176:	1c43      	adds	r3, r0, #1
 800b178:	429a      	cmp	r2, r3
 800b17a:	d004      	beq.n	800b186 <__swbuf_r+0x5a>
 800b17c:	89a3      	ldrh	r3, [r4, #12]
 800b17e:	07db      	lsls	r3, r3, #31
 800b180:	d506      	bpl.n	800b190 <__swbuf_r+0x64>
 800b182:	2e0a      	cmp	r6, #10
 800b184:	d104      	bne.n	800b190 <__swbuf_r+0x64>
 800b186:	4621      	mov	r1, r4
 800b188:	4628      	mov	r0, r5
 800b18a:	f7ff fdb9 	bl	800ad00 <_fflush_r>
 800b18e:	b938      	cbnz	r0, 800b1a0 <__swbuf_r+0x74>
 800b190:	4638      	mov	r0, r7
 800b192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b194:	4621      	mov	r1, r4
 800b196:	4628      	mov	r0, r5
 800b198:	f000 f806 	bl	800b1a8 <__swsetup_r>
 800b19c:	2800      	cmp	r0, #0
 800b19e:	d0d5      	beq.n	800b14c <__swbuf_r+0x20>
 800b1a0:	f04f 37ff 	mov.w	r7, #4294967295
 800b1a4:	e7f4      	b.n	800b190 <__swbuf_r+0x64>
	...

0800b1a8 <__swsetup_r>:
 800b1a8:	b538      	push	{r3, r4, r5, lr}
 800b1aa:	4b2a      	ldr	r3, [pc, #168]	; (800b254 <__swsetup_r+0xac>)
 800b1ac:	4605      	mov	r5, r0
 800b1ae:	6818      	ldr	r0, [r3, #0]
 800b1b0:	460c      	mov	r4, r1
 800b1b2:	b118      	cbz	r0, 800b1bc <__swsetup_r+0x14>
 800b1b4:	6a03      	ldr	r3, [r0, #32]
 800b1b6:	b90b      	cbnz	r3, 800b1bc <__swsetup_r+0x14>
 800b1b8:	f7fd fae0 	bl	800877c <__sinit>
 800b1bc:	89a3      	ldrh	r3, [r4, #12]
 800b1be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b1c2:	0718      	lsls	r0, r3, #28
 800b1c4:	d422      	bmi.n	800b20c <__swsetup_r+0x64>
 800b1c6:	06d9      	lsls	r1, r3, #27
 800b1c8:	d407      	bmi.n	800b1da <__swsetup_r+0x32>
 800b1ca:	2309      	movs	r3, #9
 800b1cc:	602b      	str	r3, [r5, #0]
 800b1ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b1d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b1d6:	81a3      	strh	r3, [r4, #12]
 800b1d8:	e034      	b.n	800b244 <__swsetup_r+0x9c>
 800b1da:	0758      	lsls	r0, r3, #29
 800b1dc:	d512      	bpl.n	800b204 <__swsetup_r+0x5c>
 800b1de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1e0:	b141      	cbz	r1, 800b1f4 <__swsetup_r+0x4c>
 800b1e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1e6:	4299      	cmp	r1, r3
 800b1e8:	d002      	beq.n	800b1f0 <__swsetup_r+0x48>
 800b1ea:	4628      	mov	r0, r5
 800b1ec:	f7fe fa9c 	bl	8009728 <_free_r>
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	6363      	str	r3, [r4, #52]	; 0x34
 800b1f4:	89a3      	ldrh	r3, [r4, #12]
 800b1f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b1fa:	81a3      	strh	r3, [r4, #12]
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	6063      	str	r3, [r4, #4]
 800b200:	6923      	ldr	r3, [r4, #16]
 800b202:	6023      	str	r3, [r4, #0]
 800b204:	89a3      	ldrh	r3, [r4, #12]
 800b206:	f043 0308 	orr.w	r3, r3, #8
 800b20a:	81a3      	strh	r3, [r4, #12]
 800b20c:	6923      	ldr	r3, [r4, #16]
 800b20e:	b94b      	cbnz	r3, 800b224 <__swsetup_r+0x7c>
 800b210:	89a3      	ldrh	r3, [r4, #12]
 800b212:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b216:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b21a:	d003      	beq.n	800b224 <__swsetup_r+0x7c>
 800b21c:	4621      	mov	r1, r4
 800b21e:	4628      	mov	r0, r5
 800b220:	f000 f883 	bl	800b32a <__smakebuf_r>
 800b224:	89a0      	ldrh	r0, [r4, #12]
 800b226:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b22a:	f010 0301 	ands.w	r3, r0, #1
 800b22e:	d00a      	beq.n	800b246 <__swsetup_r+0x9e>
 800b230:	2300      	movs	r3, #0
 800b232:	60a3      	str	r3, [r4, #8]
 800b234:	6963      	ldr	r3, [r4, #20]
 800b236:	425b      	negs	r3, r3
 800b238:	61a3      	str	r3, [r4, #24]
 800b23a:	6923      	ldr	r3, [r4, #16]
 800b23c:	b943      	cbnz	r3, 800b250 <__swsetup_r+0xa8>
 800b23e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b242:	d1c4      	bne.n	800b1ce <__swsetup_r+0x26>
 800b244:	bd38      	pop	{r3, r4, r5, pc}
 800b246:	0781      	lsls	r1, r0, #30
 800b248:	bf58      	it	pl
 800b24a:	6963      	ldrpl	r3, [r4, #20]
 800b24c:	60a3      	str	r3, [r4, #8]
 800b24e:	e7f4      	b.n	800b23a <__swsetup_r+0x92>
 800b250:	2000      	movs	r0, #0
 800b252:	e7f7      	b.n	800b244 <__swsetup_r+0x9c>
 800b254:	200001dc 	.word	0x200001dc

0800b258 <_raise_r>:
 800b258:	291f      	cmp	r1, #31
 800b25a:	b538      	push	{r3, r4, r5, lr}
 800b25c:	4604      	mov	r4, r0
 800b25e:	460d      	mov	r5, r1
 800b260:	d904      	bls.n	800b26c <_raise_r+0x14>
 800b262:	2316      	movs	r3, #22
 800b264:	6003      	str	r3, [r0, #0]
 800b266:	f04f 30ff 	mov.w	r0, #4294967295
 800b26a:	bd38      	pop	{r3, r4, r5, pc}
 800b26c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b26e:	b112      	cbz	r2, 800b276 <_raise_r+0x1e>
 800b270:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b274:	b94b      	cbnz	r3, 800b28a <_raise_r+0x32>
 800b276:	4620      	mov	r0, r4
 800b278:	f000 f830 	bl	800b2dc <_getpid_r>
 800b27c:	462a      	mov	r2, r5
 800b27e:	4601      	mov	r1, r0
 800b280:	4620      	mov	r0, r4
 800b282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b286:	f000 b817 	b.w	800b2b8 <_kill_r>
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	d00a      	beq.n	800b2a4 <_raise_r+0x4c>
 800b28e:	1c59      	adds	r1, r3, #1
 800b290:	d103      	bne.n	800b29a <_raise_r+0x42>
 800b292:	2316      	movs	r3, #22
 800b294:	6003      	str	r3, [r0, #0]
 800b296:	2001      	movs	r0, #1
 800b298:	e7e7      	b.n	800b26a <_raise_r+0x12>
 800b29a:	2400      	movs	r4, #0
 800b29c:	4628      	mov	r0, r5
 800b29e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b2a2:	4798      	blx	r3
 800b2a4:	2000      	movs	r0, #0
 800b2a6:	e7e0      	b.n	800b26a <_raise_r+0x12>

0800b2a8 <raise>:
 800b2a8:	4b02      	ldr	r3, [pc, #8]	; (800b2b4 <raise+0xc>)
 800b2aa:	4601      	mov	r1, r0
 800b2ac:	6818      	ldr	r0, [r3, #0]
 800b2ae:	f7ff bfd3 	b.w	800b258 <_raise_r>
 800b2b2:	bf00      	nop
 800b2b4:	200001dc 	.word	0x200001dc

0800b2b8 <_kill_r>:
 800b2b8:	b538      	push	{r3, r4, r5, lr}
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	4d06      	ldr	r5, [pc, #24]	; (800b2d8 <_kill_r+0x20>)
 800b2be:	4604      	mov	r4, r0
 800b2c0:	4608      	mov	r0, r1
 800b2c2:	4611      	mov	r1, r2
 800b2c4:	602b      	str	r3, [r5, #0]
 800b2c6:	f7f8 f92a 	bl	800351e <_kill>
 800b2ca:	1c43      	adds	r3, r0, #1
 800b2cc:	d102      	bne.n	800b2d4 <_kill_r+0x1c>
 800b2ce:	682b      	ldr	r3, [r5, #0]
 800b2d0:	b103      	cbz	r3, 800b2d4 <_kill_r+0x1c>
 800b2d2:	6023      	str	r3, [r4, #0]
 800b2d4:	bd38      	pop	{r3, r4, r5, pc}
 800b2d6:	bf00      	nop
 800b2d8:	20000cb8 	.word	0x20000cb8

0800b2dc <_getpid_r>:
 800b2dc:	f7f8 b918 	b.w	8003510 <_getpid>

0800b2e0 <__swhatbuf_r>:
 800b2e0:	b570      	push	{r4, r5, r6, lr}
 800b2e2:	460c      	mov	r4, r1
 800b2e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2e8:	4615      	mov	r5, r2
 800b2ea:	2900      	cmp	r1, #0
 800b2ec:	461e      	mov	r6, r3
 800b2ee:	b096      	sub	sp, #88	; 0x58
 800b2f0:	da0c      	bge.n	800b30c <__swhatbuf_r+0x2c>
 800b2f2:	89a3      	ldrh	r3, [r4, #12]
 800b2f4:	2100      	movs	r1, #0
 800b2f6:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b2fa:	bf0c      	ite	eq
 800b2fc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b300:	2340      	movne	r3, #64	; 0x40
 800b302:	2000      	movs	r0, #0
 800b304:	6031      	str	r1, [r6, #0]
 800b306:	602b      	str	r3, [r5, #0]
 800b308:	b016      	add	sp, #88	; 0x58
 800b30a:	bd70      	pop	{r4, r5, r6, pc}
 800b30c:	466a      	mov	r2, sp
 800b30e:	f000 f849 	bl	800b3a4 <_fstat_r>
 800b312:	2800      	cmp	r0, #0
 800b314:	dbed      	blt.n	800b2f2 <__swhatbuf_r+0x12>
 800b316:	9901      	ldr	r1, [sp, #4]
 800b318:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b31c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b320:	4259      	negs	r1, r3
 800b322:	4159      	adcs	r1, r3
 800b324:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b328:	e7eb      	b.n	800b302 <__swhatbuf_r+0x22>

0800b32a <__smakebuf_r>:
 800b32a:	898b      	ldrh	r3, [r1, #12]
 800b32c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b32e:	079d      	lsls	r5, r3, #30
 800b330:	4606      	mov	r6, r0
 800b332:	460c      	mov	r4, r1
 800b334:	d507      	bpl.n	800b346 <__smakebuf_r+0x1c>
 800b336:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b33a:	6023      	str	r3, [r4, #0]
 800b33c:	6123      	str	r3, [r4, #16]
 800b33e:	2301      	movs	r3, #1
 800b340:	6163      	str	r3, [r4, #20]
 800b342:	b002      	add	sp, #8
 800b344:	bd70      	pop	{r4, r5, r6, pc}
 800b346:	466a      	mov	r2, sp
 800b348:	ab01      	add	r3, sp, #4
 800b34a:	f7ff ffc9 	bl	800b2e0 <__swhatbuf_r>
 800b34e:	9900      	ldr	r1, [sp, #0]
 800b350:	4605      	mov	r5, r0
 800b352:	4630      	mov	r0, r6
 800b354:	f7fe fdb2 	bl	8009ebc <_malloc_r>
 800b358:	b948      	cbnz	r0, 800b36e <__smakebuf_r+0x44>
 800b35a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b35e:	059a      	lsls	r2, r3, #22
 800b360:	d4ef      	bmi.n	800b342 <__smakebuf_r+0x18>
 800b362:	f023 0303 	bic.w	r3, r3, #3
 800b366:	f043 0302 	orr.w	r3, r3, #2
 800b36a:	81a3      	strh	r3, [r4, #12]
 800b36c:	e7e3      	b.n	800b336 <__smakebuf_r+0xc>
 800b36e:	89a3      	ldrh	r3, [r4, #12]
 800b370:	6020      	str	r0, [r4, #0]
 800b372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b376:	81a3      	strh	r3, [r4, #12]
 800b378:	9b00      	ldr	r3, [sp, #0]
 800b37a:	6120      	str	r0, [r4, #16]
 800b37c:	6163      	str	r3, [r4, #20]
 800b37e:	9b01      	ldr	r3, [sp, #4]
 800b380:	b15b      	cbz	r3, 800b39a <__smakebuf_r+0x70>
 800b382:	4630      	mov	r0, r6
 800b384:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b388:	f000 f81e 	bl	800b3c8 <_isatty_r>
 800b38c:	b128      	cbz	r0, 800b39a <__smakebuf_r+0x70>
 800b38e:	89a3      	ldrh	r3, [r4, #12]
 800b390:	f023 0303 	bic.w	r3, r3, #3
 800b394:	f043 0301 	orr.w	r3, r3, #1
 800b398:	81a3      	strh	r3, [r4, #12]
 800b39a:	89a3      	ldrh	r3, [r4, #12]
 800b39c:	431d      	orrs	r5, r3
 800b39e:	81a5      	strh	r5, [r4, #12]
 800b3a0:	e7cf      	b.n	800b342 <__smakebuf_r+0x18>
	...

0800b3a4 <_fstat_r>:
 800b3a4:	b538      	push	{r3, r4, r5, lr}
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	4d06      	ldr	r5, [pc, #24]	; (800b3c4 <_fstat_r+0x20>)
 800b3aa:	4604      	mov	r4, r0
 800b3ac:	4608      	mov	r0, r1
 800b3ae:	4611      	mov	r1, r2
 800b3b0:	602b      	str	r3, [r5, #0]
 800b3b2:	f7f8 f912 	bl	80035da <_fstat>
 800b3b6:	1c43      	adds	r3, r0, #1
 800b3b8:	d102      	bne.n	800b3c0 <_fstat_r+0x1c>
 800b3ba:	682b      	ldr	r3, [r5, #0]
 800b3bc:	b103      	cbz	r3, 800b3c0 <_fstat_r+0x1c>
 800b3be:	6023      	str	r3, [r4, #0]
 800b3c0:	bd38      	pop	{r3, r4, r5, pc}
 800b3c2:	bf00      	nop
 800b3c4:	20000cb8 	.word	0x20000cb8

0800b3c8 <_isatty_r>:
 800b3c8:	b538      	push	{r3, r4, r5, lr}
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	4d05      	ldr	r5, [pc, #20]	; (800b3e4 <_isatty_r+0x1c>)
 800b3ce:	4604      	mov	r4, r0
 800b3d0:	4608      	mov	r0, r1
 800b3d2:	602b      	str	r3, [r5, #0]
 800b3d4:	f7f8 f910 	bl	80035f8 <_isatty>
 800b3d8:	1c43      	adds	r3, r0, #1
 800b3da:	d102      	bne.n	800b3e2 <_isatty_r+0x1a>
 800b3dc:	682b      	ldr	r3, [r5, #0]
 800b3de:	b103      	cbz	r3, 800b3e2 <_isatty_r+0x1a>
 800b3e0:	6023      	str	r3, [r4, #0]
 800b3e2:	bd38      	pop	{r3, r4, r5, pc}
 800b3e4:	20000cb8 	.word	0x20000cb8

0800b3e8 <atan2>:
 800b3e8:	f000 bb02 	b.w	800b9f0 <__ieee754_atan2>

0800b3ec <sqrt>:
 800b3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ee:	4606      	mov	r6, r0
 800b3f0:	460f      	mov	r7, r1
 800b3f2:	f000 f8ab 	bl	800b54c <__ieee754_sqrt>
 800b3f6:	4632      	mov	r2, r6
 800b3f8:	4604      	mov	r4, r0
 800b3fa:	460d      	mov	r5, r1
 800b3fc:	463b      	mov	r3, r7
 800b3fe:	4630      	mov	r0, r6
 800b400:	4639      	mov	r1, r7
 800b402:	f7f5 fb0d 	bl	8000a20 <__aeabi_dcmpun>
 800b406:	b990      	cbnz	r0, 800b42e <sqrt+0x42>
 800b408:	2200      	movs	r2, #0
 800b40a:	2300      	movs	r3, #0
 800b40c:	4630      	mov	r0, r6
 800b40e:	4639      	mov	r1, r7
 800b410:	f7f5 fade 	bl	80009d0 <__aeabi_dcmplt>
 800b414:	b158      	cbz	r0, 800b42e <sqrt+0x42>
 800b416:	f7fd fac7 	bl	80089a8 <__errno>
 800b41a:	2321      	movs	r3, #33	; 0x21
 800b41c:	2200      	movs	r2, #0
 800b41e:	6003      	str	r3, [r0, #0]
 800b420:	2300      	movs	r3, #0
 800b422:	4610      	mov	r0, r2
 800b424:	4619      	mov	r1, r3
 800b426:	f7f5 f98b 	bl	8000740 <__aeabi_ddiv>
 800b42a:	4604      	mov	r4, r0
 800b42c:	460d      	mov	r5, r1
 800b42e:	4620      	mov	r0, r4
 800b430:	4629      	mov	r1, r5
 800b432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b434 <cos>:
 800b434:	b530      	push	{r4, r5, lr}
 800b436:	4a20      	ldr	r2, [pc, #128]	; (800b4b8 <cos+0x84>)
 800b438:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b43c:	4293      	cmp	r3, r2
 800b43e:	b087      	sub	sp, #28
 800b440:	dc06      	bgt.n	800b450 <cos+0x1c>
 800b442:	2200      	movs	r2, #0
 800b444:	2300      	movs	r3, #0
 800b446:	b007      	add	sp, #28
 800b448:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b44c:	f000 b958 	b.w	800b700 <__kernel_cos>
 800b450:	4a1a      	ldr	r2, [pc, #104]	; (800b4bc <cos+0x88>)
 800b452:	4293      	cmp	r3, r2
 800b454:	dd05      	ble.n	800b462 <cos+0x2e>
 800b456:	4602      	mov	r2, r0
 800b458:	460b      	mov	r3, r1
 800b45a:	f7f4 fe8f 	bl	800017c <__aeabi_dsub>
 800b45e:	b007      	add	sp, #28
 800b460:	bd30      	pop	{r4, r5, pc}
 800b462:	aa02      	add	r2, sp, #8
 800b464:	f000 fb94 	bl	800bb90 <__ieee754_rem_pio2>
 800b468:	f000 0003 	and.w	r0, r0, #3
 800b46c:	2801      	cmp	r0, #1
 800b46e:	d009      	beq.n	800b484 <cos+0x50>
 800b470:	2802      	cmp	r0, #2
 800b472:	d011      	beq.n	800b498 <cos+0x64>
 800b474:	b9b8      	cbnz	r0, 800b4a6 <cos+0x72>
 800b476:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b47a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b47e:	f000 f93f 	bl	800b700 <__kernel_cos>
 800b482:	e7ec      	b.n	800b45e <cos+0x2a>
 800b484:	9000      	str	r0, [sp, #0]
 800b486:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b48a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b48e:	f000 f9f7 	bl	800b880 <__kernel_sin>
 800b492:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b496:	e7e2      	b.n	800b45e <cos+0x2a>
 800b498:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b49c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4a0:	f000 f92e 	bl	800b700 <__kernel_cos>
 800b4a4:	e7f5      	b.n	800b492 <cos+0x5e>
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4ac:	9300      	str	r3, [sp, #0]
 800b4ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4b2:	f000 f9e5 	bl	800b880 <__kernel_sin>
 800b4b6:	e7d2      	b.n	800b45e <cos+0x2a>
 800b4b8:	3fe921fb 	.word	0x3fe921fb
 800b4bc:	7fefffff 	.word	0x7fefffff

0800b4c0 <sin>:
 800b4c0:	b530      	push	{r4, r5, lr}
 800b4c2:	4a20      	ldr	r2, [pc, #128]	; (800b544 <sin+0x84>)
 800b4c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	b087      	sub	sp, #28
 800b4cc:	dc06      	bgt.n	800b4dc <sin+0x1c>
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	9300      	str	r3, [sp, #0]
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	f000 f9d3 	bl	800b880 <__kernel_sin>
 800b4da:	e006      	b.n	800b4ea <sin+0x2a>
 800b4dc:	4a1a      	ldr	r2, [pc, #104]	; (800b548 <sin+0x88>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	dd05      	ble.n	800b4ee <sin+0x2e>
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	460b      	mov	r3, r1
 800b4e6:	f7f4 fe49 	bl	800017c <__aeabi_dsub>
 800b4ea:	b007      	add	sp, #28
 800b4ec:	bd30      	pop	{r4, r5, pc}
 800b4ee:	aa02      	add	r2, sp, #8
 800b4f0:	f000 fb4e 	bl	800bb90 <__ieee754_rem_pio2>
 800b4f4:	f000 0003 	and.w	r0, r0, #3
 800b4f8:	2801      	cmp	r0, #1
 800b4fa:	d009      	beq.n	800b510 <sin+0x50>
 800b4fc:	2802      	cmp	r0, #2
 800b4fe:	d00e      	beq.n	800b51e <sin+0x5e>
 800b500:	b9c0      	cbnz	r0, 800b534 <sin+0x74>
 800b502:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b506:	2301      	movs	r3, #1
 800b508:	9300      	str	r3, [sp, #0]
 800b50a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b50e:	e7e2      	b.n	800b4d6 <sin+0x16>
 800b510:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b514:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b518:	f000 f8f2 	bl	800b700 <__kernel_cos>
 800b51c:	e7e5      	b.n	800b4ea <sin+0x2a>
 800b51e:	2301      	movs	r3, #1
 800b520:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b524:	9300      	str	r3, [sp, #0]
 800b526:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b52a:	f000 f9a9 	bl	800b880 <__kernel_sin>
 800b52e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b532:	e7da      	b.n	800b4ea <sin+0x2a>
 800b534:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b538:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b53c:	f000 f8e0 	bl	800b700 <__kernel_cos>
 800b540:	e7f5      	b.n	800b52e <sin+0x6e>
 800b542:	bf00      	nop
 800b544:	3fe921fb 	.word	0x3fe921fb
 800b548:	7fefffff 	.word	0x7fefffff

0800b54c <__ieee754_sqrt>:
 800b54c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800b6f0 <__ieee754_sqrt+0x1a4>
 800b550:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b554:	ea3c 0c01 	bics.w	ip, ip, r1
 800b558:	460b      	mov	r3, r1
 800b55a:	4606      	mov	r6, r0
 800b55c:	460d      	mov	r5, r1
 800b55e:	460a      	mov	r2, r1
 800b560:	4604      	mov	r4, r0
 800b562:	d10e      	bne.n	800b582 <__ieee754_sqrt+0x36>
 800b564:	4602      	mov	r2, r0
 800b566:	f7f4 ffc1 	bl	80004ec <__aeabi_dmul>
 800b56a:	4602      	mov	r2, r0
 800b56c:	460b      	mov	r3, r1
 800b56e:	4630      	mov	r0, r6
 800b570:	4629      	mov	r1, r5
 800b572:	f7f4 fe05 	bl	8000180 <__adddf3>
 800b576:	4606      	mov	r6, r0
 800b578:	460d      	mov	r5, r1
 800b57a:	4630      	mov	r0, r6
 800b57c:	4629      	mov	r1, r5
 800b57e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b582:	2900      	cmp	r1, #0
 800b584:	dc0d      	bgt.n	800b5a2 <__ieee754_sqrt+0x56>
 800b586:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b58a:	ea5c 0c00 	orrs.w	ip, ip, r0
 800b58e:	d0f4      	beq.n	800b57a <__ieee754_sqrt+0x2e>
 800b590:	b139      	cbz	r1, 800b5a2 <__ieee754_sqrt+0x56>
 800b592:	4602      	mov	r2, r0
 800b594:	f7f4 fdf2 	bl	800017c <__aeabi_dsub>
 800b598:	4602      	mov	r2, r0
 800b59a:	460b      	mov	r3, r1
 800b59c:	f7f5 f8d0 	bl	8000740 <__aeabi_ddiv>
 800b5a0:	e7e9      	b.n	800b576 <__ieee754_sqrt+0x2a>
 800b5a2:	1512      	asrs	r2, r2, #20
 800b5a4:	f000 8089 	beq.w	800b6ba <__ieee754_sqrt+0x16e>
 800b5a8:	2500      	movs	r5, #0
 800b5aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5ae:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800b5b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5b6:	07d2      	lsls	r2, r2, #31
 800b5b8:	bf5c      	itt	pl
 800b5ba:	005b      	lslpl	r3, r3, #1
 800b5bc:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800b5c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b5c4:	bf58      	it	pl
 800b5c6:	0064      	lslpl	r4, r4, #1
 800b5c8:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800b5cc:	0062      	lsls	r2, r4, #1
 800b5ce:	2016      	movs	r0, #22
 800b5d0:	4629      	mov	r1, r5
 800b5d2:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800b5d6:	1076      	asrs	r6, r6, #1
 800b5d8:	190f      	adds	r7, r1, r4
 800b5da:	429f      	cmp	r7, r3
 800b5dc:	bfde      	ittt	le
 800b5de:	1bdb      	suble	r3, r3, r7
 800b5e0:	1939      	addle	r1, r7, r4
 800b5e2:	192d      	addle	r5, r5, r4
 800b5e4:	005b      	lsls	r3, r3, #1
 800b5e6:	3801      	subs	r0, #1
 800b5e8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b5ec:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b5f0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b5f4:	d1f0      	bne.n	800b5d8 <__ieee754_sqrt+0x8c>
 800b5f6:	4604      	mov	r4, r0
 800b5f8:	2720      	movs	r7, #32
 800b5fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800b5fe:	428b      	cmp	r3, r1
 800b600:	eb0c 0e00 	add.w	lr, ip, r0
 800b604:	dc02      	bgt.n	800b60c <__ieee754_sqrt+0xc0>
 800b606:	d113      	bne.n	800b630 <__ieee754_sqrt+0xe4>
 800b608:	4596      	cmp	lr, r2
 800b60a:	d811      	bhi.n	800b630 <__ieee754_sqrt+0xe4>
 800b60c:	f1be 0f00 	cmp.w	lr, #0
 800b610:	eb0e 000c 	add.w	r0, lr, ip
 800b614:	da56      	bge.n	800b6c4 <__ieee754_sqrt+0x178>
 800b616:	2800      	cmp	r0, #0
 800b618:	db54      	blt.n	800b6c4 <__ieee754_sqrt+0x178>
 800b61a:	f101 0801 	add.w	r8, r1, #1
 800b61e:	1a5b      	subs	r3, r3, r1
 800b620:	4641      	mov	r1, r8
 800b622:	4596      	cmp	lr, r2
 800b624:	bf88      	it	hi
 800b626:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b62a:	eba2 020e 	sub.w	r2, r2, lr
 800b62e:	4464      	add	r4, ip
 800b630:	005b      	lsls	r3, r3, #1
 800b632:	3f01      	subs	r7, #1
 800b634:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b638:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b63c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b640:	d1dd      	bne.n	800b5fe <__ieee754_sqrt+0xb2>
 800b642:	4313      	orrs	r3, r2
 800b644:	d01b      	beq.n	800b67e <__ieee754_sqrt+0x132>
 800b646:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800b6f4 <__ieee754_sqrt+0x1a8>
 800b64a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800b6f8 <__ieee754_sqrt+0x1ac>
 800b64e:	e9da 0100 	ldrd	r0, r1, [sl]
 800b652:	e9db 2300 	ldrd	r2, r3, [fp]
 800b656:	f7f4 fd91 	bl	800017c <__aeabi_dsub>
 800b65a:	e9da 8900 	ldrd	r8, r9, [sl]
 800b65e:	4602      	mov	r2, r0
 800b660:	460b      	mov	r3, r1
 800b662:	4640      	mov	r0, r8
 800b664:	4649      	mov	r1, r9
 800b666:	f7f5 f9bd 	bl	80009e4 <__aeabi_dcmple>
 800b66a:	b140      	cbz	r0, 800b67e <__ieee754_sqrt+0x132>
 800b66c:	e9da 0100 	ldrd	r0, r1, [sl]
 800b670:	e9db 2300 	ldrd	r2, r3, [fp]
 800b674:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b678:	d126      	bne.n	800b6c8 <__ieee754_sqrt+0x17c>
 800b67a:	463c      	mov	r4, r7
 800b67c:	3501      	adds	r5, #1
 800b67e:	106b      	asrs	r3, r5, #1
 800b680:	0864      	lsrs	r4, r4, #1
 800b682:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b686:	07ea      	lsls	r2, r5, #31
 800b688:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b68c:	bf48      	it	mi
 800b68e:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800b692:	4620      	mov	r0, r4
 800b694:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800b698:	e76d      	b.n	800b576 <__ieee754_sqrt+0x2a>
 800b69a:	0ae3      	lsrs	r3, r4, #11
 800b69c:	3915      	subs	r1, #21
 800b69e:	0564      	lsls	r4, r4, #21
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d0fa      	beq.n	800b69a <__ieee754_sqrt+0x14e>
 800b6a4:	02d8      	lsls	r0, r3, #11
 800b6a6:	d50a      	bpl.n	800b6be <__ieee754_sqrt+0x172>
 800b6a8:	f1c2 0020 	rsb	r0, r2, #32
 800b6ac:	fa24 f000 	lsr.w	r0, r4, r0
 800b6b0:	1e55      	subs	r5, r2, #1
 800b6b2:	4094      	lsls	r4, r2
 800b6b4:	4303      	orrs	r3, r0
 800b6b6:	1b4a      	subs	r2, r1, r5
 800b6b8:	e776      	b.n	800b5a8 <__ieee754_sqrt+0x5c>
 800b6ba:	4611      	mov	r1, r2
 800b6bc:	e7f0      	b.n	800b6a0 <__ieee754_sqrt+0x154>
 800b6be:	005b      	lsls	r3, r3, #1
 800b6c0:	3201      	adds	r2, #1
 800b6c2:	e7ef      	b.n	800b6a4 <__ieee754_sqrt+0x158>
 800b6c4:	4688      	mov	r8, r1
 800b6c6:	e7aa      	b.n	800b61e <__ieee754_sqrt+0xd2>
 800b6c8:	f7f4 fd5a 	bl	8000180 <__adddf3>
 800b6cc:	e9da 8900 	ldrd	r8, r9, [sl]
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	4640      	mov	r0, r8
 800b6d6:	4649      	mov	r1, r9
 800b6d8:	f7f5 f97a 	bl	80009d0 <__aeabi_dcmplt>
 800b6dc:	b120      	cbz	r0, 800b6e8 <__ieee754_sqrt+0x19c>
 800b6de:	1ca1      	adds	r1, r4, #2
 800b6e0:	bf08      	it	eq
 800b6e2:	3501      	addeq	r5, #1
 800b6e4:	3402      	adds	r4, #2
 800b6e6:	e7ca      	b.n	800b67e <__ieee754_sqrt+0x132>
 800b6e8:	3401      	adds	r4, #1
 800b6ea:	f024 0401 	bic.w	r4, r4, #1
 800b6ee:	e7c6      	b.n	800b67e <__ieee754_sqrt+0x132>
 800b6f0:	7ff00000 	.word	0x7ff00000
 800b6f4:	200001e0 	.word	0x200001e0
 800b6f8:	200001e8 	.word	0x200001e8
 800b6fc:	00000000 	.word	0x00000000

0800b700 <__kernel_cos>:
 800b700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b704:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b708:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800b70c:	4680      	mov	r8, r0
 800b70e:	460f      	mov	r7, r1
 800b710:	e9cd 2300 	strd	r2, r3, [sp]
 800b714:	da04      	bge.n	800b720 <__kernel_cos+0x20>
 800b716:	f7f5 f999 	bl	8000a4c <__aeabi_d2iz>
 800b71a:	2800      	cmp	r0, #0
 800b71c:	f000 8086 	beq.w	800b82c <__kernel_cos+0x12c>
 800b720:	4642      	mov	r2, r8
 800b722:	463b      	mov	r3, r7
 800b724:	4640      	mov	r0, r8
 800b726:	4639      	mov	r1, r7
 800b728:	f7f4 fee0 	bl	80004ec <__aeabi_dmul>
 800b72c:	2200      	movs	r2, #0
 800b72e:	4b4e      	ldr	r3, [pc, #312]	; (800b868 <__kernel_cos+0x168>)
 800b730:	4604      	mov	r4, r0
 800b732:	460d      	mov	r5, r1
 800b734:	f7f4 feda 	bl	80004ec <__aeabi_dmul>
 800b738:	a33f      	add	r3, pc, #252	; (adr r3, 800b838 <__kernel_cos+0x138>)
 800b73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73e:	4682      	mov	sl, r0
 800b740:	468b      	mov	fp, r1
 800b742:	4620      	mov	r0, r4
 800b744:	4629      	mov	r1, r5
 800b746:	f7f4 fed1 	bl	80004ec <__aeabi_dmul>
 800b74a:	a33d      	add	r3, pc, #244	; (adr r3, 800b840 <__kernel_cos+0x140>)
 800b74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b750:	f7f4 fd16 	bl	8000180 <__adddf3>
 800b754:	4622      	mov	r2, r4
 800b756:	462b      	mov	r3, r5
 800b758:	f7f4 fec8 	bl	80004ec <__aeabi_dmul>
 800b75c:	a33a      	add	r3, pc, #232	; (adr r3, 800b848 <__kernel_cos+0x148>)
 800b75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b762:	f7f4 fd0b 	bl	800017c <__aeabi_dsub>
 800b766:	4622      	mov	r2, r4
 800b768:	462b      	mov	r3, r5
 800b76a:	f7f4 febf 	bl	80004ec <__aeabi_dmul>
 800b76e:	a338      	add	r3, pc, #224	; (adr r3, 800b850 <__kernel_cos+0x150>)
 800b770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b774:	f7f4 fd04 	bl	8000180 <__adddf3>
 800b778:	4622      	mov	r2, r4
 800b77a:	462b      	mov	r3, r5
 800b77c:	f7f4 feb6 	bl	80004ec <__aeabi_dmul>
 800b780:	a335      	add	r3, pc, #212	; (adr r3, 800b858 <__kernel_cos+0x158>)
 800b782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b786:	f7f4 fcf9 	bl	800017c <__aeabi_dsub>
 800b78a:	4622      	mov	r2, r4
 800b78c:	462b      	mov	r3, r5
 800b78e:	f7f4 fead 	bl	80004ec <__aeabi_dmul>
 800b792:	a333      	add	r3, pc, #204	; (adr r3, 800b860 <__kernel_cos+0x160>)
 800b794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b798:	f7f4 fcf2 	bl	8000180 <__adddf3>
 800b79c:	4622      	mov	r2, r4
 800b79e:	462b      	mov	r3, r5
 800b7a0:	f7f4 fea4 	bl	80004ec <__aeabi_dmul>
 800b7a4:	4622      	mov	r2, r4
 800b7a6:	462b      	mov	r3, r5
 800b7a8:	f7f4 fea0 	bl	80004ec <__aeabi_dmul>
 800b7ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7b0:	4604      	mov	r4, r0
 800b7b2:	460d      	mov	r5, r1
 800b7b4:	4640      	mov	r0, r8
 800b7b6:	4639      	mov	r1, r7
 800b7b8:	f7f4 fe98 	bl	80004ec <__aeabi_dmul>
 800b7bc:	460b      	mov	r3, r1
 800b7be:	4602      	mov	r2, r0
 800b7c0:	4629      	mov	r1, r5
 800b7c2:	4620      	mov	r0, r4
 800b7c4:	f7f4 fcda 	bl	800017c <__aeabi_dsub>
 800b7c8:	4b28      	ldr	r3, [pc, #160]	; (800b86c <__kernel_cos+0x16c>)
 800b7ca:	4680      	mov	r8, r0
 800b7cc:	429e      	cmp	r6, r3
 800b7ce:	4689      	mov	r9, r1
 800b7d0:	dc0e      	bgt.n	800b7f0 <__kernel_cos+0xf0>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	4650      	mov	r0, sl
 800b7d8:	4659      	mov	r1, fp
 800b7da:	f7f4 fccf 	bl	800017c <__aeabi_dsub>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	2000      	movs	r0, #0
 800b7e2:	460b      	mov	r3, r1
 800b7e4:	4922      	ldr	r1, [pc, #136]	; (800b870 <__kernel_cos+0x170>)
 800b7e6:	f7f4 fcc9 	bl	800017c <__aeabi_dsub>
 800b7ea:	b003      	add	sp, #12
 800b7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f0:	2400      	movs	r4, #0
 800b7f2:	4b20      	ldr	r3, [pc, #128]	; (800b874 <__kernel_cos+0x174>)
 800b7f4:	4622      	mov	r2, r4
 800b7f6:	429e      	cmp	r6, r3
 800b7f8:	bfcc      	ite	gt
 800b7fa:	4d1f      	ldrgt	r5, [pc, #124]	; (800b878 <__kernel_cos+0x178>)
 800b7fc:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800b800:	462b      	mov	r3, r5
 800b802:	2000      	movs	r0, #0
 800b804:	491a      	ldr	r1, [pc, #104]	; (800b870 <__kernel_cos+0x170>)
 800b806:	f7f4 fcb9 	bl	800017c <__aeabi_dsub>
 800b80a:	4622      	mov	r2, r4
 800b80c:	4606      	mov	r6, r0
 800b80e:	460f      	mov	r7, r1
 800b810:	462b      	mov	r3, r5
 800b812:	4650      	mov	r0, sl
 800b814:	4659      	mov	r1, fp
 800b816:	f7f4 fcb1 	bl	800017c <__aeabi_dsub>
 800b81a:	4642      	mov	r2, r8
 800b81c:	464b      	mov	r3, r9
 800b81e:	f7f4 fcad 	bl	800017c <__aeabi_dsub>
 800b822:	4602      	mov	r2, r0
 800b824:	460b      	mov	r3, r1
 800b826:	4630      	mov	r0, r6
 800b828:	4639      	mov	r1, r7
 800b82a:	e7dc      	b.n	800b7e6 <__kernel_cos+0xe6>
 800b82c:	2000      	movs	r0, #0
 800b82e:	4910      	ldr	r1, [pc, #64]	; (800b870 <__kernel_cos+0x170>)
 800b830:	e7db      	b.n	800b7ea <__kernel_cos+0xea>
 800b832:	bf00      	nop
 800b834:	f3af 8000 	nop.w
 800b838:	be8838d4 	.word	0xbe8838d4
 800b83c:	bda8fae9 	.word	0xbda8fae9
 800b840:	bdb4b1c4 	.word	0xbdb4b1c4
 800b844:	3e21ee9e 	.word	0x3e21ee9e
 800b848:	809c52ad 	.word	0x809c52ad
 800b84c:	3e927e4f 	.word	0x3e927e4f
 800b850:	19cb1590 	.word	0x19cb1590
 800b854:	3efa01a0 	.word	0x3efa01a0
 800b858:	16c15177 	.word	0x16c15177
 800b85c:	3f56c16c 	.word	0x3f56c16c
 800b860:	5555554c 	.word	0x5555554c
 800b864:	3fa55555 	.word	0x3fa55555
 800b868:	3fe00000 	.word	0x3fe00000
 800b86c:	3fd33332 	.word	0x3fd33332
 800b870:	3ff00000 	.word	0x3ff00000
 800b874:	3fe90000 	.word	0x3fe90000
 800b878:	3fd20000 	.word	0x3fd20000
 800b87c:	00000000 	.word	0x00000000

0800b880 <__kernel_sin>:
 800b880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b884:	b086      	sub	sp, #24
 800b886:	e9cd 2300 	strd	r2, r3, [sp]
 800b88a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b88e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b892:	4682      	mov	sl, r0
 800b894:	460c      	mov	r4, r1
 800b896:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800b898:	da03      	bge.n	800b8a2 <__kernel_sin+0x22>
 800b89a:	f7f5 f8d7 	bl	8000a4c <__aeabi_d2iz>
 800b89e:	2800      	cmp	r0, #0
 800b8a0:	d050      	beq.n	800b944 <__kernel_sin+0xc4>
 800b8a2:	4652      	mov	r2, sl
 800b8a4:	4623      	mov	r3, r4
 800b8a6:	4650      	mov	r0, sl
 800b8a8:	4621      	mov	r1, r4
 800b8aa:	f7f4 fe1f 	bl	80004ec <__aeabi_dmul>
 800b8ae:	4606      	mov	r6, r0
 800b8b0:	460f      	mov	r7, r1
 800b8b2:	4602      	mov	r2, r0
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	4650      	mov	r0, sl
 800b8b8:	4621      	mov	r1, r4
 800b8ba:	f7f4 fe17 	bl	80004ec <__aeabi_dmul>
 800b8be:	a33e      	add	r3, pc, #248	; (adr r3, 800b9b8 <__kernel_sin+0x138>)
 800b8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c4:	4680      	mov	r8, r0
 800b8c6:	4689      	mov	r9, r1
 800b8c8:	4630      	mov	r0, r6
 800b8ca:	4639      	mov	r1, r7
 800b8cc:	f7f4 fe0e 	bl	80004ec <__aeabi_dmul>
 800b8d0:	a33b      	add	r3, pc, #236	; (adr r3, 800b9c0 <__kernel_sin+0x140>)
 800b8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d6:	f7f4 fc51 	bl	800017c <__aeabi_dsub>
 800b8da:	4632      	mov	r2, r6
 800b8dc:	463b      	mov	r3, r7
 800b8de:	f7f4 fe05 	bl	80004ec <__aeabi_dmul>
 800b8e2:	a339      	add	r3, pc, #228	; (adr r3, 800b9c8 <__kernel_sin+0x148>)
 800b8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e8:	f7f4 fc4a 	bl	8000180 <__adddf3>
 800b8ec:	4632      	mov	r2, r6
 800b8ee:	463b      	mov	r3, r7
 800b8f0:	f7f4 fdfc 	bl	80004ec <__aeabi_dmul>
 800b8f4:	a336      	add	r3, pc, #216	; (adr r3, 800b9d0 <__kernel_sin+0x150>)
 800b8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fa:	f7f4 fc3f 	bl	800017c <__aeabi_dsub>
 800b8fe:	4632      	mov	r2, r6
 800b900:	463b      	mov	r3, r7
 800b902:	f7f4 fdf3 	bl	80004ec <__aeabi_dmul>
 800b906:	a334      	add	r3, pc, #208	; (adr r3, 800b9d8 <__kernel_sin+0x158>)
 800b908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90c:	f7f4 fc38 	bl	8000180 <__adddf3>
 800b910:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b914:	b9dd      	cbnz	r5, 800b94e <__kernel_sin+0xce>
 800b916:	4602      	mov	r2, r0
 800b918:	460b      	mov	r3, r1
 800b91a:	4630      	mov	r0, r6
 800b91c:	4639      	mov	r1, r7
 800b91e:	f7f4 fde5 	bl	80004ec <__aeabi_dmul>
 800b922:	a32f      	add	r3, pc, #188	; (adr r3, 800b9e0 <__kernel_sin+0x160>)
 800b924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b928:	f7f4 fc28 	bl	800017c <__aeabi_dsub>
 800b92c:	4642      	mov	r2, r8
 800b92e:	464b      	mov	r3, r9
 800b930:	f7f4 fddc 	bl	80004ec <__aeabi_dmul>
 800b934:	4602      	mov	r2, r0
 800b936:	460b      	mov	r3, r1
 800b938:	4650      	mov	r0, sl
 800b93a:	4621      	mov	r1, r4
 800b93c:	f7f4 fc20 	bl	8000180 <__adddf3>
 800b940:	4682      	mov	sl, r0
 800b942:	460c      	mov	r4, r1
 800b944:	4650      	mov	r0, sl
 800b946:	4621      	mov	r1, r4
 800b948:	b006      	add	sp, #24
 800b94a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b94e:	2200      	movs	r2, #0
 800b950:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b954:	4b24      	ldr	r3, [pc, #144]	; (800b9e8 <__kernel_sin+0x168>)
 800b956:	f7f4 fdc9 	bl	80004ec <__aeabi_dmul>
 800b95a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b95e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b962:	4640      	mov	r0, r8
 800b964:	4649      	mov	r1, r9
 800b966:	f7f4 fdc1 	bl	80004ec <__aeabi_dmul>
 800b96a:	4602      	mov	r2, r0
 800b96c:	460b      	mov	r3, r1
 800b96e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b972:	f7f4 fc03 	bl	800017c <__aeabi_dsub>
 800b976:	4632      	mov	r2, r6
 800b978:	463b      	mov	r3, r7
 800b97a:	f7f4 fdb7 	bl	80004ec <__aeabi_dmul>
 800b97e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b982:	f7f4 fbfb 	bl	800017c <__aeabi_dsub>
 800b986:	a316      	add	r3, pc, #88	; (adr r3, 800b9e0 <__kernel_sin+0x160>)
 800b988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98c:	4606      	mov	r6, r0
 800b98e:	460f      	mov	r7, r1
 800b990:	4640      	mov	r0, r8
 800b992:	4649      	mov	r1, r9
 800b994:	f7f4 fdaa 	bl	80004ec <__aeabi_dmul>
 800b998:	4602      	mov	r2, r0
 800b99a:	460b      	mov	r3, r1
 800b99c:	4630      	mov	r0, r6
 800b99e:	4639      	mov	r1, r7
 800b9a0:	f7f4 fbee 	bl	8000180 <__adddf3>
 800b9a4:	4602      	mov	r2, r0
 800b9a6:	460b      	mov	r3, r1
 800b9a8:	4650      	mov	r0, sl
 800b9aa:	4621      	mov	r1, r4
 800b9ac:	f7f4 fbe6 	bl	800017c <__aeabi_dsub>
 800b9b0:	e7c6      	b.n	800b940 <__kernel_sin+0xc0>
 800b9b2:	bf00      	nop
 800b9b4:	f3af 8000 	nop.w
 800b9b8:	5acfd57c 	.word	0x5acfd57c
 800b9bc:	3de5d93a 	.word	0x3de5d93a
 800b9c0:	8a2b9ceb 	.word	0x8a2b9ceb
 800b9c4:	3e5ae5e6 	.word	0x3e5ae5e6
 800b9c8:	57b1fe7d 	.word	0x57b1fe7d
 800b9cc:	3ec71de3 	.word	0x3ec71de3
 800b9d0:	19c161d5 	.word	0x19c161d5
 800b9d4:	3f2a01a0 	.word	0x3f2a01a0
 800b9d8:	1110f8a6 	.word	0x1110f8a6
 800b9dc:	3f811111 	.word	0x3f811111
 800b9e0:	55555549 	.word	0x55555549
 800b9e4:	3fc55555 	.word	0x3fc55555
 800b9e8:	3fe00000 	.word	0x3fe00000
 800b9ec:	00000000 	.word	0x00000000

0800b9f0 <__ieee754_atan2>:
 800b9f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f4:	4617      	mov	r7, r2
 800b9f6:	4692      	mov	sl, r2
 800b9f8:	4699      	mov	r9, r3
 800b9fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b9fe:	427b      	negs	r3, r7
 800ba00:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800bb80 <__ieee754_atan2+0x190>
 800ba04:	433b      	orrs	r3, r7
 800ba06:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ba0a:	4543      	cmp	r3, r8
 800ba0c:	4604      	mov	r4, r0
 800ba0e:	460d      	mov	r5, r1
 800ba10:	d809      	bhi.n	800ba26 <__ieee754_atan2+0x36>
 800ba12:	4246      	negs	r6, r0
 800ba14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ba18:	4306      	orrs	r6, r0
 800ba1a:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800ba1e:	4546      	cmp	r6, r8
 800ba20:	468e      	mov	lr, r1
 800ba22:	4683      	mov	fp, r0
 800ba24:	d908      	bls.n	800ba38 <__ieee754_atan2+0x48>
 800ba26:	4652      	mov	r2, sl
 800ba28:	464b      	mov	r3, r9
 800ba2a:	4620      	mov	r0, r4
 800ba2c:	4629      	mov	r1, r5
 800ba2e:	f7f4 fba7 	bl	8000180 <__adddf3>
 800ba32:	4604      	mov	r4, r0
 800ba34:	460d      	mov	r5, r1
 800ba36:	e019      	b.n	800ba6c <__ieee754_atan2+0x7c>
 800ba38:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800ba3c:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800ba40:	433e      	orrs	r6, r7
 800ba42:	d103      	bne.n	800ba4c <__ieee754_atan2+0x5c>
 800ba44:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba48:	f000 ba96 	b.w	800bf78 <atan>
 800ba4c:	ea4f 76a9 	mov.w	r6, r9, asr #30
 800ba50:	f006 0602 	and.w	r6, r6, #2
 800ba54:	ea53 0b0b 	orrs.w	fp, r3, fp
 800ba58:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800ba5c:	d10a      	bne.n	800ba74 <__ieee754_atan2+0x84>
 800ba5e:	2e02      	cmp	r6, #2
 800ba60:	d067      	beq.n	800bb32 <__ieee754_atan2+0x142>
 800ba62:	2e03      	cmp	r6, #3
 800ba64:	d102      	bne.n	800ba6c <__ieee754_atan2+0x7c>
 800ba66:	a53a      	add	r5, pc, #232	; (adr r5, 800bb50 <__ieee754_atan2+0x160>)
 800ba68:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ba6c:	4620      	mov	r0, r4
 800ba6e:	4629      	mov	r1, r5
 800ba70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba74:	4317      	orrs	r7, r2
 800ba76:	d106      	bne.n	800ba86 <__ieee754_atan2+0x96>
 800ba78:	f1be 0f00 	cmp.w	lr, #0
 800ba7c:	da64      	bge.n	800bb48 <__ieee754_atan2+0x158>
 800ba7e:	a536      	add	r5, pc, #216	; (adr r5, 800bb58 <__ieee754_atan2+0x168>)
 800ba80:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ba84:	e7f2      	b.n	800ba6c <__ieee754_atan2+0x7c>
 800ba86:	4542      	cmp	r2, r8
 800ba88:	d10f      	bne.n	800baaa <__ieee754_atan2+0xba>
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	f106 36ff 	add.w	r6, r6, #4294967295
 800ba90:	d107      	bne.n	800baa2 <__ieee754_atan2+0xb2>
 800ba92:	2e02      	cmp	r6, #2
 800ba94:	d851      	bhi.n	800bb3a <__ieee754_atan2+0x14a>
 800ba96:	4b3b      	ldr	r3, [pc, #236]	; (800bb84 <__ieee754_atan2+0x194>)
 800ba98:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ba9c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800baa0:	e7e4      	b.n	800ba6c <__ieee754_atan2+0x7c>
 800baa2:	2e02      	cmp	r6, #2
 800baa4:	d84d      	bhi.n	800bb42 <__ieee754_atan2+0x152>
 800baa6:	4b38      	ldr	r3, [pc, #224]	; (800bb88 <__ieee754_atan2+0x198>)
 800baa8:	e7f6      	b.n	800ba98 <__ieee754_atan2+0xa8>
 800baaa:	4543      	cmp	r3, r8
 800baac:	d0e4      	beq.n	800ba78 <__ieee754_atan2+0x88>
 800baae:	1a9b      	subs	r3, r3, r2
 800bab0:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800bab4:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bab8:	da21      	bge.n	800bafe <__ieee754_atan2+0x10e>
 800baba:	f1b9 0f00 	cmp.w	r9, #0
 800babe:	da01      	bge.n	800bac4 <__ieee754_atan2+0xd4>
 800bac0:	323c      	adds	r2, #60	; 0x3c
 800bac2:	db20      	blt.n	800bb06 <__ieee754_atan2+0x116>
 800bac4:	4652      	mov	r2, sl
 800bac6:	464b      	mov	r3, r9
 800bac8:	4620      	mov	r0, r4
 800baca:	4629      	mov	r1, r5
 800bacc:	f7f4 fe38 	bl	8000740 <__aeabi_ddiv>
 800bad0:	f000 fbdc 	bl	800c28c <fabs>
 800bad4:	f000 fa50 	bl	800bf78 <atan>
 800bad8:	4604      	mov	r4, r0
 800bada:	460d      	mov	r5, r1
 800badc:	2e01      	cmp	r6, #1
 800bade:	d015      	beq.n	800bb0c <__ieee754_atan2+0x11c>
 800bae0:	2e02      	cmp	r6, #2
 800bae2:	d017      	beq.n	800bb14 <__ieee754_atan2+0x124>
 800bae4:	2e00      	cmp	r6, #0
 800bae6:	d0c1      	beq.n	800ba6c <__ieee754_atan2+0x7c>
 800bae8:	a31d      	add	r3, pc, #116	; (adr r3, 800bb60 <__ieee754_atan2+0x170>)
 800baea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baee:	4620      	mov	r0, r4
 800baf0:	4629      	mov	r1, r5
 800baf2:	f7f4 fb43 	bl	800017c <__aeabi_dsub>
 800baf6:	a31c      	add	r3, pc, #112	; (adr r3, 800bb68 <__ieee754_atan2+0x178>)
 800baf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafc:	e016      	b.n	800bb2c <__ieee754_atan2+0x13c>
 800bafe:	a51c      	add	r5, pc, #112	; (adr r5, 800bb70 <__ieee754_atan2+0x180>)
 800bb00:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bb04:	e7ea      	b.n	800badc <__ieee754_atan2+0xec>
 800bb06:	2400      	movs	r4, #0
 800bb08:	2500      	movs	r5, #0
 800bb0a:	e7e7      	b.n	800badc <__ieee754_atan2+0xec>
 800bb0c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800bb10:	461d      	mov	r5, r3
 800bb12:	e7ab      	b.n	800ba6c <__ieee754_atan2+0x7c>
 800bb14:	a312      	add	r3, pc, #72	; (adr r3, 800bb60 <__ieee754_atan2+0x170>)
 800bb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1a:	4620      	mov	r0, r4
 800bb1c:	4629      	mov	r1, r5
 800bb1e:	f7f4 fb2d 	bl	800017c <__aeabi_dsub>
 800bb22:	4602      	mov	r2, r0
 800bb24:	460b      	mov	r3, r1
 800bb26:	a110      	add	r1, pc, #64	; (adr r1, 800bb68 <__ieee754_atan2+0x178>)
 800bb28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb2c:	f7f4 fb26 	bl	800017c <__aeabi_dsub>
 800bb30:	e77f      	b.n	800ba32 <__ieee754_atan2+0x42>
 800bb32:	a50d      	add	r5, pc, #52	; (adr r5, 800bb68 <__ieee754_atan2+0x178>)
 800bb34:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bb38:	e798      	b.n	800ba6c <__ieee754_atan2+0x7c>
 800bb3a:	a50f      	add	r5, pc, #60	; (adr r5, 800bb78 <__ieee754_atan2+0x188>)
 800bb3c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bb40:	e794      	b.n	800ba6c <__ieee754_atan2+0x7c>
 800bb42:	2400      	movs	r4, #0
 800bb44:	2500      	movs	r5, #0
 800bb46:	e791      	b.n	800ba6c <__ieee754_atan2+0x7c>
 800bb48:	a509      	add	r5, pc, #36	; (adr r5, 800bb70 <__ieee754_atan2+0x180>)
 800bb4a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bb4e:	e78d      	b.n	800ba6c <__ieee754_atan2+0x7c>
 800bb50:	54442d18 	.word	0x54442d18
 800bb54:	c00921fb 	.word	0xc00921fb
 800bb58:	54442d18 	.word	0x54442d18
 800bb5c:	bff921fb 	.word	0xbff921fb
 800bb60:	33145c07 	.word	0x33145c07
 800bb64:	3ca1a626 	.word	0x3ca1a626
 800bb68:	54442d18 	.word	0x54442d18
 800bb6c:	400921fb 	.word	0x400921fb
 800bb70:	54442d18 	.word	0x54442d18
 800bb74:	3ff921fb 	.word	0x3ff921fb
 800bb78:	54442d18 	.word	0x54442d18
 800bb7c:	3fe921fb 	.word	0x3fe921fb
 800bb80:	7ff00000 	.word	0x7ff00000
 800bb84:	0800d780 	.word	0x0800d780
 800bb88:	0800d798 	.word	0x0800d798
 800bb8c:	00000000 	.word	0x00000000

0800bb90 <__ieee754_rem_pio2>:
 800bb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb94:	4614      	mov	r4, r2
 800bb96:	4ac2      	ldr	r2, [pc, #776]	; (800bea0 <__ieee754_rem_pio2+0x310>)
 800bb98:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800bb9c:	b08d      	sub	sp, #52	; 0x34
 800bb9e:	4592      	cmp	sl, r2
 800bba0:	9104      	str	r1, [sp, #16]
 800bba2:	dc07      	bgt.n	800bbb4 <__ieee754_rem_pio2+0x24>
 800bba4:	2200      	movs	r2, #0
 800bba6:	2300      	movs	r3, #0
 800bba8:	e9c4 0100 	strd	r0, r1, [r4]
 800bbac:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800bbb0:	2500      	movs	r5, #0
 800bbb2:	e024      	b.n	800bbfe <__ieee754_rem_pio2+0x6e>
 800bbb4:	4abb      	ldr	r2, [pc, #748]	; (800bea4 <__ieee754_rem_pio2+0x314>)
 800bbb6:	4592      	cmp	sl, r2
 800bbb8:	dc72      	bgt.n	800bca0 <__ieee754_rem_pio2+0x110>
 800bbba:	9b04      	ldr	r3, [sp, #16]
 800bbbc:	4dba      	ldr	r5, [pc, #744]	; (800bea8 <__ieee754_rem_pio2+0x318>)
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	a3a9      	add	r3, pc, #676	; (adr r3, 800be68 <__ieee754_rem_pio2+0x2d8>)
 800bbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc6:	dd36      	ble.n	800bc36 <__ieee754_rem_pio2+0xa6>
 800bbc8:	f7f4 fad8 	bl	800017c <__aeabi_dsub>
 800bbcc:	45aa      	cmp	sl, r5
 800bbce:	4606      	mov	r6, r0
 800bbd0:	460f      	mov	r7, r1
 800bbd2:	d018      	beq.n	800bc06 <__ieee754_rem_pio2+0x76>
 800bbd4:	a3a6      	add	r3, pc, #664	; (adr r3, 800be70 <__ieee754_rem_pio2+0x2e0>)
 800bbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbda:	f7f4 facf 	bl	800017c <__aeabi_dsub>
 800bbde:	4602      	mov	r2, r0
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	4630      	mov	r0, r6
 800bbe4:	e9c4 2300 	strd	r2, r3, [r4]
 800bbe8:	4639      	mov	r1, r7
 800bbea:	f7f4 fac7 	bl	800017c <__aeabi_dsub>
 800bbee:	a3a0      	add	r3, pc, #640	; (adr r3, 800be70 <__ieee754_rem_pio2+0x2e0>)
 800bbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf4:	f7f4 fac2 	bl	800017c <__aeabi_dsub>
 800bbf8:	2501      	movs	r5, #1
 800bbfa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bbfe:	4628      	mov	r0, r5
 800bc00:	b00d      	add	sp, #52	; 0x34
 800bc02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc06:	a39c      	add	r3, pc, #624	; (adr r3, 800be78 <__ieee754_rem_pio2+0x2e8>)
 800bc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0c:	f7f4 fab6 	bl	800017c <__aeabi_dsub>
 800bc10:	a39b      	add	r3, pc, #620	; (adr r3, 800be80 <__ieee754_rem_pio2+0x2f0>)
 800bc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc16:	4606      	mov	r6, r0
 800bc18:	460f      	mov	r7, r1
 800bc1a:	f7f4 faaf 	bl	800017c <__aeabi_dsub>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	460b      	mov	r3, r1
 800bc22:	4630      	mov	r0, r6
 800bc24:	e9c4 2300 	strd	r2, r3, [r4]
 800bc28:	4639      	mov	r1, r7
 800bc2a:	f7f4 faa7 	bl	800017c <__aeabi_dsub>
 800bc2e:	a394      	add	r3, pc, #592	; (adr r3, 800be80 <__ieee754_rem_pio2+0x2f0>)
 800bc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc34:	e7de      	b.n	800bbf4 <__ieee754_rem_pio2+0x64>
 800bc36:	f7f4 faa3 	bl	8000180 <__adddf3>
 800bc3a:	45aa      	cmp	sl, r5
 800bc3c:	4606      	mov	r6, r0
 800bc3e:	460f      	mov	r7, r1
 800bc40:	d016      	beq.n	800bc70 <__ieee754_rem_pio2+0xe0>
 800bc42:	a38b      	add	r3, pc, #556	; (adr r3, 800be70 <__ieee754_rem_pio2+0x2e0>)
 800bc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc48:	f7f4 fa9a 	bl	8000180 <__adddf3>
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	460b      	mov	r3, r1
 800bc50:	4630      	mov	r0, r6
 800bc52:	e9c4 2300 	strd	r2, r3, [r4]
 800bc56:	4639      	mov	r1, r7
 800bc58:	f7f4 fa90 	bl	800017c <__aeabi_dsub>
 800bc5c:	a384      	add	r3, pc, #528	; (adr r3, 800be70 <__ieee754_rem_pio2+0x2e0>)
 800bc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc62:	f7f4 fa8d 	bl	8000180 <__adddf3>
 800bc66:	f04f 35ff 	mov.w	r5, #4294967295
 800bc6a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bc6e:	e7c6      	b.n	800bbfe <__ieee754_rem_pio2+0x6e>
 800bc70:	a381      	add	r3, pc, #516	; (adr r3, 800be78 <__ieee754_rem_pio2+0x2e8>)
 800bc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc76:	f7f4 fa83 	bl	8000180 <__adddf3>
 800bc7a:	a381      	add	r3, pc, #516	; (adr r3, 800be80 <__ieee754_rem_pio2+0x2f0>)
 800bc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc80:	4606      	mov	r6, r0
 800bc82:	460f      	mov	r7, r1
 800bc84:	f7f4 fa7c 	bl	8000180 <__adddf3>
 800bc88:	4602      	mov	r2, r0
 800bc8a:	460b      	mov	r3, r1
 800bc8c:	4630      	mov	r0, r6
 800bc8e:	e9c4 2300 	strd	r2, r3, [r4]
 800bc92:	4639      	mov	r1, r7
 800bc94:	f7f4 fa72 	bl	800017c <__aeabi_dsub>
 800bc98:	a379      	add	r3, pc, #484	; (adr r3, 800be80 <__ieee754_rem_pio2+0x2f0>)
 800bc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc9e:	e7e0      	b.n	800bc62 <__ieee754_rem_pio2+0xd2>
 800bca0:	4a82      	ldr	r2, [pc, #520]	; (800beac <__ieee754_rem_pio2+0x31c>)
 800bca2:	4592      	cmp	sl, r2
 800bca4:	f300 80d4 	bgt.w	800be50 <__ieee754_rem_pio2+0x2c0>
 800bca8:	f000 faf0 	bl	800c28c <fabs>
 800bcac:	a376      	add	r3, pc, #472	; (adr r3, 800be88 <__ieee754_rem_pio2+0x2f8>)
 800bcae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb2:	4606      	mov	r6, r0
 800bcb4:	460f      	mov	r7, r1
 800bcb6:	f7f4 fc19 	bl	80004ec <__aeabi_dmul>
 800bcba:	2200      	movs	r2, #0
 800bcbc:	4b7c      	ldr	r3, [pc, #496]	; (800beb0 <__ieee754_rem_pio2+0x320>)
 800bcbe:	f7f4 fa5f 	bl	8000180 <__adddf3>
 800bcc2:	f7f4 fec3 	bl	8000a4c <__aeabi_d2iz>
 800bcc6:	4605      	mov	r5, r0
 800bcc8:	f7f4 fba6 	bl	8000418 <__aeabi_i2d>
 800bccc:	4602      	mov	r2, r0
 800bcce:	460b      	mov	r3, r1
 800bcd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bcd4:	a364      	add	r3, pc, #400	; (adr r3, 800be68 <__ieee754_rem_pio2+0x2d8>)
 800bcd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcda:	f7f4 fc07 	bl	80004ec <__aeabi_dmul>
 800bcde:	4602      	mov	r2, r0
 800bce0:	460b      	mov	r3, r1
 800bce2:	4630      	mov	r0, r6
 800bce4:	4639      	mov	r1, r7
 800bce6:	f7f4 fa49 	bl	800017c <__aeabi_dsub>
 800bcea:	a361      	add	r3, pc, #388	; (adr r3, 800be70 <__ieee754_rem_pio2+0x2e0>)
 800bcec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf0:	4680      	mov	r8, r0
 800bcf2:	4689      	mov	r9, r1
 800bcf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcf8:	f7f4 fbf8 	bl	80004ec <__aeabi_dmul>
 800bcfc:	2d1f      	cmp	r5, #31
 800bcfe:	4606      	mov	r6, r0
 800bd00:	460f      	mov	r7, r1
 800bd02:	dc0e      	bgt.n	800bd22 <__ieee754_rem_pio2+0x192>
 800bd04:	4b6b      	ldr	r3, [pc, #428]	; (800beb4 <__ieee754_rem_pio2+0x324>)
 800bd06:	1e6a      	subs	r2, r5, #1
 800bd08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd0c:	4553      	cmp	r3, sl
 800bd0e:	d008      	beq.n	800bd22 <__ieee754_rem_pio2+0x192>
 800bd10:	4632      	mov	r2, r6
 800bd12:	463b      	mov	r3, r7
 800bd14:	4640      	mov	r0, r8
 800bd16:	4649      	mov	r1, r9
 800bd18:	f7f4 fa30 	bl	800017c <__aeabi_dsub>
 800bd1c:	e9c4 0100 	strd	r0, r1, [r4]
 800bd20:	e012      	b.n	800bd48 <__ieee754_rem_pio2+0x1b8>
 800bd22:	463b      	mov	r3, r7
 800bd24:	4632      	mov	r2, r6
 800bd26:	4640      	mov	r0, r8
 800bd28:	4649      	mov	r1, r9
 800bd2a:	f7f4 fa27 	bl	800017c <__aeabi_dsub>
 800bd2e:	ea4f 532a 	mov.w	r3, sl, asr #20
 800bd32:	9305      	str	r3, [sp, #20]
 800bd34:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bd38:	ebc3 531a 	rsb	r3, r3, sl, lsr #20
 800bd3c:	2b10      	cmp	r3, #16
 800bd3e:	dc1f      	bgt.n	800bd80 <__ieee754_rem_pio2+0x1f0>
 800bd40:	4602      	mov	r2, r0
 800bd42:	460b      	mov	r3, r1
 800bd44:	e9c4 2300 	strd	r2, r3, [r4]
 800bd48:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800bd4c:	4640      	mov	r0, r8
 800bd4e:	4653      	mov	r3, sl
 800bd50:	4649      	mov	r1, r9
 800bd52:	f7f4 fa13 	bl	800017c <__aeabi_dsub>
 800bd56:	4632      	mov	r2, r6
 800bd58:	463b      	mov	r3, r7
 800bd5a:	f7f4 fa0f 	bl	800017c <__aeabi_dsub>
 800bd5e:	460b      	mov	r3, r1
 800bd60:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bd64:	9904      	ldr	r1, [sp, #16]
 800bd66:	4602      	mov	r2, r0
 800bd68:	2900      	cmp	r1, #0
 800bd6a:	f6bf af48 	bge.w	800bbfe <__ieee754_rem_pio2+0x6e>
 800bd6e:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800bd72:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800bd76:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bd7a:	60e3      	str	r3, [r4, #12]
 800bd7c:	426d      	negs	r5, r5
 800bd7e:	e73e      	b.n	800bbfe <__ieee754_rem_pio2+0x6e>
 800bd80:	a33d      	add	r3, pc, #244	; (adr r3, 800be78 <__ieee754_rem_pio2+0x2e8>)
 800bd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd8a:	f7f4 fbaf 	bl	80004ec <__aeabi_dmul>
 800bd8e:	4606      	mov	r6, r0
 800bd90:	460f      	mov	r7, r1
 800bd92:	4602      	mov	r2, r0
 800bd94:	460b      	mov	r3, r1
 800bd96:	4640      	mov	r0, r8
 800bd98:	4649      	mov	r1, r9
 800bd9a:	f7f4 f9ef 	bl	800017c <__aeabi_dsub>
 800bd9e:	4602      	mov	r2, r0
 800bda0:	460b      	mov	r3, r1
 800bda2:	4682      	mov	sl, r0
 800bda4:	468b      	mov	fp, r1
 800bda6:	4640      	mov	r0, r8
 800bda8:	4649      	mov	r1, r9
 800bdaa:	f7f4 f9e7 	bl	800017c <__aeabi_dsub>
 800bdae:	4632      	mov	r2, r6
 800bdb0:	463b      	mov	r3, r7
 800bdb2:	f7f4 f9e3 	bl	800017c <__aeabi_dsub>
 800bdb6:	a332      	add	r3, pc, #200	; (adr r3, 800be80 <__ieee754_rem_pio2+0x2f0>)
 800bdb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdbc:	4606      	mov	r6, r0
 800bdbe:	460f      	mov	r7, r1
 800bdc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdc4:	f7f4 fb92 	bl	80004ec <__aeabi_dmul>
 800bdc8:	4632      	mov	r2, r6
 800bdca:	463b      	mov	r3, r7
 800bdcc:	f7f4 f9d6 	bl	800017c <__aeabi_dsub>
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	4606      	mov	r6, r0
 800bdd6:	460f      	mov	r7, r1
 800bdd8:	4650      	mov	r0, sl
 800bdda:	4659      	mov	r1, fp
 800bddc:	f7f4 f9ce 	bl	800017c <__aeabi_dsub>
 800bde0:	9a05      	ldr	r2, [sp, #20]
 800bde2:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bde6:	1ad3      	subs	r3, r2, r3
 800bde8:	2b31      	cmp	r3, #49	; 0x31
 800bdea:	dc06      	bgt.n	800bdfa <__ieee754_rem_pio2+0x26a>
 800bdec:	4602      	mov	r2, r0
 800bdee:	460b      	mov	r3, r1
 800bdf0:	46d0      	mov	r8, sl
 800bdf2:	46d9      	mov	r9, fp
 800bdf4:	e9c4 2300 	strd	r2, r3, [r4]
 800bdf8:	e7a6      	b.n	800bd48 <__ieee754_rem_pio2+0x1b8>
 800bdfa:	a325      	add	r3, pc, #148	; (adr r3, 800be90 <__ieee754_rem_pio2+0x300>)
 800bdfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be04:	f7f4 fb72 	bl	80004ec <__aeabi_dmul>
 800be08:	4606      	mov	r6, r0
 800be0a:	460f      	mov	r7, r1
 800be0c:	4602      	mov	r2, r0
 800be0e:	460b      	mov	r3, r1
 800be10:	4650      	mov	r0, sl
 800be12:	4659      	mov	r1, fp
 800be14:	f7f4 f9b2 	bl	800017c <__aeabi_dsub>
 800be18:	4602      	mov	r2, r0
 800be1a:	460b      	mov	r3, r1
 800be1c:	4680      	mov	r8, r0
 800be1e:	4689      	mov	r9, r1
 800be20:	4650      	mov	r0, sl
 800be22:	4659      	mov	r1, fp
 800be24:	f7f4 f9aa 	bl	800017c <__aeabi_dsub>
 800be28:	4632      	mov	r2, r6
 800be2a:	463b      	mov	r3, r7
 800be2c:	f7f4 f9a6 	bl	800017c <__aeabi_dsub>
 800be30:	a319      	add	r3, pc, #100	; (adr r3, 800be98 <__ieee754_rem_pio2+0x308>)
 800be32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be36:	4606      	mov	r6, r0
 800be38:	460f      	mov	r7, r1
 800be3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be3e:	f7f4 fb55 	bl	80004ec <__aeabi_dmul>
 800be42:	4632      	mov	r2, r6
 800be44:	463b      	mov	r3, r7
 800be46:	f7f4 f999 	bl	800017c <__aeabi_dsub>
 800be4a:	4606      	mov	r6, r0
 800be4c:	460f      	mov	r7, r1
 800be4e:	e75f      	b.n	800bd10 <__ieee754_rem_pio2+0x180>
 800be50:	4a19      	ldr	r2, [pc, #100]	; (800beb8 <__ieee754_rem_pio2+0x328>)
 800be52:	4592      	cmp	sl, r2
 800be54:	dd32      	ble.n	800bebc <__ieee754_rem_pio2+0x32c>
 800be56:	4602      	mov	r2, r0
 800be58:	460b      	mov	r3, r1
 800be5a:	f7f4 f98f 	bl	800017c <__aeabi_dsub>
 800be5e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800be62:	e9c4 0100 	strd	r0, r1, [r4]
 800be66:	e6a3      	b.n	800bbb0 <__ieee754_rem_pio2+0x20>
 800be68:	54400000 	.word	0x54400000
 800be6c:	3ff921fb 	.word	0x3ff921fb
 800be70:	1a626331 	.word	0x1a626331
 800be74:	3dd0b461 	.word	0x3dd0b461
 800be78:	1a600000 	.word	0x1a600000
 800be7c:	3dd0b461 	.word	0x3dd0b461
 800be80:	2e037073 	.word	0x2e037073
 800be84:	3ba3198a 	.word	0x3ba3198a
 800be88:	6dc9c883 	.word	0x6dc9c883
 800be8c:	3fe45f30 	.word	0x3fe45f30
 800be90:	2e000000 	.word	0x2e000000
 800be94:	3ba3198a 	.word	0x3ba3198a
 800be98:	252049c1 	.word	0x252049c1
 800be9c:	397b839a 	.word	0x397b839a
 800bea0:	3fe921fb 	.word	0x3fe921fb
 800bea4:	4002d97b 	.word	0x4002d97b
 800bea8:	3ff921fb 	.word	0x3ff921fb
 800beac:	413921fb 	.word	0x413921fb
 800beb0:	3fe00000 	.word	0x3fe00000
 800beb4:	0800d7b0 	.word	0x0800d7b0
 800beb8:	7fefffff 	.word	0x7fefffff
 800bebc:	ea4f 552a 	mov.w	r5, sl, asr #20
 800bec0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800bec4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800bec8:	460f      	mov	r7, r1
 800beca:	4606      	mov	r6, r0
 800becc:	f7f4 fdbe 	bl	8000a4c <__aeabi_d2iz>
 800bed0:	f7f4 faa2 	bl	8000418 <__aeabi_i2d>
 800bed4:	4602      	mov	r2, r0
 800bed6:	460b      	mov	r3, r1
 800bed8:	4630      	mov	r0, r6
 800beda:	4639      	mov	r1, r7
 800bedc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bee0:	f7f4 f94c 	bl	800017c <__aeabi_dsub>
 800bee4:	2200      	movs	r2, #0
 800bee6:	4b22      	ldr	r3, [pc, #136]	; (800bf70 <__ieee754_rem_pio2+0x3e0>)
 800bee8:	f7f4 fb00 	bl	80004ec <__aeabi_dmul>
 800beec:	460f      	mov	r7, r1
 800beee:	4606      	mov	r6, r0
 800bef0:	f7f4 fdac 	bl	8000a4c <__aeabi_d2iz>
 800bef4:	f7f4 fa90 	bl	8000418 <__aeabi_i2d>
 800bef8:	4602      	mov	r2, r0
 800befa:	460b      	mov	r3, r1
 800befc:	4630      	mov	r0, r6
 800befe:	4639      	mov	r1, r7
 800bf00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bf04:	f7f4 f93a 	bl	800017c <__aeabi_dsub>
 800bf08:	2200      	movs	r2, #0
 800bf0a:	4b19      	ldr	r3, [pc, #100]	; (800bf70 <__ieee754_rem_pio2+0x3e0>)
 800bf0c:	f7f4 faee 	bl	80004ec <__aeabi_dmul>
 800bf10:	f04f 0803 	mov.w	r8, #3
 800bf14:	2600      	movs	r6, #0
 800bf16:	2700      	movs	r7, #0
 800bf18:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bf1c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800bf20:	4632      	mov	r2, r6
 800bf22:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800bf26:	463b      	mov	r3, r7
 800bf28:	46c2      	mov	sl, r8
 800bf2a:	f108 38ff 	add.w	r8, r8, #4294967295
 800bf2e:	f7f4 fd45 	bl	80009bc <__aeabi_dcmpeq>
 800bf32:	2800      	cmp	r0, #0
 800bf34:	d1f4      	bne.n	800bf20 <__ieee754_rem_pio2+0x390>
 800bf36:	4b0f      	ldr	r3, [pc, #60]	; (800bf74 <__ieee754_rem_pio2+0x3e4>)
 800bf38:	462a      	mov	r2, r5
 800bf3a:	9301      	str	r3, [sp, #4]
 800bf3c:	2302      	movs	r3, #2
 800bf3e:	4621      	mov	r1, r4
 800bf40:	9300      	str	r3, [sp, #0]
 800bf42:	a806      	add	r0, sp, #24
 800bf44:	4653      	mov	r3, sl
 800bf46:	f000 f9a5 	bl	800c294 <__kernel_rem_pio2>
 800bf4a:	9b04      	ldr	r3, [sp, #16]
 800bf4c:	4605      	mov	r5, r0
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	f6bf ae55 	bge.w	800bbfe <__ieee754_rem_pio2+0x6e>
 800bf54:	e9d4 2100 	ldrd	r2, r1, [r4]
 800bf58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf5c:	e9c4 2300 	strd	r2, r3, [r4]
 800bf60:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800bf64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf68:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800bf6c:	e706      	b.n	800bd7c <__ieee754_rem_pio2+0x1ec>
 800bf6e:	bf00      	nop
 800bf70:	41700000 	.word	0x41700000
 800bf74:	0800d830 	.word	0x0800d830

0800bf78 <atan>:
 800bf78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf7c:	4bb6      	ldr	r3, [pc, #728]	; (800c258 <atan+0x2e0>)
 800bf7e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bf82:	429e      	cmp	r6, r3
 800bf84:	4604      	mov	r4, r0
 800bf86:	460d      	mov	r5, r1
 800bf88:	468b      	mov	fp, r1
 800bf8a:	dd17      	ble.n	800bfbc <atan+0x44>
 800bf8c:	4bb3      	ldr	r3, [pc, #716]	; (800c25c <atan+0x2e4>)
 800bf8e:	429e      	cmp	r6, r3
 800bf90:	dc01      	bgt.n	800bf96 <atan+0x1e>
 800bf92:	d109      	bne.n	800bfa8 <atan+0x30>
 800bf94:	b140      	cbz	r0, 800bfa8 <atan+0x30>
 800bf96:	4622      	mov	r2, r4
 800bf98:	462b      	mov	r3, r5
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	4629      	mov	r1, r5
 800bf9e:	f7f4 f8ef 	bl	8000180 <__adddf3>
 800bfa2:	4604      	mov	r4, r0
 800bfa4:	460d      	mov	r5, r1
 800bfa6:	e005      	b.n	800bfb4 <atan+0x3c>
 800bfa8:	f1bb 0f00 	cmp.w	fp, #0
 800bfac:	4cac      	ldr	r4, [pc, #688]	; (800c260 <atan+0x2e8>)
 800bfae:	f300 8121 	bgt.w	800c1f4 <atan+0x27c>
 800bfb2:	4dac      	ldr	r5, [pc, #688]	; (800c264 <atan+0x2ec>)
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	4629      	mov	r1, r5
 800bfb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfbc:	4baa      	ldr	r3, [pc, #680]	; (800c268 <atan+0x2f0>)
 800bfbe:	429e      	cmp	r6, r3
 800bfc0:	dc11      	bgt.n	800bfe6 <atan+0x6e>
 800bfc2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bfc6:	429e      	cmp	r6, r3
 800bfc8:	dc0a      	bgt.n	800bfe0 <atan+0x68>
 800bfca:	a38b      	add	r3, pc, #556	; (adr r3, 800c1f8 <atan+0x280>)
 800bfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd0:	f7f4 f8d6 	bl	8000180 <__adddf3>
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	4ba5      	ldr	r3, [pc, #660]	; (800c26c <atan+0x2f4>)
 800bfd8:	f7f4 fd18 	bl	8000a0c <__aeabi_dcmpgt>
 800bfdc:	2800      	cmp	r0, #0
 800bfde:	d1e9      	bne.n	800bfb4 <atan+0x3c>
 800bfe0:	f04f 3aff 	mov.w	sl, #4294967295
 800bfe4:	e027      	b.n	800c036 <atan+0xbe>
 800bfe6:	f000 f951 	bl	800c28c <fabs>
 800bfea:	4ba1      	ldr	r3, [pc, #644]	; (800c270 <atan+0x2f8>)
 800bfec:	4604      	mov	r4, r0
 800bfee:	429e      	cmp	r6, r3
 800bff0:	460d      	mov	r5, r1
 800bff2:	f300 80b8 	bgt.w	800c166 <atan+0x1ee>
 800bff6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bffa:	429e      	cmp	r6, r3
 800bffc:	f300 809c 	bgt.w	800c138 <atan+0x1c0>
 800c000:	4602      	mov	r2, r0
 800c002:	460b      	mov	r3, r1
 800c004:	f7f4 f8bc 	bl	8000180 <__adddf3>
 800c008:	2200      	movs	r2, #0
 800c00a:	4b98      	ldr	r3, [pc, #608]	; (800c26c <atan+0x2f4>)
 800c00c:	f7f4 f8b6 	bl	800017c <__aeabi_dsub>
 800c010:	2200      	movs	r2, #0
 800c012:	4606      	mov	r6, r0
 800c014:	460f      	mov	r7, r1
 800c016:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c01a:	4620      	mov	r0, r4
 800c01c:	4629      	mov	r1, r5
 800c01e:	f7f4 f8af 	bl	8000180 <__adddf3>
 800c022:	4602      	mov	r2, r0
 800c024:	460b      	mov	r3, r1
 800c026:	4630      	mov	r0, r6
 800c028:	4639      	mov	r1, r7
 800c02a:	f7f4 fb89 	bl	8000740 <__aeabi_ddiv>
 800c02e:	f04f 0a00 	mov.w	sl, #0
 800c032:	4604      	mov	r4, r0
 800c034:	460d      	mov	r5, r1
 800c036:	4622      	mov	r2, r4
 800c038:	462b      	mov	r3, r5
 800c03a:	4620      	mov	r0, r4
 800c03c:	4629      	mov	r1, r5
 800c03e:	f7f4 fa55 	bl	80004ec <__aeabi_dmul>
 800c042:	4602      	mov	r2, r0
 800c044:	460b      	mov	r3, r1
 800c046:	4680      	mov	r8, r0
 800c048:	4689      	mov	r9, r1
 800c04a:	f7f4 fa4f 	bl	80004ec <__aeabi_dmul>
 800c04e:	a36c      	add	r3, pc, #432	; (adr r3, 800c200 <atan+0x288>)
 800c050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c054:	4606      	mov	r6, r0
 800c056:	460f      	mov	r7, r1
 800c058:	f7f4 fa48 	bl	80004ec <__aeabi_dmul>
 800c05c:	a36a      	add	r3, pc, #424	; (adr r3, 800c208 <atan+0x290>)
 800c05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c062:	f7f4 f88d 	bl	8000180 <__adddf3>
 800c066:	4632      	mov	r2, r6
 800c068:	463b      	mov	r3, r7
 800c06a:	f7f4 fa3f 	bl	80004ec <__aeabi_dmul>
 800c06e:	a368      	add	r3, pc, #416	; (adr r3, 800c210 <atan+0x298>)
 800c070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c074:	f7f4 f884 	bl	8000180 <__adddf3>
 800c078:	4632      	mov	r2, r6
 800c07a:	463b      	mov	r3, r7
 800c07c:	f7f4 fa36 	bl	80004ec <__aeabi_dmul>
 800c080:	a365      	add	r3, pc, #404	; (adr r3, 800c218 <atan+0x2a0>)
 800c082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c086:	f7f4 f87b 	bl	8000180 <__adddf3>
 800c08a:	4632      	mov	r2, r6
 800c08c:	463b      	mov	r3, r7
 800c08e:	f7f4 fa2d 	bl	80004ec <__aeabi_dmul>
 800c092:	a363      	add	r3, pc, #396	; (adr r3, 800c220 <atan+0x2a8>)
 800c094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c098:	f7f4 f872 	bl	8000180 <__adddf3>
 800c09c:	4632      	mov	r2, r6
 800c09e:	463b      	mov	r3, r7
 800c0a0:	f7f4 fa24 	bl	80004ec <__aeabi_dmul>
 800c0a4:	a360      	add	r3, pc, #384	; (adr r3, 800c228 <atan+0x2b0>)
 800c0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0aa:	f7f4 f869 	bl	8000180 <__adddf3>
 800c0ae:	4642      	mov	r2, r8
 800c0b0:	464b      	mov	r3, r9
 800c0b2:	f7f4 fa1b 	bl	80004ec <__aeabi_dmul>
 800c0b6:	a35e      	add	r3, pc, #376	; (adr r3, 800c230 <atan+0x2b8>)
 800c0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0bc:	4680      	mov	r8, r0
 800c0be:	4689      	mov	r9, r1
 800c0c0:	4630      	mov	r0, r6
 800c0c2:	4639      	mov	r1, r7
 800c0c4:	f7f4 fa12 	bl	80004ec <__aeabi_dmul>
 800c0c8:	a35b      	add	r3, pc, #364	; (adr r3, 800c238 <atan+0x2c0>)
 800c0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ce:	f7f4 f855 	bl	800017c <__aeabi_dsub>
 800c0d2:	4632      	mov	r2, r6
 800c0d4:	463b      	mov	r3, r7
 800c0d6:	f7f4 fa09 	bl	80004ec <__aeabi_dmul>
 800c0da:	a359      	add	r3, pc, #356	; (adr r3, 800c240 <atan+0x2c8>)
 800c0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e0:	f7f4 f84c 	bl	800017c <__aeabi_dsub>
 800c0e4:	4632      	mov	r2, r6
 800c0e6:	463b      	mov	r3, r7
 800c0e8:	f7f4 fa00 	bl	80004ec <__aeabi_dmul>
 800c0ec:	a356      	add	r3, pc, #344	; (adr r3, 800c248 <atan+0x2d0>)
 800c0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f2:	f7f4 f843 	bl	800017c <__aeabi_dsub>
 800c0f6:	4632      	mov	r2, r6
 800c0f8:	463b      	mov	r3, r7
 800c0fa:	f7f4 f9f7 	bl	80004ec <__aeabi_dmul>
 800c0fe:	a354      	add	r3, pc, #336	; (adr r3, 800c250 <atan+0x2d8>)
 800c100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c104:	f7f4 f83a 	bl	800017c <__aeabi_dsub>
 800c108:	4632      	mov	r2, r6
 800c10a:	463b      	mov	r3, r7
 800c10c:	f7f4 f9ee 	bl	80004ec <__aeabi_dmul>
 800c110:	4602      	mov	r2, r0
 800c112:	460b      	mov	r3, r1
 800c114:	4640      	mov	r0, r8
 800c116:	4649      	mov	r1, r9
 800c118:	f7f4 f832 	bl	8000180 <__adddf3>
 800c11c:	4622      	mov	r2, r4
 800c11e:	462b      	mov	r3, r5
 800c120:	f7f4 f9e4 	bl	80004ec <__aeabi_dmul>
 800c124:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c128:	4602      	mov	r2, r0
 800c12a:	460b      	mov	r3, r1
 800c12c:	d144      	bne.n	800c1b8 <atan+0x240>
 800c12e:	4620      	mov	r0, r4
 800c130:	4629      	mov	r1, r5
 800c132:	f7f4 f823 	bl	800017c <__aeabi_dsub>
 800c136:	e734      	b.n	800bfa2 <atan+0x2a>
 800c138:	2200      	movs	r2, #0
 800c13a:	4b4c      	ldr	r3, [pc, #304]	; (800c26c <atan+0x2f4>)
 800c13c:	f7f4 f81e 	bl	800017c <__aeabi_dsub>
 800c140:	2200      	movs	r2, #0
 800c142:	4606      	mov	r6, r0
 800c144:	460f      	mov	r7, r1
 800c146:	4620      	mov	r0, r4
 800c148:	4629      	mov	r1, r5
 800c14a:	4b48      	ldr	r3, [pc, #288]	; (800c26c <atan+0x2f4>)
 800c14c:	f7f4 f818 	bl	8000180 <__adddf3>
 800c150:	4602      	mov	r2, r0
 800c152:	460b      	mov	r3, r1
 800c154:	4630      	mov	r0, r6
 800c156:	4639      	mov	r1, r7
 800c158:	f7f4 faf2 	bl	8000740 <__aeabi_ddiv>
 800c15c:	f04f 0a01 	mov.w	sl, #1
 800c160:	4604      	mov	r4, r0
 800c162:	460d      	mov	r5, r1
 800c164:	e767      	b.n	800c036 <atan+0xbe>
 800c166:	4b43      	ldr	r3, [pc, #268]	; (800c274 <atan+0x2fc>)
 800c168:	429e      	cmp	r6, r3
 800c16a:	da1a      	bge.n	800c1a2 <atan+0x22a>
 800c16c:	2200      	movs	r2, #0
 800c16e:	4b42      	ldr	r3, [pc, #264]	; (800c278 <atan+0x300>)
 800c170:	f7f4 f804 	bl	800017c <__aeabi_dsub>
 800c174:	2200      	movs	r2, #0
 800c176:	4606      	mov	r6, r0
 800c178:	460f      	mov	r7, r1
 800c17a:	4620      	mov	r0, r4
 800c17c:	4629      	mov	r1, r5
 800c17e:	4b3e      	ldr	r3, [pc, #248]	; (800c278 <atan+0x300>)
 800c180:	f7f4 f9b4 	bl	80004ec <__aeabi_dmul>
 800c184:	2200      	movs	r2, #0
 800c186:	4b39      	ldr	r3, [pc, #228]	; (800c26c <atan+0x2f4>)
 800c188:	f7f3 fffa 	bl	8000180 <__adddf3>
 800c18c:	4602      	mov	r2, r0
 800c18e:	460b      	mov	r3, r1
 800c190:	4630      	mov	r0, r6
 800c192:	4639      	mov	r1, r7
 800c194:	f7f4 fad4 	bl	8000740 <__aeabi_ddiv>
 800c198:	f04f 0a02 	mov.w	sl, #2
 800c19c:	4604      	mov	r4, r0
 800c19e:	460d      	mov	r5, r1
 800c1a0:	e749      	b.n	800c036 <atan+0xbe>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	460b      	mov	r3, r1
 800c1a6:	2000      	movs	r0, #0
 800c1a8:	4934      	ldr	r1, [pc, #208]	; (800c27c <atan+0x304>)
 800c1aa:	f7f4 fac9 	bl	8000740 <__aeabi_ddiv>
 800c1ae:	f04f 0a03 	mov.w	sl, #3
 800c1b2:	4604      	mov	r4, r0
 800c1b4:	460d      	mov	r5, r1
 800c1b6:	e73e      	b.n	800c036 <atan+0xbe>
 800c1b8:	4b31      	ldr	r3, [pc, #196]	; (800c280 <atan+0x308>)
 800c1ba:	4e32      	ldr	r6, [pc, #200]	; (800c284 <atan+0x30c>)
 800c1bc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c4:	f7f3 ffda 	bl	800017c <__aeabi_dsub>
 800c1c8:	4622      	mov	r2, r4
 800c1ca:	462b      	mov	r3, r5
 800c1cc:	f7f3 ffd6 	bl	800017c <__aeabi_dsub>
 800c1d0:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c1d4:	4602      	mov	r2, r0
 800c1d6:	460b      	mov	r3, r1
 800c1d8:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c1dc:	f7f3 ffce 	bl	800017c <__aeabi_dsub>
 800c1e0:	f1bb 0f00 	cmp.w	fp, #0
 800c1e4:	4604      	mov	r4, r0
 800c1e6:	460d      	mov	r5, r1
 800c1e8:	f6bf aee4 	bge.w	800bfb4 <atan+0x3c>
 800c1ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c1f0:	461d      	mov	r5, r3
 800c1f2:	e6df      	b.n	800bfb4 <atan+0x3c>
 800c1f4:	4d24      	ldr	r5, [pc, #144]	; (800c288 <atan+0x310>)
 800c1f6:	e6dd      	b.n	800bfb4 <atan+0x3c>
 800c1f8:	8800759c 	.word	0x8800759c
 800c1fc:	7e37e43c 	.word	0x7e37e43c
 800c200:	e322da11 	.word	0xe322da11
 800c204:	3f90ad3a 	.word	0x3f90ad3a
 800c208:	24760deb 	.word	0x24760deb
 800c20c:	3fa97b4b 	.word	0x3fa97b4b
 800c210:	a0d03d51 	.word	0xa0d03d51
 800c214:	3fb10d66 	.word	0x3fb10d66
 800c218:	c54c206e 	.word	0xc54c206e
 800c21c:	3fb745cd 	.word	0x3fb745cd
 800c220:	920083ff 	.word	0x920083ff
 800c224:	3fc24924 	.word	0x3fc24924
 800c228:	5555550d 	.word	0x5555550d
 800c22c:	3fd55555 	.word	0x3fd55555
 800c230:	2c6a6c2f 	.word	0x2c6a6c2f
 800c234:	bfa2b444 	.word	0xbfa2b444
 800c238:	52defd9a 	.word	0x52defd9a
 800c23c:	3fadde2d 	.word	0x3fadde2d
 800c240:	af749a6d 	.word	0xaf749a6d
 800c244:	3fb3b0f2 	.word	0x3fb3b0f2
 800c248:	fe231671 	.word	0xfe231671
 800c24c:	3fbc71c6 	.word	0x3fbc71c6
 800c250:	9998ebc4 	.word	0x9998ebc4
 800c254:	3fc99999 	.word	0x3fc99999
 800c258:	440fffff 	.word	0x440fffff
 800c25c:	7ff00000 	.word	0x7ff00000
 800c260:	54442d18 	.word	0x54442d18
 800c264:	bff921fb 	.word	0xbff921fb
 800c268:	3fdbffff 	.word	0x3fdbffff
 800c26c:	3ff00000 	.word	0x3ff00000
 800c270:	3ff2ffff 	.word	0x3ff2ffff
 800c274:	40038000 	.word	0x40038000
 800c278:	3ff80000 	.word	0x3ff80000
 800c27c:	bff00000 	.word	0xbff00000
 800c280:	0800d958 	.word	0x0800d958
 800c284:	0800d938 	.word	0x0800d938
 800c288:	3ff921fb 	.word	0x3ff921fb

0800c28c <fabs>:
 800c28c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c290:	4619      	mov	r1, r3
 800c292:	4770      	bx	lr

0800c294 <__kernel_rem_pio2>:
 800c294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c298:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c29c:	9308      	str	r3, [sp, #32]
 800c29e:	9106      	str	r1, [sp, #24]
 800c2a0:	4bb6      	ldr	r3, [pc, #728]	; (800c57c <__kernel_rem_pio2+0x2e8>)
 800c2a2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800c2a4:	f112 0f14 	cmn.w	r2, #20
 800c2a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c2ac:	bfa8      	it	ge
 800c2ae:	1ed4      	subge	r4, r2, #3
 800c2b0:	9302      	str	r3, [sp, #8]
 800c2b2:	9b08      	ldr	r3, [sp, #32]
 800c2b4:	bfb8      	it	lt
 800c2b6:	2400      	movlt	r4, #0
 800c2b8:	f103 33ff 	add.w	r3, r3, #4294967295
 800c2bc:	9307      	str	r3, [sp, #28]
 800c2be:	bfa4      	itt	ge
 800c2c0:	2318      	movge	r3, #24
 800c2c2:	fb94 f4f3 	sdivge	r4, r4, r3
 800c2c6:	f06f 0317 	mvn.w	r3, #23
 800c2ca:	fb04 3303 	mla	r3, r4, r3, r3
 800c2ce:	eb03 0b02 	add.w	fp, r3, r2
 800c2d2:	9a07      	ldr	r2, [sp, #28]
 800c2d4:	9b02      	ldr	r3, [sp, #8]
 800c2d6:	1aa7      	subs	r7, r4, r2
 800c2d8:	eb03 0802 	add.w	r8, r3, r2
 800c2dc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c2de:	2500      	movs	r5, #0
 800c2e0:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	9009      	str	r0, [sp, #36]	; 0x24
 800c2ea:	ae20      	add	r6, sp, #128	; 0x80
 800c2ec:	4545      	cmp	r5, r8
 800c2ee:	dd14      	ble.n	800c31a <__kernel_rem_pio2+0x86>
 800c2f0:	f04f 0800 	mov.w	r8, #0
 800c2f4:	9a08      	ldr	r2, [sp, #32]
 800c2f6:	ab20      	add	r3, sp, #128	; 0x80
 800c2f8:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800c2fc:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800c300:	9b02      	ldr	r3, [sp, #8]
 800c302:	4598      	cmp	r8, r3
 800c304:	dc35      	bgt.n	800c372 <__kernel_rem_pio2+0xde>
 800c306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c308:	2200      	movs	r2, #0
 800c30a:	f1a3 0908 	sub.w	r9, r3, #8
 800c30e:	2300      	movs	r3, #0
 800c310:	462f      	mov	r7, r5
 800c312:	2600      	movs	r6, #0
 800c314:	e9cd 2300 	strd	r2, r3, [sp]
 800c318:	e01f      	b.n	800c35a <__kernel_rem_pio2+0xc6>
 800c31a:	42ef      	cmn	r7, r5
 800c31c:	d40b      	bmi.n	800c336 <__kernel_rem_pio2+0xa2>
 800c31e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c322:	e9cd 2300 	strd	r2, r3, [sp]
 800c326:	f7f4 f877 	bl	8000418 <__aeabi_i2d>
 800c32a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c32e:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c332:	3501      	adds	r5, #1
 800c334:	e7da      	b.n	800c2ec <__kernel_rem_pio2+0x58>
 800c336:	4610      	mov	r0, r2
 800c338:	4619      	mov	r1, r3
 800c33a:	e7f8      	b.n	800c32e <__kernel_rem_pio2+0x9a>
 800c33c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c340:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800c344:	f7f4 f8d2 	bl	80004ec <__aeabi_dmul>
 800c348:	4602      	mov	r2, r0
 800c34a:	460b      	mov	r3, r1
 800c34c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c350:	f7f3 ff16 	bl	8000180 <__adddf3>
 800c354:	e9cd 0100 	strd	r0, r1, [sp]
 800c358:	3601      	adds	r6, #1
 800c35a:	9b07      	ldr	r3, [sp, #28]
 800c35c:	3f08      	subs	r7, #8
 800c35e:	429e      	cmp	r6, r3
 800c360:	ddec      	ble.n	800c33c <__kernel_rem_pio2+0xa8>
 800c362:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c366:	f108 0801 	add.w	r8, r8, #1
 800c36a:	e8ea 2302 	strd	r2, r3, [sl], #8
 800c36e:	3508      	adds	r5, #8
 800c370:	e7c6      	b.n	800c300 <__kernel_rem_pio2+0x6c>
 800c372:	9b02      	ldr	r3, [sp, #8]
 800c374:	aa0c      	add	r2, sp, #48	; 0x30
 800c376:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c37a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c37c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c37e:	9e02      	ldr	r6, [sp, #8]
 800c380:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c384:	930a      	str	r3, [sp, #40]	; 0x28
 800c386:	ab98      	add	r3, sp, #608	; 0x260
 800c388:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c38c:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800c390:	ab70      	add	r3, sp, #448	; 0x1c0
 800c392:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800c396:	46d0      	mov	r8, sl
 800c398:	46b1      	mov	r9, r6
 800c39a:	af0c      	add	r7, sp, #48	; 0x30
 800c39c:	9700      	str	r7, [sp, #0]
 800c39e:	f1b9 0f00 	cmp.w	r9, #0
 800c3a2:	f1a8 0808 	sub.w	r8, r8, #8
 800c3a6:	dc70      	bgt.n	800c48a <__kernel_rem_pio2+0x1f6>
 800c3a8:	465a      	mov	r2, fp
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	4629      	mov	r1, r5
 800c3ae:	f000 fab3 	bl	800c918 <scalbn>
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c3b8:	4604      	mov	r4, r0
 800c3ba:	460d      	mov	r5, r1
 800c3bc:	f7f4 f896 	bl	80004ec <__aeabi_dmul>
 800c3c0:	f000 fb26 	bl	800ca10 <floor>
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	4b6e      	ldr	r3, [pc, #440]	; (800c580 <__kernel_rem_pio2+0x2ec>)
 800c3c8:	f7f4 f890 	bl	80004ec <__aeabi_dmul>
 800c3cc:	4602      	mov	r2, r0
 800c3ce:	460b      	mov	r3, r1
 800c3d0:	4620      	mov	r0, r4
 800c3d2:	4629      	mov	r1, r5
 800c3d4:	f7f3 fed2 	bl	800017c <__aeabi_dsub>
 800c3d8:	460d      	mov	r5, r1
 800c3da:	4604      	mov	r4, r0
 800c3dc:	f7f4 fb36 	bl	8000a4c <__aeabi_d2iz>
 800c3e0:	9004      	str	r0, [sp, #16]
 800c3e2:	f7f4 f819 	bl	8000418 <__aeabi_i2d>
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	460b      	mov	r3, r1
 800c3ea:	4620      	mov	r0, r4
 800c3ec:	4629      	mov	r1, r5
 800c3ee:	f7f3 fec5 	bl	800017c <__aeabi_dsub>
 800c3f2:	f1bb 0f00 	cmp.w	fp, #0
 800c3f6:	4680      	mov	r8, r0
 800c3f8:	4689      	mov	r9, r1
 800c3fa:	dd6f      	ble.n	800c4dc <__kernel_rem_pio2+0x248>
 800c3fc:	1e71      	subs	r1, r6, #1
 800c3fe:	ab0c      	add	r3, sp, #48	; 0x30
 800c400:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c404:	9c04      	ldr	r4, [sp, #16]
 800c406:	f1cb 0018 	rsb	r0, fp, #24
 800c40a:	fa43 f200 	asr.w	r2, r3, r0
 800c40e:	4414      	add	r4, r2
 800c410:	4082      	lsls	r2, r0
 800c412:	1a9b      	subs	r3, r3, r2
 800c414:	aa0c      	add	r2, sp, #48	; 0x30
 800c416:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c41a:	f1cb 0217 	rsb	r2, fp, #23
 800c41e:	9404      	str	r4, [sp, #16]
 800c420:	4113      	asrs	r3, r2
 800c422:	9300      	str	r3, [sp, #0]
 800c424:	9b00      	ldr	r3, [sp, #0]
 800c426:	2b00      	cmp	r3, #0
 800c428:	dd66      	ble.n	800c4f8 <__kernel_rem_pio2+0x264>
 800c42a:	2200      	movs	r2, #0
 800c42c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c430:	4614      	mov	r4, r2
 800c432:	9b04      	ldr	r3, [sp, #16]
 800c434:	3301      	adds	r3, #1
 800c436:	9304      	str	r3, [sp, #16]
 800c438:	4296      	cmp	r6, r2
 800c43a:	f300 80ad 	bgt.w	800c598 <__kernel_rem_pio2+0x304>
 800c43e:	f1bb 0f00 	cmp.w	fp, #0
 800c442:	dd07      	ble.n	800c454 <__kernel_rem_pio2+0x1c0>
 800c444:	f1bb 0f01 	cmp.w	fp, #1
 800c448:	f000 80b5 	beq.w	800c5b6 <__kernel_rem_pio2+0x322>
 800c44c:	f1bb 0f02 	cmp.w	fp, #2
 800c450:	f000 80bb 	beq.w	800c5ca <__kernel_rem_pio2+0x336>
 800c454:	9b00      	ldr	r3, [sp, #0]
 800c456:	2b02      	cmp	r3, #2
 800c458:	d14e      	bne.n	800c4f8 <__kernel_rem_pio2+0x264>
 800c45a:	4642      	mov	r2, r8
 800c45c:	464b      	mov	r3, r9
 800c45e:	2000      	movs	r0, #0
 800c460:	4948      	ldr	r1, [pc, #288]	; (800c584 <__kernel_rem_pio2+0x2f0>)
 800c462:	f7f3 fe8b 	bl	800017c <__aeabi_dsub>
 800c466:	4680      	mov	r8, r0
 800c468:	4689      	mov	r9, r1
 800c46a:	2c00      	cmp	r4, #0
 800c46c:	d044      	beq.n	800c4f8 <__kernel_rem_pio2+0x264>
 800c46e:	465a      	mov	r2, fp
 800c470:	2000      	movs	r0, #0
 800c472:	4944      	ldr	r1, [pc, #272]	; (800c584 <__kernel_rem_pio2+0x2f0>)
 800c474:	f000 fa50 	bl	800c918 <scalbn>
 800c478:	4602      	mov	r2, r0
 800c47a:	460b      	mov	r3, r1
 800c47c:	4640      	mov	r0, r8
 800c47e:	4649      	mov	r1, r9
 800c480:	f7f3 fe7c 	bl	800017c <__aeabi_dsub>
 800c484:	4680      	mov	r8, r0
 800c486:	4689      	mov	r9, r1
 800c488:	e036      	b.n	800c4f8 <__kernel_rem_pio2+0x264>
 800c48a:	2200      	movs	r2, #0
 800c48c:	4b3e      	ldr	r3, [pc, #248]	; (800c588 <__kernel_rem_pio2+0x2f4>)
 800c48e:	4620      	mov	r0, r4
 800c490:	4629      	mov	r1, r5
 800c492:	f7f4 f82b 	bl	80004ec <__aeabi_dmul>
 800c496:	f7f4 fad9 	bl	8000a4c <__aeabi_d2iz>
 800c49a:	f7f3 ffbd 	bl	8000418 <__aeabi_i2d>
 800c49e:	4602      	mov	r2, r0
 800c4a0:	460b      	mov	r3, r1
 800c4a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	4b38      	ldr	r3, [pc, #224]	; (800c58c <__kernel_rem_pio2+0x2f8>)
 800c4aa:	f7f4 f81f 	bl	80004ec <__aeabi_dmul>
 800c4ae:	4602      	mov	r2, r0
 800c4b0:	460b      	mov	r3, r1
 800c4b2:	4620      	mov	r0, r4
 800c4b4:	4629      	mov	r1, r5
 800c4b6:	f7f3 fe61 	bl	800017c <__aeabi_dsub>
 800c4ba:	f7f4 fac7 	bl	8000a4c <__aeabi_d2iz>
 800c4be:	9b00      	ldr	r3, [sp, #0]
 800c4c0:	f109 39ff 	add.w	r9, r9, #4294967295
 800c4c4:	f843 0b04 	str.w	r0, [r3], #4
 800c4c8:	9300      	str	r3, [sp, #0]
 800c4ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c4ce:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c4d2:	f7f3 fe55 	bl	8000180 <__adddf3>
 800c4d6:	4604      	mov	r4, r0
 800c4d8:	460d      	mov	r5, r1
 800c4da:	e760      	b.n	800c39e <__kernel_rem_pio2+0x10a>
 800c4dc:	d105      	bne.n	800c4ea <__kernel_rem_pio2+0x256>
 800c4de:	1e73      	subs	r3, r6, #1
 800c4e0:	aa0c      	add	r2, sp, #48	; 0x30
 800c4e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4e6:	15db      	asrs	r3, r3, #23
 800c4e8:	e79b      	b.n	800c422 <__kernel_rem_pio2+0x18e>
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	4b28      	ldr	r3, [pc, #160]	; (800c590 <__kernel_rem_pio2+0x2fc>)
 800c4ee:	f7f4 fa83 	bl	80009f8 <__aeabi_dcmpge>
 800c4f2:	2800      	cmp	r0, #0
 800c4f4:	d13e      	bne.n	800c574 <__kernel_rem_pio2+0x2e0>
 800c4f6:	9000      	str	r0, [sp, #0]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	4640      	mov	r0, r8
 800c4fe:	4649      	mov	r1, r9
 800c500:	f7f4 fa5c 	bl	80009bc <__aeabi_dcmpeq>
 800c504:	2800      	cmp	r0, #0
 800c506:	f000 80b2 	beq.w	800c66e <__kernel_rem_pio2+0x3da>
 800c50a:	1e74      	subs	r4, r6, #1
 800c50c:	4623      	mov	r3, r4
 800c50e:	2200      	movs	r2, #0
 800c510:	9902      	ldr	r1, [sp, #8]
 800c512:	428b      	cmp	r3, r1
 800c514:	da60      	bge.n	800c5d8 <__kernel_rem_pio2+0x344>
 800c516:	2a00      	cmp	r2, #0
 800c518:	d075      	beq.n	800c606 <__kernel_rem_pio2+0x372>
 800c51a:	ab0c      	add	r3, sp, #48	; 0x30
 800c51c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c520:	f1ab 0b18 	sub.w	fp, fp, #24
 800c524:	2b00      	cmp	r3, #0
 800c526:	f000 80a0 	beq.w	800c66a <__kernel_rem_pio2+0x3d6>
 800c52a:	465a      	mov	r2, fp
 800c52c:	2000      	movs	r0, #0
 800c52e:	4915      	ldr	r1, [pc, #84]	; (800c584 <__kernel_rem_pio2+0x2f0>)
 800c530:	f000 f9f2 	bl	800c918 <scalbn>
 800c534:	46a2      	mov	sl, r4
 800c536:	4606      	mov	r6, r0
 800c538:	460f      	mov	r7, r1
 800c53a:	f04f 0800 	mov.w	r8, #0
 800c53e:	ab70      	add	r3, sp, #448	; 0x1c0
 800c540:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800c588 <__kernel_rem_pio2+0x2f4>
 800c544:	00e5      	lsls	r5, r4, #3
 800c546:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800c54a:	f1ba 0f00 	cmp.w	sl, #0
 800c54e:	f280 80c4 	bge.w	800c6da <__kernel_rem_pio2+0x446>
 800c552:	4626      	mov	r6, r4
 800c554:	2e00      	cmp	r6, #0
 800c556:	f2c0 80f6 	blt.w	800c746 <__kernel_rem_pio2+0x4b2>
 800c55a:	4b0e      	ldr	r3, [pc, #56]	; (800c594 <__kernel_rem_pio2+0x300>)
 800c55c:	f04f 0a00 	mov.w	sl, #0
 800c560:	9307      	str	r3, [sp, #28]
 800c562:	ab70      	add	r3, sp, #448	; 0x1c0
 800c564:	f04f 0b00 	mov.w	fp, #0
 800c568:	f04f 0800 	mov.w	r8, #0
 800c56c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800c570:	1ba7      	subs	r7, r4, r6
 800c572:	e0dc      	b.n	800c72e <__kernel_rem_pio2+0x49a>
 800c574:	2302      	movs	r3, #2
 800c576:	9300      	str	r3, [sp, #0]
 800c578:	e757      	b.n	800c42a <__kernel_rem_pio2+0x196>
 800c57a:	bf00      	nop
 800c57c:	0800d9b8 	.word	0x0800d9b8
 800c580:	40200000 	.word	0x40200000
 800c584:	3ff00000 	.word	0x3ff00000
 800c588:	3e700000 	.word	0x3e700000
 800c58c:	41700000 	.word	0x41700000
 800c590:	3fe00000 	.word	0x3fe00000
 800c594:	0800d978 	.word	0x0800d978
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	b944      	cbnz	r4, 800c5ae <__kernel_rem_pio2+0x31a>
 800c59c:	b11b      	cbz	r3, 800c5a6 <__kernel_rem_pio2+0x312>
 800c59e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c5a2:	603b      	str	r3, [r7, #0]
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	461c      	mov	r4, r3
 800c5a8:	3201      	adds	r2, #1
 800c5aa:	3704      	adds	r7, #4
 800c5ac:	e744      	b.n	800c438 <__kernel_rem_pio2+0x1a4>
 800c5ae:	1acb      	subs	r3, r1, r3
 800c5b0:	603b      	str	r3, [r7, #0]
 800c5b2:	4623      	mov	r3, r4
 800c5b4:	e7f7      	b.n	800c5a6 <__kernel_rem_pio2+0x312>
 800c5b6:	1e72      	subs	r2, r6, #1
 800c5b8:	ab0c      	add	r3, sp, #48	; 0x30
 800c5ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5be:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c5c2:	a90c      	add	r1, sp, #48	; 0x30
 800c5c4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c5c8:	e744      	b.n	800c454 <__kernel_rem_pio2+0x1c0>
 800c5ca:	1e72      	subs	r2, r6, #1
 800c5cc:	ab0c      	add	r3, sp, #48	; 0x30
 800c5ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5d2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c5d6:	e7f4      	b.n	800c5c2 <__kernel_rem_pio2+0x32e>
 800c5d8:	a90c      	add	r1, sp, #48	; 0x30
 800c5da:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c5de:	3b01      	subs	r3, #1
 800c5e0:	430a      	orrs	r2, r1
 800c5e2:	e795      	b.n	800c510 <__kernel_rem_pio2+0x27c>
 800c5e4:	3301      	adds	r3, #1
 800c5e6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c5ea:	2900      	cmp	r1, #0
 800c5ec:	d0fa      	beq.n	800c5e4 <__kernel_rem_pio2+0x350>
 800c5ee:	9a08      	ldr	r2, [sp, #32]
 800c5f0:	a920      	add	r1, sp, #128	; 0x80
 800c5f2:	18b2      	adds	r2, r6, r2
 800c5f4:	f106 0801 	add.w	r8, r6, #1
 800c5f8:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800c5fc:	18f4      	adds	r4, r6, r3
 800c5fe:	4544      	cmp	r4, r8
 800c600:	da04      	bge.n	800c60c <__kernel_rem_pio2+0x378>
 800c602:	4626      	mov	r6, r4
 800c604:	e6bf      	b.n	800c386 <__kernel_rem_pio2+0xf2>
 800c606:	2301      	movs	r3, #1
 800c608:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c60a:	e7ec      	b.n	800c5e6 <__kernel_rem_pio2+0x352>
 800c60c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c60e:	f04f 0900 	mov.w	r9, #0
 800c612:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c616:	f7f3 feff 	bl	8000418 <__aeabi_i2d>
 800c61a:	2600      	movs	r6, #0
 800c61c:	2700      	movs	r7, #0
 800c61e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c620:	e9c5 0100 	strd	r0, r1, [r5]
 800c624:	3b08      	subs	r3, #8
 800c626:	9300      	str	r3, [sp, #0]
 800c628:	9504      	str	r5, [sp, #16]
 800c62a:	9b07      	ldr	r3, [sp, #28]
 800c62c:	4599      	cmp	r9, r3
 800c62e:	dd05      	ble.n	800c63c <__kernel_rem_pio2+0x3a8>
 800c630:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800c634:	f108 0801 	add.w	r8, r8, #1
 800c638:	3508      	adds	r5, #8
 800c63a:	e7e0      	b.n	800c5fe <__kernel_rem_pio2+0x36a>
 800c63c:	f8dd c010 	ldr.w	ip, [sp, #16]
 800c640:	9900      	ldr	r1, [sp, #0]
 800c642:	f109 0901 	add.w	r9, r9, #1
 800c646:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800c64a:	9100      	str	r1, [sp, #0]
 800c64c:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800c650:	f8cd c010 	str.w	ip, [sp, #16]
 800c654:	f7f3 ff4a 	bl	80004ec <__aeabi_dmul>
 800c658:	4602      	mov	r2, r0
 800c65a:	460b      	mov	r3, r1
 800c65c:	4630      	mov	r0, r6
 800c65e:	4639      	mov	r1, r7
 800c660:	f7f3 fd8e 	bl	8000180 <__adddf3>
 800c664:	4606      	mov	r6, r0
 800c666:	460f      	mov	r7, r1
 800c668:	e7df      	b.n	800c62a <__kernel_rem_pio2+0x396>
 800c66a:	3c01      	subs	r4, #1
 800c66c:	e755      	b.n	800c51a <__kernel_rem_pio2+0x286>
 800c66e:	f1cb 0200 	rsb	r2, fp, #0
 800c672:	4640      	mov	r0, r8
 800c674:	4649      	mov	r1, r9
 800c676:	f000 f94f 	bl	800c918 <scalbn>
 800c67a:	2200      	movs	r2, #0
 800c67c:	4ba3      	ldr	r3, [pc, #652]	; (800c90c <__kernel_rem_pio2+0x678>)
 800c67e:	4604      	mov	r4, r0
 800c680:	460d      	mov	r5, r1
 800c682:	f7f4 f9b9 	bl	80009f8 <__aeabi_dcmpge>
 800c686:	b1f8      	cbz	r0, 800c6c8 <__kernel_rem_pio2+0x434>
 800c688:	2200      	movs	r2, #0
 800c68a:	4ba1      	ldr	r3, [pc, #644]	; (800c910 <__kernel_rem_pio2+0x67c>)
 800c68c:	4620      	mov	r0, r4
 800c68e:	4629      	mov	r1, r5
 800c690:	f7f3 ff2c 	bl	80004ec <__aeabi_dmul>
 800c694:	f7f4 f9da 	bl	8000a4c <__aeabi_d2iz>
 800c698:	4607      	mov	r7, r0
 800c69a:	f7f3 febd 	bl	8000418 <__aeabi_i2d>
 800c69e:	2200      	movs	r2, #0
 800c6a0:	4b9a      	ldr	r3, [pc, #616]	; (800c90c <__kernel_rem_pio2+0x678>)
 800c6a2:	f7f3 ff23 	bl	80004ec <__aeabi_dmul>
 800c6a6:	460b      	mov	r3, r1
 800c6a8:	4602      	mov	r2, r0
 800c6aa:	4629      	mov	r1, r5
 800c6ac:	4620      	mov	r0, r4
 800c6ae:	f7f3 fd65 	bl	800017c <__aeabi_dsub>
 800c6b2:	f7f4 f9cb 	bl	8000a4c <__aeabi_d2iz>
 800c6b6:	1c74      	adds	r4, r6, #1
 800c6b8:	ab0c      	add	r3, sp, #48	; 0x30
 800c6ba:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800c6be:	f10b 0b18 	add.w	fp, fp, #24
 800c6c2:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800c6c6:	e730      	b.n	800c52a <__kernel_rem_pio2+0x296>
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	4629      	mov	r1, r5
 800c6cc:	f7f4 f9be 	bl	8000a4c <__aeabi_d2iz>
 800c6d0:	ab0c      	add	r3, sp, #48	; 0x30
 800c6d2:	4634      	mov	r4, r6
 800c6d4:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800c6d8:	e727      	b.n	800c52a <__kernel_rem_pio2+0x296>
 800c6da:	ab0c      	add	r3, sp, #48	; 0x30
 800c6dc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800c6e0:	f7f3 fe9a 	bl	8000418 <__aeabi_i2d>
 800c6e4:	4632      	mov	r2, r6
 800c6e6:	463b      	mov	r3, r7
 800c6e8:	f7f3 ff00 	bl	80004ec <__aeabi_dmul>
 800c6ec:	4642      	mov	r2, r8
 800c6ee:	e86b 0102 	strd	r0, r1, [fp], #-8
 800c6f2:	464b      	mov	r3, r9
 800c6f4:	4630      	mov	r0, r6
 800c6f6:	4639      	mov	r1, r7
 800c6f8:	f7f3 fef8 	bl	80004ec <__aeabi_dmul>
 800c6fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c700:	4606      	mov	r6, r0
 800c702:	460f      	mov	r7, r1
 800c704:	e721      	b.n	800c54a <__kernel_rem_pio2+0x2b6>
 800c706:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800c70a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c70e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800c712:	f8cd c01c 	str.w	ip, [sp, #28]
 800c716:	f7f3 fee9 	bl	80004ec <__aeabi_dmul>
 800c71a:	4602      	mov	r2, r0
 800c71c:	460b      	mov	r3, r1
 800c71e:	4650      	mov	r0, sl
 800c720:	4659      	mov	r1, fp
 800c722:	f7f3 fd2d 	bl	8000180 <__adddf3>
 800c726:	4682      	mov	sl, r0
 800c728:	468b      	mov	fp, r1
 800c72a:	f108 0801 	add.w	r8, r8, #1
 800c72e:	9b02      	ldr	r3, [sp, #8]
 800c730:	4598      	cmp	r8, r3
 800c732:	dc01      	bgt.n	800c738 <__kernel_rem_pio2+0x4a4>
 800c734:	45b8      	cmp	r8, r7
 800c736:	dde6      	ble.n	800c706 <__kernel_rem_pio2+0x472>
 800c738:	ab48      	add	r3, sp, #288	; 0x120
 800c73a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c73e:	e9c7 ab00 	strd	sl, fp, [r7]
 800c742:	3e01      	subs	r6, #1
 800c744:	e706      	b.n	800c554 <__kernel_rem_pio2+0x2c0>
 800c746:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800c748:	2b02      	cmp	r3, #2
 800c74a:	dc09      	bgt.n	800c760 <__kernel_rem_pio2+0x4cc>
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	dc32      	bgt.n	800c7b6 <__kernel_rem_pio2+0x522>
 800c750:	d058      	beq.n	800c804 <__kernel_rem_pio2+0x570>
 800c752:	9b04      	ldr	r3, [sp, #16]
 800c754:	f003 0007 	and.w	r0, r3, #7
 800c758:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c760:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800c762:	2b03      	cmp	r3, #3
 800c764:	d1f5      	bne.n	800c752 <__kernel_rem_pio2+0x4be>
 800c766:	ab48      	add	r3, sp, #288	; 0x120
 800c768:	441d      	add	r5, r3
 800c76a:	46aa      	mov	sl, r5
 800c76c:	46a3      	mov	fp, r4
 800c76e:	f1bb 0f00 	cmp.w	fp, #0
 800c772:	dc74      	bgt.n	800c85e <__kernel_rem_pio2+0x5ca>
 800c774:	46aa      	mov	sl, r5
 800c776:	46a3      	mov	fp, r4
 800c778:	f1bb 0f01 	cmp.w	fp, #1
 800c77c:	f300 808e 	bgt.w	800c89c <__kernel_rem_pio2+0x608>
 800c780:	2700      	movs	r7, #0
 800c782:	463e      	mov	r6, r7
 800c784:	2c01      	cmp	r4, #1
 800c786:	f300 80a8 	bgt.w	800c8da <__kernel_rem_pio2+0x646>
 800c78a:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800c78e:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800c792:	9b00      	ldr	r3, [sp, #0]
 800c794:	2b00      	cmp	r3, #0
 800c796:	f040 80aa 	bne.w	800c8ee <__kernel_rem_pio2+0x65a>
 800c79a:	4603      	mov	r3, r0
 800c79c:	462a      	mov	r2, r5
 800c79e:	9806      	ldr	r0, [sp, #24]
 800c7a0:	e9c0 2300 	strd	r2, r3, [r0]
 800c7a4:	4622      	mov	r2, r4
 800c7a6:	460b      	mov	r3, r1
 800c7a8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c7ac:	463a      	mov	r2, r7
 800c7ae:	4633      	mov	r3, r6
 800c7b0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c7b4:	e7cd      	b.n	800c752 <__kernel_rem_pio2+0x4be>
 800c7b6:	2000      	movs	r0, #0
 800c7b8:	46a0      	mov	r8, r4
 800c7ba:	4601      	mov	r1, r0
 800c7bc:	ab48      	add	r3, sp, #288	; 0x120
 800c7be:	441d      	add	r5, r3
 800c7c0:	f1b8 0f00 	cmp.w	r8, #0
 800c7c4:	da38      	bge.n	800c838 <__kernel_rem_pio2+0x5a4>
 800c7c6:	9b00      	ldr	r3, [sp, #0]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d03c      	beq.n	800c846 <__kernel_rem_pio2+0x5b2>
 800c7cc:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800c7d0:	4602      	mov	r2, r0
 800c7d2:	462b      	mov	r3, r5
 800c7d4:	9d06      	ldr	r5, [sp, #24]
 800c7d6:	2601      	movs	r6, #1
 800c7d8:	e9c5 2300 	strd	r2, r3, [r5]
 800c7dc:	460b      	mov	r3, r1
 800c7de:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c7e2:	f7f3 fccb 	bl	800017c <__aeabi_dsub>
 800c7e6:	4684      	mov	ip, r0
 800c7e8:	460f      	mov	r7, r1
 800c7ea:	ad48      	add	r5, sp, #288	; 0x120
 800c7ec:	42b4      	cmp	r4, r6
 800c7ee:	da2c      	bge.n	800c84a <__kernel_rem_pio2+0x5b6>
 800c7f0:	9b00      	ldr	r3, [sp, #0]
 800c7f2:	b10b      	cbz	r3, 800c7f8 <__kernel_rem_pio2+0x564>
 800c7f4:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800c7f8:	4662      	mov	r2, ip
 800c7fa:	463b      	mov	r3, r7
 800c7fc:	9906      	ldr	r1, [sp, #24]
 800c7fe:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800c802:	e7a6      	b.n	800c752 <__kernel_rem_pio2+0x4be>
 800c804:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800c806:	ab48      	add	r3, sp, #288	; 0x120
 800c808:	4637      	mov	r7, r6
 800c80a:	441d      	add	r5, r3
 800c80c:	2c00      	cmp	r4, #0
 800c80e:	da09      	bge.n	800c824 <__kernel_rem_pio2+0x590>
 800c810:	9b00      	ldr	r3, [sp, #0]
 800c812:	b10b      	cbz	r3, 800c818 <__kernel_rem_pio2+0x584>
 800c814:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800c818:	4632      	mov	r2, r6
 800c81a:	463b      	mov	r3, r7
 800c81c:	9906      	ldr	r1, [sp, #24]
 800c81e:	e9c1 2300 	strd	r2, r3, [r1]
 800c822:	e796      	b.n	800c752 <__kernel_rem_pio2+0x4be>
 800c824:	4630      	mov	r0, r6
 800c826:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800c82a:	4639      	mov	r1, r7
 800c82c:	f7f3 fca8 	bl	8000180 <__adddf3>
 800c830:	3c01      	subs	r4, #1
 800c832:	4606      	mov	r6, r0
 800c834:	460f      	mov	r7, r1
 800c836:	e7e9      	b.n	800c80c <__kernel_rem_pio2+0x578>
 800c838:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800c83c:	f7f3 fca0 	bl	8000180 <__adddf3>
 800c840:	f108 38ff 	add.w	r8, r8, #4294967295
 800c844:	e7bc      	b.n	800c7c0 <__kernel_rem_pio2+0x52c>
 800c846:	460d      	mov	r5, r1
 800c848:	e7c2      	b.n	800c7d0 <__kernel_rem_pio2+0x53c>
 800c84a:	4660      	mov	r0, ip
 800c84c:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800c850:	4639      	mov	r1, r7
 800c852:	f7f3 fc95 	bl	8000180 <__adddf3>
 800c856:	3601      	adds	r6, #1
 800c858:	4684      	mov	ip, r0
 800c85a:	460f      	mov	r7, r1
 800c85c:	e7c6      	b.n	800c7ec <__kernel_rem_pio2+0x558>
 800c85e:	e9da 6700 	ldrd	r6, r7, [sl]
 800c862:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800c866:	4632      	mov	r2, r6
 800c868:	463b      	mov	r3, r7
 800c86a:	4640      	mov	r0, r8
 800c86c:	4649      	mov	r1, r9
 800c86e:	f7f3 fc87 	bl	8000180 <__adddf3>
 800c872:	4602      	mov	r2, r0
 800c874:	460b      	mov	r3, r1
 800c876:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c87a:	4640      	mov	r0, r8
 800c87c:	4649      	mov	r1, r9
 800c87e:	f7f3 fc7d 	bl	800017c <__aeabi_dsub>
 800c882:	4632      	mov	r2, r6
 800c884:	463b      	mov	r3, r7
 800c886:	f7f3 fc7b 	bl	8000180 <__adddf3>
 800c88a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c88e:	e86a 0102 	strd	r0, r1, [sl], #-8
 800c892:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c896:	e9ca 2300 	strd	r2, r3, [sl]
 800c89a:	e768      	b.n	800c76e <__kernel_rem_pio2+0x4da>
 800c89c:	e9da 8900 	ldrd	r8, r9, [sl]
 800c8a0:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800c8a4:	4642      	mov	r2, r8
 800c8a6:	464b      	mov	r3, r9
 800c8a8:	4630      	mov	r0, r6
 800c8aa:	4639      	mov	r1, r7
 800c8ac:	f7f3 fc68 	bl	8000180 <__adddf3>
 800c8b0:	4602      	mov	r2, r0
 800c8b2:	460b      	mov	r3, r1
 800c8b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8b8:	4630      	mov	r0, r6
 800c8ba:	4639      	mov	r1, r7
 800c8bc:	f7f3 fc5e 	bl	800017c <__aeabi_dsub>
 800c8c0:	4642      	mov	r2, r8
 800c8c2:	464b      	mov	r3, r9
 800c8c4:	f7f3 fc5c 	bl	8000180 <__adddf3>
 800c8c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c8cc:	e86a 0102 	strd	r0, r1, [sl], #-8
 800c8d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c8d4:	e9ca 2300 	strd	r2, r3, [sl]
 800c8d8:	e74e      	b.n	800c778 <__kernel_rem_pio2+0x4e4>
 800c8da:	4638      	mov	r0, r7
 800c8dc:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800c8e0:	4631      	mov	r1, r6
 800c8e2:	f7f3 fc4d 	bl	8000180 <__adddf3>
 800c8e6:	3c01      	subs	r4, #1
 800c8e8:	4607      	mov	r7, r0
 800c8ea:	460e      	mov	r6, r1
 800c8ec:	e74a      	b.n	800c784 <__kernel_rem_pio2+0x4f0>
 800c8ee:	9b06      	ldr	r3, [sp, #24]
 800c8f0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c8f4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c8f8:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800c8fc:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800c900:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800c904:	601d      	str	r5, [r3, #0]
 800c906:	615e      	str	r6, [r3, #20]
 800c908:	e723      	b.n	800c752 <__kernel_rem_pio2+0x4be>
 800c90a:	bf00      	nop
 800c90c:	41700000 	.word	0x41700000
 800c910:	3e700000 	.word	0x3e700000
 800c914:	00000000 	.word	0x00000000

0800c918 <scalbn>:
 800c918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c91a:	4616      	mov	r6, r2
 800c91c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c920:	4604      	mov	r4, r0
 800c922:	460d      	mov	r5, r1
 800c924:	460b      	mov	r3, r1
 800c926:	b992      	cbnz	r2, 800c94e <scalbn+0x36>
 800c928:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c92c:	4303      	orrs	r3, r0
 800c92e:	d03c      	beq.n	800c9aa <scalbn+0x92>
 800c930:	4b31      	ldr	r3, [pc, #196]	; (800c9f8 <scalbn+0xe0>)
 800c932:	2200      	movs	r2, #0
 800c934:	f7f3 fdda 	bl	80004ec <__aeabi_dmul>
 800c938:	4b30      	ldr	r3, [pc, #192]	; (800c9fc <scalbn+0xe4>)
 800c93a:	4604      	mov	r4, r0
 800c93c:	429e      	cmp	r6, r3
 800c93e:	460d      	mov	r5, r1
 800c940:	da0f      	bge.n	800c962 <scalbn+0x4a>
 800c942:	a329      	add	r3, pc, #164	; (adr r3, 800c9e8 <scalbn+0xd0>)
 800c944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c948:	f7f3 fdd0 	bl	80004ec <__aeabi_dmul>
 800c94c:	e006      	b.n	800c95c <scalbn+0x44>
 800c94e:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800c952:	42ba      	cmp	r2, r7
 800c954:	d109      	bne.n	800c96a <scalbn+0x52>
 800c956:	4602      	mov	r2, r0
 800c958:	f7f3 fc12 	bl	8000180 <__adddf3>
 800c95c:	4604      	mov	r4, r0
 800c95e:	460d      	mov	r5, r1
 800c960:	e023      	b.n	800c9aa <scalbn+0x92>
 800c962:	460b      	mov	r3, r1
 800c964:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c968:	3a36      	subs	r2, #54	; 0x36
 800c96a:	f24c 3150 	movw	r1, #50000	; 0xc350
 800c96e:	428e      	cmp	r6, r1
 800c970:	dd0e      	ble.n	800c990 <scalbn+0x78>
 800c972:	a31f      	add	r3, pc, #124	; (adr r3, 800c9f0 <scalbn+0xd8>)
 800c974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c978:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800c97c:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800c980:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800c984:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800c988:	481d      	ldr	r0, [pc, #116]	; (800ca00 <scalbn+0xe8>)
 800c98a:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800c98e:	e7db      	b.n	800c948 <scalbn+0x30>
 800c990:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c994:	4432      	add	r2, r6
 800c996:	428a      	cmp	r2, r1
 800c998:	dceb      	bgt.n	800c972 <scalbn+0x5a>
 800c99a:	2a00      	cmp	r2, #0
 800c99c:	dd08      	ble.n	800c9b0 <scalbn+0x98>
 800c99e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c9a2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c9a6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c9aa:	4620      	mov	r0, r4
 800c9ac:	4629      	mov	r1, r5
 800c9ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9b0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c9b4:	da0c      	bge.n	800c9d0 <scalbn+0xb8>
 800c9b6:	a30c      	add	r3, pc, #48	; (adr r3, 800c9e8 <scalbn+0xd0>)
 800c9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9bc:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800c9c0:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800c9c4:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800c9c8:	480e      	ldr	r0, [pc, #56]	; (800ca04 <scalbn+0xec>)
 800c9ca:	f041 011f 	orr.w	r1, r1, #31
 800c9ce:	e7bb      	b.n	800c948 <scalbn+0x30>
 800c9d0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c9d4:	3236      	adds	r2, #54	; 0x36
 800c9d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c9da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c9de:	4620      	mov	r0, r4
 800c9e0:	4629      	mov	r1, r5
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	4b08      	ldr	r3, [pc, #32]	; (800ca08 <scalbn+0xf0>)
 800c9e6:	e7af      	b.n	800c948 <scalbn+0x30>
 800c9e8:	c2f8f359 	.word	0xc2f8f359
 800c9ec:	01a56e1f 	.word	0x01a56e1f
 800c9f0:	8800759c 	.word	0x8800759c
 800c9f4:	7e37e43c 	.word	0x7e37e43c
 800c9f8:	43500000 	.word	0x43500000
 800c9fc:	ffff3cb0 	.word	0xffff3cb0
 800ca00:	8800759c 	.word	0x8800759c
 800ca04:	c2f8f359 	.word	0xc2f8f359
 800ca08:	3c900000 	.word	0x3c900000
 800ca0c:	00000000 	.word	0x00000000

0800ca10 <floor>:
 800ca10:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ca14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca18:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ca1c:	2e13      	cmp	r6, #19
 800ca1e:	460b      	mov	r3, r1
 800ca20:	4607      	mov	r7, r0
 800ca22:	460c      	mov	r4, r1
 800ca24:	4605      	mov	r5, r0
 800ca26:	dc32      	bgt.n	800ca8e <floor+0x7e>
 800ca28:	2e00      	cmp	r6, #0
 800ca2a:	da14      	bge.n	800ca56 <floor+0x46>
 800ca2c:	a334      	add	r3, pc, #208	; (adr r3, 800cb00 <floor+0xf0>)
 800ca2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca32:	f7f3 fba5 	bl	8000180 <__adddf3>
 800ca36:	2200      	movs	r2, #0
 800ca38:	2300      	movs	r3, #0
 800ca3a:	f7f3 ffe7 	bl	8000a0c <__aeabi_dcmpgt>
 800ca3e:	b138      	cbz	r0, 800ca50 <floor+0x40>
 800ca40:	2c00      	cmp	r4, #0
 800ca42:	da56      	bge.n	800caf2 <floor+0xe2>
 800ca44:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800ca48:	4325      	orrs	r5, r4
 800ca4a:	d055      	beq.n	800caf8 <floor+0xe8>
 800ca4c:	2500      	movs	r5, #0
 800ca4e:	4c2e      	ldr	r4, [pc, #184]	; (800cb08 <floor+0xf8>)
 800ca50:	4623      	mov	r3, r4
 800ca52:	462f      	mov	r7, r5
 800ca54:	e025      	b.n	800caa2 <floor+0x92>
 800ca56:	4a2d      	ldr	r2, [pc, #180]	; (800cb0c <floor+0xfc>)
 800ca58:	fa42 f806 	asr.w	r8, r2, r6
 800ca5c:	ea01 0208 	and.w	r2, r1, r8
 800ca60:	4302      	orrs	r2, r0
 800ca62:	d01e      	beq.n	800caa2 <floor+0x92>
 800ca64:	a326      	add	r3, pc, #152	; (adr r3, 800cb00 <floor+0xf0>)
 800ca66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6a:	f7f3 fb89 	bl	8000180 <__adddf3>
 800ca6e:	2200      	movs	r2, #0
 800ca70:	2300      	movs	r3, #0
 800ca72:	f7f3 ffcb 	bl	8000a0c <__aeabi_dcmpgt>
 800ca76:	2800      	cmp	r0, #0
 800ca78:	d0ea      	beq.n	800ca50 <floor+0x40>
 800ca7a:	2c00      	cmp	r4, #0
 800ca7c:	bfbe      	ittt	lt
 800ca7e:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ca82:	4133      	asrlt	r3, r6
 800ca84:	18e4      	addlt	r4, r4, r3
 800ca86:	2500      	movs	r5, #0
 800ca88:	ea24 0408 	bic.w	r4, r4, r8
 800ca8c:	e7e0      	b.n	800ca50 <floor+0x40>
 800ca8e:	2e33      	cmp	r6, #51	; 0x33
 800ca90:	dd0b      	ble.n	800caaa <floor+0x9a>
 800ca92:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ca96:	d104      	bne.n	800caa2 <floor+0x92>
 800ca98:	4602      	mov	r2, r0
 800ca9a:	f7f3 fb71 	bl	8000180 <__adddf3>
 800ca9e:	4607      	mov	r7, r0
 800caa0:	460b      	mov	r3, r1
 800caa2:	4638      	mov	r0, r7
 800caa4:	4619      	mov	r1, r3
 800caa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800caaa:	f04f 38ff 	mov.w	r8, #4294967295
 800caae:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800cab2:	fa28 f802 	lsr.w	r8, r8, r2
 800cab6:	ea10 0f08 	tst.w	r0, r8
 800caba:	d0f2      	beq.n	800caa2 <floor+0x92>
 800cabc:	a310      	add	r3, pc, #64	; (adr r3, 800cb00 <floor+0xf0>)
 800cabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac2:	f7f3 fb5d 	bl	8000180 <__adddf3>
 800cac6:	2200      	movs	r2, #0
 800cac8:	2300      	movs	r3, #0
 800caca:	f7f3 ff9f 	bl	8000a0c <__aeabi_dcmpgt>
 800cace:	2800      	cmp	r0, #0
 800cad0:	d0be      	beq.n	800ca50 <floor+0x40>
 800cad2:	2c00      	cmp	r4, #0
 800cad4:	da0a      	bge.n	800caec <floor+0xdc>
 800cad6:	2e14      	cmp	r6, #20
 800cad8:	d101      	bne.n	800cade <floor+0xce>
 800cada:	3401      	adds	r4, #1
 800cadc:	e006      	b.n	800caec <floor+0xdc>
 800cade:	2301      	movs	r3, #1
 800cae0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cae4:	40b3      	lsls	r3, r6
 800cae6:	441d      	add	r5, r3
 800cae8:	42af      	cmp	r7, r5
 800caea:	d8f6      	bhi.n	800cada <floor+0xca>
 800caec:	ea25 0508 	bic.w	r5, r5, r8
 800caf0:	e7ae      	b.n	800ca50 <floor+0x40>
 800caf2:	2500      	movs	r5, #0
 800caf4:	462c      	mov	r4, r5
 800caf6:	e7ab      	b.n	800ca50 <floor+0x40>
 800caf8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800cafc:	e7a8      	b.n	800ca50 <floor+0x40>
 800cafe:	bf00      	nop
 800cb00:	8800759c 	.word	0x8800759c
 800cb04:	7e37e43c 	.word	0x7e37e43c
 800cb08:	bff00000 	.word	0xbff00000
 800cb0c:	000fffff 	.word	0x000fffff

0800cb10 <_init>:
 800cb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb12:	bf00      	nop
 800cb14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb16:	bc08      	pop	{r3}
 800cb18:	469e      	mov	lr, r3
 800cb1a:	4770      	bx	lr

0800cb1c <_fini>:
 800cb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb1e:	bf00      	nop
 800cb20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb22:	bc08      	pop	{r3}
 800cb24:	469e      	mov	lr, r3
 800cb26:	4770      	bx	lr
